%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.

%left ")"  ;
%nonassoc  "=" ":=";
%nonassoc  "New";
%left ",";
%right ":";
%left "eqv" ;

%left "xor";
%left  "or";
%left  "and";
%nonassoc  "<>" "<" ">" "<=" ">=" "Like" "Is" "IsNot";
%left "<<" ">>";
%left "&" ;
%left "+" "-";
%left "*" "/" "Mod";
%right "not" ;
%right "^";
%right  "~";
%right "[" "(";
%right "!" ;


%prefix VB;
%root Program;
%suffix Node;
%start module Statement ModuleStatement BehaviourDefinition;

<lineContinuation>
   :   ( \x20 | \xA0 | \x9) (_) ( \x20 | \xA0 | \x9)* ( \r | \n | \r\n | \x2028 ) ( \x20 | \xA0 | \x9)*
   ;

<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
	
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : (\#) ([^\#\r\n])* (\#)
   ;

<COLOR_LITERAL>
   : \& H [0-9a-fA-F]+ \&?
   ;


<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \" ([^\"\r\n] | \"\")* \"
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$|&)* 
	;

<SBIDENTIFIER>
	: (\[) (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|\-|/|$|\s)* (\]) 
	;
<DEFTYPE> 
	: ([a-zA-Z]) (\-) ([a-zA-Z]); 
	
<HASH_NUMBER>
	: ( \#) (<DECIMAL_INTEGER>)
	;
	
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;

<whitespace> : ( \x20 | \xA0 | \x9) + ; 

<eol>
   : (<whitespace>?) ( \r | \n | \r\n | \x2028 | \ ) (<whitespace>?)
   ;

<comment>
   :  (<whitespace>?)(\' | :?  REM  \ ) ( [^\n\r])* 
   ;

###################################################### 
########## Basic module
###################################################### 

module: <eol>* (header 'header' <eol>*)? (ModuleStatement 'element')?  (<eol>* ModuleStatement 'element' )*  <eol>* {{Module}};

###################################################### 
########## Literals
###################################################### 
literal 
	: 
	  FileDescriptorLiteral
	| IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;

FileDescriptorLiteral 	: <HASH_NUMBER> 'token' 			{{FileDescriptorLiteral}};
IntegerLiteral 			: <INTEGER_LITERAL> 'token' "&"? 	{{IntegerLiteral}};
ColorLiteral			: <COLOR_LITERAL> 'token' 			{{ColorLiteral}} ; 
DateLiteral				: <DATE_LITERAL> 'token' 			{{DateLiteral}};
FloatLiteral			: <FLOATING_POINT_LITERAL> 'token' 	{{FloatLiteral}};
BooleanLiteral			: <BOOLEAN_LITERAL> 'token' 		{{BooleanLiteral}};
StringLiteral			: <STRING_LITERAL> 'token' 			{{StringLiteral}};
Null					: <NULL_LITERAL> 'token' 			{{Null}};




GuidLiteral: 
		"{"
		<HEX_INTEGER> + 
		"-"
		<HEX_INTEGER> +
		"-" 
		<HEX_INTEGER> + 
		"-"
		<HEX_INTEGER> + 
		"-"
		<HEX_INTEGER> + 
		"}" 
		{{GuidLiteral}};


Identifier : 
	 SimpleIdentifier
	| HashIdentifier
	| SquareBracketIdentifier;

KeywordIdentifier : UsableKeywords 'token'  {{SimpleIdentifier}} | SquareBracketIdentifier;


UsableKeywords  :  
  IdentifierWords  
| "open" 
| "type" 
| "select" 
| "case" 
| "else"   
;

IdentifierWords :  
  <IDENTIFIER>     
| "text" 
| "name" 
| "version" 
| "database" 
| "collection" 
| "bold" 
| "append" 
| "Object"  
| "len" 
| "get" | "set" | "let" 
| "date" 
| "input" 
| "print" 
| "write" 
| "Error"
| "Next"
| "Output"
| "Alias"
| "String" 
| "Type" 
| "To"
| "Line"
;

HashIdentifier 			: <HASH_IDENTIFIER> 'token' {{HashIdentifier}};
SquareBracketIdentifier : <SBIDENTIFIER> 'token' 	{{SquareBracketIdentifier}};
SimpleIdentifier 		: IdentifierWords 'token'  	{{SimpleIdentifier}};


LabelTag : <IDENTIFIER> 'name' ":"  {{LabelTag}};

###################################################### 
########## Module header and configuration
###################################################### 

header: <whitespace>? "version" <whitespace> FloatLiteral  'version'  ("class")?  {{}};
Option
   :  <whitespace>? "option" <whitespace> IntegerLiteral 'value' {{OptionValue}}
   |  <whitespace>? "option" <whitespace> "compare" <whitespace> "database" {{OptionCompareDatabase}}
   |  <whitespace>? "option" <whitespace> "compare" <whitespace> ("binary"| "text" 'compare') {{OptionCompare}}
   |  <whitespace>? "option" <whitespace> "explicit" {{OptionExplicit}}
   |  <whitespace>? "option" <whitespace> "private" <whitespace> "module"{{OptionPrivateModule}}
   | OptionBase
   ;
   
OptionBase : 
	<whitespace>? 
	"option" <whitespace> 
	"base" <whitespace> 
	Expression 'value' {{OptionBase}} 
;

SetUpAssignation :  
	(Identifier  'identifier' | MemberAccess 'identifier') <whitespace> "=" <whitespace> Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : "attribute" <whitespace> SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	"begin"  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* <eol>*"end" {{Configuration}};

Implements : "implements" <whitespace> StateAccessBase 'interface' {{Implements}}; 

DefTypeLabel : 
  "DefBool" | "DefByte" |"DefCur" 
| "DefDate" | "DefDec" | "DefDbl" 
| "DefInt" | "DefLng" | "DefLnglng" 
| "DefLngPtr" | "DefObj" | "DefSng" 
| "DefStr" | "DefVar" 
;

DefType : DefTypeLabel 'deftype' <whitespace> <DEFTYPE> 'pattern' {{DefType}}; 

ModuleStatement :  
  Option  
| Configuration 
| Attribute 
| DeclareExternal 
| VariableDefinition 
| BehaviourDefinition 
| Types 
| Implements 
| DefType
 ;

###################################################### 
########## Body statements
###################################################### 

Statement :  
  StatementAssignment 
| VariableDefinition 
| Attribute 
| OptionBase 
| StatementCalls  
| ControlFlowStatement 
| Types 
| Label 
| Exits 
| Go 
| FileClauses 
| RaiseEvent 
| OtherStatements ;

# A Block is a list of statements. Each entry can be headed with a line number. Lines are splitted by newline 
Block: 
	    <eol>+
		(IntegerLiteral 'lineNumber' <whitespace>)? 
		 Statement 'statement'?
	   (
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral 'lineNumber' <whitespace>)? 
		  Statement 'statement' 
	   )*
	   <eol>*
	   {{Block}};
	   
# Oneline blocks can have one or more "lines" splitted by ":" 

OneLineBlock : 
	<whitespace> Statement 'statement'? 
	(<whitespace>? ":" <whitespace>? Statement 'statement')* 
	{{Block}}
;

BaseType : 
  "boolean" 
| "byte" 
| "currency" 
| "collection" 
| "date" 
| "decimal" 
| "double" 
| "integer" 
| "long" 
| "longlong"
| "longptr" 
| "object" 
| "single" 
| "string" 
| "variant"
{{BaseType}};

SimpleType : 
	Identifier 'typeName'
	{{SimpleType}}
	;


Visibility: 
  "private" 
| "public" 
| "friend" 
| "global" ; 

ComplexType: 
	(SimpleType 'base')?  
	("." UsableKeywords 'member')+ 
	{{ComplexType}}
;

Type: 
  BaseType 
| SimpleType 
| ComplexType 
;



TypedThing : 
			 (<whitespace> "as" <whitespace> Type 'type')?
			 (<whitespace>? "*" <whitespace>? Expression 'fixedSize')?  
			 {{TypedThing}}
;
			 
TypedAndInstantiatedThing :	 
			<whitespace> "as" <whitespace>
			"new" <whitespace> 
			Type 'type'
			{{AsTypeAndNew}}
; 

TypeSize : "(" 
			Expression 'size'? 
			(","<whitespace>? Expression 'size')* 
			")" 
			{{TypeSize}} 
;

AsType : 
  TypedThing 
| TypedAndInstantiatedThing;



###################################################### 
########## assign statements
###################################################### 

StatementAssignment : Assignment | ExplicitAssignement ;

ExplicitLetSet: "let" | "set"; 

Assignment : 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		("=" 'operator' | ":=" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};
		
ExplicitAssignement : 
		ExplicitLetSet 'kind' <whitespace> 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		("=" 'operator' |  ":=" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};

###################################################### 
########## other statements
###################################################### 
 
OtherStatements : 
  Rename 
| Beep 
| DoEvents;

Rename : 
	"name" <whitespace> 
	Expression 'oldName' <whitespace> 
	"as" <whitespace> 
	Expression 'newName' 
	{{Rename}} ;
	
Beep : "beep" ;
DoEvents : "DoEvents" {{DoEvents}} ;

###################################################### 
########## Types
###################################################### 

Types : 
  DefineEnum 
| DefineType 
| Event ;

DefineType : 
      (Visibility 'visibility' <whitespace>)? 
	  "type" <whitespace> 
	  Identifier 'name' 
	  ( <eol>* TypeEntry 'field' )* 
	  <eol>* 
	  "end" <whitespace>  "type" 
	  {{DefineType}} ;
	  
TypeEntry :
	  Identifier 'name'
	  (TypeSize 'size')?
	  AsType 'type' 
	  (<whitespace>?"*"<whitespace>? IntegerLiteral 'size' )? 
	  {{TypeEntry}};
	  
Event  : 
	  (Visibility 'visibility' <whitespace>)?  
	  "event" <whitespace> 
	  Identifier 'selector' <whitespace>?
	  ParameterList 'parameters'
	  {{Event}} ;
	  
DefineEnum :  
	  (Visibility 'visibility' <whitespace>)?  
	  "enum" <whitespace> 
	  Identifier 'name'  
	  ( <eol>* EnumEntry 'field')* 
	  <eol>*  
	  "end" <whitespace> "enum" 
	  {{DefineEnum}};
	  
EnumEntry : 
      Identifier 'name'  
	  ( <whitespace> "=" <whitespace> Expression 'value')? 
	  {{EnumEntry}};

###################################################### 
########## Parameters
###################################################### 

ParameterPassingStrategy :  "byval" | "byref" {{ParameterPassingStrategy}};
ParameterList:"("(Parameter 'parameter' ("," <whitespace> Parameter 'parameter')* )? <whitespace>? ")" {{ParameterList}};
	
Parameter: 
	("optional" <whitespace>)? 
	(ParameterPassingStrategy 'strategy' <whitespace>)? 
	("paramarray" <whitespace>)? 
	Identifier 'name' 
	(TypeSize 'size')?
	(AsType 'type')? 
	(<whitespace> "=" <whitespace> Expression 'default')? 
	{{Parameter}};

###################################################### 
########## External declaration
###################################################### 

DeclareSub: 
			(Visibility 'visibility' <whitespace> )? 
			"declare" <whitespace> 
			"sub" <whitespace> 
			Identifier 'selector' <whitespace> 
			"lib" <whitespace> 
			StringLiteral 'library' <whitespace>?
			("alias" <whitespace> StringLiteral 'alias' <whitespace>?)? 
			ParameterList 'parameters' 
			{{ExternalSub}};
			
DeclareFunction: 
		(Visibility 'visibility' <whitespace> )? 
		"declare" <whitespace> 
		"function" <whitespace> 
		Identifier 'selector' <whitespace> 
		"lib" <whitespace> 
		StringLiteral 'library' <whitespace>? 
		("alias" <whitespace>  StringLiteral 'alias' <whitespace>? )? 
		ParameterList 'parameters'
		AsType 'type'
		{{ExternalFunction}};
		
		
DeclareExternal : DeclareSub|DeclareFunction; 

###################################################### 
########## Function / Sub Definition 
###################################################### 

Modifier: "static" ;

DefineFunction: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	"function"  <whitespace>
	Identifier 'selector'<whitespace>?
	ParameterList 'parameters' <whitespace>?
	(AsType 'type' TypeSize 'size'?  )?
	Block 'block' 
	"end"  <whitespace> "function" 
   {{FunctionDefinition}};

DefineSub: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	"sub"  <whitespace>
	Identifier 'selector'<whitespace>?
	(ParameterList 'parameters')? <whitespace>?
	Block 'block' 
	"end" <whitespace> "sub" 
   {{SubDefinition}};
   

ModulePropertyGet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	"property" <whitespace> "get"  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	(AsType 'type' TypeSize 'size'?)? 
	Block 'block' 
	"end" <whitespace> ("property" | "function") 
    {{ModulePropertyGet}}; 
	
	
ModulePropertySet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	"property" <whitespace> "set"  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	Block 'block'  
	"end" <whitespace> ("property" | "function")
  {{ModulePropertyGet}}; 
  
ModulePropertyLet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	"property" <whitespace> "let"  <whitespace>
	Identifier 'selector' 
	ParameterList 'parameters'
	 Block 'block'  
	 "end" <whitespace> ("property" | "function") 
{{ModulePropertyGet}}; 

BehaviourDefinition:  
  DefineFunction 
| DefineSub 
| ModulePropertyGet 
| ModulePropertySet 
| ModulePropertyLet ;

###################################################### 
########## Variable / And Multiple Variables
###################################################### 

ModuleProperty : 
	Visibility 'visibility' <whitespace>
	Variable 'variable' 
	{{ModuleProperty}};
	
ModuleConstant : 
	(Visibility 'visibility' <whitespace>)? 
	"const" <whitespace> 
	Constant 'constant'
	{{ModuleConstant}};

DefineVariable : 
	"dim" <whitespace> 
	Variable 'variable' 
	{{DimVariable}};


ReDefineVariable : 
	"redim" <whitespace> 
	("preserve" <whitespace>)? 
	Variable 'variable' 
	{{ReDimVariable}};
	
ReDefineExpression : 
	"redim" <whitespace>
	("preserve" <whitespace>)? 
	Expression 'variable' 
	{{ReDimVariable}};
	
StaticVariable : 
	"static"  <whitespace>  
	Variable 'variable'
	{{StaticVariable}};
	
Variable : 
	("WithEvents"  <whitespace> )? 
	Identifier 'name'
	(TypeSize 'size')?
	(AsType 'type') ? 
	{{Variable}};
	
Constant :  
	Identifier 'constant'
	(AsType 'type') ? 
	<whitespace> "="  <whitespace> 
	Expression 'value' 
	{{Constant}} ;

ModuleProperties : 
	Visibility 'visibility'  <whitespace>
	VariableList 'variables' 
	{{ModuleMultipleProperties}};
	
	
ModuleConstants : 
	(Visibility 'visibility'  <whitespace> )? 
	"const"  <whitespace> 
	ConstantList 'constants' 
	{{ModuleMultipleConstants}};
	
DefineVariables : 
	"dim"  <whitespace>
	VariableList 'variables' 
	{{DimMultipleVariables}};
	
ReDefineVariables : 
	"redim"  <whitespace> 
	("preserve"  <whitespace>)?  
	VariableList 'variables' 
	{{ReDimMultipleVariables}};
	
StaticVariables : 
	"static" <whitespace> 
	VariableList 'variables' 
	{{StaticMultipleVariables}};
	
VariableList : Variable 'variable' ( <whitespace>? ","  <whitespace>?  Variable 'variable' )+ {{VariableList}};
ConstantList : Constant 'constant' ( <whitespace>? ","  <whitespace>?  Constant 'constant' )+ {{ConstantList}};

VariableDefinition :
  ModuleProperties 
| ModuleProperty 
| ModuleConstant 
| ModuleConstants 
| ConstantList 
| DefineVariable 
| ReDefineVariable 
| ReDefineExpression 
| DefineVariables 
| ReDefineVariables 
| StaticVariable 
| StaticVariables ;

###################################################### 
########## Value Statements
###################################################### 


Expression :   
  ValueClause  
| StateAccess 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval 
| Operation ; 

ParentheseesExpression : 
	"("  <whitespace>? 
	Expression 'expression'  
	<whitespace>? ")" 
	{{ParentheseesExpression}};
	
Interval : 
	Expression 'from' <whitespace> 
	"to"  <whitespace> 
	Expression 'to'  
	{{Interval}} ; 


##########
### Ops
##########

Operation : 
  UnaryOperation 
| BinaryOperation ;

####################
### Unary Ops 
####################

UnaryOperation:   
  NegatedOperation
| PositiveOperation 
| NotOperation 
; 

NegatedOperation : 
	"-"
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{NegatedOperation}}
;
	
PositiveOperation : 
	"+" <whitespace> 
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{PositiveOperation}} 
;

NotOperation : 
	"not" <whitespace>
	(StateAccessBase 'value' | BooleanLiteral 'value' | ParentheseesExpression 'value' | TypeOf 'value' )
	{{NotOperation}}
;


####################
### Binary Ops 
####################

LeftSide :  
  ValueClause  
| StateAccessBase 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval
| UnaryOperation ;


BinaryOperation : 
  ComparisonOperation  
| ArithmeticOperation 
| BooleanBinaryOperation 
| Equals  
| ConcatenationOperation ;

ComparisonOperator : ">" | "<"  |  "<>" | "<=" | ">=" | "is" | "like" ;

ComparisonOperation : 
		(LeftSide 'left' | ArithmeticOperation 'left') <whitespace>
		ComparisonOperator <whitespace> 
		(LeftSide 'right' | ArithmeticOperation 'right') 
		{{ComparisonOperation}};
		
ArithmeticOperator : "*" | "+" | "-" | "/" | "^" | "\" | "Mod";

ArithmeticOperation : 
		LeftSide 'left' <whitespace>
		ArithmeticOperator <whitespace>
		Expression 'right' {{ArithmeticOperation}};


BooleanOperator : "and" | "or" | "xor" | "eqv";

BooleanBinaryOperation : 
		(ComparisonOperation 'left' | Equals 'left' | LeftSide 'left'  ) <whitespace>
		BooleanOperator   <whitespace>
		Expression 'right' 
		{{ArithmeticOperation}};


ConcatenationOperation : 
		LeftSide 'left' <whitespace>
		"&" <whitespace>
		Expression 'right' 
		{{ConcatenationOperation}}; 

Equals : 
	(Identifier 'left' | MemberAccess 'left' | Expression 'left') <whitespace>
	"=" 'operator' <whitespace>
	Expression 'right' 
	{{Equals}}; 


####################
### Value Clause 
####################

ValueClause: 
  AddressOfClause 
| NewClause ;

AddressOfClause : 
		"AddressOf" <whitespace>
		Identifier 'name'  
		{{AddressOfClause}}; 
		
NewClause : 
		"New" <whitespace>
		Type 'typeName' 
		{{NewClause}};

OpenMode :  
  "Append" 
| "Binary" 
| "Input" 
| "Output" 
| "Random" ;


OpenAccess : 
  "Read" 
| "Write" 
| "Read Write" ;

Lock :  
  "Shared" 
| "Lock Read" 
| "Lock Write" 
| "Lock Read Write";


FileClauses : 
  OpenFileClause 
| PrintFileClause 
| LineInputClause ;

OpenFileClause : 
		"Open" <whitespace>
		Expression 'filepath' <whitespace>
		"For" <whitespace>
		OpenMode 'mode' <whitespace>
		(OpenAccess 'access' <whitespace>)? 
		(Lock 'lock' <whitespace>)? 
		"As" <whitespace>
		Expression 'fileDescriptor' 
		(<whitespace> "len" <whitespace> "=" <whitespace> Expression'length')? 
		{{OpenClause}};
		
		
PrintFileClause : 
		"Print" <whitespace>
		Identifier 'fileNumber' <whitespace>?
		"," <whitespace>? 
		(Expression 'value' <whitespace>?)? 
		(";" <whitespace>? Expression 'value')*  
		{{PrintIntoFileClause}};
		
LineInputClause : 
		"Line" <whitespace>
		"Input" <whitespace>
		(Identifier 'fileNumber' | FileDescriptorLiteral  'fileNumber') <whitespace>?  
		","  <whitespace>?
		(Expression 'value') 
		{{LineInputClause}};


###################################################### 
########## Control flow statements
###################################################### 

ControlFlowStatement : 
  Exits
| Loops 
| If  
| On 
| Resume 
| To 
| With 
| RaiseError 
| Select ; 

####################
#### Loops
####################


Loops : 
  DoLoop 
| WhileWend 
| ForLoop ;

####################
########## Do
####################

DoLoop : 
  InfinityLoop 
| WhileTrue 
| UntilTrue 
| DoWhileTrue 
| DoUntilTrue; 


InfinityLoop : 
	"do"  
		(Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"loop"  
	{{InfinityLoop}} ;

WhileTrue :  
	"do" <whitespace>
	"while" <whitespace>
	Expression 'condition' 
	( Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"loop"  
	{{WhileTrue}}; 
	
	
UntilTrue : 
	"do" <whitespace>
	"until" <whitespace>
	Expression 'condition'
		Block 'body'
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	"loop" 
   {{UntilTrue}}; 

DoWhileTrue :  
	"do" 
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)?  
	"loop" <whitespace> 
	"while" <whitespace> 
	Expression 'condition' 
    {{DoWhileTrue}}; 

DoUntilTrue : 
	"do" 
	 Block 'body' 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"loop" <whitespace> 
	"until" <whitespace>
	Expression 'condition'
    {{DoUntilTrue}}; 


####################
########## WhileWend
####################

WhileWend: 
	"while" <whitespace> 
	Expression 'condition'
	( Block 'body')?   
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"wend" 
	{{WhileWend}}; 

####################
########## For 
####################

ForLoop : 
  ForEach 
| ForNext 
| ForNextOneLine 
| ForStepNext;

ForEach :  
	"for" <whitespace> 
	"each" <whitespace> 
	Identifier 'element' <whitespace> 
	"in" <whitespace> 
	Expression 'group' <whitespace>?
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"next" 
	(<whitespace> Identifier 'element' )? 
    {{ForEach}} ;

ForNext :   
	"for" <whitespace> 
	Identifier 'counter' <whitespace>
	"=" <whitespace> 
	Expression  'initialValue' <whitespace> 
	"to" <whitespace> 
	Expression  'limit'   
	( Block 'body')? 
	 (IntegerLiteral 'endLineNumber' <whitespace>) ? 
	 "next" 
	 (<whitespace> Identifier 'element')? 
    {{ForNext}} ;

ForNextOneLine :   
	"for" <whitespace> 
	Identifier 'counter' <whitespace> 
	"=" <whitespace> 
	Expression  'initialValue' <whitespace> 
	"to" <whitespace> 
	Expression  'limit'
		( OneLineBlock 'body')? 
	"next"
   {{ForNext}} ;

ForStepNext:   
	"for" <whitespace> 
	Identifier 'counter' <whitespace>
	"=" <whitespace>
	Expression  'initialValue' <whitespace> 
	"to" <whitespace> 
	Expression  'limit' <whitespace> 
	"step" <whitespace> 
	Expression 'step'   
		( Block 'body')?  
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"next" 
	(<whitespace> Identifier 'element' )? 
    {{ForStepNext}} ;

####################
########## If
####################

If : 
  IfThenElseOneLine 
| IfThenEmpty
| IfThenElse ; 

IfThenEmpty : 
	"if" <whitespace> 
	Expression 'condition' <whitespace> 
	("then:") <eol> 
{{IfThenElse}};


IfThenElseOneLine : 
	"if" <whitespace> 
	Expression 'condition' <whitespace> 
	("then"|"then:") 
	OneLineBlock 'ifTrue' 
	(<whitespace> ("else"|"else:") OneLineBlock 'ifFalse' )?
{{IfThenElse}};

IfThenElse : 
	"if" <whitespace> 
	Expression  'condition' 
	<whitespace> 
	"then"
	(Block 'ifTrue')  
	(ElseIf 'elseif')* 
	(Else 'else')?
    (IntegerLiteral 'endLineNumber'<whitespace>)? 
	"end" <whitespace> "if"
	{{IfThenElse}};
	
Else: 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"else" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}};
	
ElseIf: 
    (IntegerLiteral 'endLineNumber' <whitespace>)? 
	"elseif" <whitespace> 
	Expression  'condition' <whitespace>
	"then" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}}; 



####################
###### Error 
####################

RaiseError : 
  "Error" <whitespace> Expression 'errorCode'  
  {{RaiseError}} ;
	
##########################
###### Label / LabelSub
##########################

	To : Label ;
	Label : LabelTag 'label' {{Label}}; 	
	
	
####################
###### Select Case 
####################
CaseCondition : 
  ExpressionCalls
| NegatedOperation 
| Interval
| Identifier 
| MemberAccess 
| literal;

Case : 
	(IntegerLiteral 'lineNumber' <whitespace>)? 
	"case" <whitespace>
	(CaseCondition 'expression' | "else")
	("," <whitespace> (CaseCondition 'expression'))*
	":"?
	(Block 'body' | (OneLineBlock 'body' <eol>))?
	{{Case}};
	
Select : 
	"select" <whitespace> 
	"case" <whitespace>
	Expression 'expression' 
	<eol>+ (Case 'case' <eol>+?)* 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	"end" <whitespace> "select" 
	{{Select}};

####################
###### Resume
####################

Resume: 
  ResumeLabel 
| ResumeNext 
| ResumeEmpty ;
	
ResumeLabel : 
	"resume" <whitespace> 
	DestinationList 'destination' 
	{{ResumeLabel}} ; 
	
ResumeNext : 
	"resume" <whitespace> 
	"next" 
	{{ResumeNext}} ; 
	
ResumeEmpty : "resume" {{ResumeEmpty}}; 

####################
###### GoTo / GoSub 
####################

Go : 
  GoToStatement 
| GoSub ;


Destination : 
  Identifier 
| IntegerLiteral 
| NegatedOperation ;

 
DestinationList :  
	Destination 'label' 
	(<whitespace>?"," <whitespace>?Destination 'label')*
	{{DestinationList}};

GoToStatement : 
	"goto" <whitespace> 
	DestinationList 'destination'   
	{{GoToStatement}};
	
GoSub :  
	"gosub" <whitespace> 
	DestinationList 'destination'  
	{{GoSub}} ;

####################
########## On 
####################

On : 
  OnErrorGoTo 
| OnErrorResumeNext 
| OnExpressionGo; 

OnErrorGoTo : 
	"on" <whitespace>
	"error" <whitespace>
	GoToStatement 'to' 
	{{OnErrorGoTo}};
	
OnErrorResumeNext : 
	"on"  <whitespace>
	"error" <whitespace>
	"resume"  <whitespace>
	"next"
	{{OnErrorResumeNext}} ;
	
OnExpressionGo : 
	"on" <whitespace>
	Expression 'integerExpression' <whitespace>
	Go 'to' 
	{{OnExpressionGo}} ;

####################
########## Error
####################

Error: 
	"error" <whitespace>
	Expression 'errorCode' 
	{{Error}} ;

####################
########## With
####################

With : 
	"with" <whitespace>
	Expression 'with' 
	Block 'block' 
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	"end" <whitespace> "with" 
	{{With}} ;

####################
########## Exits
####################

Exits : 
  ExitFunction 
| ExitSub 
| ExitProperty 
| ExitDo 
| ExitFor 
| Return; 

ExitFunction : 
	"exit" <whitespace>
	"function" 
	{{Exits}} ;
	
ExitSub : 
	"exit" <whitespace>
	"sub" 
	{{Exits}} ; 
ExitDo : 
	"exit" <whitespace>
	"do" 
	{{Exits}} ; 
	
ExitFor : 
	"exit" <whitespace>
	"for" 
	{{Exits}} ;
	
ExitProperty : 
	"exit" <whitespace> 
	"property" 
	{{Exits}} ;
	
Return : 
	"return" 
	{{Return}} ;

########################################
### Calls and accesses 
########################################

StateAccessBase :
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess; 

############################################################
### Normal accesses.  object.value dic!key
############################################################

DictionaryAccess : 
	(StateAccessBase 'receiver')?
	"!" 
	KeywordIdentifier 'member' 
	{{DictionaryAccess}} ;

MemberAccess : 
	(StateAccessBase 'receiver')?
	"."  
	KeywordIdentifier 'member' 
	{{MemberAccess}};


StateAccess : 
	DictionaryAccess 
  | MemberAccess;
  
  
############################################################
### ImplicitParenthesesLessCall.   selector arg1, arg2, , , arg
############################################################

ImplicitCallExpression : 
  MemberAccess
| Identifier
;


ImplicitParenthesesLessCall :  
		ImplicitCallExpression 'selector'  <whitespace> 
		ArgumentList 'arguments' 
		{{ImplicitParenthesesLessCall}} 
		
|       ImplicitCallExpression 'selector'
		{{ImplicitParenthesesLessCall}} 
 
;

############################################################
### ImplicitCalls.   selector(arg1, arg2, , , arg). 
############################################################
ProcedureCallOrArrayExpression : 
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess
;

ProcedureCallOrArrayAccess :  
		ProcedureCallOrArrayExpression 'selector'
		"("<whitespace>?
		  ArgumentList 'arguments'
		 <whitespace>?")"
		{{ProcedureCallOrArrayAccess}} 

;

############################################################
### Argument and argument list. 
### Expression, expression, assignment 
############################################################

Argument : 
        (ParameterPassingStrategy 'strategy' <whitespace>)?  
		("paramarray" <whitespace>)?  
		(Expression 'value' | Assignment 'value') 
		{{Argument}};
		
		
ArgumentList : 
		(<whitespace>? Argument 'argument' ? ("," | ";" )  <whitespace>?)* 
		Argument 'argument'? 
		(<whitespace>?("," | ";" ) <whitespace>? Argument 'argument' ? )*
		{{ArgumentList}};


ExplicitCallSelectorTypes :
  Identifier 
| MemberAccess  
| ProcedureCallOrArrayAccess;


############################################################
### ExplicitCall.  Call selector(arg1, arg2, , , arg). 
############################################################

ExplicitCall : 
		"Call" <whitespace>
		 ExplicitCallSelectorTypes 'selector'  
		{{ExplicitCall}} ;
		
RaiseEvent : 
		"RaiseEvent" <whitespace>
		(Identifier 'selector' | ProcedureCallOrArrayAccess 'selector' )
		{{RaiseEvent}};

TypeOf : 
		"TypeOf" <whitespace>
		Argument 'argument' <whitespace>
		("Is" | "IsNot") <whitespace>
		Argument 'type'  
		{{TypeOf}};

StatementCalls :  
  ImplicitParenthesesLessCall 
| ExplicitCall ;

ExpressionCalls : 
  ProcedureCallOrArrayAccess 
| TypeOf ;
