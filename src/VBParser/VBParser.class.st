Class {
	#name : #VBParser,
	#superclass : #VBAbstractParser,
	#category : #'VBParser-ParsingCore'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 10 0 37] 
#[ 0 10 0 41] 
#[ 0 10 2 137] 
#[ 0 10 2 141] 
#[ 0 10 2 145] 
#[ 0 10 2 149] 
#[ 0 10 2 153] 
#[ 0 10 2 157] 
#[ 0 10 2 161] 
#[ 0 10 2 165] 
#[ 0 10 2 169] 
#[ 0 10 2 173] 
#[ 0 10 2 177] 
#[ 0 10 2 181] 
#[ 0 10 2 185] 
#[ 0 10 2 189] 
#[ 0 10 2 193] 
#[ 0 10 0 65] 
#[ 0 10 0 77] 
#[ 0 10 0 81] 
#[ 0 10 0 89] 
#[ 0 10 2 197] 
#[ 0 10 0 101] 
#[ 0 10 0 105] 
#[ 0 10 0 109] 
#[ 0 10 2 201] 
#[ 0 10 0 117] 
#[ 0 10 0 121] 
#[ 0 10 0 125] 
#[ 0 10 0 129] 
#[ 0 10 0 133] 
#[ 0 10 2 205] 
#[ 0 10 0 137] 
#[ 0 10 0 145] 
#[ 0 10 0 149] 
#[ 0 10 0 157] 
#[ 0 10 2 209] 
#[ 0 10 0 161] 
#[ 0 10 0 165] 
#[ 0 10 2 213] 
#[ 0 10 0 181] 
#[ 0 10 2 217] 
#[ 0 10 2 221] 
#[ 0 10 2 225] 
#[ 0 10 0 201] 
#[ 0 10 2 229] 
#[ 0 10 0 205] 
#[ 0 10 0 209] 
#[ 0 10 2 233] 
#[ 0 10 2 237] 
#[ 0 10 2 241] 
#[ 0 10 0 233] 
#[ 0 10 0 237] 
#[ 0 10 3 97] 
#[ 0 10 2 245] 
#[ 0 10 1 1] 
#[ 0 10 1 5] 
#[ 0 10 3 101] 
#[ 0 10 3 105] 
#[ 0 26 3 169] 
#[ 0 46 3 189] 
#[ 0 94 0 98] 
#[ 0 102 4 5] 
#[ 0 114 4 21] 
#[ 0 122 0 126] 
#[ 0 150 0 158 0 162 4 57] 
#[ 1 34 1 38] 
#[ 1 146 1 150] 
#[ 1 206 1 210] 
#[ 1 242 1 246] 
#[ 1 250 1 254] 
#[ 2 2 4 109] 
#[ 2 10 2 14] 
#[ 2 86 4 29] 
#[ 0 162 4 149] 
#[ 0 134 4 169] 
#[ 2 202 6 49] 
#[ 0 77 2 214] 
#[ 2 214 3 213] 
#[ 1 9 2 214] 
#[ 2 214 6 69] 
#[ 2 234 4 85] 
#[ 2 238 7 65] 
#[ 0 10 0 241] 
#[ 0 10 2 249] 
#[ 3 42 3 46] 
#[ 0 150 0 154 3 86 3 90] 
#[ 0 150 3 86 3 90] 
#[ 0 150 3 86 3 90 7 237] 
#[ 3 94 7 241] 
#[ 3 98 3 102] 
#[ 3 106 3 110] 
#[ 3 118 3 122] 
#[ 3 142 7 249] 
#[ 3 146 7 253] 
#[ 3 158 8 1] 
#[ 1 34 1 38 3 162 3 166] 
#[ 1 34 3 162 3 166] 
#[ 1 242 8 5] 
#[ 1 250 1 254 3 174] 
#[ 1 250 3 174] 
#[ 2 10 2 14 3 178] 
#[ 2 10 3 178] 
#[ 3 186 3 190] 
#[ 0 38 3 194] 
#[ 0 50 3 198] 
#[ 0 66 3 210] 
#[ 0 74 3 218] 
#[ 4 6 5 157] 
#[ 4 18 5 157] 
#[ 4 38 4 85] 
#[ 0 162 4 46] 
#[ 0 162 4 46 8 61] 
#[ 4 50 8 77] 
#[ 0 6 8 121] 
#[ 4 66 8 141] 
#[ 0 26 8 177] 
#[ 0 162 3 90 4 46] 
#[ 0 150 0 162 3 86 3 90 4 46 8 193] 
#[ 4 118 8 77] 
#[ 4 126 7 241] 
#[ 0 34 4 130] 
#[ 4 138 8 77] 
#[ 4 150 7 241] 
#[ 4 154 8 77] 
#[ 0 150 9 13] 
#[ 4 182 9 45] 
#[ 0 77 4 182] 
#[ 3 213 4 182] 
#[ 4 182 9 61] 
#[ 0 150 0 154] 
#[ 4 242 5 157] 
#[ 0 77 4 250] 
#[ 3 213 4 250] 
#[ 4 250 10 161] 
#[ 0 162 5 2] 
#[ 0 162 5 2 8 61] 
#[ 5 14 8 77] 
#[ 5 18 10 229] 
#[ 5 22 10 245] 
#[ 5 46 11 69] 
#[ 5 54 7 241] 
#[ 5 58 7 241] 
#[ 5 70 11 225] 
#[ 5 74 11 229] 
#[ 0 154 3 90] 
#[ 0 150 3 86 3 90 11 249] 
#[ 5 90 7 241] 
#[ 3 170 4 105] 
#[ 4 182 12 5] 
#[ 5 98 12 21] 
#[ 0 6 3 221] 
#[ 0 162 5 106] 
#[ 4 202 5 110] 
#[ 4 250 13 53] 
#[ 4 250 13 69] 
#[ 0 162 5 246] 
#[ 0 162 5 246 8 61] 
#[ 6 14 13 157] 
#[ 6 26 13 173] 
#[ 0 162 6 38] 
#[ 0 162 6 38 8 61] 
#[ 6 62 7 241] 
#[ 6 66 8 77] 
#[ 6 74 7 241] 
#[ 6 86 7 241] 
#[ 6 90 7 241] 
#[ 6 94 6 98 7 241] 
#[ 6 102 14 53] 
#[ 4 85 6 106] 
#[ 6 118 7 241] 
#[ 6 122 7 241] 
#[ 6 134 14 101] 
#[ 6 138 14 105] 
#[ 6 142 14 133] 
#[ 6 146 14 137] 
#[ 6 150 12 21] 
#[ 0 77 6 154] 
#[ 3 213 6 154] 
#[ 6 154 14 141] 
#[ 0 77 6 158] 
#[ 3 213 6 158] 
#[ 6 158 14 149] 
#[ 6 94 7 241] 
#[ 4 250 15 209] 
#[ 4 250 15 237] 
#[ 0 162 6 234] 
#[ 0 162 6 234 8 61] 
#[ 7 2 7 241] 
#[ 7 38 16 93] 
#[ 0 77 7 46] 
#[ 1 9 7 46] 
#[ 7 54 16 153] 
#[ 7 62 16 157] 
#[ 0 162 8 61] 
#[ 7 78 7 241] 
#[ 7 82 7 241] 
#[ 7 94 7 241] 
#[ 7 106 16 237] 
#[ 7 110 16 241] 
#[ 7 118 7 241] 
#[ 0 77 7 130] 
#[ 3 213 7 130] 
#[ 0 77 7 138] 
#[ 3 213 7 138] 
#[ 0 77 7 146] 
#[ 3 213 7 146] 
#[ 7 146 17 5] 
#[ 0 77 7 150] 
#[ 3 213 7 150] 
#[ 7 150 17 13] 
#[ 0 162 3 221] 
#[ 7 190 7 241] 
#[ 7 194 7 241] 
#[ 7 198 7 241] 
#[ 7 202 7 241] 
#[ 7 206 7 245] 
#[ 3 146 7 210 7 253] 
#[ 7 214 7 241] 
#[ 7 218 7 241] 
#[ 7 222 7 241] 
#[ 7 226 7 245] 
#[ 3 146 7 230 7 253] 
#[ 7 234 7 241] 
#[ 7 238 7 241] 
#[ 7 241 7 242] 
#[ 7 241 7 246] 
#[ 7 241 8 22] 
#[ 4 250 17 249] 
#[ 7 241 8 34] 
#[ 7 241 8 38] 
#[ 7 241 8 74] 
#[ 7 241 8 78] 
#[ 8 106 18 105] 
#[ 7 241 8 110] 
#[ 7 241 8 134] 
#[ 7 241 8 142] 
#[ 7 241 8 146] 
#[ 7 241 8 150] 
#[ 7 241 8 154] 
#[ 0 77 8 174] 
#[ 3 213 8 174] 
#[ 0 77 8 182] 
#[ 3 213 8 182] 
#[ 4 150 5 58] 
#[ 7 241 8 190] 
#[ 7 241 8 194] 
#[ 7 241 8 198] 
#[ 7 241 8 202] 
#[ 7 241 8 210] 
#[ 7 241 8 230] 
#[ 8 250 18 105] 
#[ 7 241 9 26] 
#[ 7 241 9 30] 
#[ 6 98 7 190] 
#[ 6 98 7 190 7 241] 
#[ 7 241 9 38] 
#[ 5 54 6 86] 
#[ 7 241 9 62] 
#[ 7 241 9 66] 
#[ 7 241 9 110] 
#[ 7 241 9 114] 
#[ 7 241 9 166] 
#[ 9 182 23 1] 
#[ 7 241 9 198] 
#[ 3 42 3 46 9 226] 
#[ 0 150 3 86 3 90 7 237 9 230] 
#[ 3 106 3 110 9 234] 
#[ 3 126 9 238] 
#[ 1 242 8 5 9 242] 
#[ 3 186 3 190 9 246] 
#[ 10 62 24 77] 
#[ 10 66 24 97] 
#[ 7 198 24 109] 
#[ 10 70 24 125] 
#[ 10 158 25 181] 
#[ 10 162 25 189] 
#[ 10 166 10 170] 
#[ 10 166 10 170 25 201] 
#[ 11 62 26 177] 
#[ 11 70 26 193] 
#[ 11 74 26 209] 
#[ 11 82 26 221] 
#[ 11 86 26 229] 
#[ 11 178 27 141] 
#[ 11 190 27 153] 
#[ 6 62 7 78] 
#[ 6 62 7 78 7 241] 
#[ 12 54 28 29] 
#[ 12 58 28 41] 
#[ 12 114 28 97] 
#[ 12 154 28 157] 
#[ 7 241 12 162] 
#[ 12 182 28 181] 
#[ 12 194 28 209] 
#[ 7 241 12 198] 
#[ 7 241 12 202] 
#[ 7 241 12 214]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2022-06-23T11:08:05.129193+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.

%left "")""  ;
%nonassoc  ""="" "":="";
%nonassoc  ""New"";
%left "","";
%right "":"";
%left ""eqv"" ;

%left ""xor"";
%left  ""or"";
%left  ""and"";
%nonassoc  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"" ;
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""not"" ;
%right ""^"";
%right  ""~"";
%right ""["" ""("";
%right ""!"" ;


%prefix VB;
%root Program;
%suffix Node;
%start module Statement ModuleStatement BehaviourDefinition;

<lineContinuation>
   :   ( \x20 | \xA0 | \x9) (_) ( \x20 | \xA0 | \x9)* ( \r | \n | \r\n | \x2028 ) ( \x20 | \xA0 | \x9)*
   ;

<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
	
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : (\#) ([^\#\r\n])* (\#)
   ;

<COLOR_LITERAL>
   : \& H [0-9a-fA-F]+ \&?
   ;


<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)* 
	;

<SBIDENTIFIER>
	: (\[) (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|/|$|\s)* (\]) 
	;
<DEFTYPE> 
	: ([a-zA-Z]) (\-) ([a-zA-Z]); 
	
<HASH_NUMBER>
	: ( \#) (<DECIMAL_INTEGER>)
	;
	
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;

<whitespace> : ( \x20 | \xA0 | \x9) + ; 

<eol>
   : (<whitespace>?) ( \r | \n | \r\n | \x2028 | \ ) (<whitespace>?)
   ;

<comment>
   :  (<whitespace>?)(\' | :?  REM  \ ) ( [^\n\r])* 
   ;

###################################################### 
########## Basic module
###################################################### 

module: <eol>* (header 'header' <eol>*)? (ModuleStatement 'element')?  (<eol>* ModuleStatement 'element' )*  <eol>* {{Module}};

###################################################### 
########## Literals
###################################################### 
literal 
	: 
	  FileDescriptorLiteral
	| IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;

FileDescriptorLiteral 	: <HASH_NUMBER> 'token' 			{{FileDescriptorLiteral}};
IntegerLiteral 			: <INTEGER_LITERAL> 'token' ""&""? 	{{IntegerLiteral}};
ColorLiteral			: <COLOR_LITERAL> 'token' 			{{ColorLiteral}} ; 
DateLiteral				: <DATE_LITERAL> 'token' 			{{DateLiteral}};
FloatLiteral			: <FLOATING_POINT_LITERAL> 'token' 	{{FloatLiteral}};
BooleanLiteral			: <BOOLEAN_LITERAL> 'token' 		{{BooleanLiteral}};
StringLiteral			: <STRING_LITERAL> 'token' 			{{StringLiteral}};
Null					: <NULL_LITERAL> 'token' 			{{Null}};




GuidLiteral: 
		""{""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> +
		""-"" 
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""}"" 
		{{GuidLiteral}};


Identifier : 
	 SimpleIdentifier
	| HashIdentifier
	| SquareBracketIdentifier;

KeywordIdentifier : UsableKeywords 'token'  {{SimpleIdentifier}} | SquareBracketIdentifier;


UsableKeywords  :  
  IdentifierWords  
| ""open"" 
| ""type"" 
| ""select"" 
| ""case"" 
| ""else""   
;

IdentifierWords :  
  <IDENTIFIER>     
| ""text"" 
| ""name"" 
| ""version"" 
| ""database"" 
| ""collection"" 
| ""bold"" 
| ""append"" 
| ""Object""  
| ""len"" 
| ""get"" | ""set"" | ""let"" 
| ""date"" 
| ""input"" 
| ""print"" 
| ""write"" 
| ""Error""
| ""Next""
| ""Output""
| ""Alias""
| ""String"" 
;

HashIdentifier 			: <HASH_IDENTIFIER> 'token' {{HashIdentifier}};
SquareBracketIdentifier : <SBIDENTIFIER> 'token' 	{{SquareBracketIdentifier}};
SimpleIdentifier 		: IdentifierWords 'token'  	{{SimpleIdentifier}};


LabelTag : <IDENTIFIER> 'name' "":""  {{LabelTag}};

###################################################### 
########## Module header and configuration
###################################################### 

header: <whitespace>? ""version"" <whitespace> FloatLiteral  'version'  (""class"")?  {{}};
Option
   :  <whitespace>? ""option"" <whitespace> IntegerLiteral 'value' {{OptionValue}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> ""database"" {{OptionCompareDatabase}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> (""binary""| ""text"" 'compare') {{OptionCompare}}
   |  <whitespace>? ""option"" <whitespace> ""explicit"" {{OptionExplicit}}
   |  <whitespace>? ""option"" <whitespace> ""private"" <whitespace> ""module""{{OptionPrivateModule}}
   | OptionBase
   ;
   
OptionBase : 
	<whitespace>? 
	""option"" <whitespace> 
	""base"" <whitespace> 
	Expression 'value' {{OptionBase}} 
;

SetUpAssignation :  
	(Identifier  'identifier' | MemberAccess 'identifier') <whitespace> ""="" <whitespace> Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" <whitespace> SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* <eol>*""end"" {{Configuration}};

Implements : ""implements"" <whitespace> StateAccessBase 'interface' {{Implements}}; 

DefTypeLabel : 
  ""DefBool"" | ""DefByte"" |""DefCur"" 
| ""DefDate"" | ""DefDec"" | ""DefDbl"" 
| ""DefInt"" | ""DefLng"" | ""DefLnglng"" 
| ""DefLngPtr"" | ""DefObj"" | ""DefSng"" 
| ""DefStr"" | ""DefVar"" 
;

DefType : DefTypeLabel 'deftype' <whitespace> <DEFTYPE> 'pattern' {{DefType}}; 

ModuleStatement :  
  Option  
| Configuration 
| Attribute 
| DeclareExternal 
| VariableDefinition 
| BehaviourDefinition 
| Types 
| Implements 
| DefType
 ;

###################################################### 
########## Body statements
###################################################### 

Statement :  
  StatementAssignment 
| VariableDefinition 
| Attribute 
| OptionBase 
| StatementCalls  
| ControlFlowStatement 
| Types 
| Label 
| Exits 
| Go 
| FileClauses 
| RaiseEvent 
| OtherStatements ;

# A Block is a list of statements. Each entry can be headed with a line number. Lines are splitted by newline 
Block: 
	    <eol>+
		(IntegerLiteral 'lineNumber' <whitespace>)? 
		 Statement 'statement'?
	   (
		 (<eol> | (<whitespace>? "":"" <whitespace>?))+ 
		 (IntegerLiteral 'lineNumber' <whitespace>)? 
		  Statement 'statement' 
	   )*
	   <eol>*
	   {{Block}};
	   
# Oneline blocks can have one or more ""lines"" splitted by "":"" 

OneLineBlock : 
	<whitespace> Statement 'statement'? 
	(<whitespace>? "":"" <whitespace>? Statement 'statement')* 
	{{Block}}
;

BaseType : 
  ""boolean"" 
| ""byte"" 
| ""currency"" 
| ""collection"" 
| ""date"" 
| ""decimal"" 
| ""double"" 
| ""integer"" 
| ""long"" 
| ""longlong""
| ""longptr"" 
| ""object"" 
| ""single"" 
| ""string"" 
| ""variant""
{{BaseType}};

SimpleType : 
	Identifier 'typeName'
	{{SimpleType}}
	;


Visibility: 
  ""private"" 
| ""public"" 
| ""friend"" 
| ""global"" ; 

ComplexType: 
	(SimpleType 'base')?  
	(""."" UsableKeywords 'member')+ 
	{{ComplexType}}
;

Type: 
  BaseType 
| SimpleType 
| ComplexType 
;



TypedThing : 
			 (<whitespace> ""as"" <whitespace> Type 'type')?
			 (<whitespace>? ""*"" <whitespace>? Expression 'fixedSize')?  
			 {{TypedThing}}
;
			 
TypedAndInstantiatedThing :	 
			<whitespace> ""as"" <whitespace>
			""new"" <whitespace> 
			Type 'type'
			{{AsTypeAndNew}}
; 

TypeSize : ""("" 
			Expression 'size'? 
			("",""<whitespace>? Expression 'size')* 
			"")"" 
			{{TypeSize}} 
;

AsType : 
  TypedThing 
| TypedAndInstantiatedThing;



###################################################### 
########## assign statements
###################################################### 

StatementAssignment : Assignment | ExplicitAssignement ;

ExplicitLetSet: ""let"" | ""set""; 

Assignment : 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' | "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};
		
ExplicitAssignement : 
		ExplicitLetSet 'kind' <whitespace> 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' |  "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};

###################################################### 
########## other statements
###################################################### 
 
OtherStatements : 
  Rename 
| Beep 
| DoEvents;

Rename : 
	""name"" <whitespace> 
	Expression 'oldName' <whitespace> 
	""as"" <whitespace> 
	Expression 'newName' 
	{{Rename}} ;
	
Beep : ""beep"" ;
DoEvents : ""DoEvents"" {{DoEvents}} ;

###################################################### 
########## Types
###################################################### 

Types : 
  DefineEnum 
| DefineType 
| Event ;

DefineType : 
      (Visibility 'visibility' <whitespace>)? 
	  ""type"" <whitespace> 
	  Identifier 'name' 
	  ( <eol>* TypeEntry 'field' )* 
	  <eol>* 
	  ""end"" <whitespace>  ""type"" 
	  {{DefineType}} ;
	  
TypeEntry :
	  Identifier 'name'
	  AsType 'type' 
	  (<whitespace>?""*""<whitespace>? IntegerLiteral 'size' )? 
	  {{TypeEntry}};
	  
Event  : 
	  (Visibility 'visibility' <whitespace>)?  
	  ""event"" <whitespace> 
	  Identifier 'selector' <whitespace>?
	  ParameterList 'parameters'
	  {{Event}} ;
	  
DefineEnum :  
	  (Visibility 'visibility' <whitespace>)?  
	  ""enum"" <whitespace> 
	  Identifier 'name'  
	  ( <eol>* EnumEntry 'field')* 
	  <eol>*  
	  ""end"" <whitespace> ""enum"" 
	  {{DefineEnum}};
	  
EnumEntry : 
      Identifier 'name'  
	  ( <whitespace> ""="" <whitespace> Expression 'value')? 
	  {{EnumEntry}};

###################################################### 
########## Parameters
###################################################### 

ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:""(""(Parameter 'parameter' ("","" <whitespace> Parameter 'parameter')* )? <whitespace>? "")"" {{ParameterList}};
	
Parameter: 
	(""optional"" <whitespace>)? 
	(ParameterPassingStrategy 'strategy' <whitespace>)? 
	(""paramarray"" <whitespace>)? 
	Identifier 'name' 
	(TypeSize 'size')?
	(AsType 'type')? 
	(<whitespace> ""="" <whitespace> Expression 'default')? 
	{{Parameter}};

###################################################### 
########## External declaration
###################################################### 

DeclareSub: 
			(Visibility 'visibility' <whitespace> )? 
			""declare"" <whitespace> 
			""sub"" <whitespace> 
			Identifier 'selector' <whitespace> 
			""lib"" <whitespace> 
			StringLiteral 'library' <whitespace>?
			(""alias"" <whitespace> StringLiteral 'alias' <whitespace>?)? 
			ParameterList 'parameters' 
			{{ExternalSub}};
			
DeclareFunction: 
		(Visibility 'visibility' <whitespace> )? 
		""declare"" <whitespace> 
		""function"" <whitespace> 
		Identifier 'selector' <whitespace> 
		""lib"" <whitespace> 
		StringLiteral 'library' <whitespace>? 
		(""alias"" <whitespace>  StringLiteral 'alias' <whitespace>? )? 
		ParameterList 'parameters'
		AsType 'type'
		{{ExternalFunction}};
		
		
DeclareExternal : DeclareSub|DeclareFunction; 

###################################################### 
########## Function / Sub Definition 
###################################################### 

Modifier: ""static"" ;

DefineFunction: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""function""  <whitespace>
	Identifier 'selector'<whitespace>?
	ParameterList 'parameters' <whitespace>?
	(AsType 'type' TypeSize 'size'?  )?
	Block 'block' 
	""end""  <whitespace> ""function"" 
   {{FunctionDefinition}};

DefineSub: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""sub""  <whitespace>
	Identifier 'selector'<whitespace>?
	(ParameterList 'parameters')? <whitespace>?
	Block 'block' 
	""end"" <whitespace> ""sub"" 
   {{SubDefinition}};
   

ModulePropertyGet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""get""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	(AsType 'type' TypeSize 'size'?)? 
	Block 'block' 
	""end"" <whitespace> (""property"" | ""function"") 
    {{ModulePropertyGet}}; 
	
	
ModulePropertySet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""set""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	Block 'block'  
	""end"" <whitespace> (""property"" | ""function"")
  {{ModulePropertyGet}}; 
  
ModulePropertyLet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""let""  <whitespace>
	Identifier 'selector' 
	ParameterList 'parameters'
	 Block 'block'  
	 ""end"" <whitespace> (""property"" | ""function"") 
{{ModulePropertyGet}}; 

BehaviourDefinition:  
  DefineFunction 
| DefineSub 
| ModulePropertyGet 
| ModulePropertySet 
| ModulePropertyLet ;

###################################################### 
########## Variable / And Multiple Variables
###################################################### 

ModuleProperty : 
	Visibility 'visibility' <whitespace>
	Variable 'variable' 
	{{ModuleProperty}};
	
ModuleConstant : 
	(Visibility 'visibility' <whitespace>)? 
	""const"" <whitespace> 
	Constant 'constant'
	{{ModuleConstant}};

DefineVariable : 
	""dim"" <whitespace> 
	Variable 'variable' 
	{{DimVariable}};


ReDefineVariable : 
	""redim"" <whitespace> 
	(""preserve"" <whitespace>)? 
	Variable 'variable' 
	{{ReDimVariable}};
	
ReDefineExpression : 
	""redim"" <whitespace>
	(""preserve"" <whitespace>)? 
	Expression 'variable' 
	{{ReDimVariable}};
	
StaticVariable : 
	""static""  <whitespace>  
	Variable 'variable'
	{{StaticVariable}};
	
Variable : 
	(""WithEvents""  <whitespace> )? 
	Identifier 'name'
	(TypeSize 'size')?
	(AsType 'type') ? 
	{{Variable}};
	
Constant :  
	Identifier 'constant'
	(AsType 'type') ? 
	<whitespace> ""=""  <whitespace> 
	Expression 'value' 
	{{Constant}} ;

ModuleProperties : 
	Visibility 'visibility'  <whitespace>
	VariableList 'variables' 
	{{ModuleMultipleProperties}};
	
	
ModuleConstants : 
	(Visibility 'visibility'  <whitespace> )? 
	""const""  <whitespace> 
	ConstantList 'constants' 
	{{ModuleMultipleConstants}};
	
DefineVariables : 
	""dim""  <whitespace>
	VariableList 'variables' 
	{{DimMultipleVariables}};
	
ReDefineVariables : 
	""redim""  <whitespace> 
	(""preserve""  <whitespace>)?  
	VariableList 'variables' 
	{{ReDimMultipleVariables}};
	
StaticVariables : 
	""static"" <whitespace> 
	VariableList 'variables' 
	{{StaticMultipleVariables}};
	
VariableList : Variable 'variable' ( <whitespace>? "",""  <whitespace>?  Variable 'variable' )+ {{VariableList}};
ConstantList : Constant 'constant' ( <whitespace>? "",""  <whitespace>?  Constant 'constant' )+ {{ConstantList}};

VariableDefinition :
  ModuleProperties 
| ModuleProperty 
| ModuleConstant 
| ModuleConstants 
| ConstantList 
| DefineVariable 
| ReDefineVariable 
| ReDefineExpression 
| DefineVariables 
| ReDefineVariables 
| StaticVariable 
| StaticVariables ;

###################################################### 
########## Value Statements
###################################################### 


Expression :   
  ValueClause  
| StateAccess 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval 
| Operation ; 

ParentheseesExpression : 
	""(""  <whitespace>? 
	Expression 'expression'  
	<whitespace>? "")"" 
	{{ParentheseesExpression}};
	
Interval : 
	Expression 'from' <whitespace> 
	""to""  <whitespace> 
	Expression 'to'  
	{{Interval}} ; 


##########
### Ops
##########

Operation : 
  UnaryOperation 
| BinaryOperation ;

####################
### Unary Ops 
####################

UnaryOperation:   
  NegatedOperation
| PositiveOperation 
| NotOperation 
; 

NegatedOperation : 
	""-""
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{NegatedOperation}}
;
	
PositiveOperation : 
	""+"" <whitespace> 
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{PositiveOperation}} 
;

NotOperation : 
	""not"" <whitespace>
	(StateAccessBase 'value' | BooleanLiteral 'value' | ParentheseesExpression 'value' | TypeOf 'value' )
	{{NotOperation}}
;


####################
### Binary Ops 
####################

LeftSide :  
  ValueClause  
| StateAccessBase 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval
| UnaryOperation ;


BinaryOperation : 
  ComparisonOperation  
| ArithmeticOperation 
| BooleanBinaryOperation 
| Equals  
| ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like"" ;

ComparisonOperation : 
		(LeftSide 'left' | ArithmeticOperation 'left') <whitespace>
		ComparisonOperator <whitespace> 
		(LeftSide 'right' | ArithmeticOperation 'right') 
		{{ComparisonOperation}};
		
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";

ArithmeticOperation : 
		LeftSide 'left' <whitespace>
		ArithmeticOperator <whitespace>
		Expression 'right' {{ArithmeticOperation}};


BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";

BooleanBinaryOperation : 
		(ComparisonOperation 'left' | Equals 'left' | LeftSide 'left'  ) <whitespace>
		BooleanOperator   <whitespace>
		Expression 'right' 
		{{ArithmeticOperation}};


ConcatenationOperation : 
		LeftSide 'left' <whitespace>
		""&"" <whitespace>
		Expression 'right' 
		{{ConcatenationOperation}}; 

Equals : 
	(Identifier 'left' | MemberAccess 'left' | Expression 'left') <whitespace>
	""="" 'operator' <whitespace>
	Expression 'right' 
	{{Equals}}; 


####################
### Value Clause 
####################

ValueClause: 
  AddressOfClause 
| NewClause ;

AddressOfClause : 
		""AddressOf"" <whitespace>
		Identifier 'name'  
		{{AddressOfClause}}; 
		
NewClause : 
		""New"" <whitespace>
		Type 'typeName' 
		{{NewClause}};

OpenMode :  
  ""Append"" 
| ""Binary"" 
| ""Input"" 
| ""Output"" 
| ""Random"" ;


OpenAccess : 
  ""Read"" 
| ""Write"" 
| ""Read Write"" ;

Lock :  
  ""Shared"" 
| ""Lock Read"" 
| ""Lock Write"" 
| ""Lock Read Write"";


FileClauses : 
  OpenFileClause 
| PrintFileClause 
| LineInputClause ;

OpenFileClause : 
		""Open"" <whitespace>
		Expression 'filepath' <whitespace>
		""For"" <whitespace>
		OpenMode 'mode' <whitespace>
		(OpenAccess 'access' <whitespace>)? 
		(Lock 'lock' <whitespace>)? 
		""As"" <whitespace>
		Expression 'fileDescriptor' 
		(<whitespace> ""len"" <whitespace> ""="" <whitespace> Expression'length')? 
		{{OpenClause}};
		
		
PrintFileClause : 
		""Print"" <whitespace>
		Identifier 'fileNumber' <whitespace>?
		"","" <whitespace>? 
		(Expression 'value' <whitespace>?)? 
		("";"" <whitespace>? Expression 'value')*  
		{{PrintIntoFileClause}};
		
LineInputClause : 
		""Line"" <whitespace>
		""Input"" <whitespace>
		(Identifier 'fileNumber' | FileDescriptorLiteral  'fileNumber') <whitespace>?  
		"",""  <whitespace>?
		(Expression 'value') 
		{{LineInputClause}};


###################################################### 
########## Control flow statements
###################################################### 

ControlFlowStatement : 
  Exits
| Loops 
| If  
| On 
| Resume 
| To 
| With 
| RaiseError 
| Select ; 

####################
#### Loops
####################


Loops : 
  DoLoop 
| WhileWend 
| ForLoop ;

####################
########## Do
####################

DoLoop : 
  InfinityLoop 
| WhileTrue 
| UntilTrue 
| DoWhileTrue 
| DoUntilTrue; 


InfinityLoop : 
	""do""  
		(Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{InfinityLoop}} ;

WhileTrue :  
	""do"" <whitespace>
	""while"" <whitespace>
	Expression 'condition' 
	( Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{WhileTrue}}; 
	
	
UntilTrue : 
	""do"" <whitespace>
	""until"" <whitespace>
	Expression 'condition'
		Block 'body'
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""loop"" 
   {{UntilTrue}}; 

DoWhileTrue :  
	""do"" 
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)?  
	""loop"" <whitespace> 
	""while"" <whitespace> 
	Expression 'condition' 
    {{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" 
	 Block 'body' 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop"" <whitespace> 
	""until"" <whitespace>
	Expression 'condition'
    {{DoUntilTrue}}; 


####################
########## WhileWend
####################

WhileWend: 
	""while"" <whitespace> 
	Expression 'condition'
	( Block 'body')?   
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""wend"" 
	{{WhileWend}}; 

####################
########## For 
####################

ForLoop : 
  ForEach 
| ForNext 
| ForNextOneLine 
| ForStepNext;

ForEach :  
	""for"" <whitespace> 
	""each"" <whitespace> 
	Identifier 'element' <whitespace> 
	""in"" <whitespace> 
	Expression 'group' <whitespace>?
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForEach}} ;

ForNext :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'   
	( Block 'body')? 
	 (IntegerLiteral 'endLineNumber' <whitespace>) ? 
	 ""next"" 
	 (<whitespace> Identifier 'element')? 
    {{ForNext}} ;

ForNextOneLine :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace> 
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'
		( OneLineBlock 'body')? 
	""next""
   {{ForNext}} ;

ForStepNext:   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace>
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit' <whitespace> 
	""step"" <whitespace> 
	Expression 'step'   
		( Block 'body')?  
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForStepNext}} ;

####################
########## If
####################

If : 
  IfThenElseOneLine 
| IfThenEmpty
| IfThenElse ; 

IfThenEmpty : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then:"") <eol> 
{{IfThenElse}};


IfThenElseOneLine : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then""|""then:"") 
	OneLineBlock 'ifTrue' 
	(<whitespace> (""else""|""else:"") OneLineBlock 'ifFalse' )?
{{IfThenElse}};

IfThenElse : 
	""if"" <whitespace> 
	Expression  'condition' 
	<whitespace> 
	""then""
	(Block 'ifTrue')  
	(ElseIf 'elseif')* 
	(Else 'else')?
    (IntegerLiteral 'endLineNumber'<whitespace>)? 
	""end"" <whitespace> ""if""
	{{IfThenElse}};
	
Else: 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""else"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}};
	
ElseIf: 
    (IntegerLiteral 'endLineNumber' <whitespace>)? 
	""elseif"" <whitespace> 
	Expression  'condition' <whitespace>
	""then"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}}; 



####################
###### Error 
####################

RaiseError : 
  ""Error"" <whitespace> Expression 'errorCode'  
  {{RaiseError}} ;
	
##########################
###### Label / LabelSub
##########################

	To : Label ;
	Label : LabelTag 'label' {{Label}}; 	
	
	
####################
###### Select Case 
####################
CaseCondition : 
  ExpressionCalls
| NegatedOperation 
| Interval
| Identifier 
| MemberAccess 
| literal;

Case : 
	(IntegerLiteral 'lineNumber' <whitespace>)? 
	""case"" <whitespace>
	(CaseCondition 'expression' | ""else"")
	("","" <whitespace> (CaseCondition 'expression'))*
	"":""?
	(Block 'body' | (OneLineBlock 'body' <eol>))? 
	{{Case}};
	
Select : 
	""select"" <whitespace> 
	""case"" <whitespace>
	Expression 'expression' 
	<eol>+ (Case 'case')* 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""end"" <whitespace> ""select"" 
	{{Select}};

####################
###### Resume
####################

Resume: 
  ResumeLabel 
| ResumeNext 
| ResumeEmpty ;
	
ResumeLabel : 
	""resume"" <whitespace> 
	DestinationList 'destination' 
	{{ResumeLabel}} ; 
	
ResumeNext : 
	""resume"" <whitespace> 
	""next"" 
	{{ResumeNext}} ; 
	
ResumeEmpty : ""resume"" {{ResumeEmpty}}; 

####################
###### GoTo / GoSub 
####################

Go : 
  GoToStatement 
| GoSub ;


Destination : 
  Identifier 
| IntegerLiteral 
| NegatedOperation ;

 
DestinationList :  
	Destination 'label' 
	(<whitespace>?"","" <whitespace>?Destination 'label')*
	{{DestinationList}};

GoToStatement : 
	""goto"" <whitespace> 
	DestinationList 'destination'   
	{{GoToStatement}};
	
GoSub :  
	""gosub"" <whitespace> 
	DestinationList 'destination'  
	{{GoSub}} ;

####################
########## On 
####################

On : 
  OnErrorGoTo 
| OnErrorResumeNext 
| OnExpressionGo; 

OnErrorGoTo : 
	""on"" <whitespace>
	""error"" <whitespace>
	GoToStatement 'to' 
	{{OnErrorGoTo}};
	
OnErrorResumeNext : 
	""on""  <whitespace>
	""error"" <whitespace>
	""resume""  <whitespace>
	""next""
	{{OnErrorResumeNext}} ;
	
OnExpressionGo : 
	""on"" <whitespace>
	Expression 'integerExpression' <whitespace>
	Go 'to' 
	{{OnExpressionGo}} ;

####################
########## Error
####################

Error: 
	""error"" <whitespace>
	Expression 'errorCode' 
	{{Error}} ;

####################
########## With
####################

With : 
	""with"" <whitespace>
	Expression 'with' 
	Block 'block' 
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""end"" <whitespace> ""with"" 
	{{With}} ;

####################
########## Exits
####################

Exits : 
  ExitFunction 
| ExitSub 
| ExitProperty 
| ExitDo 
| ExitFor 
| Return; 

ExitFunction : 
	""exit"" <whitespace>
	""function"" 
	{{Exits}} ;
	
ExitSub : 
	""exit"" <whitespace>
	""sub"" 
	{{Exits}} ; 
ExitDo : 
	""exit"" <whitespace>
	""do"" 
	{{Exits}} ; 
	
ExitFor : 
	""exit"" <whitespace>
	""for"" 
	{{Exits}} ;
	
ExitProperty : 
	""exit"" <whitespace> 
	""property"" 
	{{Exits}} ;
	
Return : 
	""return"" 
	{{Return}} ;

########################################
### Calls and accesses 
########################################

StateAccessBase :
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess; 

############################################################
### Normal accesses.  object.value dic!key
############################################################

DictionaryAccess : 
	(StateAccessBase 'receiver')?
	""!"" 
	KeywordIdentifier 'member' 
	{{DictionaryAccess}} ;

MemberAccess : 
	(StateAccessBase 'receiver')?
	"".""  
	KeywordIdentifier 'member' 
	{{MemberAccess}};


StateAccess : 
	DictionaryAccess 
  | MemberAccess;
  
  
############################################################
### ImplicitParenthesesLessCall.   selector arg1, arg2, , , arg
############################################################

ImplicitCallExpression : 
  MemberAccess
| Identifier
;


ImplicitParenthesesLessCall :  
		ImplicitCallExpression 'selector'  <whitespace> 
		ArgumentList 'arguments' 
		{{ImplicitParenthesesLessCall}} 
		
|       ImplicitCallExpression 'selector'
		{{ImplicitParenthesesLessCall}} 
 
;

############################################################
### ImplicitCalls.   selector(arg1, arg2, , , arg). 
############################################################
ProcedureCallOrArrayExpression : 
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess
;

ProcedureCallOrArrayAccess :  
		ProcedureCallOrArrayExpression 'selector'
		""(""<whitespace>?
		  ArgumentList 'arguments'
		 <whitespace>?"")""
		{{ProcedureCallOrArrayAccess}} 

;

############################################################
### Argument and argument list. 
### Expression, expression, assignment 
############################################################

Argument : 
        (ParameterPassingStrategy 'strategy' <whitespace>)?  
		(""paramarray"" <whitespace>)?  
		(Expression 'value' | Assignment 'value') 
		{{Argument}};
		
		
ArgumentList : 
		(<whitespace>? Argument 'argument' ? ("","" | "";"" )  <whitespace>?)* 
		Argument 'argument'? 
		(<whitespace>?("","" | "";"" ) <whitespace>? Argument 'argument' ? )*
		{{ArgumentList}};


ExplicitCallSelectorTypes :
  Identifier 
| MemberAccess  
| ProcedureCallOrArrayAccess;


############################################################
### ExplicitCall.  Call selector(arg1, arg2, , , arg). 
############################################################

ExplicitCall : 
		""Call"" <whitespace>
		 ExplicitCallSelectorTypes 'selector'  
		{{ExplicitCall}} ;
		
RaiseEvent : 
		""RaiseEvent"" <whitespace>
		(Identifier 'selector' | ProcedureCallOrArrayAccess 'selector' )
		{{RaiseEvent}};

TypeOf : 
		""TypeOf"" <whitespace>
		Argument 'argument' <whitespace>
		(""Is"" | ""IsNot"") <whitespace>
		Argument 'type'  
		{{TypeOf}};

StatementCalls :  
  ImplicitParenthesesLessCall 
| ExplicitCall ;

ExpressionCalls : 
  ProcedureCallOrArrayAccess 
| TypeOf ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(177 0 #reduceActionFor_eol__1: 2054145 false ) 
	#(179 0 #reduceActionFor__eol___ModuleStatement__element____1: 2118657 false ) 
	#(194 1 #liftFirstValue: 3467285 false ) 
	#(194 1 #liftFirstValue: 3467272 false ) 
	#(241 1 #reduceActionForDoEvents1: 8672257 false ) 
	#(194 1 #liftFirstValue: 3467282 false ) 
	#(194 1 #liftFirstValue: 3467279 false ) 
	#(194 1 #liftFirstValue: 3467283 false ) 
	#(194 1 #liftFirstValue: 3467273 false ) 
	#(194 1 #liftFirstValue: 3467284 false ) 
	#(194 1 #liftFirstValue: 3467280 false ) 
	#(194 1 #liftFirstValue: 3467286 false ) 
	#(194 1 #liftFirstValue: 3467281 false ) 
	#(240 1 #liftFirstValue: 8655873 false ) 
	#(194 1 #liftFirstValue: 3467271 false ) 
	#(194 1 #liftFirstValue: 3467270 false ) 
	#(194 1 #liftFirstValue: 3467269 false ) 
	#(194 1 #liftFirstValue: 3467278 false ) 
	#(223 1 #liftFirstValue: 7009283 false ) 
	#(194 1 #liftFirstValue: 3467275 false ) 
	#(223 1 #liftFirstValue: 7009284 false ) 
	#(194 1 #liftFirstValue: 3467274 false ) 
	#(194 1 #liftFirstValue: 3467277 false ) 
	#(235 1 #liftFirstValue: 7883777 false ) 
	#(194 1 #liftFirstValue: 3467267 false ) 
	#(223 1 #liftFirstValue: 7009281 false ) 
	#(223 1 #liftFirstValue: 7009282 false ) 
	#(359 1 #reduceActionForResumeEmpty1: 24239105 false ) 
	#(379 1 #reduceActionForReturn1: 26021889 false ) 
	#(194 1 #liftFirstValue: 3467276 false ) 
	#(235 1 #liftFirstValue: 7883778 false ) 
	#(194 1 #liftFirstValue: 3467266 false ) 
	#(194 1 #liftFirstValue: 3467268 false ) 
	#(194 1 #liftFirstValue: 3467265 false ) 
	#(196 1 #reduceActionForSquareBracketIdentifier1: 3811329 false ) 
	#(195 1 #reduceActionForHashIdentifier1: 3743745 false ) 
	#(380 1 #liftFirstValue: 26168323 false ) 
	#(386 1 #liftFirstValue: 27377667 false ) 
	#(384 1 #liftFirstValue: 26902530 false ) 
	#(228 0 #reduceActionForTypedThing1: 7223297 false ) 
	#(197 1 #reduceActionForSimpleIdentifier1: 3892225 false ) 
	#(191 1 #liftFirstValue: 3189762 false ) 
	#(191 1 #liftFirstValue: 3189763 false ) 
	#(191 1 #liftFirstValue: 3189761 false ) 
	#(348 1 #reduceActionForLabel1: 23302145 false ) 
	#(212 1 #liftFirstValue: 5939204 false ) 
	#(212 1 #liftFirstValue: 5939203 false ) 
	#(212 1 #liftFirstValue: 5939201 false ) 
	#(234 1 #liftFirstValue: 7824385 false ) 
	#(234 1 #liftFirstValue: 7824386 false ) 
	#(212 1 #liftFirstValue: 5939213 false ) 
	#(238 1 #liftFirstValue: 8474625 false ) 
	#(238 1 #liftFirstValue: 8474626 false ) 
	#(238 1 #liftFirstValue: 8474627 false ) 
	#(212 1 #liftFirstValue: 5939207 false ) 
	#(242 1 #liftFirstValue: 8844290 false ) 
	#(242 1 #liftFirstValue: 8844291 false ) 
	#(242 1 #liftFirstValue: 8844289 false ) 
	#(293 1 #liftFirstValue: 14973954 false ) 
	#(293 1 #liftFirstValue: 14973955 false ) 
	#(293 1 #liftFirstValue: 14973958 false ) 
	#(293 1 #liftFirstValue: 14973959 false ) 
	#(293 1 #liftFirstValue: 14973960 false ) 
	#(293 1 #liftFirstValue: 14973963 false ) 
	#(293 1 #liftFirstValue: 14973953 false ) 
	#(293 1 #liftFirstValue: 14973956 false ) 
	#(293 1 #liftFirstValue: 14973961 false ) 
	#(293 1 #liftFirstValue: 14973962 false ) 
	#(293 1 #liftFirstValue: 14973964 false ) 
	#(293 1 #liftFirstValue: 14973957 false ) 
	#(212 1 #liftFirstValue: 5939202 false ) 
	#(380 1 #liftFirstValue: 26168322 false ) 
	#(386 1 #liftFirstValue: 27377666 false ) 
	#(312 1 #liftFirstValue: 17857537 false ) 
	#(312 1 #liftFirstValue: 17857538 false ) 
	#(212 1 #liftFirstValue: 5939211 false ) 
	#(318 1 #liftFirstValue: 18284545 false ) 
	#(318 1 #liftFirstValue: 18284546 false ) 
	#(318 1 #liftFirstValue: 18284547 false ) 
	#(212 1 #liftFirstValue: 5939206 false ) 
	#(324 1 #liftFirstValue: 19309570 false ) 
	#(325 1 #liftFirstValue: 19473409 false ) 
	#(326 1 #liftFirstValue: 19577857 false ) 
	#(326 1 #liftFirstValue: 19577858 false ) 
	#(326 1 #liftFirstValue: 19577859 false ) 
	#(326 1 #liftFirstValue: 19577860 false ) 
	#(326 1 #liftFirstValue: 19577861 false ) 
	#(325 1 #liftFirstValue: 19473410 false ) 
	#(325 1 #liftFirstValue: 19473411 false ) 
	#(333 1 #liftFirstValue: 20805633 false ) 
	#(333 1 #liftFirstValue: 20805634 false ) 
	#(333 1 #liftFirstValue: 20805635 false ) 
	#(333 1 #liftFirstValue: 20805636 false ) 
	#(324 1 #liftFirstValue: 19309571 false ) 
	#(338 1 #liftFirstValue: 22159362 false ) 
	#(338 1 #liftFirstValue: 22159361 false ) 
	#(338 1 #liftFirstValue: 22159363 false ) 
	#(324 1 #liftFirstValue: 19309576 false ) 
	#(324 1 #liftFirstValue: 19309574 false ) 
	#(212 1 #liftFirstValue: 5939208 false ) 
	#(347 1 #liftFirstValue: 23287809 false ) 
	#(324 1 #liftFirstValue: 19309577 false ) 
	#(324 1 #liftFirstValue: 19309573 false ) 
	#(356 1 #liftFirstValue: 24016897 false ) 
	#(356 1 #liftFirstValue: 24016898 false ) 
	#(356 1 #liftFirstValue: 24016899 false ) 
	#(212 1 #liftFirstValue: 5939210 false ) 
	#(360 1 #liftFirstValue: 24347649 false ) 
	#(360 1 #liftFirstValue: 24347650 false ) 
	#(324 1 #liftFirstValue: 19309572 false ) 
	#(367 1 #liftFirstValue: 24816641 false ) 
	#(367 1 #liftFirstValue: 24816642 false ) 
	#(367 1 #liftFirstValue: 24816643 false ) 
	#(324 1 #liftFirstValue: 19309575 false ) 
	#(212 1 #liftFirstValue: 5939209 false ) 
	#(324 1 #liftFirstValue: 19309569 false ) 
	#(373 1 #liftFirstValue: 25633793 false ) 
	#(373 1 #liftFirstValue: 25633794 false ) 
	#(373 1 #liftFirstValue: 25633796 false ) 
	#(373 1 #liftFirstValue: 25633797 false ) 
	#(373 1 #liftFirstValue: 25633795 false ) 
	#(373 1 #liftFirstValue: 25633798 false ) 
	#(383 1 #liftFirstValue: 26651649 false ) 
	#(383 1 #liftFirstValue: 26651650 false ) 
	#(384 1 #liftFirstValue: 26902529 false ) 
	#(380 1 #liftFirstValue: 26168321 false ) 
	#(386 1 #liftFirstValue: 27377665 false ) 
	#(385 1 #reduceActionForImplicitParenthesesLessCall2: 26961922 false ) 
	#(398 1 #liftFirstValue: 28909569 false ) 
	#(380 1 #liftFirstValue: 26168324 false ) 
	#(386 1 #liftFirstValue: 27377668 false ) 
	#(398 1 #liftFirstValue: 28909570 false ) 
	#(212 1 #liftFirstValue: 5939212 false ) 
	#(212 1 #liftFirstValue: 5939205 false ) 
	#(209 1 #liftFirstValue: 5356545 false ) 
	#(209 1 #liftFirstValue: 5356546 false ) 
	#(209 1 #liftFirstValue: 5356547 false ) 
	#(209 1 #liftFirstValue: 5356548 false ) 
	#(209 1 #liftFirstValue: 5356550 false ) 
	#(209 1 #liftFirstValue: 5356549 false ) 
	#(209 1 #liftFirstValue: 5356551 false ) 
	#(209 1 #liftFirstValue: 5356552 false ) 
	#(209 1 #liftFirstValue: 5356554 false ) 
	#(209 1 #liftFirstValue: 5356553 false ) 
	#(209 1 #liftFirstValue: 5356555 false ) 
	#(209 1 #liftFirstValue: 5356556 false ) 
	#(209 1 #liftFirstValue: 5356557 false ) 
	#(209 1 #liftFirstValue: 5356558 false ) 
	#(264 1 #liftFirstValue: 11403265 false ) 
	#(211 1 #liftFirstValue: 5629953 false ) 
	#(200 1 #liftFirstValue: 4267021 false ) 
	#(211 1 #liftFirstValue: 5629955 false ) 
	#(211 1 #liftFirstValue: 5629954 false ) 
	#(211 1 #liftFirstValue: 5629960 false ) 
	#(211 1 #liftFirstValue: 5629961 false ) 
	#(211 1 #liftFirstValue: 5629959 false ) 
	#(263 1 #liftFirstValue: 11199489 false ) 
	#(263 1 #liftFirstValue: 11199490 false ) 
	#(211 1 #liftFirstValue: 5629956 false ) 
	#(273 1 #liftFirstValue: 12946433 false ) 
	#(273 1 #liftFirstValue: 12946434 false ) 
	#(273 1 #liftFirstValue: 12946435 false ) 
	#(273 1 #liftFirstValue: 12946436 false ) 
	#(273 1 #liftFirstValue: 12946437 false ) 
	#(211 1 #liftFirstValue: 5629958 false ) 
	#(211 1 #liftFirstValue: 5629957 false ) 
	#(177 2 #reduceActionFor_eol__2: 2054146 false ) 
	#(193 1 #liftFirstValue: 3367938 false ) 
	#(193 1 #liftFirstValue: 3367941 false ) 
	#(193 1 #liftFirstValue: 3367942 false ) 
	#(193 1 #liftFirstValue: 3367940 false ) 
	#(193 1 #liftFirstValue: 3367939 false ) 
	#(381 2 #reduceActionForDictionaryAccess1: 26431489 false ) 
	#(192 1 #reduceActionForSimpleIdentifier1: 3271681 false ) 
	#(193 1 #liftFirstValue: 3367937 false ) 
	#(192 1 #liftFirstValue: 3271682 false ) 
	#(382 2 #reduceActionForMemberAccess1: 26545153 false ) 
	#(327 2 #reduceActionForInfinityLoop1: 19664897 false ) 
	#(182 1 #reduceActionForIntegerLiteral1: 2560001 false ) 
	#(207 1 #reduceActionFor_eol__1: 5199873 false ) 
	#(215 0 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: 6369281 false ) 
	#(198 2 #reduceActionForLabelTag1: 3964929 false ) 
	#(233 1 #liftFirstValue: 7621633 false ) 
	#(233 1 #liftFirstValue: 7621634 false ) 
	#(292 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14894081 false ) 
	#(290 2 #reduceActionForConstantList1: 14858241 false ) 
	#(391 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 28069889 false ) 
	#(176 3 #reduceActionFormodule1: 2045953 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element____2: 2118658 false ) 
	#(313 3 #reduceActionForAddressOfClause1: 17906689 false ) 
	#(394 1 #liftFirstValue: 28256257 false ) 
	#(394 1 #liftFirstValue: 28256258 false ) 
	#(394 1 #liftFirstValue: 28256259 false ) 
	#(395 3 #reduceActionForExplicitCall1: 28532737 false ) 
	#(184 1 #reduceActionForDateLiteral1: 2699265 false ) 
	#(183 1 #reduceActionForColorLiteral1: 2633729 false ) 
	#(185 1 #reduceActionForFloatLiteral1: 2760705 false ) 
	#(186 1 #reduceActionForBooleanLiteral1: 2831361 false ) 
	#(187 1 #reduceActionForStringLiteral1: 2899969 false ) 
	#(188 1 #reduceActionForNull1: 2966529 false ) 
	#(181 1 #reduceActionForFileDescriptorLiteral1: 2481153 false ) 
	#(302 1 #liftFirstValue: 16485381 false ) 
	#(294 1 #liftFirstValue: 15376389 false ) 
	#(180 1 #liftFirstValue: 2313217 false ) 
	#(180 1 #liftFirstValue: 2313218 false ) 
	#(180 1 #liftFirstValue: 2313219 false ) 
	#(180 1 #liftFirstValue: 2313220 false ) 
	#(180 1 #liftFirstValue: 2313221 false ) 
	#(180 1 #liftFirstValue: 2313222 false ) 
	#(180 1 #liftFirstValue: 2313223 false ) 
	#(180 1 #liftFirstValue: 2313224 false ) 
	#(180 1 #liftFirstValue: 2313225 false ) 
	#(302 1 #liftFirstValue: 16485380 false ) 
	#(294 1 #liftFirstValue: 15376388 false ) 
	#(346 3 #reduceActionForRaiseError1: 23120897 false ) 
	#(302 1 #liftFirstValue: 16485382 false ) 
	#(294 1 #liftFirstValue: 15376390 false ) 
	#(294 1 #liftFirstValue: 15376391 false ) 
	#(302 1 #liftFirstValue: 16485383 false ) 
	#(294 1 #liftFirstValue: 15376392 false ) 
	#(302 1 #liftFirstValue: 16485384 false ) 
	#(297 1 #liftFirstValue: 15792129 false ) 
	#(298 1 #liftFirstValue: 15904769 false ) 
	#(298 1 #liftFirstValue: 15904770 false ) 
	#(298 1 #liftFirstValue: 15904771 false ) 
	#(297 1 #liftFirstValue: 15792130 false ) 
	#(303 1 #liftFirstValue: 16640001 false ) 
	#(303 1 #liftFirstValue: 16640002 false ) 
	#(303 1 #liftFirstValue: 16640003 false ) 
	#(303 1 #liftFirstValue: 16640005 false ) 
	#(303 1 #liftFirstValue: 16640004 false ) 
	#(302 1 #liftFirstValue: 16485377 false ) 
	#(294 1 #liftFirstValue: 15376385 false ) 
	#(302 1 #liftFirstValue: 16485378 false ) 
	#(294 1 #liftFirstValue: 15376386 false ) 
	#(399 1 #liftFirstValue: 28979201 false ) 
	#(399 1 #liftFirstValue: 28979202 false ) 
	#(302 1 #liftFirstValue: 16485379 false ) 
	#(294 1 #liftFirstValue: 15376387 false ) 
	#(221 1 #liftFirstValue: 6732812 false ) 
	#(221 1 #liftFirstValue: 6732814 false ) 
	#(221 1 #liftFirstValue: 6732801 false ) 
	#(221 1 #liftFirstValue: 6732802 false ) 
	#(221 1 #liftFirstValue: 6732804 false ) 
	#(221 1 #liftFirstValue: 6732803 false ) 
	#(221 1 #liftFirstValue: 6732805 false ) 
	#(221 1 #liftFirstValue: 6732806 false ) 
	#(221 1 #liftFirstValue: 6732807 false ) 
	#(221 1 #liftFirstValue: 6732808 false ) 
	#(221 1 #liftFirstValue: 6732809 false ) 
	#(221 1 #liftFirstValue: 6732810 false ) 
	#(221 1 #liftFirstValue: 6732811 false ) 
	#(221 1 #liftFirstValue: 6732813 false ) 
	#(221 1 #reduceActionForBaseType15: 6732815 false ) 
	#(222 1 #reduceActionForSimpleType1: 6949889 false ) 
	#(227 1 #liftFirstValue: 7169025 false ) 
	#(227 1 #liftFirstValue: 7169026 false ) 
	#(227 1 #liftFirstValue: 7169027 false ) 
	#(226 1 #reduceActionFor_____UsableKeywords__member___1: 7115777 false ) 
	#(224 1 #reduceActionForComplexType1: 7075841 false ) 
	#(314 3 #reduceActionForNewClause1: 18003969 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28639233 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28639234 false ) 
	#(203 3 #reduceActionForAttribute1: 5046273 false ) 
	#(275 3 #reduceActionForModuleConstant1: 13333505 false ) 
	#(283 3 #reduceActionForModuleConstants1: 14254081 false ) 
	#(280 1 #reduceActionForVariable1: 13876225 false ) 
	#(276 3 #reduceActionForDefineVariable1: 13462529 false ) 
	#(284 3 #reduceActionForDefineVariables1: 14403585 false ) 
	#(182 2 #reduceActionForIntegerLiteral2: 2560002 false ) 
	#(207 2 #reduceActionFor_eol__2: 5199874 false ) 
	#(327 3 #reduceActionForInfinityLoop3: 19664899 false ) 
	#(250 0 #reduceActionFor__eol___ModuleStatement__element____1: 9526273 false ) 
	#(377 3 #reduceActionForExitFor1: 25897985 false ) 
	#(376 3 #reduceActionForExitDo1: 25842689 false ) 
	#(374 3 #reduceActionForExitFunction1: 25720833 false ) 
	#(378 3 #reduceActionForExitProperty1: 25954305 false ) 
	#(375 3 #reduceActionForExitSub1: 25787393 false ) 
	#(361 1 #liftFirstValue: 24383490 false ) 
	#(361 1 #liftFirstValue: 24383489 false ) 
	#(361 1 #liftFirstValue: 24383491 false ) 
	#(364 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 24500225 false ) 
	#(366 3 #reduceActionForGoSub1: 24675329 false ) 
	#(365 3 #reduceActionForGoToStatement1: 24578049 false ) 
	#(277 3 #reduceActionForReDefineVariable1: 13545473 false ) 
	#(285 3 #reduceActionForReDefineVariables1: 14501889 false ) 
	#(278 3 #reduceActionForReDefineVariable1: 13664257 false ) 
	#(358 3 #reduceActionForResumeNext1: 24169473 false ) 
	#(357 3 #reduceActionForResumeLabel1: 24074241 false ) 
	#(279 3 #reduceActionForStaticVariable1: 13786113 false ) 
	#(286 3 #reduceActionForStaticVariables1: 14639105 false ) 
	#(245 0 #reduceActionFor__eol___ModuleStatement__element____1: 9006081 false ) 
	#(228 2 #reduceActionForTypedThing2: 7223298 false ) 
	#(274 3 #reduceActionForModuleProperty1: 13230081 false ) 
	#(282 3 #reduceActionForModuleProperties1: 14130177 false ) 
	#(291 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14894081 false ) 
	#(292 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14894082 false ) 
	#(381 3 #reduceActionForDictionaryAccess2: 26431490 false ) 
	#(382 3 #reduceActionForMemberAccess2: 26545154 false ) 
	#(385 3 #reduceActionForImplicitParenthesesLessCall1: 26961921 false ) 
	#(393 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 28166145 false ) 
	#(206 0 #reduceActionFor__eol___ModuleStatement__element____1: 5197825 false ) 
	#(208 3 #reduceActionForImplements1: 5269505 false ) 
	#(200 3 #reduceActionForOption9: 4267017 false ) 
	#(200 3 #reduceActionForOption1: 4267009 false ) 
	#(269 0 #nil 11932673 false ) 
	#(210 3 #reduceActionForDefType1: 5547009 false ) 
	#(199 3 #reduceActionForheader1: 4176897 false ) 
	#(178 2 #reduceActionFor__eol___ModuleStatement__element___1: 2118657 false ) 
	#(176 4 #reduceActionFormodule2: 2045954 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 15985666 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 15985667 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 15985665 false ) 
	#(190 1 #reduceActionFor_HEX_INTEGER___1: 3041281 false ) 
	#(225 2 #reduceActionFor_____UsableKeywords__member__1: 7115777 false ) 
	#(224 2 #reduceActionForComplexType2: 7075842 false ) 
	#(226 2 #reduceActionFor_____UsableKeywords__member___2: 7115778 false ) 
	#(322 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 18863105 false ) 
	#(232 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 7553025 false ) 
	#(280 2 #reduceActionForVariable3: 13876227 false ) 
	#(280 2 #reduceActionForVariable2: 13876226 false ) 
	#(289 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14779393 false ) 
	#(287 2 #reduceActionForVariableList1: 14743553 false ) 
	#(327 4 #reduceActionForInfinityLoop2: 19664898 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____2: 6374402 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____1: 6374401 false ) 
	#(213 3 #reduceActionForBlock1: 6269953 false ) 
	#(215 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: 6369282 false ) 
	#(217 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 6374401 false ) 
	#(247 4 #reduceActionForEvent1: 9241601 false ) 
	#(362 2 #reduceActionForDestinationList1: 24456193 false ) 
	#(332 4 #reduceActionForWhileWend1: 20585473 false ) 
	#(228 3 #reduceActionForTypedThing3: 7223299 false ) 
	#(228 3 #reduceActionForTypedThing4: 7223300 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14894082 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14894083 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___1: 28069889 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___3: 28069891 false ) 
	#(252 1 #reduceActionForParameterPassingStrategy2: 9879554 false ) 
	#(252 1 #liftFirstValue: 9879553 false ) 
	#(388 1 #reduceActionForArgument2: 27873282 false ) 
	#(388 1 #reduceActionForArgument2: 27873281 false ) 
	#(391 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace____2: 28069890 false ) 
	#(389 2 #reduceActionForArgumentList1: 28051457 false ) 
	#(387 4 #reduceActionForProcedureCallOrArrayAccess1: 27487233 false ) 
	#(267 0 #reduceActionFor_AsType__type__TypeSize__size______1: 11632641 false ) 
	#(269 1 #liftFirstValue: 11932674 false ) 
	#(200 4 #reduceActionForOption10: 4267018 false ) 
	#(200 4 #reduceActionForOption2: 4267010 false ) 
	#(199 4 #reduceActionForheader2: 4176898 false ) 
	#(199 4 #reduceActionForheader3: 4176899 false ) 
	#(176 5 #reduceActionFormodule3: 2045955 false ) 
	#(295 3 #reduceActionForParentheseesExpression1: 15525889 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16114690 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16114691 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16114689 false ) 
	#(301 3 #reduceActionForNotOperation2: 16260098 false ) 
	#(301 3 #reduceActionForNotOperation2: 16260099 false ) 
	#(301 3 #reduceActionForNotOperation2: 16260097 false ) 
	#(301 3 #reduceActionForNotOperation2: 16260100 false ) 
	#(190 2 #reduceActionFor_eol__2: 3041282 false ) 
	#(306 1 #reduceActionForArithmeticOperator1: 17055745 false ) 
	#(306 1 #reduceActionForArithmeticOperator2: 17055746 false ) 
	#(306 1 #reduceActionForArithmeticOperator3: 17055747 false ) 
	#(306 1 #reduceActionForArithmeticOperator4: 17055748 false ) 
	#(304 1 #reduceActionForArithmeticOperator2: 16774146 false ) 
	#(304 1 #reduceActionForArithmeticOperator4: 16774148 false ) 
	#(304 1 #reduceActionForArithmeticOperator3: 16774147 false ) 
	#(304 1 #reduceActionForArithmeticOperator1: 16774145 false ) 
	#(304 1 #reduceActionForComparisonOperator5: 16774149 false ) 
	#(304 1 #reduceActionForComparisonOperator6: 16774150 false ) 
	#(304 1 #reduceActionForComparisonOperator7: 16774151 false ) 
	#(306 1 #reduceActionForComparisonOperator7: 17055751 false ) 
	#(306 1 #reduceActionForComparisonOperator6: 17055750 false ) 
	#(306 1 #reduceActionForComparisonOperator5: 17055749 false ) 
	#(308 1 #reduceActionForBooleanOperator1: 17261569 false ) 
	#(308 1 #reduceActionForBooleanOperator4: 17261572 false ) 
	#(308 1 #reduceActionForBooleanOperator2: 17261570 false ) 
	#(308 1 #reduceActionForBooleanOperator3: 17261571 false ) 
	#(320 5 #reduceActionForPrintFileClause1: 18715649 false ) 
	#(280 3 #reduceActionForVariable5: 13876229 false ) 
	#(280 3 #reduceActionForVariable4: 13876228 false ) 
	#(288 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14779393 false ) 
	#(289 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14779394 false ) 
	#(213 4 #reduceActionForBlock2: 6269954 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____3: 6374403 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____4: 6374404 false ) 
	#(214 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: 6369281 false ) 
	#(217 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6374402 false ) 
	#(327 5 #reduceActionForInfinityLoop4: 19664900 false ) 
	#(250 2 #reduceActionFor__eol___ModuleStatement__element____2: 9526274 false ) 
	#(253 2 #reduceActionForParameterList1: 9957377 false ) 
	#(258 0 #nil 10255361 false ) 
	#(255 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 9998337 false ) 
	#(247 5 #reduceActionForEvent2: 9241602 false ) 
	#(364 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 24500226 false ) 
	#(368 5 #reduceActionForOnErrorGoTo1: 24880129 false ) 
	#(370 5 #reduceActionForOnExpressionGo1: 25104385 false ) 
	#(201 5 #reduceActionForOptionBase1: 4774913 false ) 
	#(277 5 #reduceActionForReDefineVariable2: 13545474 false ) 
	#(285 5 #reduceActionForReDefineVariables2: 14501890 false ) 
	#(278 5 #reduceActionForReDefineVariable2: 13664258 false ) 
	#(245 2 #reduceActionFor__eol___ModuleStatement__element____2: 9006082 false ) 
	#(332 5 #reduceActionForWhileWend3: 20585475 false ) 
	#(228 4 #reduceActionForTypedThing5: 7223301 false ) 
	#(236 5 #reduceActionForAssignment2: 7917570 false ) 
	#(281 5 #reduceActionForConstant1: 14000129 false ) 
	#(236 5 #reduceActionForAssignment2: 7917569 false ) 
	#(228 4 #reduceActionForTypedThing6: 7223302 false ) 
	#(275 5 #reduceActionForModuleConstant2: 13333506 false ) 
	#(283 5 #reduceActionForModuleConstants2: 14254082 false ) 
	#(291 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14894084 false ) 
	#(236 5 #reduceActionForAssignment2: 7917572 false ) 
	#(236 5 #reduceActionForAssignment2: 7917571 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___2: 28069890 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___4: 28069892 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___9: 28069897 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___11: 28069899 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___5: 28069893 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___7: 28069895 false ) 
	#(389 3 #reduceActionForArgumentList2: 28051458 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____1: 28166145 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____5: 28166149 false ) 
	#(393 2 #reduceActionFor__whitespace________________whitespace___Argument__argument______2: 28166146 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess3: 27487235 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess2: 27487234 false ) 
	#(206 2 #reduceActionFor___eol___SetUpAssignation__setting___2: 5197826 false ) 
	#(266 1 #reduceActionFor_AsType__type__TypeSize__size_____1: 11632641 false ) 
	#(267 1 #reduceActionFor_AsType__type__TypeSize__size______2: 11632642 false ) 
	#(200 5 #reduceActionForOption5: 4267013 false ) 
	#(200 5 #reduceActionForOption3: 4267011 false ) 
	#(200 5 #reduceActionForOption6: 4267014 false ) 
	#(200 5 #reduceActionForOption11: 4267019 false ) 
	#(199 5 #reduceActionForheader4: 4176900 false ) 
	#(176 6 #reduceActionFormodule4: 2045956 false ) 
	#(295 4 #reduceActionForParentheseesExpression3: 15525891 false ) 
	#(295 4 #reduceActionForParentheseesExpression2: 15525890 false ) 
	#(320 6 #reduceActionForPrintFileClause4: 18715652 false ) 
	#(320 6 #reduceActionForPrintFileClause2: 18715650 false ) 
	#(322 2 #reduceActionFor______whitespace___Expression__value___2: 18863106 false ) 
	#(320 6 #reduceActionForPrintFileClause7: 18715655 false ) 
	#(280 4 #reduceActionForVariable7: 13876231 false ) 
	#(280 4 #reduceActionForVariable6: 13876230 false ) 
	#(230 3 #reduceActionForTypeSize1: 7510017 false ) 
	#(232 2 #reduceActionFor______whitespace___Expression__value___2: 7553026 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14779394 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14779395 false ) 
	#(330 6 #reduceActionForDoWhileTrue1: 20148225 false ) 
	#(328 6 #reduceActionForWhileTrue1: 19790849 false ) 
	#(213 5 #reduceActionForBlock3: 6269955 false ) 
	#(216 3 #reduceActionFor__eol______whitespace________whitespace____5: 6374405 false ) 
	#(251 1 #reduceActionForEnumEntry1: 9623553 false ) 
	#(249 2 #reduceActionFor__eol___ModuleStatement__element___1: 9526273 false ) 
	#(253 3 #reduceActionForParameterList2: 9957378 false ) 
	#(257 1 #liftFirstValue: 10255361 false ) 
	#(258 1 #liftFirstValue: 10255362 false ) 
	#(260 0 #reduceActionFor__whitespace_______whitespace__Expression__default___1: 10274817 false ) 
	#(363 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 24500225 false ) 
	#(220 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 6659073 false ) 
	#(343 0 #reduceActionFor_eol__1: 22638593 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine1: 22330369 false ) 
	#(339 6 #reduceActionForIfThenEmpty1: 22218753 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine4: 22330372 false ) 
	#(355 0 #reduceActionFor_eol__1: 23846913 false ) 
	#(244 2 #reduceActionFor__eol___ModuleStatement__element___1: 9006081 false ) 
	#(332 6 #reduceActionForWhileWend2: 20585474 false ) 
	#(201 6 #reduceActionForOptionBase2: 4774914 false ) 
	#(281 6 #reduceActionForConstant2: 14000130 false ) 
	#(247 6 #reduceActionForEvent3: 9241603 false ) 
	#(388 3 #reduceActionForArgument4: 27873284 false ) 
	#(388 3 #reduceActionForArgument4: 27873283 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___10: 28069898 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___12: 28069900 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___13: 28069901 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___15: 28069903 false ) 
	#(388 3 #reduceActionForArgument6: 27873286 false ) 
	#(388 3 #reduceActionForArgument6: 27873285 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___6: 28069894 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___8: 28069896 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____3: 28166147 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____2: 28166146 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____7: 28166151 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____6: 28166150 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____9: 28166153 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____13: 28166157 false ) 
	#(387 6 #reduceActionForProcedureCallOrArrayAccess4: 27487236 false ) 
	#(204 6 #reduceActionForConfiguration1: 5136385 false ) 
	#(205 2 #reduceActionFor__eol___ModuleStatement__element___1: 5197825 false ) 
	#(266 2 #reduceActionFor_____UsableKeywords__member__1: 11632642 false ) 
	#(200 6 #reduceActionForOption7: 4267015 false ) 
	#(200 6 #reduceActionForOption4: 4267012 false ) 
	#(200 6 #reduceActionForOption8: 4267016 false ) 
	#(200 6 #reduceActionForOption12: 4267020 false ) 
	#(295 5 #reduceActionForParentheseesExpression4: 15525892 false ) 
	#(311 5 #reduceActionForEquals1: 17639425 false ) 
	#(311 5 #reduceActionForEquals1: 17639427 false ) 
	#(296 5 #reduceActionForInterval1: 15653889 false ) 
	#(310 5 #reduceActionForConcatenationOperation1: 17506305 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16848897 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16848898 false ) 
	#(307 5 #reduceActionForArithmeticOperation1: 17122305 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17311747 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17311745 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16848899 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16848900 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17311746 false ) 
	#(311 5 #reduceActionForEquals1: 17639426 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18936837 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18936833 false ) 
	#(315 1 #liftFirstValue: 18076673 false ) 
	#(315 1 #liftFirstValue: 18076674 false ) 
	#(315 1 #liftFirstValue: 18076675 false ) 
	#(315 1 #liftFirstValue: 18076676 false ) 
	#(315 1 #liftFirstValue: 18076677 false ) 
	#(320 7 #reduceActionForPrintFileClause5: 18715653 false ) 
	#(320 7 #reduceActionForPrintFileClause3: 18715651 false ) 
	#(321 2 #reduceActionFor______whitespace___Expression__value__1: 18863105 false ) 
	#(320 7 #reduceActionForPrintFileClause10: 18715658 false ) 
	#(320 7 #reduceActionForPrintFileClause8: 18715656 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4892673 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4892674 false ) 
	#(280 5 #reduceActionForVariable8: 13876232 false ) 
	#(231 2 #reduceActionFor______whitespace___Expression__value__1: 7553025 false ) 
	#(230 4 #reduceActionForTypeSize2: 7510018 false ) 
	#(288 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14779396 false ) 
	#(329 7 #reduceActionForUntilTrue1: 19974145 false ) 
	#(328 7 #reduceActionForWhileTrue3: 19790851 false ) 
	#(213 6 #reduceActionForBlock4: 6269956 false ) 
	#(214 4 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: 6369282 false ) 
	#(331 7 #reduceActionForDoUntilTrue1: 20336641 false ) 
	#(330 7 #reduceActionForDoWhileTrue3: 20148227 false ) 
	#(260 1 #reduceActionFor_AsType__type__TypeSize__size______2: 10274818 false ) 
	#(256 3 #reduceActionForParameter1: 10084353 false ) 
	#(253 4 #reduceActionForParameterList3: 9957379 false ) 
	#(255 2 #reduceActionFor______whitespace___Expression__value___2: 9998338 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 24500226 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 24500227 false ) 
	#(218 2 #reduceActionForOneLineBlock1: 6602753 false ) 
	#(239 7 #reduceActionForRename1: 8525825 false ) 
	#(369 7 #reduceActionForOnErrorResumeNext1: 24979457 false ) 
	#(246 2 #reduceActionForTypeEntry1: 9105409 false ) 
	#(332 7 #reduceActionForWhileWend4: 20585476 false ) 
	#(372 7 #reduceActionForWith1: 25414657 false ) 
	#(229 6 #reduceActionForTypedAndInstantiatedThing1: 7380993 false ) 
	#(228 6 #reduceActionForTypedThing7: 7223303 false ) 
	#(247 7 #reduceActionForEvent4: 9241604 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8099842 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8099841 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8099844 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8099843 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___14: 28069902 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___16: 28069904 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____4: 28166148 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____8: 28166152 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____11: 28166155 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____10: 28166154 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____15: 28166159 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____14: 28166158 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18936838 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18936839 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18936834 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18936835 false ) 
	#(320 8 #reduceActionForPrintFileClause6: 18715654 false ) 
	#(321 3 #reduceActionFor______whitespace___Expression__value__2: 18863106 false ) 
	#(320 8 #reduceActionForPrintFileClause11: 18715659 false ) 
	#(320 8 #reduceActionForPrintFileClause9: 18715657 false ) 
	#(231 3 #reduceActionFor______whitespace___Expression__value__2: 7553026 false ) 
	#(328 8 #reduceActionForWhileTrue2: 19790850 false ) 
	#(330 8 #reduceActionForDoWhileTrue2: 20148226 false ) 
	#(248 8 #reduceActionForDefineEnum1: 9413633 false ) 
	#(256 4 #reduceActionForParameter2: 10084354 false ) 
	#(253 5 #reduceActionForParameterList4: 9957380 false ) 
	#(363 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 24500228 false ) 
	#(218 3 #reduceActionForOneLineBlock2: 6602754 false ) 
	#(220 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6659074 false ) 
	#(344 1 #reduceActionForElse1: 22772737 false ) 
	#(343 2 #reduceActionFor_eol__2: 22638594 false ) 
	#(342 1 #liftFirstValue: 22638593 false ) 
	#(354 1 #liftFirstValue: 23846913 false ) 
	#(355 2 #reduceActionFor_eol__2: 23846914 false ) 
	#(243 8 #reduceActionForDefineType1: 8893441 false ) 
	#(228 7 #reduceActionForTypedThing8: 7223304 false ) 
	#(228 7 #reduceActionForTypedThing9: 7223305 false ) 
	#(388 5 #reduceActionForArgument8: 27873288 false ) 
	#(388 5 #reduceActionForArgument8: 27873287 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____12: 28166156 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____16: 28166160 false ) 
	#(268 8 #reduceActionForDefineSub1: 11748353 false ) 
	#(397 7 #reduceActionForTypeOf1: 28770305 false ) 
	#(397 7 #reduceActionForTypeOf2: 28770306 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18936840 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18936836 false ) 
	#(317 1 #liftFirstValue: 18207748 false ) 
	#(317 1 #liftFirstValue: 18207746 false ) 
	#(317 1 #liftFirstValue: 18207747 false ) 
	#(316 1 #liftFirstValue: 18153475 false ) 
	#(316 1 #liftFirstValue: 18153473 false ) 
	#(317 1 #liftFirstValue: 18207745 false ) 
	#(316 1 #liftFirstValue: 18153474 false ) 
	#(320 9 #reduceActionForPrintFileClause12: 18715660 false ) 
	#(329 9 #reduceActionForUntilTrue2: 19974146 false ) 
	#(328 9 #reduceActionForWhileTrue4: 19790852 false ) 
	#(331 9 #reduceActionForDoUntilTrue2: 20336642 false ) 
	#(330 9 #reduceActionForDoWhileTrue4: 20148228 false ) 
	#(256 5 #reduceActionForParameter9: 10084361 false ) 
	#(256 5 #reduceActionForParameter3: 10084355 false ) 
	#(256 5 #reduceActionForParameter5: 10084357 false ) 
	#(254 3 #reduceActionFor______whitespace__Parameter__parameter__1: 9998337 false ) 
	#(219 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 6659073 false ) 
	#(344 2 #reduceActionForElse2: 22772738 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine2: 22330370 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine3: 22330371 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine5: 22330373 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine6: 22330374 false ) 
	#(246 4 #reduceActionForTypeEntry2: 9105410 false ) 
	#(372 9 #reduceActionForWith2: 25414658 false ) 
	#(228 8 #reduceActionForTypedThing10: 7223306 false ) 
	#(265 9 #reduceActionForDefineFunction1: 11425793 false ) 
	#(268 9 #reduceActionForDefineSub3: 11748355 false ) 
	#(268 9 #reduceActionForDefineSub2: 11748354 false ) 
	#(334 10 #reduceActionForForEach1: 20874241 false ) 
	#(251 5 #reduceActionForEnumEntry2: 9623554 false ) 
	#(256 6 #reduceActionForParameter10: 10084362 false ) 
	#(256 6 #reduceActionForParameter4: 10084356 false ) 
	#(259 4 #reduceActionFor__whitespace_______whitespace__Expression__default__1: 10274817 false ) 
	#(256 6 #reduceActionForParameter6: 10084358 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 6659074 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 6659075 false ) 
	#(341 10 #reduceActionForIfThenElse1: 22532097 false ) 
	#(344 3 #reduceActionForElse3: 22772739 false ) 
	#(352 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 23636993 false ) 
	#(349 1 #liftFirstValue: 23408646 false ) 
	#(349 1 #liftFirstValue: 23408644 false ) 
	#(349 1 #liftFirstValue: 23408643 false ) 
	#(349 1 #liftFirstValue: 23408642 false ) 
	#(349 1 #liftFirstValue: 23408645 false ) 
	#(349 1 #liftFirstValue: 23408641 false ) 
	#(353 10 #reduceActionForSelect1: 23755777 false ) 
	#(246 5 #reduceActionForTypeEntry3: 9105411 false ) 
	#(246 5 #reduceActionForTypeEntry4: 9105412 false ) 
	#(248 10 #reduceActionForDefineEnum2: 9413634 false ) 
	#(243 10 #reduceActionForDefineType2: 8893442 false ) 
	#(261 10 #reduceActionForDeclareSub1: 10497025 false ) 
	#(265 10 #reduceActionForDefineFunction3: 11425795 false ) 
	#(265 10 #reduceActionForDefineFunction2: 11425794 false ) 
	#(270 10 #reduceActionForModulePropertyGet2: 12018690 false ) 
	#(270 10 #reduceActionForModulePropertyGet1: 12018689 false ) 
	#(272 10 #reduceActionForModulePropertyLet2: 12650498 false ) 
	#(272 10 #reduceActionForModulePropertyLet1: 12650497 false ) 
	#(271 10 #reduceActionForModulePropertySet2: 12354562 false ) 
	#(271 10 #reduceActionForModulePropertySet1: 12354561 false ) 
	#(268 10 #reduceActionForDefineSub4: 11748356 false ) 
	#(268 10 #reduceActionForDefineSub9: 11748361 false ) 
	#(268 10 #reduceActionForDefineSub5: 11748357 false ) 
	#(334 11 #reduceActionForForEach9: 20874249 false ) 
	#(334 11 #reduceActionForForEach5: 20874245 false ) 
	#(319 11 #reduceActionForOpenFileClause1: 18359297 false ) 
	#(256 7 #reduceActionForParameter11: 10084363 false ) 
	#(256 7 #reduceActionForParameter13: 10084365 false ) 
	#(256 7 #reduceActionForParameter7: 10084359 false ) 
	#(219 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 6659076 false ) 
	#(344 4 #reduceActionForElse4: 22772740 false ) 
	#(341 11 #reduceActionForIfThenElse3: 22532099 false ) 
	#(350 4 #reduceActionForCase7: 23519239 false ) 
	#(350 4 #reduceActionForCase1: 23519233 false ) 
	#(246 6 #reduceActionForTypeEntry5: 9105413 false ) 
	#(262 11 #reduceActionForDeclareFunction1: 10834945 false ) 
	#(261 11 #reduceActionForDeclareSub4: 10497028 false ) 
	#(265 11 #reduceActionForDefineFunction4: 11425796 false ) 
	#(270 11 #reduceActionForModulePropertyGet4: 12018692 false ) 
	#(270 11 #reduceActionForModulePropertyGet3: 12018691 false ) 
	#(265 11 #reduceActionForDefineFunction9: 11425801 false ) 
	#(268 11 #reduceActionForDefineSub11: 11748363 false ) 
	#(268 11 #reduceActionForDefineSub10: 11748362 false ) 
	#(265 11 #reduceActionForDefineFunction5: 11425797 false ) 
	#(268 11 #reduceActionForDefineSub7: 11748359 false ) 
	#(268 11 #reduceActionForDefineSub6: 11748358 false ) 
	#(334 12 #reduceActionForForEach2: 20874242 false ) 
	#(334 12 #reduceActionForForEach13: 20874253 false ) 
	#(334 12 #reduceActionForForEach3: 20874243 false ) 
	#(335 12 #reduceActionForForNext1: 21160961 false ) 
	#(336 12 #reduceActionForForNext1: 21481473 false ) 
	#(256 8 #reduceActionForParameter12: 10084364 false ) 
	#(256 8 #reduceActionForParameter14: 10084366 false ) 
	#(256 8 #reduceActionForParameter8: 10084360 false ) 
	#(345 5 #reduceActionForElseIf1: 22882305 false ) 
	#(341 12 #reduceActionForIfThenElse2: 22532098 false ) 
	#(350 5 #reduceActionForCase10: 23519242 false ) 
	#(350 5 #reduceActionForCase8: 23519240 false ) 
	#(352 2 #reduceActionFor______whitespace___Expression__value___2: 23636994 false ) 
	#(350 5 #reduceActionForCase4: 23519236 false ) 
	#(350 5 #reduceActionForCase2: 23519234 false ) 
	#(353 12 #reduceActionForSelect2: 23755778 false ) 
	#(262 12 #reduceActionForDeclareFunction4: 10834948 false ) 
	#(270 12 #reduceActionForModulePropertyGet6: 12018694 false ) 
	#(270 12 #reduceActionForModulePropertyGet5: 12018693 false ) 
	#(261 12 #reduceActionForDeclareSub7: 10497031 false ) 
	#(265 12 #reduceActionForDefineFunction11: 11425803 false ) 
	#(265 12 #reduceActionForDefineFunction10: 11425802 false ) 
	#(270 12 #reduceActionForModulePropertyGet14: 12018702 false ) 
	#(270 12 #reduceActionForModulePropertyGet13: 12018701 false ) 
	#(272 12 #reduceActionForModulePropertyLet6: 12650502 false ) 
	#(272 12 #reduceActionForModulePropertyLet5: 12650501 false ) 
	#(271 12 #reduceActionForModulePropertySet6: 12354566 false ) 
	#(271 12 #reduceActionForModulePropertySet5: 12354565 false ) 
	#(268 12 #reduceActionForDefineSub12: 11748364 false ) 
	#(268 12 #reduceActionForDefineSub13: 11748365 false ) 
	#(265 12 #reduceActionForDefineFunction7: 11425799 false ) 
	#(265 12 #reduceActionForDefineFunction6: 11425798 false ) 
	#(270 12 #reduceActionForModulePropertyGet8: 12018696 false ) 
	#(270 12 #reduceActionForModulePropertyGet7: 12018695 false ) 
	#(272 12 #reduceActionForModulePropertyLet4: 12650500 false ) 
	#(272 12 #reduceActionForModulePropertyLet3: 12650499 false ) 
	#(271 12 #reduceActionForModulePropertySet4: 12354564 false ) 
	#(271 12 #reduceActionForModulePropertySet3: 12354563 false ) 
	#(268 12 #reduceActionForDefineSub8: 11748360 false ) 
	#(189 11 #reduceActionForGuidLiteral1: 3018753 false ) 
	#(334 13 #reduceActionForForEach10: 20874250 false ) 
	#(334 13 #reduceActionForForEach11: 20874251 false ) 
	#(334 13 #reduceActionForForEach6: 20874246 false ) 
	#(334 13 #reduceActionForForEach7: 20874247 false ) 
	#(335 13 #reduceActionForForNext5: 21160965 false ) 
	#(336 13 #reduceActionForForNext5: 21481474 false ) 
	#(319 13 #reduceActionForOpenFileClause5: 18359301 false ) 
	#(319 13 #reduceActionForOpenFileClause3: 18359299 false ) 
	#(256 9 #reduceActionForParameter15: 10084367 false ) 
	#(345 6 #reduceActionForElseIf2: 22882306 false ) 
	#(341 13 #reduceActionForIfThenElse4: 22532100 false ) 
	#(350 6 #reduceActionForCase11: 23519243 false ) 
	#(350 6 #reduceActionForCase9: 23519241 false ) 
	#(350 6 #reduceActionForCase5: 23519237 false ) 
	#(350 6 #reduceActionForCase3: 23519235 false ) 
	#(350 6 #reduceActionForCase19: 23519251 false ) 
	#(350 6 #reduceActionForCase13: 23519245 false ) 
	#(261 13 #reduceActionForDeclareSub2: 10497026 false ) 
	#(262 13 #reduceActionForDeclareFunction7: 10834951 false ) 
	#(261 13 #reduceActionForDeclareSub10: 10497034 false ) 
	#(265 13 #reduceActionForDefineFunction12: 11425804 false ) 
	#(270 13 #reduceActionForModulePropertyGet16: 12018704 false ) 
	#(270 13 #reduceActionForModulePropertyGet15: 12018703 false ) 
	#(265 13 #reduceActionForDefineFunction13: 11425805 false ) 
	#(268 13 #reduceActionForDefineSub15: 11748367 false ) 
	#(268 13 #reduceActionForDefineSub14: 11748366 false ) 
	#(265 13 #reduceActionForDefineFunction8: 11425800 false ) 
	#(270 13 #reduceActionForModulePropertyGet10: 12018698 false ) 
	#(270 13 #reduceActionForModulePropertyGet9: 12018697 false ) 
	#(334 14 #reduceActionForForEach14: 20874254 false ) 
	#(334 14 #reduceActionForForEach15: 20874255 false ) 
	#(334 14 #reduceActionForForEach4: 20874244 false ) 
	#(335 14 #reduceActionForForNext2: 21160962 false ) 
	#(335 14 #reduceActionForForNext3: 21160963 false ) 
	#(256 10 #reduceActionForParameter16: 10084368 false ) 
	#(345 7 #reduceActionForElseIf3: 22882307 false ) 
	#(351 3 #reduceActionFor______whitespace__Parameter__parameter__1: 23636993 false ) 
	#(350 7 #reduceActionForCase12: 23519244 false ) 
	#(350 7 #reduceActionForCase6: 23519238 false ) 
	#(350 7 #reduceActionForCase22: 23519254 false ) 
	#(350 7 #reduceActionForCase20: 23519252 false ) 
	#(350 7 #reduceActionForCase16: 23519248 false ) 
	#(350 7 #reduceActionForCase14: 23519246 false ) 
	#(262 14 #reduceActionForDeclareFunction2: 10834946 false ) 
	#(261 14 #reduceActionForDeclareSub3: 10497027 false ) 
	#(261 14 #reduceActionForDeclareSub5: 10497029 false ) 
	#(262 14 #reduceActionForDeclareFunction10: 10834954 false ) 
	#(270 14 #reduceActionForModulePropertyGet18: 12018706 false ) 
	#(270 14 #reduceActionForModulePropertyGet17: 12018705 false ) 
	#(265 14 #reduceActionForDefineFunction15: 11425807 false ) 
	#(265 14 #reduceActionForDefineFunction14: 11425806 false ) 
	#(270 14 #reduceActionForModulePropertyGet20: 12018708 false ) 
	#(270 14 #reduceActionForModulePropertyGet19: 12018707 false ) 
	#(272 14 #reduceActionForModulePropertyLet8: 12650504 false ) 
	#(272 14 #reduceActionForModulePropertyLet7: 12650503 false ) 
	#(271 14 #reduceActionForModulePropertySet8: 12354568 false ) 
	#(271 14 #reduceActionForModulePropertySet7: 12354567 false ) 
	#(268 14 #reduceActionForDefineSub16: 11748368 false ) 
	#(270 14 #reduceActionForModulePropertyGet12: 12018700 false ) 
	#(270 14 #reduceActionForModulePropertyGet11: 12018699 false ) 
	#(334 15 #reduceActionForForEach12: 20874252 false ) 
	#(334 15 #reduceActionForForEach8: 20874248 false ) 
	#(335 15 #reduceActionForForNext6: 21160966 false ) 
	#(335 15 #reduceActionForForNext7: 21160967 false ) 
	#(319 15 #reduceActionForOpenFileClause7: 18359303 false ) 
	#(345 8 #reduceActionForElseIf4: 22882308 false ) 
	#(350 8 #reduceActionForCase23: 23519255 false ) 
	#(350 8 #reduceActionForCase21: 23519253 false ) 
	#(350 8 #reduceActionForCase17: 23519249 false ) 
	#(350 8 #reduceActionForCase15: 23519247 false ) 
	#(262 15 #reduceActionForDeclareFunction3: 10834947 false ) 
	#(262 15 #reduceActionForDeclareFunction5: 10834949 false ) 
	#(261 15 #reduceActionForDeclareSub6: 10497030 false ) 
	#(261 15 #reduceActionForDeclareSub8: 10497032 false ) 
	#(265 15 #reduceActionForDefineFunction16: 11425808 false ) 
	#(270 15 #reduceActionForModulePropertyGet22: 12018710 false ) 
	#(270 15 #reduceActionForModulePropertyGet21: 12018709 false ) 
	#(334 16 #reduceActionForForEach16: 20874256 false ) 
	#(337 16 #reduceActionForForStepNext1: 21719041 false ) 
	#(335 16 #reduceActionForForNext4: 21160964 false ) 
	#(350 9 #reduceActionForCase24: 23519256 false ) 
	#(350 9 #reduceActionForCase18: 23519250 false ) 
	#(262 16 #reduceActionForDeclareFunction6: 10834950 false ) 
	#(262 16 #reduceActionForDeclareFunction8: 10834952 false ) 
	#(261 16 #reduceActionForDeclareSub9: 10497033 false ) 
	#(261 16 #reduceActionForDeclareSub11: 10497035 false ) 
	#(270 16 #reduceActionForModulePropertyGet24: 12018712 false ) 
	#(270 16 #reduceActionForModulePropertyGet23: 12018711 false ) 
	#(337 17 #reduceActionForForStepNext5: 21719045 false ) 
	#(335 17 #reduceActionForForNext8: 21160968 false ) 
	#(319 17 #reduceActionForOpenFileClause2: 18359298 false ) 
	#(262 17 #reduceActionForDeclareFunction9: 10834953 false ) 
	#(262 17 #reduceActionForDeclareFunction11: 10834955 false ) 
	#(261 17 #reduceActionForDeclareSub12: 10497036 false ) 
	#(337 18 #reduceActionForForStepNext2: 21719042 false ) 
	#(337 18 #reduceActionForForStepNext3: 21719043 false ) 
	#(262 18 #reduceActionForDeclareFunction12: 10834956 false ) 
	#(337 19 #reduceActionForForStepNext6: 21719046 false ) 
	#(337 19 #reduceActionForForStepNext7: 21719047 false ) 
	#(319 19 #reduceActionForOpenFileClause6: 18359302 false ) 
	#(319 19 #reduceActionForOpenFileClause4: 18359300 false ) 
	#(337 20 #reduceActionForForStepNext4: 21719044 false ) 
	#(337 21 #reduceActionForForStepNext8: 21719048 false ) 
	#(319 21 #reduceActionForOpenFileClause8: 18359304 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateForBehaviourDefinition [
	^ 4
]

{ #category : #generated }
VBParser class >> startingStateForModuleStatement [
	^ 3
]

{ #category : #generated }
VBParser class >> startingStateForStatement [
	^ 2
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<<"' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '"ALIAS"' '"APPEND"' '"AS"' '"AddressOf"' '"BINARY"' '"Call"' '"DefBool"' '"DefByte"' '"DefCur"' '"DefDate"' '"DefDbl"' '"DefDec"' '"DefInt"' '"DefLng"' '"DefLngPtr"' '"DefLnglng"' '"DefObj"' '"DefSng"' '"DefStr"' '"DefVar"' '"DoEvents"' '"ERROR"' '"FOR"' '"INPUT"' '"IS"' '"IsNot"' '"LIKE"' '"Line"' '"Lock Read Write"' '"Lock Read"' '"Lock Write"' '"Mod"' '"NEW"' '"NEXT"' '"OBJECT"' '"OPEN"' '"Output"' '"PRINT"' '"RaiseEvent"' '"Random"' '"Read Write"' '"Read"' '"STRING"' '"Shared"' '"TypeOf"' '"WRITE"' '"WithEvents"' '"["' '"\"' '"^"' '"and"' '"attribute"' '"base"' '"beep"' '"begin"' '"bold"' '"boolean"' '"byref"' '"byte"' '"byval"' '"case"' '"class"' '"collection"' '"compare"' '"const"' '"currency"' '"database"' '"date"' '"decimal"' '"declare"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"else:"' '"elseif"' '"end"' '"enum"' '"eqv"' '"event"' '"exit"' '"explicit"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"implements"' '"in"' '"integer"' '"len"' '"let"' '"lib"' '"long"' '"longlong"' '"longptr"' '"loop"' '"module"' '"name"' '"not"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"select"' '"set"' '"single"' '"static"' '"step"' '"sub"' '"text"' '"then"' '"then:"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<SBIDENTIFIER>' '<DEFTYPE>' '<HASH_NUMBER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '<eol>*' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' 'literal' 'FileDescriptorLiteral' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' 'Identifier' 'KeywordIdentifier' 'UsableKeywords' 'IdentifierWords' 'HashIdentifier' 'SquareBracketIdentifier' 'SimpleIdentifier' 'LabelTag' 'header' 'Option' 'OptionBase' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'Implements' 'DefTypeLabel' 'DefType' 'ModuleStatement' 'Statement' 'Block' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )*' '(<eol> | (<whitespace>? ":" <whitespace>?))' '(<eol> | (<whitespace>? ":" <whitespace>?))+' 'OneLineBlock' '(<whitespace>? ":" <whitespace>? Statement ''statement'')' '(<whitespace>? ":" <whitespace>? Statement ''statement'')*' 'BaseType' 'SimpleType' 'Visibility' 'ComplexType' '("." UsableKeywords ''member'')' '("." UsableKeywords ''member'')+' 'Type' 'TypedThing' 'TypedAndInstantiatedThing' 'TypeSize' '(","<whitespace>? Expression ''size'')' '(","<whitespace>? Expression ''size'')*' 'AsType' 'StatementAssignment' 'ExplicitLetSet' 'Assignment' 'ExplicitAssignement' 'OtherStatements' 'Rename' 'Beep' 'DoEvents' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '("," <whitespace> Parameter ''parameter'')' '("," <whitespace> Parameter ''parameter'')*' 'Parameter' '(AsType ''type'')' '(AsType ''type'')?' '(<whitespace> "=" <whitespace> Expression ''default'')' '(<whitespace> "=" <whitespace> Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' '(AsType ''type'' TypeSize ''size''?  )' '(AsType ''type'' TypeSize ''size''?  )?' 'DefineSub' '<whitespace>?' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'ReDefineExpression' 'StaticVariable' 'Variable' 'Constant' 'ModuleProperties' 'ModuleConstants' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )+' 'ConstantList' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )+' 'VariableDefinition' 'Expression' 'ParentheseesExpression' 'Interval' 'Operation' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'LeftSide' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'Equals' 'ValueClause' 'AddressOfClause' 'NewClause' 'OpenMode' 'OpenAccess' 'Lock' 'FileClauses' 'OpenFileClause' 'PrintFileClause' '(";" <whitespace>? Expression ''value'')' '(";" <whitespace>? Expression ''value'')*' 'LineInputClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForNextOneLine' 'ForStepNext' 'If' 'IfThenEmpty' 'IfThenElseOneLine' 'IfThenElse' '(ElseIf ''elseif'')' '(ElseIf ''elseif'')*' 'Else' 'ElseIf' 'RaiseError' 'To' 'Label' 'CaseCondition' 'Case' '("," <whitespace> (CaseCondition ''expression''))' '("," <whitespace> (CaseCondition ''expression''))*' 'Select' '(Case ''case'')' '(Case ''case'')*' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'Destination' 'DestinationList' '(<whitespace>?"," <whitespace>?Destination ''label'')' '(<whitespace>?"," <whitespace>?Destination ''label'')*' 'GoToStatement' 'GoSub' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'Return' 'StateAccessBase' 'DictionaryAccess' 'MemberAccess' 'StateAccess' 'ImplicitCallExpression' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayExpression' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)*' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )*' 'ExplicitCallSelectorTypes' 'ExplicitCall' 'RaiseEvent' 'TypeOf' 'StatementCalls' 'ExpressionCalls' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBFileDescriptorLiteralNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCToken #VBHashIdentifierNode #VBSquareBracketIdentifierNode #VBSimpleIdentifierNode #VBLabelTagNode #VBHeaderNode #VBProgramNode #VBOptionBaseNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBImplementsNode #SmaCCToken #VBDefTypeNode #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBBlockNode #OrderedCollection #OrderedCollection #Object #VBSimpleTypeNode #SmaCCToken #VBComplexTypeNode #OrderedCollection #OrderedCollection #Object #VBTypedThingNode #VBAsTypeAndNewNode #VBTypeSizeNode #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitAssignementNode #SmaCCToken #VBExplicitAssignementNode #VBExplicitAssignementNode #Object #VBRenameNode #SmaCCToken #VBDoEventsNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #VBProgramNode #VBProgramNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #OrderedCollection #OrderedCollection #VBSubDefinitionNode #SmaCCToken #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBConstantNode #VBModuleMultiplePropertiesNode #VBModuleMultipleConstantsNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBConstantListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBParentheseesExpressionNode #VBIntervalNode #VBProgramNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #VBProgramNode #VBProgramNode #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBEqualsNode #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #SmaCCToken #SmaCCToken #SmaCCToken #VBProgramNode #VBOpenClauseNode #VBPrintIntoFileClauseNode #OrderedCollection #OrderedCollection #VBLineInputClauseNode #VBProgramNode #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForNextNode #VBForStepNextNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBElseIfBlockNode #OrderedCollection #VBElseIfBlockNode #VBElseIfBlockNode #VBRaiseErrorNode #VBLabelNode #VBLabelNode #VBProgramNode #VBCaseNode #OrderedCollection #OrderedCollection #VBSelectNode #VBCaseNode #OrderedCollection #VBProgramNode #VBResumeLabelNode #VBResumeNextNode #VBResumeEmptyNode #VBProgramNode #VBProgramNode #VBDestinationListNode #OrderedCollection #OrderedCollection #VBGoToStatementNode #VBGoSubNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBProgramNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBReturnNode #VBProgramNode #VBDictionaryAccessNode #VBMemberAccessNode #VBProgramNode #VBProgramNode #VBImplicitParenthesesLessCallNode #VBProgramNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBTypeOfNode #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 0 21 0 176 0 25 0 177 0 6 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 1 45 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 1 45 0 201 1 45 0 203 1 45 0 212 1 49 0 223 1 45 0 234 1 57 0 235 1 45 0 236 1 45 0 237 1 45 0 238 1 45 0 239 1 45 0 240 1 45 0 241 1 45 0 242 1 45 0 243 1 45 0 247 1 45 0 248 1 45 1 18 1 45 1 19 1 45 1 20 1 45 1 21 1 45 1 22 1 45 1 23 1 125 1 25 1 45 1 26 1 45 1 27 1 45 1 28 1 45 1 29 1 45 1 30 1 45 1 34 1 45 1 37 1 157 1 56 1 157 1 57 1 157 1 58 1 45 1 62 1 45 1 63 1 45 1 64 1 45 1 67 1 45 1 68 1 45 1 69 1 45 1 70 1 45 1 71 1 45 1 72 1 45 1 73 1 45 1 74 1 45 1 75 1 45 1 76 1 45 1 77 1 45 1 78 1 45 1 79 1 45 1 80 1 45 1 81 1 45 1 82 1 45 1 83 1 45 1 84 1 45 1 85 1 45 1 90 1 45 1 91 2 9 1 92 1 45 1 97 1 45 1 100 1 45 1 101 1 45 1 102 1 45 1 103 1 45 1 104 1 45 1 109 1 45 1 110 1 45 1 111 1 45 1 112 1 45 1 113 1 45 1 114 1 45 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 1 45 1 129 2 117 1 130 2 121 1 131 1 45 1 139 1 45 1 140 1 45 1 142] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 3 29 0 200 3 29 0 201 3 29 0 203 3 29 0 204 3 29 0 208 3 21 0 209 3 29 0 210 3 29 0 211 3 33 0 223 3 29 0 242 3 29 0 243 3 29 0 247 3 29 0 248 3 29 1 5 3 29 1 6 3 29 1 7 3 53 1 8 3 29 1 9 3 29 1 12 3 29 1 14 3 29 1 15 3 29 1 16 3 29 1 17 3 29 1 18 3 29 1 19 3 29 1 20 3 29 1 21 3 29 1 22 3 29 1 23 1 125 1 25 3 29 1 26 3 29 1 27 3 29 1 28 3 29 1 29 3 29 1 30 3 29 1 34 3 29 1 37] 
#[1 3 89 0 105 2 209 0 106 3 89 0 108 3 89 0 131 2 229 0 132 3 89 0 133 3 53 0 140 2 241 0 142 3 89 0 223 3 53 1 8 3 93 1 9 3 93 1 12 3 93 1 14 3 93 1 15 3 93 1 16 3 93 1 17] 
#[0 0 0 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 55 0 83 0 56 0 87 0 58 0 91 0 59 0 95 0 64 0 99 0 67 0 103 0 73 0 107 0 76 0 111 0 77 0 115 0 84 0 119 0 86 0 123 0 88 0 127 0 89 0 131 0 91 0 135 0 92 0 139 0 100 0 143 0 102 0 147 0 105 0 151 0 106 0 155 0 107 0 159 0 108 0 163 0 112 0 167 0 115 0 171 0 116 0 175 0 123 0 179 0 126 0 183 0 131 0 187 0 132 0 191 0 133 0 195 0 134 0 199 0 138 0 203 0 140 0 207 0 142 0 211 0 143 0 215 0 147 0 219 0 150 0 223 0 167 0 227 0 168 0 231 0 171 0 235 0 172 0 239 0 173 3 109 0 179 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 3 113 0 199 3 117 0 200 3 117 0 201 3 117 0 203 3 117 0 204 3 117 0 208 3 21 0 209 3 117 0 210 3 117 0 211 3 33 0 223 3 117 0 242 3 117 0 243 3 117 0 247 3 117 0 248 3 117 1 5 3 117 1 6 3 117 1 7 3 53 1 8 3 117 1 9 3 117 1 12 3 117 1 14 3 117 1 15 3 117 1 16 3 117 1 17 3 117 1 18 3 117 1 19 3 117 1 20 3 117 1 21 3 117 1 22 3 117 1 23 1 125 1 25 3 117 1 26 3 117 1 27 3 117 1 28 3 117 1 29 3 117 1 30 3 117 1 34 3 117 1 37 0 10 1 144] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 3 141 0 192 3 145 0 193 3 145 0 194 3 141 0 196] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 3 157 0 192 3 145 0 193 3 145 0 194 3 157 0 196] 
#[0 0 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 18 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 161 0 172] 
#[0 3 165 0 172] 
#[0 0 22 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 26 0 1 0 26 0 3 0 26 0 5 0 26 0 9 0 26 0 11 0 26 0 55 0 26 0 82 0 26 0 96 0 26 0 98 0 26 0 99 0 26 0 121 0 26 0 151 0 26 0 162 0 243 0 172 0 26 0 173 0 26 1 144] 
#[0 3 173 0 172] 
#[0 0 30 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 177 0 172] 
#[0 3 181 0 172] 
#[0 0 34 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 38 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 185 0 172] 
#[0 0 42 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 46 0 1 0 46 0 3 0 46 0 5 0 46 0 9 0 46 0 11 0 46 0 55 0 46 0 82 0 46 0 96 0 46 0 98 0 46 0 99 0 46 0 121 0 46 0 151 0 46 0 162 0 247 0 172 0 46 0 173 0 46 1 144] 
#[0 3 193 0 172] 
#[0 0 50 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 54 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 197 0 172] 
#[0 0 58 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 62 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 66 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 201 0 172] 
#[0 0 70 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 74 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 205 0 172] 
#[1 3 209 0 121 3 213 0 162 3 217 0 172 3 221 0 173 3 225 0 182 3 229 0 207 3 233 0 213] 
#[0 3 237 0 172] 
#[0 3 241 0 172] 
#[0 3 245 0 172] 
#[0 0 78 0 172] 
#[0 0 82 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 86 0 172] 
#[0 3 249 0 172] 
#[0 3 253 0 172] 
#[0 4 1 0 172] 
#[0 0 90 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 94 0 1 0 94 0 3 0 94 0 5 0 94 0 9 0 94 0 11 0 94 0 55 0 94 0 82 0 94 0 96 0 94 0 98 0 94 0 99 0 94 0 121 0 94 0 151 0 94 0 162 0 251 0 172 0 94 0 173 0 94 1 144] 
#[1 0 102 0 1 0 102 0 3 0 102 0 5 0 102 0 9 0 102 0 11 0 102 0 55 0 102 0 82 0 102 0 96 0 102 0 98 0 102 0 99 0 102 0 121 0 102 0 151 0 102 0 162 0 255 0 172 0 102 0 173 0 102 1 144] 
#[0 4 9 0 172] 
#[0 4 13 0 172] 
#[0 0 106 0 172] 
#[0 0 110 0 172] 
#[0 4 17 0 172] 
#[1 0 114 0 11 0 114 0 55 0 114 0 82 0 114 0 96 0 114 0 98 0 114 0 99 0 114 0 121 0 114 0 151 0 114 0 162 1 3 0 172 0 114 0 173 0 114 1 144] 
#[0 0 118 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 25 0 172] 
#[1 0 122 0 1 0 122 0 3 0 122 0 5 0 122 0 9 0 122 0 11 0 122 0 55 0 122 0 82 0 122 0 96 0 122 0 98 0 122 0 99 0 122 0 121 0 122 0 151 0 122 0 162 1 7 0 172 0 122 0 173 0 122 1 144] 
#[0 4 29 0 172] 
#[0 0 130 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 33 0 172] 
#[0 0 134 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 37 0 172] 
#[0 4 41 0 172] 
#[1 0 138 0 1 0 138 0 3 0 138 0 5 0 138 0 9 4 45 0 11 0 138 0 55 0 138 0 82 0 138 0 96 0 138 0 98 0 138 0 99 0 138 0 121 0 138 0 151 0 138 0 162 0 138 0 172 0 138 0 173 0 138 1 144] 
#[0 0 142 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 146 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 49 0 126] 
#[1 0 150 0 1 0 154 0 3 4 53 0 5 0 150 0 9 0 158 0 11 0 158 0 55 0 158 0 82 0 158 0 96 0 158 0 98 0 158 0 99 0 158 0 121 0 158 0 151 0 158 0 162 1 11 0 172 0 158 0 173 4 69 0 228 4 69 0 229 4 69 0 233 0 158 1 144] 
#[0 0 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 182 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 186 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 190 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 73 0 172] 
#[0 0 194 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 77 0 172] 
#[0 0 198 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 202 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 206 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 210 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 214 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 218 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 222 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 0 226 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 230 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 234 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 238 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 242 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 246 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 250 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 254 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 2 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 81 0 7 4 85 0 172 4 89 1 35 4 93 1 36] 
#[0 1 6 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 14 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 18 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 26 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 30 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 1 34 0 1 1 15 0 3 1 34 0 4 1 34 0 5 1 34 0 7 1 34 0 9 1 34 0 11 1 34 0 13 1 34 0 22 1 34 0 23 1 34 0 28 1 34 0 29 1 34 0 30 1 34 0 31 1 34 0 32 1 34 0 33 1 34 0 34 1 34 0 35 1 34 0 36 1 34 0 37 1 34 0 38 1 34 0 39 1 34 0 40 1 34 0 41 1 34 0 43 1 34 0 45 1 34 0 55 1 34 0 56 1 34 0 58 1 34 0 59 1 34 0 64 1 34 0 67 1 34 0 73 1 34 0 76 1 34 0 77 1 34 0 82 1 34 0 84 1 34 0 86 1 34 0 88 1 34 0 89 1 34 0 91 1 34 0 92 1 34 0 96 1 34 0 98 1 34 0 99 1 34 0 100 1 34 0 102 1 34 0 105 1 34 0 106 1 34 0 107 1 34 0 108 1 34 0 112 1 34 0 115 1 34 0 116 1 34 0 121 1 34 0 123 1 34 0 126 1 34 0 131 1 34 0 132 1 34 0 133 1 34 0 134 1 34 0 138 1 34 0 140 1 34 0 142 1 34 0 143 1 34 0 147 1 34 0 150 1 34 0 151 1 34 0 162 1 34 0 167 1 34 0 168 1 34 0 171 1 34 0 172 1 34 0 173 1 34 1 144] 
#[0 1 42 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 50 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 54 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 58 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 62 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 66 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 70 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 74 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 78 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 82 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 86 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 90 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 94 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 98 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 102 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 106 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 110 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 114 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 118 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 122 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 126 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 130 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 134 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 138 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 142 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 19 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 154 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 158 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 162 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 166 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 170 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 174 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 178 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 182 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 186 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 190 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 194 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 198 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 202 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 23 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 214 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 218 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 222 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 226 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 230 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 1 234 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 4 97 0 1 4 101 0 9 4 105 0 172] 
#[0 1 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 242 0 1 1 242 0 3 1 242 0 9 1 246 0 11 1 246 0 55 1 246 0 82 1 246 0 96 1 246 0 98 1 246 0 99 1 246 0 121 1 246 0 151 1 246 0 162 1 27 0 172 1 246 0 173 1 246 1 144] 
#[1 1 250 0 1 1 31 0 3 1 250 0 4 1 250 0 5 1 250 0 7 1 250 0 9 1 250 0 11 1 250 0 13 1 250 0 22 1 250 0 23 1 250 0 28 1 250 0 29 1 250 0 30 1 250 0 31 1 250 0 32 1 250 0 33 1 250 0 34 1 250 0 35 1 250 0 36 1 250 0 37 1 250 0 38 1 250 0 39 1 250 0 40 1 250 0 41 1 250 0 43 1 250 0 45 1 250 0 55 1 250 0 56 1 250 0 58 1 250 0 59 1 250 0 64 1 250 0 67 1 250 0 73 1 250 0 76 1 250 0 77 1 250 0 82 1 250 0 84 1 250 0 86 1 250 0 88 1 250 0 89 1 250 0 91 1 250 0 92 1 250 0 96 1 250 0 98 1 250 0 99 1 250 0 100 1 250 0 102 1 250 0 105 1 250 0 106 1 250 0 107 1 250 0 108 1 250 0 112 1 250 0 115 1 250 0 116 1 250 0 121 1 250 0 123 1 250 0 126 1 250 0 131 1 250 0 132 1 250 0 133 1 250 0 134 1 250 0 138 1 250 0 140 1 250 0 142 1 250 0 143 1 250 0 147 1 250 0 150 1 250 0 151 1 250 0 162 1 250 0 167 1 250 0 168 1 250 0 171 1 250 0 172 1 250 0 173 1 250 1 144] 
#[1 2 2 0 11 2 2 0 55 2 2 0 82 2 2 0 96 2 2 0 98 2 2 0 99 2 2 0 121 2 2 0 151 2 2 0 162 1 35 0 172 2 2 0 173 2 2 1 144] 
#[0 2 6 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 113 0 3] 
#[1 2 10 0 1 1 39 0 3 2 10 0 4 2 10 0 5 2 10 0 7 2 10 0 9 2 10 0 11 2 10 0 13 2 10 0 22 2 10 0 23 2 10 0 28 2 10 0 29 2 10 0 30 2 10 0 31 2 10 0 32 2 10 0 33 2 10 0 34 2 10 0 35 2 10 0 36 2 10 0 37 2 10 0 38 2 10 0 39 2 10 0 40 2 10 0 41 2 10 0 43 2 10 0 45 2 10 0 55 2 10 0 56 2 10 0 58 2 10 0 59 2 10 0 64 2 10 0 67 2 10 0 73 2 10 0 76 2 10 0 77 2 10 0 82 2 10 0 84 2 10 0 86 2 10 0 88 2 10 0 89 2 10 0 91 2 10 0 92 2 10 0 96 2 10 0 98 2 10 0 99 2 10 0 100 2 10 0 102 2 10 0 105 2 10 0 106 2 10 0 107 2 10 0 108 2 10 0 112 2 10 0 115 2 10 0 116 2 10 0 121 2 10 0 123 2 10 0 126 2 10 0 131 2 10 0 132 2 10 0 133 2 10 0 134 2 10 0 138 2 10 0 140 2 10 0 142 2 10 0 143 2 10 0 147 2 10 0 150 2 10 0 151 2 10 0 162 2 10 0 167 2 10 0 168 2 10 0 171 2 10 0 172 2 10 0 173 2 10 1 144] 
#[0 2 18 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 2 22 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 2 26 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 2 30 0 172] 
#[0 2 34 0 172] 
#[0 2 38 0 172] 
#[0 2 42 0 172] 
#[0 2 46 0 172] 
#[0 2 50 0 172] 
#[0 2 54 0 172] 
#[0 2 58 0 172] 
#[0 2 62 0 172] 
#[0 2 66 0 172] 
#[0 2 70 0 172] 
#[0 2 74 0 172] 
#[0 2 78 0 172] 
#[0 2 82 0 172] 
#[0 0 26 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 1 0 6 0 9 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 43 0 6 0 45 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 4 117 0 177] 
#[0 4 121 0 172] 
#[0 4 125 0 172] 
#[0 4 129 0 172] 
#[0 0 94 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 102 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 133 0 172] 
#[0 4 137 0 172] 
#[0 0 122 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 43 0 172] 
#[0 4 141 0 172] 
#[0 0 138 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 145 0 126] 
#[1 4 53 0 5 1 47 0 172 4 69 0 228 4 69 0 229 4 69 0 233] 
#[0 2 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 102 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 106 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 153 0 172] 
#[0 2 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 157 0 172] 
#[0 2 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 161 0 172] 
#[0 2 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 86 0 172] 
#[0 4 165 0 172] 
#[0 0 0 1 144] 
#[1 0 134 0 5 1 51 0 172] 
#[1 4 145 0 126 4 173 0 150] 
#[0 2 158 0 1 0 9 0 22 0 23 0 25 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 177 0 177 4 181 0 178 0 6 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 185 0 177 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 67 0 10 0 73 0 10 0 76 0 10 0 77 0 10 0 84 0 10 0 86 0 10 0 88 0 10 0 89 0 10 0 91 0 10 0 92 0 10 0 100 0 10 0 102 0 10 0 105 0 10 0 106 0 10 0 107 0 10 0 108 0 10 0 112 0 10 0 115 0 10 0 116 0 10 0 123 0 10 0 126 0 10 0 131 0 10 0 132 0 10 0 133 0 10 0 134 0 10 0 138 0 10 0 140 0 10 0 142 0 10 0 143 0 10 0 147 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 4 189 0 179 0 10 1 144] 
#[0 2 162 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 186 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 190 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 194 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 198 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 4 193 0 191 1 17 0 194 4 193 0 195 4 193 0 196 4 193 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 4 197 0 191 1 17 0 194 4 197 0 195 4 197 0 196 4 197 0 197 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 4 205 1 126 2 105 1 127 2 117 1 130 4 209 1 131 4 213 1 138] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 5 57 1 38 5 61 1 39 5 65 1 40 5 57 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 5 57 1 47 5 97 1 49 5 101 1 51 5 57 1 53 5 57 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 5 145 0 95 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 149 0 191 1 17 0 194 5 149 0 195 5 149 0 196 5 149 0 197] 
#[0 5 153 0 45] 
#[1 5 157 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 5 161 0 56 1 17 0 58 1 17 0 59 5 165 0 64 1 17 0 67 1 17 0 77 5 245 0 78 5 245 0 80 5 177 0 84 5 245 0 87 1 17 0 88 5 185 0 89 5 245 0 90 5 245 0 94 1 17 0 107 5 245 0 114 1 17 0 115 1 17 0 116 5 245 0 118 5 245 0 119 5 245 0 120 1 17 0 123 1 17 0 138 5 245 0 139 1 17 0 143 5 217 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 221 0 191 1 17 0 194 5 221 0 195 5 221 0 196 5 221 0 197 5 245 0 221 5 229 0 222 5 245 0 224 5 237 0 225 5 241 0 226 5 245 0 227] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 5 249 1 38 5 61 1 39 5 65 1 40 5 249 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 5 249 1 47 5 97 1 49 5 101 1 51 5 249 1 53 5 249 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 253 0 191 1 17 0 194 5 253 0 195 5 253 0 196 5 253 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 1 0 191 1 17 0 194 6 1 0 195 6 1 0 196 6 1 0 197 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 6 9 1 131] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 13 0 191 1 17 0 194 6 13 0 195 6 13 0 196 6 13 0 197 6 17 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 6 21 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 6 25 1 25 6 29 1 34] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 6 41 1 24 6 45 1 31] 
#[1 2 202 0 11 2 202 0 55 2 202 0 82 2 202 0 96 2 202 0 98 2 202 0 99 2 202 0 121 2 202 0 151 2 202 0 162 1 55 0 172 2 202 0 173 2 202 1 144] 
#[1 6 53 0 2 2 206 0 3 2 206 0 4 2 206 0 5 2 206 0 7 2 206 0 11 2 206 0 13 2 206 0 22 2 206 0 23 2 206 0 28 2 206 0 29 2 206 0 30 2 206 0 31 2 206 0 32 2 206 0 33 2 206 0 34 2 206 0 35 2 206 0 36 2 206 0 37 2 206 0 38 2 206 0 39 2 206 0 40 2 206 0 41 2 206 0 43 2 206 0 45 2 206 0 55 2 206 0 56 2 206 0 58 2 206 0 59 2 206 0 64 2 206 0 67 2 206 0 73 2 206 0 76 2 206 0 77 2 206 0 82 2 206 0 84 2 206 0 86 2 206 0 88 2 206 0 89 2 206 0 91 2 206 0 92 2 206 0 96 2 206 0 98 2 206 0 99 2 206 0 100 2 206 0 102 2 206 0 105 2 206 0 106 2 206 0 107 2 206 0 108 2 206 0 112 2 206 0 115 2 206 0 116 2 206 0 121 2 206 0 123 2 206 0 126 2 206 0 131 2 206 0 132 2 206 0 133 2 206 0 134 2 206 0 138 2 206 0 140 2 206 0 142 2 206 0 143 2 206 0 147 2 206 0 150 2 206 0 151 2 206 0 162 2 206 0 167 2 206 0 168 2 206 0 171 2 206 0 172 2 206 0 173 2 206 1 144] 
#[1 6 57 0 148 6 61 0 152] 
#[0 2 210 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 82 0 84 0 86 0 88 0 89 0 92 0 93 0 96 0 98 0 99 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 121 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 6 65 0 172] 
#[1 0 29 0 1 0 33 0 9 2 214 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 59 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 6 77 0 75 1 17 0 77 2 214 0 82 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 2 214 0 96 2 214 0 98 2 214 0 99 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 2 214 0 121 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 2 214 0 151 0 245 0 152 0 249 0 153 1 63 0 162 0 253 0 167 1 1 0 168 1 5 0 171 1 67 0 172 1 71 0 173 6 73 0 182 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 6 77 0 201 6 77 0 203 6 77 0 212 6 81 0 215 1 49 0 223 6 77 0 234 1 57 0 235 6 77 0 236 6 77 0 237 6 77 0 238 6 77 0 239 6 77 0 240 6 77 0 241 6 77 0 242 6 77 0 243 6 77 0 247 6 77 0 248 6 77 1 18 6 77 1 19 6 77 1 20 6 77 1 21 6 77 1 22 6 77 1 23 1 125 1 25 6 77 1 26 6 77 1 27 6 77 1 28 6 77 1 29 6 77 1 30 6 77 1 34 6 77 1 37 1 157 1 56 1 157 1 57 1 157 1 58 6 77 1 62 6 77 1 63 6 77 1 64 6 77 1 67 6 77 1 68 6 77 1 69 6 77 1 70 6 77 1 71 6 77 1 72 6 77 1 73 6 77 1 74 6 77 1 75 6 77 1 76 6 77 1 77 6 77 1 78 6 77 1 79 6 77 1 80 6 77 1 81 6 77 1 82 6 77 1 83 6 77 1 84 6 77 1 85 6 77 1 90 6 77 1 91 2 9 1 92 6 77 1 97 6 77 1 100 6 77 1 101 6 77 1 102 6 77 1 103 6 77 1 104 6 77 1 109 6 77 1 110 6 77 1 111 6 77 1 112 6 77 1 113 6 77 1 114 6 77 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 6 77 1 129 2 117 1 130 2 121 1 131 6 77 1 139 6 77 1 140 6 77 1 142] 
#[1 6 85 0 121 3 213 0 162 6 89 0 182] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 93 0 191 1 17 0 194 6 93 0 195 6 93 0 196 6 93 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 97 0 191 1 17 0 194 6 97 0 195 6 97 0 196 6 97 0 197] 
#[1 6 101 0 44 6 105 0 93 6 109 0 106 6 113 0 132 6 117 0 142] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 133 0 182 6 133 0 191 1 17 0 194 6 133 0 195 6 133 0 196 6 133 0 197 6 133 1 43 6 133 1 105 6 137 1 106] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 133 0 182 6 133 0 191 1 17 0 194 6 133 0 195 6 133 0 196 6 133 0 197 6 133 1 43 6 133 1 105 6 141 1 106] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 145 1 38 5 61 1 39 5 65 1 40 6 145 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 145 1 47 5 97 1 49 5 101 1 51 6 145 1 53 6 145 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 149 1 38 5 61 1 39 5 65 1 40 6 149 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 149 1 47 5 97 1 49 5 101 1 51 6 149 1 53 6 149 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 6 153 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 157 1 38 5 61 1 39 5 65 1 40 6 157 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 157 1 47 5 97 1 49 5 101 1 51 6 157 1 53 6 157 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 6 161 0 74] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 6 165 0 130 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 6 169 0 191 1 17 0 194 6 169 0 195 6 169 0 196 6 169 0 197 6 173 1 24 6 177 1 31 6 181 1 38 5 61 1 39 5 65 1 40 6 181 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 181 1 47 5 97 1 49 5 101 1 51 6 181 1 53 6 181 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 6 185 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 133 0 182 6 133 0 191 1 17 0 194 6 133 0 195 6 133 0 196 6 133 0 197 6 133 1 43 6 133 1 105 6 189 1 106] 
#[0 6 193 0 82] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 6 197 1 24 6 201 1 31] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 205 0 191 1 17 0 194 6 205 0 195 6 205 0 196 6 205 0 197] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 209 1 38 5 61 1 39 5 65 1 40 6 209 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 209 1 47 5 97 1 49 5 101 1 51 6 209 1 53 6 209 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 213 1 38 5 61 1 39 5 65 1 40 6 213 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 213 1 47 5 97 1 49 5 101 1 51 6 213 1 53 6 213 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 2 218 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 6 217 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 221 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 225 1 38 5 61 1 39 5 65 1 40 6 225 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 6 225 1 47 5 97 1 49 5 101 1 51 6 225 1 53 6 225 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 6 229 0 5 6 233 0 12 6 237 0 18 6 241 0 24] 
#[0 2 222 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 226 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 245 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 6 249 0 86 1 17 0 88 1 17 0 89 6 253 0 100 7 1 0 102 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 7 5 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 7 9 1 24 7 13 1 31] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 17 0 191 1 17 0 194 7 17 0 195 7 17 0 196 7 17 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 21 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 25 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 29 1 25] 
#[0 7 33 0 7] 
#[0 2 230 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 81 0 7 2 234 0 11 2 234 0 22 2 234 0 23 2 234 0 28 2 234 0 29 2 234 0 30 2 234 0 31 2 234 0 32 2 234 0 33 2 234 0 34 2 234 0 35 2 234 0 36 2 234 0 37 2 234 0 38 2 234 0 39 2 234 0 40 2 234 0 41 2 234 0 43 2 234 0 45 2 234 0 55 2 234 0 56 2 234 0 58 2 234 0 59 2 234 0 64 2 234 0 67 2 234 0 73 2 234 0 76 2 234 0 77 2 234 0 82 2 234 0 84 2 234 0 86 2 234 0 88 2 234 0 89 2 234 0 91 2 234 0 92 2 234 0 96 2 234 0 98 2 234 0 99 2 234 0 100 2 234 0 102 2 234 0 105 2 234 0 106 2 234 0 107 2 234 0 108 2 234 0 112 2 234 0 115 2 234 0 116 2 234 0 121 2 234 0 123 2 234 0 126 2 234 0 131 2 234 0 132 2 234 0 133 2 234 0 134 2 234 0 138 2 234 0 140 2 234 0 142 2 234 0 143 2 234 0 147 2 234 0 150 2 234 0 151 2 234 0 162 2 234 0 167 2 234 0 168 2 234 0 171 1 75 0 172 2 234 0 173 7 37 1 35 2 234 1 144] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 7 41 0 192 3 145 0 193 3 145 0 194 7 41 0 196] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 7 45 0 192 3 145 0 193 3 145 0 194 7 45 0 196] 
#[1 7 49 0 12 7 53 0 18] 
#[1 2 238 0 1 2 238 0 3 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 11 2 238 0 13 2 238 0 22 2 238 0 23 2 238 0 25 2 238 0 43 2 238 0 45 2 238 0 54 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 67 2 238 0 77 2 238 0 79 2 238 0 81 2 238 0 82 2 238 0 84 2 238 0 88 2 238 0 89 2 238 0 96 2 238 0 98 2 238 0 99 2 238 0 107 2 238 0 115 2 238 0 116 2 238 0 121 2 238 0 123 2 238 0 124 2 238 0 129 2 238 0 138 2 238 0 143 2 238 0 150 2 238 0 151 2 238 0 155 2 238 0 160 2 238 0 161 2 238 0 162 2 238 0 163 2 238 0 164 2 238 0 165 2 238 0 166 2 238 0 167 2 238 0 168 2 238 0 170 2 238 0 171 2 238 0 172 2 238 0 173 7 57 1 133 7 61 1 135 2 238 1 144] 
#[1 2 238 0 1 2 238 0 3 2 238 0 4 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 13 2 238 0 22 2 238 0 23 2 238 0 25 2 238 0 43 2 238 0 45 2 238 0 54 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 67 2 238 0 77 2 238 0 79 2 238 0 81 2 238 0 84 2 238 0 88 2 238 0 89 2 238 0 107 2 238 0 115 2 238 0 116 2 238 0 123 2 238 0 124 2 238 0 129 2 238 0 138 2 238 0 143 2 238 0 150 2 238 0 155 2 238 0 160 2 238 0 161 2 238 0 162 2 238 0 163 2 238 0 164 2 238 0 165 2 238 0 166 2 238 0 167 2 238 0 168 2 238 0 170 2 238 0 171 1 79 0 172 7 69 1 133 7 61 1 135] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 6 13 0 191 1 17 0 194 6 13 0 195 6 13 0 196 6 13 0 197 7 73 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 6 21 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 7 77 0 106 7 81 0 142] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 85 0 191 1 17 0 194 7 85 0 195 7 85 0 196 7 85 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 89 0 191 1 17 0 194 7 89 0 195 7 89 0 196 7 89 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 93 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 6 161 0 74 7 97 0 85 7 101 0 104 7 105 0 131 3 213 0 162 7 109 0 182] 
#[1 7 113 0 107 7 117 0 116 7 121 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 125 0 191 1 17 0 194 7 125 0 195 7 125 0 196 7 125 0 197] 
#[0 7 129 0 172] 
#[1 6 229 0 5 7 133 0 18 6 241 0 24] 
#[0 7 137 0 169] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 6 249 0 86 1 17 0 88 1 17 0 89 7 141 0 91 6 253 0 100 7 1 0 102 7 145 0 106 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 7 149 0 132 1 17 0 138 7 157 0 140 7 153 0 142 1 17 0 143 7 5 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 7 157 1 8 7 9 1 24 7 13 1 31] 
#[1 7 161 0 106 7 165 0 132 7 169 0 142] 
#[1 7 145 0 106 7 149 0 132 7 157 0 140 7 153 0 142 7 157 1 8] 
#[1 4 249 0 163 7 173 0 185] 
#[0 7 177 0 172] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 181 0 200 7 181 0 201 7 181 0 203 7 181 0 204 7 181 0 208 3 21 0 209 7 181 0 210 7 181 0 211 3 33 0 223 7 181 0 242 7 181 0 243 7 181 0 247 7 181 0 248 7 181 1 5 7 181 1 6 7 181 1 7 3 53 1 8 7 181 1 9 7 181 1 12 7 181 1 14 7 181 1 15 7 181 1 16 7 181 1 17 7 181 1 18 7 181 1 19 7 181 1 20 7 181 1 21 7 181 1 22 7 181 1 23 1 125 1 25 7 181 1 26 7 181 1 27 7 181 1 28 7 181 1 29 7 181 1 30 7 181 1 34 7 181 1 37 2 242 1 144] 
#[0 2 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 55 0 83 0 56 0 87 0 58 0 91 0 59 0 95 0 64 0 99 0 67 0 103 0 73 0 107 0 76 0 111 0 77 0 115 0 84 0 119 0 86 0 123 0 88 0 127 0 89 0 131 0 91 0 135 0 92 0 139 0 100 0 143 0 102 0 147 0 105 0 151 0 106 0 155 0 107 0 159 0 108 0 163 0 112 0 167 0 115 0 171 0 116 0 175 0 123 0 179 0 126 0 183 0 131 0 187 0 132 0 191 0 133 0 195 0 134 0 199 0 138 0 203 0 140 0 207 0 142 0 211 0 143 0 215 0 147 1 83 0 150 0 223 0 167 0 227 0 168 0 231 0 171 1 87 0 172 0 239 0 173 7 185 0 179 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 189 0 200 7 189 0 201 7 189 0 203 7 189 0 204 7 189 0 208 3 21 0 209 7 189 0 210 7 189 0 211 3 33 0 223 7 189 0 242 7 189 0 243 7 189 0 247 7 189 0 248 7 189 1 5 7 189 1 6 7 189 1 7 3 53 1 8 7 189 1 9 7 189 1 12 7 189 1 14 7 189 1 15 7 189 1 16 7 189 1 17 7 189 1 18 7 189 1 19 7 189 1 20 7 189 1 21 7 189 1 22 7 189 1 23 1 125 1 25 7 189 1 26 7 189 1 27 7 189 1 28 7 189 1 29 7 189 1 30 7 189 1 34 7 189 1 37 0 10 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 7 193 0 177 4 181 0 178 0 6 1 144] 
#[0 2 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 2 254 0 11 2 254 0 55 2 254 0 82 2 254 0 96 2 254 0 98 2 254 0 99 2 254 0 121 2 254 0 151 2 254 0 162 2 254 0 172 2 254 0 173 2 254 1 144] 
#[1 4 97 0 1 4 101 0 9] 
#[1 1 242 0 1 1 242 0 3 1 242 0 9 3 2 0 11 3 2 0 55 3 2 0 82 3 2 0 96 3 2 0 98 3 2 0 99 3 2 0 121 3 2 0 151 3 2 0 162 3 2 0 172 3 2 0 173 3 2 1 144] 
#[1 2 10 0 1 2 14 0 3 2 10 0 9 3 6 0 11 3 6 0 55 3 6 0 82 3 6 0 96 3 6 0 98 3 6 0 99 3 6 0 121 3 6 0 151 3 6 0 162 3 6 0 172 3 6 0 173 3 6 1 144] 
#[0 3 10 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 7 197 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 7 201 1 38 5 61 1 39 5 65 1 40 7 201 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 7 201 1 47 5 97 1 49 5 101 1 51 7 201 1 53 7 201 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 7 205 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 4 249 0 163 1 17 0 167 1 1 0 168 1 5 0 171 7 209 0 182 7 213 0 185 7 89 0 191 1 17 0 194 7 89 0 195 7 89 0 196 7 89 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 217 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 7 221 0 172] 
#[0 7 225 0 172] 
#[1 7 229 0 159 7 233 0 190] 
#[0 3 14 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 18 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 22 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 83 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 26 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 30 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 34 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 38 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 91 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 50 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 54 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 58 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 62 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 66 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 70 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 74 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 78 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 82 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 150 0 1 1 95 0 3 1 99 0 4 1 99 0 5 1 99 0 7 0 150 0 9 1 99 0 11 1 99 0 13 1 99 0 22 1 99 0 23 1 99 0 28 1 99 0 29 1 99 0 30 1 99 0 31 1 99 0 32 1 99 0 33 1 99 0 34 1 99 0 35 1 99 0 36 1 99 0 37 1 99 0 38 1 99 0 39 1 99 0 40 1 99 0 41 1 99 0 43 1 99 0 45 1 99 0 55 1 99 0 56 1 99 0 58 1 99 0 59 1 99 0 64 1 99 0 67 1 99 0 73 1 99 0 76 1 99 0 77 1 99 0 82 1 99 0 84 1 99 0 86 1 99 0 88 1 99 0 89 1 99 0 91 1 99 0 92 1 99 0 96 1 99 0 98 1 99 0 99 1 99 0 100 1 99 0 102 1 99 0 105 1 99 0 106 1 99 0 107 1 99 0 108 1 99 0 112 1 99 0 115 1 99 0 116 1 99 0 121 1 99 0 123 1 99 0 126 1 99 0 131 1 99 0 132 1 99 0 133 1 99 0 134 1 99 0 138 1 99 0 140 1 99 0 142 1 99 0 143 1 99 0 147 1 99 0 150 1 99 0 151 1 99 0 162 1 99 0 167 1 99 0 168 1 99 0 171 1 103 0 172 1 99 0 173 1 99 1 144] 
#[1 3 94 0 11 3 94 0 55 3 94 0 82 3 94 0 96 3 94 0 98 3 94 0 99 3 94 0 121 3 94 0 151 3 94 0 162 1 107 0 172 3 94 0 173 3 94 1 144] 
#[0 1 111 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 115 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 114 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 119 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 126 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 130 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 134 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 245 0 172] 
#[0 3 138 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 142 0 3 3 142 0 4 3 142 0 5 3 142 0 7 3 142 0 11 3 142 0 13 3 142 0 22 3 142 0 23 3 142 0 28 3 142 0 29 3 142 0 30 3 142 0 31 3 142 0 32 3 142 0 33 3 142 0 34 3 142 0 35 3 142 0 36 3 142 0 37 3 142 0 38 3 142 0 39 3 142 0 40 3 142 0 41 3 142 0 43 3 142 0 45 3 142 0 55 3 142 0 56 3 142 0 58 3 142 0 59 3 142 0 64 3 142 0 67 3 142 0 73 3 142 0 76 3 142 0 77 3 142 0 82 3 142 0 84 3 142 0 86 3 142 0 88 3 142 0 89 3 142 0 91 3 142 0 92 3 142 0 96 3 142 0 98 3 142 0 99 3 142 0 100 3 142 0 102 3 142 0 105 3 142 0 106 3 142 0 107 3 142 0 108 3 142 0 112 3 142 0 115 3 142 0 116 3 142 0 121 3 142 0 123 3 142 0 126 3 142 0 131 3 142 0 132 3 142 0 133 3 142 0 134 3 142 0 138 3 142 0 140 3 142 0 142 3 142 0 143 3 142 0 147 3 142 0 150 3 142 0 151 3 142 0 162 3 142 0 167 3 142 0 168 3 142 0 171 1 123 0 172 3 142 0 173 3 142 1 144] 
#[1 3 146 0 3 3 146 0 4 3 146 0 5 3 146 0 7 3 146 0 11 3 146 0 13 3 146 0 22 3 146 0 23 3 146 0 28 3 146 0 29 3 146 0 30 3 146 0 31 3 146 0 32 3 146 0 33 3 146 0 34 3 146 0 35 3 146 0 36 3 146 0 37 3 146 0 38 3 146 0 39 3 146 0 40 3 146 0 41 3 146 0 43 3 146 0 45 3 146 0 55 3 146 0 56 3 146 0 58 3 146 0 59 3 146 0 64 3 146 0 67 3 146 0 73 3 146 0 76 3 146 0 77 3 146 0 82 3 146 0 84 3 146 0 86 3 146 0 88 3 146 0 89 3 146 0 91 3 146 0 92 3 146 0 96 3 146 0 98 3 146 0 99 3 146 0 100 3 146 0 102 3 146 0 105 3 146 0 106 3 146 0 107 3 146 0 108 3 146 0 112 3 146 0 115 3 146 0 116 3 146 0 121 3 146 0 123 3 146 0 126 3 146 0 131 3 146 0 132 3 146 0 133 3 146 0 134 3 146 0 138 3 146 0 140 3 146 0 142 3 146 0 143 3 146 0 147 3 146 0 150 3 146 0 151 3 146 0 162 3 146 0 167 3 146 0 168 3 146 0 171 1 127 0 172 3 146 0 173 3 146 1 144] 
#[0 3 150 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 158 0 3 3 158 0 4 3 158 0 5 3 158 0 7 3 158 0 11 3 158 0 13 3 158 0 22 3 158 0 23 3 158 0 28 3 158 0 29 3 158 0 30 3 158 0 31 3 158 0 32 3 158 0 33 3 158 0 34 3 158 0 35 3 158 0 36 3 158 0 37 3 158 0 38 3 158 0 39 3 158 0 40 3 158 0 41 3 158 0 43 3 158 0 45 3 158 0 55 3 158 0 56 3 158 0 58 3 158 0 59 3 158 0 64 3 158 0 67 3 158 0 73 3 158 0 76 3 158 0 77 3 158 0 82 3 158 0 84 3 158 0 86 3 158 0 88 3 158 0 89 3 158 0 91 3 158 0 92 3 158 0 96 3 158 0 98 3 158 0 99 3 158 0 100 3 158 0 102 3 158 0 105 3 158 0 106 3 158 0 107 3 158 0 108 3 158 0 112 3 158 0 115 3 158 0 116 3 158 0 121 3 158 0 123 3 158 0 126 3 158 0 131 3 158 0 132 3 158 0 133 3 158 0 134 3 158 0 138 3 158 0 140 3 158 0 142 3 158 0 143 3 158 0 147 3 158 0 150 3 158 0 151 3 158 0 162 3 158 0 167 3 158 0 168 3 158 0 171 1 131 0 172 3 158 0 173 3 158 1 144] 
#[1 1 34 0 1 1 135 0 3 1 139 0 4 1 139 0 5 1 139 0 7 1 34 0 9 1 139 0 11 1 139 0 13 1 139 0 22 1 139 0 23 1 139 0 28 1 139 0 29 1 139 0 30 1 139 0 31 1 139 0 32 1 139 0 33 1 139 0 34 1 139 0 35 1 139 0 36 1 139 0 37 1 139 0 38 1 139 0 39 1 139 0 40 1 139 0 41 1 139 0 43 1 139 0 45 1 139 0 55 1 139 0 56 1 139 0 58 1 139 0 59 1 139 0 64 1 139 0 67 1 139 0 73 1 139 0 76 1 139 0 77 1 139 0 82 1 139 0 84 1 139 0 86 1 139 0 88 1 139 0 89 1 139 0 91 1 139 0 92 1 139 0 96 1 139 0 98 1 139 0 99 1 139 0 100 1 139 0 102 1 139 0 105 1 139 0 106 1 139 0 107 1 139 0 108 1 139 0 112 1 139 0 115 1 139 0 116 1 139 0 121 1 139 0 123 1 139 0 126 1 139 0 131 1 139 0 132 1 139 0 133 1 139 0 134 1 139 0 138 1 139 0 140 1 139 0 142 1 139 0 143 1 139 0 147 1 139 0 150 1 139 0 151 1 139 0 162 1 139 0 167 1 139 0 168 1 139 0 171 1 139 0 172 1 139 0 173 1 139 1 144] 
#[1 4 97 0 1 3 170 0 3 3 170 0 4 3 170 0 5 3 170 0 7 4 101 0 9 3 170 0 11 3 170 0 13 3 170 0 22 3 170 0 23 3 170 0 28 3 170 0 29 3 170 0 30 3 170 0 31 3 170 0 32 3 170 0 33 3 170 0 34 3 170 0 35 3 170 0 36 3 170 0 37 3 170 0 38 3 170 0 39 3 170 0 40 3 170 0 41 3 170 0 43 3 170 0 45 3 170 0 55 3 170 0 56 3 170 0 58 3 170 0 59 3 170 0 64 3 170 0 67 3 170 0 73 3 170 0 76 3 170 0 77 3 170 0 82 3 170 0 84 3 170 0 86 3 170 0 88 3 170 0 89 3 170 0 91 3 170 0 92 3 170 0 96 3 170 0 98 3 170 0 99 3 170 0 100 3 170 0 102 3 170 0 105 3 170 0 106 3 170 0 107 3 170 0 108 3 170 0 112 3 170 0 115 3 170 0 116 3 170 0 121 3 170 0 123 3 170 0 126 3 170 0 131 3 170 0 132 3 170 0 133 3 170 0 134 3 170 0 138 3 170 0 140 3 170 0 142 3 170 0 143 3 170 0 147 3 170 0 150 3 170 0 151 3 170 0 162 3 170 0 167 3 170 0 168 3 170 0 171 3 170 0 172 3 170 0 173 3 170 1 144] 
#[1 1 242 0 1 1 242 0 3 1 242 0 4 1 242 0 5 1 242 0 7 1 242 0 9 1 242 0 11 1 242 0 13 1 242 0 22 1 242 0 23 1 242 0 28 1 242 0 29 1 242 0 30 1 242 0 31 1 242 0 32 1 242 0 33 1 242 0 34 1 242 0 35 1 242 0 36 1 242 0 37 1 242 0 38 1 242 0 39 1 242 0 40 1 242 0 41 1 242 0 43 1 242 0 45 1 242 0 55 1 242 0 56 1 242 0 58 1 242 0 59 1 242 0 64 1 242 0 67 1 242 0 73 1 242 0 76 1 242 0 77 1 242 0 82 1 242 0 84 1 242 0 86 1 242 0 88 1 242 0 89 1 242 0 91 1 242 0 92 1 242 0 96 1 242 0 98 1 242 0 99 1 242 0 100 1 242 0 102 1 242 0 105 1 242 0 106 1 242 0 107 1 242 0 108 1 242 0 112 1 242 0 115 1 242 0 116 1 242 0 121 1 242 0 123 1 242 0 126 1 242 0 131 1 242 0 132 1 242 0 133 1 242 0 134 1 242 0 138 1 242 0 140 1 242 0 142 1 242 0 143 1 242 0 147 1 242 0 150 1 242 0 151 1 242 0 162 1 242 0 167 1 242 0 168 1 242 0 171 1 143 0 172 1 242 0 173 1 242 1 144] 
#[1 1 250 0 1 1 147 0 3 1 151 0 4 1 151 0 5 1 151 0 7 1 250 0 9 1 151 0 11 1 151 0 13 1 151 0 22 1 151 0 23 1 151 0 28 1 151 0 29 1 151 0 30 1 151 0 31 1 151 0 32 1 151 0 33 1 151 0 34 1 151 0 35 1 151 0 36 1 151 0 37 1 151 0 38 1 151 0 39 1 151 0 40 1 151 0 41 1 151 0 43 1 151 0 45 1 151 0 55 1 151 0 56 1 151 0 58 1 151 0 59 1 151 0 64 1 151 0 67 1 151 0 73 1 151 0 76 1 151 0 77 1 151 0 82 1 151 0 84 1 151 0 86 1 151 0 88 1 151 0 89 1 151 0 91 1 151 0 92 1 151 0 96 1 151 0 98 1 151 0 99 1 151 0 100 1 151 0 102 1 151 0 105 1 151 0 106 1 151 0 107 1 151 0 108 1 151 0 112 1 151 0 115 1 151 0 116 1 151 0 121 1 151 0 123 1 151 0 126 1 151 0 131 1 151 0 132 1 151 0 133 1 151 0 134 1 151 0 138 1 151 0 140 1 151 0 142 1 151 0 143 1 151 0 147 1 151 0 150 1 151 0 151 1 151 0 162 1 151 0 167 1 151 0 168 1 151 0 171 1 151 0 172 1 151 0 173 1 151 1 144] 
#[1 2 10 0 1 1 155 0 3 1 159 0 4 1 159 0 5 1 159 0 7 2 10 0 9 1 159 0 11 1 159 0 13 1 159 0 22 1 159 0 23 1 159 0 28 1 159 0 29 1 159 0 30 1 159 0 31 1 159 0 32 1 159 0 33 1 159 0 34 1 159 0 35 1 159 0 36 1 159 0 37 1 159 0 38 1 159 0 39 1 159 0 40 1 159 0 41 1 159 0 43 1 159 0 45 1 159 0 55 1 159 0 56 1 159 0 58 1 159 0 59 1 159 0 64 1 159 0 67 1 159 0 73 1 159 0 76 1 159 0 77 1 159 0 82 1 159 0 84 1 159 0 86 1 159 0 88 1 159 0 89 1 159 0 91 1 159 0 92 1 159 0 96 1 159 0 98 1 159 0 99 1 159 0 100 1 159 0 102 1 159 0 105 1 159 0 106 1 159 0 107 1 159 0 108 1 159 0 112 1 159 0 115 1 159 0 116 1 159 0 121 1 159 0 123 1 159 0 126 1 159 0 131 1 159 0 132 1 159 0 133 1 159 0 134 1 159 0 138 1 159 0 140 1 159 0 142 1 159 0 143 1 159 0 147 1 159 0 150 1 159 0 151 1 159 0 162 1 159 0 167 1 159 0 168 1 159 0 171 1 159 0 172 1 159 0 173 1 159 1 144] 
#[0 3 182 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 163 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 9 0 172] 
#[0 8 13 0 172] 
#[0 8 17 0 172] 
#[0 8 21 0 22 0 23 0 43 0 45 0 55 0 56 0 57 0 58 0 59 0 64 0 67 0 77 0 82 0 84 0 88 0 89 0 96 0 107 0 115 0 116 0 123 0 137 0 138 0 143 0 147 0 150 0 167 0 193 0 194] 
#[0 1 167 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 171 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 202 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 206 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 175 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 214 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 179 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 222 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 226 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 230 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 234 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 246 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 254 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 2 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 6 0 1 4 6 0 3 4 6 0 4 4 6 0 5 4 6 0 7 1 183 0 9 4 6 0 11 4 6 0 13 4 6 0 22 4 6 0 23 4 6 0 28 4 6 0 29 4 6 0 30 4 6 0 31 4 6 0 32 4 6 0 33 4 6 0 34 4 6 0 35 4 6 0 36 4 6 0 37 4 6 0 38 4 6 0 39 4 6 0 40 4 6 0 41 4 6 0 43 4 6 0 45 4 6 0 55 4 6 0 56 4 6 0 58 4 6 0 59 4 6 0 64 4 6 0 67 4 6 0 73 4 6 0 76 4 6 0 77 4 6 0 82 4 6 0 84 4 6 0 86 4 6 0 88 4 6 0 89 4 6 0 91 4 6 0 92 4 6 0 96 4 6 0 98 4 6 0 99 4 6 0 100 4 6 0 102 4 6 0 105 4 6 0 106 4 6 0 107 4 6 0 108 4 6 0 112 4 6 0 115 4 6 0 116 4 6 0 121 4 6 0 123 4 6 0 126 4 6 0 131 4 6 0 132 4 6 0 133 4 6 0 134 4 6 0 138 4 6 0 140 4 6 0 142 4 6 0 143 4 6 0 147 4 6 0 150 4 6 0 151 4 6 0 162 4 6 0 167 4 6 0 168 4 6 0 171 4 6 0 172 4 6 0 173 5 237 0 225 8 25 0 226 4 6 1 144] 
#[0 4 10 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 18 0 1 4 18 0 3 4 18 0 4 4 18 0 5 4 18 0 7 1 187 0 9 4 18 0 11 4 18 0 13 4 18 0 22 4 18 0 23 4 18 0 28 4 18 0 29 4 18 0 30 4 18 0 31 4 18 0 32 4 18 0 33 4 18 0 34 4 18 0 35 4 18 0 36 4 18 0 37 4 18 0 38 4 18 0 39 4 18 0 40 4 18 0 41 4 18 0 43 4 18 0 45 4 18 0 55 4 18 0 56 4 18 0 58 4 18 0 59 4 18 0 64 4 18 0 67 4 18 0 73 4 18 0 76 4 18 0 77 4 18 0 82 4 18 0 84 4 18 0 86 4 18 0 88 4 18 0 89 4 18 0 91 4 18 0 92 4 18 0 96 4 18 0 98 4 18 0 99 4 18 0 100 4 18 0 102 4 18 0 105 4 18 0 106 4 18 0 107 4 18 0 108 4 18 0 112 4 18 0 115 4 18 0 116 4 18 0 121 4 18 0 123 4 18 0 126 4 18 0 131 4 18 0 132 4 18 0 133 4 18 0 134 4 18 0 138 4 18 0 140 4 18 0 142 4 18 0 143 4 18 0 147 4 18 0 150 4 18 0 151 4 18 0 162 4 18 0 167 4 18 0 168 4 18 0 171 4 18 0 172 4 18 0 173 8 29 0 225 4 18 1 144] 
#[0 4 22 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 33 0 172] 
#[1 8 37 0 7 8 41 0 172] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 4 26 0 11 4 26 0 55 4 26 0 82 4 26 0 96 4 26 0 98 4 26 0 99 4 26 0 121 4 26 0 151 4 26 0 162 4 26 0 172 4 26 0 173 4 26 1 144] 
#[0 1 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 10 0 1 2 14 0 3 2 10 0 9 4 30 0 11 4 30 0 55 4 30 0 82 4 30 0 96 4 30 0 98 4 30 0 99 4 30 0 121 4 30 0 151 4 30 0 162 4 30 0 172 4 30 0 173 4 30 1 144] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 8 45 0 172] 
#[0 4 34 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 242 0 1 1 242 0 3 1 242 0 9 8 49 0 172] 
#[1 4 81 0 7 4 38 0 11 4 38 0 22 4 38 0 23 4 38 0 28 4 38 0 29 4 38 0 30 4 38 0 31 4 38 0 32 4 38 0 33 4 38 0 34 4 38 0 35 4 38 0 36 4 38 0 37 4 38 0 38 4 38 0 39 4 38 0 40 4 38 0 41 4 38 0 43 4 38 0 45 4 38 0 55 4 38 0 56 4 38 0 58 4 38 0 59 4 38 0 64 4 38 0 67 4 38 0 73 4 38 0 76 4 38 0 77 4 38 0 82 4 38 0 84 4 38 0 86 4 38 0 88 4 38 0 89 4 38 0 91 4 38 0 92 4 38 0 96 4 38 0 98 4 38 0 99 4 38 0 100 4 38 0 102 4 38 0 105 4 38 0 106 4 38 0 107 4 38 0 108 4 38 0 112 4 38 0 115 4 38 0 116 4 38 0 121 4 38 0 123 4 38 0 126 4 38 0 131 4 38 0 132 4 38 0 133 4 38 0 134 4 38 0 138 4 38 0 140 4 38 0 142 4 38 0 143 4 38 0 147 4 38 0 150 4 38 0 151 4 38 0 162 4 38 0 167 4 38 0 168 4 38 0 171 1 191 0 172 4 38 0 173 4 89 1 35 4 93 1 36 4 38 1 144] 
#[0 4 42 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 53 0 172] 
#[1 8 57 0 3 4 53 0 5 1 195 0 7 1 195 0 11 1 195 0 22 1 195 0 23 1 195 0 28 1 195 0 29 1 195 0 30 1 195 0 31 1 195 0 32 1 195 0 33 1 195 0 34 1 195 0 35 1 195 0 36 1 195 0 37 1 195 0 38 1 195 0 39 1 195 0 40 1 195 0 41 1 195 0 43 1 195 0 45 1 195 0 55 1 195 0 56 1 195 0 58 1 195 0 59 1 195 0 64 1 195 0 67 1 195 0 73 1 195 0 76 1 195 0 77 1 195 0 82 1 195 0 84 1 195 0 86 1 195 0 88 1 195 0 89 1 195 0 91 1 195 0 92 1 195 0 96 1 195 0 98 1 195 0 99 1 195 0 100 1 195 0 102 1 195 0 105 1 195 0 106 1 195 0 107 1 195 0 108 1 195 0 112 1 195 0 115 1 195 0 116 1 195 0 121 1 195 0 123 1 195 0 126 1 195 0 131 1 195 0 132 1 195 0 133 1 195 0 134 1 195 0 138 1 195 0 140 1 195 0 142 1 195 0 143 1 195 0 147 1 195 0 150 1 195 0 151 1 195 0 162 1 195 0 167 1 195 0 168 1 195 0 171 1 199 0 172 1 195 0 173 8 69 0 228 8 69 0 229 8 65 0 230 8 69 0 233 1 195 1 144] 
#[1 8 73 0 7 4 50 0 11 4 50 0 22 4 50 0 23 4 50 0 28 4 50 0 29 4 50 0 30 4 50 0 31 4 50 0 32 4 50 0 33 4 50 0 34 4 50 0 35 4 50 0 36 4 50 0 37 4 50 0 38 4 50 0 39 4 50 0 40 4 50 0 41 4 50 0 43 4 50 0 45 4 50 0 55 4 50 0 56 4 50 0 58 4 50 0 59 4 50 0 64 4 50 0 67 4 50 0 73 4 50 0 76 4 50 0 77 4 50 0 82 4 50 0 84 4 50 0 86 4 50 0 88 4 50 0 89 4 50 0 91 4 50 0 92 4 50 0 96 4 50 0 98 4 50 0 99 4 50 0 100 4 50 0 102 4 50 0 105 4 50 0 106 4 50 0 107 4 50 0 108 4 50 0 112 4 50 0 115 4 50 0 116 4 50 0 121 4 50 0 123 4 50 0 126 4 50 0 131 4 50 0 132 4 50 0 133 4 50 0 134 4 50 0 138 4 50 0 140 4 50 0 142 4 50 0 143 4 50 0 147 4 50 0 150 4 50 0 151 4 50 0 162 4 50 0 167 4 50 0 168 4 50 0 171 1 203 0 172 4 50 0 173 8 81 1 32 8 85 1 33 4 50 1 144] 
#[0 4 54 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 89 0 152] 
#[0 4 58 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 93 0 172] 
#[0 8 97 0 172] 
#[0 8 101 0 121] 
#[0 4 62 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 82 0 84 0 86 0 88 0 89 0 92 0 93 0 96 0 98 0 99 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 121 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 8 105 0 172] 
#[1 2 214 0 11 2 214 0 55 2 214 0 82 2 214 0 96 2 214 0 98 2 214 0 99 2 214 0 121 2 214 0 151 2 214 0 162 2 214 0 172 2 214 0 173 8 109 0 215] 
#[1 8 113 0 11 0 6 0 55 0 6 0 82 0 6 0 96 0 6 0 98 0 6 0 99 0 6 0 121 0 6 0 151 0 6 0 162 8 117 0 172 1 207 0 173 8 125 0 177 8 129 0 214 8 133 0 216 8 137 0 217] 
#[1 4 66 0 11 4 66 0 55 4 66 0 82 4 66 0 96 4 66 0 98 4 66 0 99 4 66 0 121 4 66 0 151 4 66 0 162 1 211 0 172 4 66 0 173 4 66 1 144] 
#[0 8 145 0 172] 
#[1 4 70 0 22 4 70 0 23 4 70 0 43 4 70 0 45 4 70 0 55 4 70 0 56 4 70 0 58 4 70 0 59 4 70 0 64 4 70 0 67 4 70 0 77 4 70 0 84 4 70 0 88 4 70 0 89 4 70 0 99 4 70 0 107 4 70 0 115 4 70 0 116 4 70 0 123 4 70 0 138 4 70 0 143 4 70 0 150 4 70 0 167 4 70 0 168 4 70 0 171 4 70 0 173 8 149 0 250] 
#[1 8 153 0 3 8 157 0 172 8 161 0 253] 
#[0 4 74 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 78 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 82 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 86 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 90 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 94 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 98 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 102 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 4 106 0 7 4 106 0 11 4 106 0 55 4 106 0 82 4 106 0 96 4 106 0 98 4 106 0 99 4 106 0 121 4 106 0 151 4 106 0 162 4 106 0 172 4 106 0 173 8 165 1 108 4 106 1 144] 
#[0 4 110 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 4 114 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 8 169 0 172] 
#[0 8 173 0 172] 
#[1 0 26 0 1 0 26 0 3 0 26 0 9 1 215 0 172] 
#[0 8 181 0 172] 
#[0 8 185 0 172] 
#[0 8 189 0 172] 
#[1 0 150 0 1 8 57 0 3 4 53 0 5 1 195 0 7 0 150 0 9 1 219 0 11 1 219 0 22 1 219 0 23 1 219 0 28 1 219 0 29 1 219 0 30 1 219 0 31 1 219 0 32 1 219 0 33 1 219 0 34 1 219 0 35 1 219 0 36 1 219 0 37 1 219 0 38 1 219 0 39 1 219 0 40 1 219 0 41 1 219 0 43 1 219 0 45 1 219 0 55 1 219 0 56 1 219 0 58 1 219 0 59 1 219 0 64 1 219 0 67 1 219 0 73 1 219 0 76 1 219 0 77 1 219 0 82 1 219 0 84 1 219 0 86 1 219 0 88 1 219 0 89 1 219 0 91 1 219 0 92 1 219 0 96 1 219 0 98 1 219 0 99 1 219 0 100 1 219 0 102 1 219 0 105 1 219 0 106 1 219 0 107 1 219 0 108 1 219 0 112 1 219 0 115 1 219 0 116 1 219 0 121 1 219 0 123 1 219 0 126 1 219 0 131 1 219 0 132 1 219 0 133 1 219 0 134 1 219 0 138 1 219 0 140 1 219 0 142 1 219 0 143 1 219 0 147 1 219 0 150 1 219 0 151 1 219 0 162 1 219 0 167 1 219 0 168 1 219 0 171 1 223 0 172 1 219 0 173 8 69 0 228 8 69 0 229 8 65 0 230 8 69 0 233 1 219 1 144] 
#[1 8 73 0 7 4 118 0 11 4 118 0 22 4 118 0 23 4 118 0 28 4 118 0 29 4 118 0 30 4 118 0 31 4 118 0 32 4 118 0 33 4 118 0 34 4 118 0 35 4 118 0 36 4 118 0 37 4 118 0 38 4 118 0 39 4 118 0 40 4 118 0 41 4 118 0 43 4 118 0 45 4 118 0 55 4 118 0 56 4 118 0 58 4 118 0 59 4 118 0 64 4 118 0 67 4 118 0 73 4 118 0 76 4 118 0 77 4 118 0 82 4 118 0 84 4 118 0 86 4 118 0 88 4 118 0 89 4 118 0 91 4 118 0 92 4 118 0 96 4 118 0 98 4 118 0 99 4 118 0 100 4 118 0 102 4 118 0 105 4 118 0 106 4 118 0 107 4 118 0 108 4 118 0 112 4 118 0 115 4 118 0 116 4 118 0 121 4 118 0 123 4 118 0 126 4 118 0 131 4 118 0 132 4 118 0 133 4 118 0 134 4 118 0 138 4 118 0 140 4 118 0 142 4 118 0 143 4 118 0 147 4 118 0 150 4 118 0 151 4 118 0 162 4 118 0 167 4 118 0 168 4 118 0 171 1 227 0 172 4 118 0 173 8 81 1 32 8 85 1 33 4 118 1 144] 
#[0 4 122 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 126 0 11 4 126 0 22 4 126 0 23 4 126 0 28 4 126 0 29 4 126 0 30 4 126 0 31 4 126 0 32 4 126 0 33 4 126 0 34 4 126 0 35 4 126 0 36 4 126 0 37 4 126 0 38 4 126 0 39 4 126 0 40 4 126 0 41 4 126 0 43 4 126 0 45 4 126 0 55 4 126 0 56 4 126 0 58 4 126 0 59 4 126 0 64 4 126 0 67 4 126 0 73 4 126 0 76 4 126 0 77 4 126 0 82 4 126 0 84 4 126 0 86 4 126 0 88 4 126 0 89 4 126 0 91 4 126 0 92 4 126 0 96 4 126 0 98 4 126 0 99 4 126 0 100 4 126 0 102 4 126 0 105 4 126 0 106 4 126 0 107 4 126 0 108 4 126 0 112 4 126 0 115 4 126 0 116 4 126 0 121 4 126 0 123 4 126 0 126 4 126 0 131 4 126 0 132 4 126 0 133 4 126 0 134 4 126 0 138 4 126 0 140 4 126 0 142 4 126 0 143 4 126 0 147 4 126 0 150 4 126 0 151 4 126 0 162 4 126 0 167 4 126 0 168 4 126 0 171 1 231 0 172 4 126 0 173 4 126 1 144] 
#[1 0 34 0 7 1 235 0 11 1 235 0 55 1 235 0 82 1 235 0 96 1 235 0 98 1 235 0 99 1 235 0 121 1 235 0 151 1 235 0 162 1 235 0 172 1 235 0 173 1 235 1 144] 
#[0 4 134 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 8 197 0 172] 
#[1 8 73 0 7 4 138 0 11 4 138 0 22 4 138 0 23 4 138 0 28 4 138 0 29 4 138 0 30 4 138 0 31 4 138 0 32 4 138 0 33 4 138 0 34 4 138 0 35 4 138 0 36 4 138 0 37 4 138 0 38 4 138 0 39 4 138 0 40 4 138 0 41 4 138 0 43 4 138 0 45 4 138 0 55 4 138 0 56 4 138 0 58 4 138 0 59 4 138 0 64 4 138 0 67 4 138 0 73 4 138 0 76 4 138 0 77 4 138 0 82 4 138 0 84 4 138 0 86 4 138 0 88 4 138 0 89 4 138 0 91 4 138 0 92 4 138 0 96 4 138 0 98 4 138 0 99 4 138 0 100 4 138 0 102 4 138 0 105 4 138 0 106 4 138 0 107 4 138 0 108 4 138 0 112 4 138 0 115 4 138 0 116 4 138 0 121 4 138 0 123 4 138 0 126 4 138 0 131 4 138 0 132 4 138 0 133 4 138 0 134 4 138 0 138 4 138 0 140 4 138 0 142 4 138 0 143 4 138 0 147 4 138 0 150 4 138 0 151 4 138 0 162 4 138 0 167 4 138 0 168 4 138 0 171 1 239 0 172 4 138 0 173 8 81 1 32 8 85 1 33 4 138 1 144] 
#[0 4 142 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 146 0 22 4 146 0 23 4 146 0 43 4 146 0 45 4 146 0 55 4 146 0 56 4 146 0 58 4 146 0 59 4 146 0 64 4 146 0 67 4 146 0 77 4 146 0 84 4 146 0 88 4 146 0 89 4 146 0 99 4 146 0 107 4 146 0 115 4 146 0 116 4 146 0 123 4 146 0 138 4 146 0 143 4 146 0 150 4 146 0 167 4 146 0 168 4 146 0 171 4 146 0 173 8 201 0 245] 
#[1 8 205 0 151 3 213 0 162 7 241 0 172 3 221 0 173 8 209 0 182 3 229 0 207 8 213 0 213] 
#[1 7 241 0 172 3 221 0 173 3 229 0 207 8 217 0 213] 
#[0 8 221 0 74] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 8 225 1 38 5 61 1 39 5 65 1 40 8 225 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 8 225 1 47 5 97 1 49 5 101 1 51 8 225 1 53 8 225 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 4 150 0 3 4 150 0 4 4 150 0 5 4 150 0 7 4 150 0 11 4 150 0 22 4 150 0 23 4 150 0 28 4 150 0 29 4 150 0 30 4 150 0 31 4 150 0 32 4 150 0 33 4 150 0 34 4 150 0 35 4 150 0 36 4 150 0 37 4 150 0 38 4 150 0 39 4 150 0 40 4 150 0 41 4 150 0 43 4 150 0 45 4 150 0 55 4 150 0 56 4 150 0 58 4 150 0 59 4 150 0 64 4 150 0 67 4 150 0 73 4 150 0 76 4 150 0 77 4 150 0 82 4 150 0 84 4 150 0 86 4 150 0 88 4 150 0 89 4 150 0 91 4 150 0 92 4 150 0 96 4 150 0 98 4 150 0 99 4 150 0 100 4 150 0 102 4 150 0 105 4 150 0 106 4 150 0 107 4 150 0 108 4 150 0 112 4 150 0 115 4 150 0 116 4 150 0 121 4 150 0 123 4 150 0 126 4 150 0 131 4 150 0 132 4 150 0 133 4 150 0 134 4 150 0 138 4 150 0 140 4 150 0 142 4 150 0 143 4 150 0 147 4 150 0 150 4 150 0 151 4 150 0 162 4 150 0 167 4 150 0 168 4 150 0 171 1 243 0 172 4 150 0 173 4 150 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 229 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 8 233 1 38 5 61 1 39 5 65 1 40 8 233 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 8 233 1 47 5 97 1 49 5 101 1 51 8 233 1 53 8 233 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 8 237 0 172] 
#[0 8 241 0 172] 
#[0 8 245 0 172] 
#[0 8 249 0 18] 
#[0 8 253 0 172] 
#[0 9 1 0 172] 
#[0 9 5 0 172] 
#[0 9 9 0 172] 
#[1 8 73 0 7 4 154 0 11 4 154 0 22 4 154 0 23 4 154 0 28 4 154 0 29 4 154 0 30 4 154 0 31 4 154 0 32 4 154 0 33 4 154 0 34 4 154 0 35 4 154 0 36 4 154 0 37 4 154 0 38 4 154 0 39 4 154 0 40 4 154 0 41 4 154 0 43 4 154 0 45 4 154 0 55 4 154 0 56 4 154 0 58 4 154 0 59 4 154 0 64 4 154 0 67 4 154 0 73 4 154 0 76 4 154 0 77 4 154 0 82 4 154 0 84 4 154 0 86 4 154 0 88 4 154 0 89 4 154 0 91 4 154 0 92 4 154 0 96 4 154 0 98 4 154 0 99 4 154 0 100 4 154 0 102 4 154 0 105 4 154 0 106 4 154 0 107 4 154 0 108 4 154 0 112 4 154 0 115 4 154 0 116 4 154 0 121 4 154 0 123 4 154 0 126 4 154 0 131 4 154 0 132 4 154 0 133 4 154 0 134 4 154 0 138 4 154 0 140 4 154 0 142 4 154 0 143 4 154 0 147 4 154 0 150 4 154 0 151 4 154 0 162 4 154 0 167 4 154 0 168 4 154 0 171 1 247 0 172 4 154 0 173 8 81 1 32 8 85 1 33 4 154 1 144] 
#[0 4 158 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 1 251 0 172] 
#[1 4 97 0 1 4 101 0 9 9 17 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 9 21 1 25] 
#[0 4 162 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 9 25 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 9 29 1 25] 
#[0 4 166 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 33 0 172] 
#[0 9 37 0 172] 
#[0 4 178 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 182 0 4 4 221 0 6 9 41 0 7 4 225 0 8 0 33 0 9 4 182 0 11 1 255 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 3 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 4 182 0 82 1 17 0 84 1 17 0 88 1 17 0 89 4 182 0 96 4 182 0 98 4 182 0 99 1 17 0 107 1 17 0 115 1 17 0 116 4 182 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 182 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 7 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 11 0 172 4 182 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 9 85 1 132 9 89 1 134 9 93 1 137 5 141 1 141 5 141 1 143 4 182 1 144] 
#[1 2 238 0 1 2 238 0 3 2 238 0 4 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 13 2 238 0 22 2 238 0 23 2 238 0 25 2 238 0 43 2 238 0 45 2 238 0 54 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 67 2 238 0 77 2 238 0 79 2 238 0 81 2 238 0 84 2 238 0 88 2 238 0 89 2 238 0 107 2 238 0 115 2 238 0 116 2 238 0 123 2 238 0 124 2 238 0 129 2 238 0 138 2 238 0 143 2 238 0 150 2 238 0 155 2 238 0 160 2 238 0 161 2 238 0 162 2 238 0 163 2 238 0 164 2 238 0 165 2 238 0 166 2 238 0 167 2 238 0 168 2 238 0 170 2 238 0 171 2 238 0 172 9 97 1 133 7 61 1 135] 
#[1 9 101 0 4 9 105 0 172] 
#[1 4 186 0 99 4 186 0 173 9 109 0 206] 
#[0 9 113 0 172] 
#[0 9 117 0 172] 
#[1 8 153 0 3 9 121 0 172 9 125 0 253] 
#[1 0 150 0 1 2 15 0 3 0 150 0 4 0 150 0 5 0 150 0 7 0 150 0 9 0 150 0 11 0 150 0 13 0 150 0 22 0 150 0 23 0 150 0 28 0 150 0 29 0 150 0 30 0 150 0 31 0 150 0 32 0 150 0 33 0 150 0 34 0 150 0 35 0 150 0 36 0 150 0 37 0 150 0 38 0 150 0 39 0 150 0 40 0 150 0 41 0 150 0 43 0 150 0 45 0 150 0 55 0 150 0 56 0 150 0 58 0 150 0 59 0 150 0 64 0 150 0 67 0 150 0 73 0 150 0 76 0 150 0 77 0 150 0 82 0 150 0 84 0 150 0 86 0 150 0 88 0 150 0 89 0 150 0 91 0 150 0 92 0 150 0 96 0 150 0 98 0 150 0 99 0 150 0 100 0 150 0 102 0 150 0 105 0 150 0 106 0 150 0 107 0 150 0 108 0 150 0 112 0 150 0 115 0 150 0 116 0 150 0 121 0 150 0 123 0 150 0 126 0 150 0 131 0 150 0 132 0 150 0 133 0 150 0 134 0 150 0 138 0 150 0 140 0 150 0 142 0 150 0 143 0 150 0 147 0 150 0 150 0 150 0 151 0 150 0 162 0 150 0 167 0 150 0 168 0 150 0 171 0 150 0 172 0 150 0 173 0 150 1 144] 
#[1 4 97 0 1 4 101 0 9 4 190 0 22 4 190 0 23 4 190 0 28 4 190 0 29 4 190 0 30 4 190 0 31 4 190 0 32 4 190 0 33 4 190 0 34 4 190 0 35 4 190 0 36 4 190 0 37 4 190 0 38 4 190 0 39 4 190 0 40 4 190 0 41 4 190 0 43 4 190 0 45 4 190 0 55 4 190 0 56 4 190 0 58 4 190 0 59 4 190 0 64 4 190 0 67 4 190 0 73 4 190 0 76 4 190 0 77 4 190 0 84 4 190 0 86 4 190 0 88 4 190 0 89 4 190 0 91 4 190 0 92 4 190 0 100 4 190 0 102 4 190 0 105 4 190 0 106 4 190 0 107 4 190 0 108 4 190 0 112 4 190 0 115 4 190 0 116 4 190 0 123 4 190 0 126 4 190 0 131 4 190 0 132 4 190 0 133 4 190 0 134 4 190 0 138 4 190 0 140 4 190 0 142 4 190 0 143 4 190 0 147 4 190 0 150 4 190 0 167 4 190 0 168 4 190 0 171 4 190 0 172 4 190 0 173 4 190 1 144] 
#[0 9 129 0 172] 
#[0 4 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 133 0 172] 
#[0 4 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 137 0 172] 
#[0 9 141 0 172] 
#[0 9 145 0 172] 
#[1 8 153 0 3 9 149 0 172 4 202 0 173 9 153 0 253 9 157 1 13] 
#[1 8 221 0 74 9 161 0 85 9 165 0 104 9 169 0 131 3 213 0 162 9 173 0 182] 
#[0 9 177 0 172] 
#[0 4 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 181 0 172] 
#[0 9 185 0 172] 
#[0 9 189 0 172] 
#[0 9 193 0 172] 
#[0 9 197 0 172] 
#[0 9 201 0 172] 
#[0 9 205 0 172] 
#[0 9 209 0 172] 
#[1 4 210 0 22 4 210 0 23 4 210 0 28 4 210 0 29 4 210 0 30 4 210 0 31 4 210 0 32 4 210 0 33 4 210 0 34 4 210 0 35 4 210 0 36 4 210 0 37 4 210 0 38 4 210 0 39 4 210 0 40 4 210 0 41 4 210 0 43 4 210 0 45 4 210 0 55 4 210 0 56 4 210 0 58 4 210 0 59 4 210 0 64 4 210 0 67 4 210 0 73 4 210 0 76 4 210 0 77 9 213 0 83 4 210 0 84 4 210 0 86 4 210 0 88 4 210 0 89 4 210 0 91 4 210 0 92 4 210 0 100 4 210 0 102 4 210 0 105 4 210 0 106 4 210 0 107 4 210 0 108 4 210 0 112 4 210 0 115 4 210 0 116 4 210 0 123 4 210 0 126 4 210 0 131 4 210 0 132 4 210 0 133 4 210 0 134 4 210 0 138 4 210 0 140 4 210 0 142 4 210 0 143 4 210 0 147 4 210 0 150 4 210 0 167 4 210 0 168 4 210 0 171 4 210 0 172 4 210 0 173 4 210 1 144] 
#[1 4 249 0 163 9 217 0 185] 
#[0 4 214 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 9 221 0 177 4 181 0 178 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 67 0 10 0 73 0 10 0 76 0 10 0 77 0 10 0 84 0 10 0 86 0 10 0 88 0 10 0 89 0 10 0 91 0 10 0 92 0 10 0 100 0 10 0 102 0 10 0 105 0 10 0 106 0 10 0 107 0 10 0 108 0 10 0 112 0 10 0 115 0 10 0 116 0 10 0 123 0 10 0 126 0 10 0 131 0 10 0 132 0 10 0 133 0 10 0 134 0 10 0 138 0 10 0 140 0 10 0 142 0 10 0 143 0 10 0 147 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 9 225 0 179 0 10 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 181 0 200 7 181 0 201 7 181 0 203 7 181 0 204 7 181 0 208 3 21 0 209 7 181 0 210 7 181 0 211 3 33 0 223 7 181 0 242 7 181 0 243 7 181 0 247 7 181 0 248 7 181 1 5 7 181 1 6 7 181 1 7 3 53 1 8 7 181 1 9 7 181 1 12 7 181 1 14 7 181 1 15 7 181 1 16 7 181 1 17 7 181 1 18 7 181 1 19 7 181 1 20 7 181 1 21 7 181 1 22 7 181 1 23 1 125 1 25 7 181 1 26 7 181 1 27 7 181 1 28 7 181 1 29 7 181 1 30 7 181 1 34 7 181 1 37 4 218 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 9 229 1 38 5 61 1 39 5 65 1 40 9 229 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 229 1 47 5 97 1 49 5 101 1 51 9 229 1 53 9 229 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 9 233 0 4 9 237 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 4 249 0 163 1 17 0 167 1 1 0 168 1 5 0 171 9 241 0 182 9 245 0 185 7 89 0 191 1 17 0 194 7 89 0 195 7 89 0 196 7 89 0 197 1 157 1 56 1 157 1 57 1 157 1 58 9 249 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 4 222 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 226 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 4 230 0 3 4 230 0 4 4 230 0 5 4 230 0 7 4 101 0 9 4 230 0 11 4 230 0 13 4 230 0 22 4 230 0 23 4 230 0 28 4 230 0 29 4 230 0 30 4 230 0 31 4 230 0 32 4 230 0 33 4 230 0 34 4 230 0 35 4 230 0 36 4 230 0 37 4 230 0 38 4 230 0 39 4 230 0 40 4 230 0 41 4 230 0 43 4 230 0 45 4 230 0 55 4 230 0 56 4 230 0 58 4 230 0 59 4 230 0 64 4 230 0 67 4 230 0 73 4 230 0 76 4 230 0 77 4 230 0 82 4 230 0 84 4 230 0 86 4 230 0 88 4 230 0 89 4 230 0 91 4 230 0 92 4 230 0 96 4 230 0 98 4 230 0 99 4 230 0 100 4 230 0 102 4 230 0 105 4 230 0 106 4 230 0 107 4 230 0 108 4 230 0 112 4 230 0 115 4 230 0 116 4 230 0 121 4 230 0 123 4 230 0 126 4 230 0 131 4 230 0 132 4 230 0 133 4 230 0 134 4 230 0 138 4 230 0 140 4 230 0 142 4 230 0 143 4 230 0 147 4 230 0 150 4 230 0 151 4 230 0 162 4 230 0 167 4 230 0 168 4 230 0 171 4 230 0 172 4 230 0 173 4 230 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 9 253 1 132 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 4 253 0 164 1 17 0 167 1 1 0 168 1 5 0 171 10 1 0 186 7 89 0 191 1 17 0 194 7 89 0 195 7 89 0 196 7 89 0 197 10 5 1 39 1 157 1 56 1 157 1 57 1 157 1 58 10 9 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131 10 13 1 141] 
#[0 4 234 0 8 0 156 0 159] 
#[1 10 17 0 8 10 21 0 159] 
#[0 10 25 0 18] 
#[1 10 29 0 18 10 33 0 146] 
#[1 10 37 0 2 10 41 0 5 10 45 0 6 10 49 0 8 10 53 0 10 10 57 0 14 10 61 0 16 10 65 0 17 10 69 0 19 10 73 0 20 10 77 0 46 10 81 0 48 10 85 0 53 10 89 0 70 10 93 0 71 10 97 0 72 10 101 0 101 10 105 0 128 10 109 0 154 10 113 1 48 10 117 1 50 10 121 1 52] 
#[1 10 97 0 72 10 101 0 101 10 105 0 128 10 109 0 154 10 125 1 52] 
#[1 10 57 0 14 10 61 0 16 10 65 0 17 10 69 0 19 10 73 0 20 10 77 0 46 10 81 0 48 10 129 1 48] 
#[1 10 97 0 72 10 101 0 101 10 105 0 128 10 109 0 154 10 133 1 52] 
#[0 10 137 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 141 0 191 1 17 0 194 10 141 0 195 10 141 0 196 10 141 0 197] 
#[0 10 145 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 10 149 0 181 10 153 0 191 1 17 0 194 10 153 0 195 10 153 0 196 10 153 0 197] 
#[0 4 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 242 0 1 4 242 0 3 4 242 0 4 4 242 0 5 4 242 0 7 2 19 0 9 4 242 0 11 4 242 0 13 4 242 0 22 4 242 0 23 4 242 0 28 4 242 0 29 4 242 0 30 4 242 0 31 4 242 0 32 4 242 0 33 4 242 0 34 4 242 0 35 4 242 0 36 4 242 0 37 4 242 0 38 4 242 0 39 4 242 0 40 4 242 0 41 4 242 0 43 4 242 0 45 4 242 0 55 4 242 0 56 4 242 0 58 4 242 0 59 4 242 0 64 4 242 0 67 4 242 0 73 4 242 0 76 4 242 0 77 4 242 0 82 4 242 0 84 4 242 0 86 4 242 0 88 4 242 0 89 4 242 0 91 4 242 0 92 4 242 0 96 4 242 0 98 4 242 0 99 4 242 0 100 4 242 0 102 4 242 0 105 4 242 0 106 4 242 0 107 4 242 0 108 4 242 0 112 4 242 0 115 4 242 0 116 4 242 0 121 4 242 0 123 4 242 0 126 4 242 0 131 4 242 0 132 4 242 0 133 4 242 0 134 4 242 0 138 4 242 0 140 4 242 0 142 4 242 0 143 4 242 0 147 4 242 0 150 4 242 0 151 4 242 0 162 4 242 0 167 4 242 0 168 4 242 0 171 4 242 0 172 4 242 0 173 8 29 0 225 4 242 1 144] 
#[0 4 246 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 10 29 0 18 10 157 0 44 10 33 0 146] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 250 0 11 4 250 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 23 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 4 250 0 82 1 17 0 84 1 17 0 88 1 17 0 89 4 250 0 96 4 250 0 98 4 250 0 99 1 17 0 107 1 17 0 115 1 17 0 116 4 250 0 121 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 250 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 27 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 31 0 172 4 250 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 165 1 38 5 61 1 39 5 65 1 40 10 165 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 10 165 1 47 5 97 1 49 5 101 1 51 10 165 1 53 10 165 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 10 169 1 66 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143 4 250 1 144] 
#[0 10 173 0 7] 
#[0 10 177 0 18] 
#[0 10 181 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 185 0 191 1 17 0 194 10 185 0 195 10 185 0 196 10 185 0 197] 
#[1 0 29 0 1 4 217 0 3 4 254 0 4 4 221 0 6 4 254 0 7 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 189 0 232 10 193 1 38 5 61 1 39 5 65 1 40 10 193 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 10 193 1 47 5 97 1 49 5 101 1 51 10 193 1 53 10 193 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 6 229 0 5 6 241 0 24] 
#[1 4 53 0 5 2 35 0 7 2 35 0 11 2 35 0 22 2 35 0 23 2 35 0 28 2 35 0 29 2 35 0 30 2 35 0 31 2 35 0 32 2 35 0 33 2 35 0 34 2 35 0 35 2 35 0 36 2 35 0 37 2 35 0 38 2 35 0 39 2 35 0 40 2 35 0 41 2 35 0 43 2 35 0 45 2 35 0 55 2 35 0 56 2 35 0 58 2 35 0 59 2 35 0 64 2 35 0 67 2 35 0 73 2 35 0 76 2 35 0 77 2 35 0 82 2 35 0 84 2 35 0 86 2 35 0 88 2 35 0 89 2 35 0 91 2 35 0 92 2 35 0 96 2 35 0 98 2 35 0 99 2 35 0 100 2 35 0 102 2 35 0 105 2 35 0 106 2 35 0 107 2 35 0 108 2 35 0 112 2 35 0 115 2 35 0 116 2 35 0 121 2 35 0 123 2 35 0 126 2 35 0 131 2 35 0 132 2 35 0 133 2 35 0 134 2 35 0 138 2 35 0 140 2 35 0 142 2 35 0 143 2 35 0 147 2 35 0 150 2 35 0 151 2 35 0 162 2 35 0 167 2 35 0 168 2 35 0 171 2 39 0 172 2 35 0 173 10 197 0 228 10 197 0 229 10 197 0 233 2 35 1 144] 
#[0 5 6 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 201 0 172 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 10 205 1 24] 
#[0 10 209 0 7] 
#[0 5 10 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 73 0 7 5 14 0 11 5 14 0 22 5 14 0 23 5 14 0 28 5 14 0 29 5 14 0 30 5 14 0 31 5 14 0 32 5 14 0 33 5 14 0 34 5 14 0 35 5 14 0 36 5 14 0 37 5 14 0 38 5 14 0 39 5 14 0 40 5 14 0 41 5 14 0 43 5 14 0 45 5 14 0 55 5 14 0 56 5 14 0 58 5 14 0 59 5 14 0 64 5 14 0 67 5 14 0 73 5 14 0 76 5 14 0 77 5 14 0 82 5 14 0 84 5 14 0 86 5 14 0 88 5 14 0 89 5 14 0 91 5 14 0 92 5 14 0 96 5 14 0 98 5 14 0 99 5 14 0 100 5 14 0 102 5 14 0 105 5 14 0 106 5 14 0 107 5 14 0 108 5 14 0 112 5 14 0 115 5 14 0 116 5 14 0 121 5 14 0 123 5 14 0 126 5 14 0 131 5 14 0 132 5 14 0 133 5 14 0 134 5 14 0 138 5 14 0 140 5 14 0 142 5 14 0 143 5 14 0 147 5 14 0 150 5 14 0 151 5 14 0 162 5 14 0 167 5 14 0 168 5 14 0 171 2 43 0 172 5 14 0 173 10 213 1 32 5 14 1 144] 
#[0 10 217 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 221 1 38 5 61 1 39 5 65 1 40 10 221 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 10 221 1 47 5 97 1 49 5 101 1 51 10 221 1 53 10 221 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 225 1 38 5 61 1 39 5 65 1 40 10 225 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 10 225 1 47 5 97 1 49 5 101 1 51 10 225 1 53 10 225 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 5 18 0 11 5 18 0 55 5 18 0 82 5 18 0 96 5 18 0 98 5 18 0 99 5 18 0 121 5 18 0 151 5 18 0 162 2 47 0 172 5 18 0 173 5 18 1 144] 
#[1 0 29 0 1 0 33 0 9 2 214 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 59 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 10 233 0 75 1 17 0 77 2 214 0 82 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 2 214 0 96 2 214 0 98 2 214 0 99 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 2 214 0 121 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 2 214 0 151 0 245 0 152 0 249 0 153 2 214 0 162 0 253 0 167 1 1 0 168 1 5 0 171 1 67 0 172 2 214 0 173 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 10 233 0 201 10 233 0 203 10 233 0 212 10 237 0 215 1 49 0 223 10 233 0 234 1 57 0 235 10 233 0 236 10 233 0 237 10 233 0 238 10 233 0 239 10 233 0 240 10 233 0 241 10 233 0 242 10 233 0 243 10 233 0 247 10 233 0 248 10 233 1 18 10 233 1 19 10 233 1 20 10 233 1 21 10 233 1 22 10 233 1 23 1 125 1 25 10 233 1 26 10 233 1 27 10 233 1 28 10 233 1 29 10 233 1 30 10 233 1 34 10 233 1 37 1 157 1 56 1 157 1 57 1 157 1 58 10 233 1 62 10 233 1 63 10 233 1 64 10 233 1 67 10 233 1 68 10 233 1 69 10 233 1 70 10 233 1 71 10 233 1 72 10 233 1 73 10 233 1 74 10 233 1 75 10 233 1 76 10 233 1 77 10 233 1 78 10 233 1 79 10 233 1 80 10 233 1 81 10 233 1 82 10 233 1 83 10 233 1 84 10 233 1 85 10 233 1 90 10 233 1 91 2 9 1 92 10 233 1 97 10 233 1 100 10 233 1 101 10 233 1 102 10 233 1 103 10 233 1 104 10 233 1 109 10 233 1 110 10 233 1 111 10 233 1 112 10 233 1 113 10 233 1 114 10 233 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 10 233 1 129 2 117 1 130 2 121 1 131 10 233 1 139 10 233 1 140 10 233 1 142] 
#[1 8 113 0 11 0 6 0 55 0 6 0 82 0 6 0 96 0 6 0 98 0 6 0 99 0 6 0 121 0 6 0 151 0 6 0 162 8 117 0 172 1 207 0 173 10 241 0 177 8 129 0 214 8 133 0 216 8 137 0 217] 
#[1 5 22 0 1 5 22 0 9 5 22 0 11 5 22 0 22 5 22 0 23 5 22 0 25 5 22 0 27 5 22 0 42 5 22 0 43 5 22 0 44 5 22 0 45 5 22 0 49 5 22 0 54 5 22 0 55 5 22 0 56 5 22 0 57 5 22 0 58 5 22 0 59 5 22 0 60 5 22 0 64 5 22 0 67 5 22 0 73 5 22 0 75 5 22 0 77 5 22 0 84 5 22 0 86 5 22 0 88 5 22 0 89 5 22 0 92 5 22 0 93 5 22 0 100 5 22 0 102 5 22 0 103 5 22 0 105 5 22 0 107 5 22 0 108 5 22 0 109 5 22 0 110 5 22 0 111 5 22 0 115 5 22 0 116 5 22 0 123 5 22 0 125 5 22 0 126 5 22 0 131 5 22 0 133 5 22 0 134 5 22 0 135 5 22 0 136 5 22 0 137 5 22 0 138 5 22 0 140 5 22 0 143 5 22 0 147 5 22 0 150 5 22 0 152 5 22 0 153 5 22 0 162 5 22 0 167 5 22 0 168 5 22 0 171 2 51 0 172 5 22 0 173] 
#[0 10 249 0 11] 
#[0 5 26 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 5 30 0 55 5 30 0 82 5 30 0 96 5 30 0 98 5 30 0 99 5 30 0 121 5 30 0 151 5 30 0 162 3 105 0 173] 
#[0 5 34 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173] 
#[0 5 38 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 8 113 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 11 5 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 3 213 0 162 0 253 0 167 1 1 0 168 1 5 0 171 10 253 0 172 8 121 0 173 11 1 0 182 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 11 5 0 201 11 5 0 203 11 5 0 212 11 9 0 216 1 49 0 223 11 5 0 234 1 57 0 235 11 5 0 236 11 5 0 237 11 5 0 238 11 5 0 239 11 5 0 240 11 5 0 241 11 5 0 242 11 5 0 243 11 5 0 247 11 5 0 248 11 5 1 18 11 5 1 19 11 5 1 20 11 5 1 21 11 5 1 22 11 5 1 23 1 125 1 25 11 5 1 26 11 5 1 27 11 5 1 28 11 5 1 29 11 5 1 30 11 5 1 34 11 5 1 37 1 157 1 56 1 157 1 57 1 157 1 58 11 5 1 62 11 5 1 63 11 5 1 64 11 5 1 67 11 5 1 68 11 5 1 69 11 5 1 70 11 5 1 71 11 5 1 72 11 5 1 73 11 5 1 74 11 5 1 75 11 5 1 76 11 5 1 77 11 5 1 78 11 5 1 79 11 5 1 80 11 5 1 81 11 5 1 82 11 5 1 83 11 5 1 84 11 5 1 85 11 5 1 90 11 5 1 91 2 9 1 92 11 5 1 97 11 5 1 100 11 5 1 101 11 5 1 102 11 5 1 103 11 5 1 104 11 5 1 109 11 5 1 110 11 5 1 111 11 5 1 112 11 5 1 113 11 5 1 114 11 5 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 11 5 1 129 2 117 1 130 2 121 1 131 11 5 1 139 11 5 1 140 11 5 1 142] 
#[1 11 13 0 148 11 17 0 152] 
#[0 11 21 0 121] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 11 25 0 177 11 29 0 249] 
#[1 11 33 0 4 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 9 49 0 79 11 53 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 11 37 0 127 11 41 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 45 0 172 11 49 0 191 1 17 0 194 11 49 0 195 11 49 0 196 11 49 0 197 11 53 0 252 11 57 1 0] 
#[1 8 153 0 3 11 61 0 253] 
#[0 5 42 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 11 65 0 7 5 46 0 11 5 46 0 55 5 46 0 82 5 46 0 96 5 46 0 98 5 46 0 99 5 46 0 121 5 46 0 151 5 46 0 162 2 55 0 172 5 46 0 173 11 73 1 107 5 46 1 144] 
#[1 10 29 0 18 11 77 0 144 11 81 0 145 10 33 0 146] 
#[1 10 29 0 18 11 85 0 24 10 33 0 146] 
#[1 0 173 0 110 11 89 0 135 11 93 1 109] 
#[1 10 29 0 18 0 169 0 109 0 173 0 110 10 33 0 146 11 97 1 104 11 97 1 109 11 97 1 110] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 101 1 38 5 61 1 39 5 65 1 40 11 101 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 101 1 47 5 97 1 49 5 101 1 51 11 101 1 53 11 101 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 6 169 0 191 1 17 0 194 6 169 0 195 6 169 0 196 6 169 0 197 11 105 1 24 11 109 1 31 11 113 1 38 5 61 1 39 5 65 1 40 11 113 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 113 1 47 5 97 1 49 5 101 1 51 11 113 1 53 11 113 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 6 229 0 5 10 25 0 18 6 241 0 24] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 117 1 38 5 61 1 39 5 65 1 40 11 117 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 117 1 47 5 97 1 49 5 101 1 51 11 117 1 53 11 117 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 11 121 0 177 11 125 0 244] 
#[0 5 50 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 11 129 0 172] 
#[1 11 133 0 151 3 213 0 162 11 137 0 182] 
#[1 11 141 0 99 3 213 0 162 11 145 0 182] 
#[0 11 149 0 172] 
#[1 5 54 0 3 5 54 0 4 5 54 0 5 5 54 0 7 5 54 0 11 5 54 0 22 5 54 0 23 5 54 0 28 5 54 0 29 5 54 0 30 5 54 0 31 5 54 0 32 5 54 0 33 5 54 0 34 5 54 0 35 5 54 0 36 5 54 0 37 5 54 0 38 5 54 0 39 5 54 0 40 5 54 0 41 5 54 0 43 5 54 0 45 5 54 0 55 5 54 0 56 5 54 0 58 5 54 0 59 5 54 0 64 5 54 0 67 5 54 0 73 5 54 0 76 5 54 0 77 5 54 0 82 5 54 0 84 5 54 0 86 5 54 0 88 5 54 0 89 5 54 0 91 5 54 0 92 5 54 0 96 5 54 0 98 5 54 0 99 5 54 0 100 5 54 0 102 5 54 0 105 5 54 0 106 5 54 0 107 5 54 0 108 5 54 0 112 5 54 0 115 5 54 0 116 5 54 0 121 5 54 0 123 5 54 0 126 5 54 0 131 5 54 0 132 5 54 0 133 5 54 0 134 5 54 0 138 5 54 0 140 5 54 0 142 5 54 0 143 5 54 0 147 5 54 0 150 5 54 0 151 5 54 0 162 5 54 0 167 5 54 0 168 5 54 0 171 2 59 0 172 5 54 0 173 5 54 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 153 1 38 5 61 1 39 5 65 1 40 11 153 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 153 1 47 5 97 1 49 5 101 1 51 11 153 1 53 11 153 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 5 58 0 3 5 58 0 4 5 58 0 5 5 58 0 7 5 58 0 11 5 58 0 22 5 58 0 23 5 58 0 28 5 58 0 29 5 58 0 30 5 58 0 31 5 58 0 32 5 58 0 33 5 58 0 34 5 58 0 35 5 58 0 36 5 58 0 37 5 58 0 38 5 58 0 39 5 58 0 40 5 58 0 41 5 58 0 43 5 58 0 45 5 58 0 55 5 58 0 56 5 58 0 58 5 58 0 59 5 58 0 64 5 58 0 67 5 58 0 73 5 58 0 76 5 58 0 77 5 58 0 82 5 58 0 84 5 58 0 86 5 58 0 88 5 58 0 89 5 58 0 91 5 58 0 92 5 58 0 96 5 58 0 98 5 58 0 99 5 58 0 100 5 58 0 102 5 58 0 105 5 58 0 106 5 58 0 107 5 58 0 108 5 58 0 112 5 58 0 115 5 58 0 116 5 58 0 121 5 58 0 123 5 58 0 126 5 58 0 131 5 58 0 132 5 58 0 133 5 58 0 134 5 58 0 138 5 58 0 140 5 58 0 142 5 58 0 143 5 58 0 147 5 58 0 150 5 58 0 151 5 58 0 162 5 58 0 167 5 58 0 168 5 58 0 171 2 63 0 172 5 58 0 173 5 58 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 157 1 38 5 61 1 39 5 65 1 40 11 157 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 157 1 47 5 97 1 49 5 101 1 51 11 157 1 53 11 157 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 161 1 38 5 61 1 39 5 65 1 40 11 161 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 161 1 47 5 97 1 49 5 101 1 51 11 161 1 53 11 161 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 5 157 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 11 165 0 54 1 17 0 55 5 161 0 56 1 17 0 58 1 17 0 59 5 165 0 64 1 17 0 67 1 17 0 77 11 169 0 78 11 169 0 80 5 177 0 84 11 169 0 87 1 17 0 88 5 185 0 89 11 169 0 90 11 169 0 94 1 17 0 107 11 169 0 114 1 17 0 115 1 17 0 116 11 169 0 118 11 169 0 119 11 169 0 120 1 17 0 123 1 17 0 138 11 169 0 139 1 17 0 143 5 217 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 221 0 191 1 17 0 194 5 221 0 195 5 221 0 196 5 221 0 197 11 169 0 221 5 229 0 222 11 169 0 224 5 237 0 225 5 241 0 226 11 169 0 227] 
#[0 11 173 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 11 177 1 25 11 181 1 34] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 185 0 191 1 17 0 194 11 185 0 195 11 185 0 196 11 185 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 189 0 191 1 17 0 194 11 189 0 195 11 189 0 196 11 189 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 193 0 191 1 17 0 194 11 193 0 195 11 193 0 196 11 193 0 197] 
#[1 11 197 0 12 11 201 0 18] 
#[1 11 205 0 12 11 209 0 18] 
#[0 5 62 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 11 213 1 25] 
#[0 5 66 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 217 1 38 5 61 1 39 5 65 1 40 11 217 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 217 1 47 5 97 1 49 5 101 1 51 11 217 1 53 11 217 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 221 1 38 5 61 1 39 5 65 1 40 11 221 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 11 221 1 47 5 97 1 49 5 101 1 51 11 221 1 53 11 221 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 5 70 0 1 5 70 0 3 5 70 0 4 5 70 0 6 5 70 0 7 5 70 0 8 5 70 0 9 5 70 0 11 5 70 0 13 5 70 0 22 5 70 0 23 5 70 0 25 5 70 0 43 5 70 0 45 5 70 0 54 5 70 0 55 5 70 0 56 5 70 0 58 5 70 0 59 5 70 0 64 5 70 0 66 5 70 0 67 5 70 0 77 5 70 0 79 5 70 0 81 5 70 0 82 5 70 0 84 5 70 0 88 5 70 0 89 5 70 0 96 5 70 0 98 5 70 0 99 5 70 0 107 5 70 0 115 5 70 0 116 5 70 0 121 5 70 0 123 5 70 0 124 5 70 0 129 5 70 0 138 5 70 0 143 5 70 0 150 5 70 0 151 5 70 0 155 5 70 0 160 5 70 0 161 5 70 0 162 5 70 0 163 5 70 0 164 5 70 0 165 5 70 0 166 5 70 0 167 5 70 0 168 5 70 0 170 5 70 0 171 2 67 0 172 5 70 0 173 5 70 1 144] 
#[1 5 74 0 1 5 74 0 3 5 74 0 4 5 74 0 6 5 74 0 7 5 74 0 8 5 74 0 9 5 74 0 11 5 74 0 13 5 74 0 22 5 74 0 23 5 74 0 25 5 74 0 43 5 74 0 45 5 74 0 54 5 74 0 55 5 74 0 56 5 74 0 58 5 74 0 59 5 74 0 64 5 74 0 66 5 74 0 67 5 74 0 77 5 74 0 79 5 74 0 81 5 74 0 82 5 74 0 84 5 74 0 88 5 74 0 89 5 74 0 96 5 74 0 98 5 74 0 99 5 74 0 107 5 74 0 115 5 74 0 116 5 74 0 121 5 74 0 123 5 74 0 124 5 74 0 129 5 74 0 138 5 74 0 143 5 74 0 150 5 74 0 151 5 74 0 155 5 74 0 160 5 74 0 161 5 74 0 162 5 74 0 163 5 74 0 164 5 74 0 165 5 74 0 166 5 74 0 167 5 74 0 168 5 74 0 170 5 74 0 171 2 71 0 172 5 74 0 173 5 74 1 144] 
#[0 5 78 0 172] 
#[0 5 82 0 172] 
#[0 11 233 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 11 237 0 7 4 225 0 8 0 33 0 9 11 241 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 11 245 1 132 5 141 1 141 5 141 1 143] 
#[1 0 150 0 1 2 75 0 3 3 90 0 4 3 90 0 5 3 90 0 7 0 150 0 9 3 90 0 11 3 90 0 13 3 90 0 22 3 90 0 23 3 90 0 28 3 90 0 29 3 90 0 30 3 90 0 31 3 90 0 32 3 90 0 33 3 90 0 34 3 90 0 35 3 90 0 36 3 90 0 37 3 90 0 38 3 90 0 39 3 90 0 40 3 90 0 41 3 90 0 43 3 90 0 45 3 90 0 55 3 90 0 56 3 90 0 58 3 90 0 59 3 90 0 64 3 90 0 67 3 90 0 73 3 90 0 76 3 90 0 77 3 90 0 82 3 90 0 84 3 90 0 86 3 90 0 88 3 90 0 89 3 90 0 91 3 90 0 92 3 90 0 96 3 90 0 98 3 90 0 99 3 90 0 100 3 90 0 102 3 90 0 105 3 90 0 106 3 90 0 107 3 90 0 108 3 90 0 112 3 90 0 115 3 90 0 116 3 90 0 121 3 90 0 123 3 90 0 126 3 90 0 131 3 90 0 132 3 90 0 133 3 90 0 134 3 90 0 138 3 90 0 140 3 90 0 142 3 90 0 143 3 90 0 147 3 90 0 150 3 90 0 151 3 90 0 162 3 90 0 167 3 90 0 168 3 90 0 171 2 79 0 172 3 90 0 173 3 90 1 144] 
#[0 5 86 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 253 0 172] 
#[1 5 90 0 3 5 90 0 4 5 90 0 5 5 90 0 7 5 90 0 11 5 90 0 13 5 90 0 22 5 90 0 23 5 90 0 28 5 90 0 29 5 90 0 30 5 90 0 31 5 90 0 32 5 90 0 33 5 90 0 34 5 90 0 35 5 90 0 36 5 90 0 37 5 90 0 38 5 90 0 39 5 90 0 40 5 90 0 41 5 90 0 43 5 90 0 45 5 90 0 55 5 90 0 56 5 90 0 58 5 90 0 59 5 90 0 64 5 90 0 67 5 90 0 73 5 90 0 76 5 90 0 77 5 90 0 82 5 90 0 84 5 90 0 86 5 90 0 88 5 90 0 89 5 90 0 91 5 90 0 92 5 90 0 96 5 90 0 98 5 90 0 99 5 90 0 100 5 90 0 102 5 90 0 105 5 90 0 106 5 90 0 107 5 90 0 108 5 90 0 112 5 90 0 115 5 90 0 116 5 90 0 121 5 90 0 123 5 90 0 126 5 90 0 131 5 90 0 132 5 90 0 133 5 90 0 134 5 90 0 138 5 90 0 140 5 90 0 142 5 90 0 143 5 90 0 147 5 90 0 150 5 90 0 151 5 90 0 162 5 90 0 167 5 90 0 168 5 90 0 171 2 83 0 172 5 90 0 173 5 90 1 144] 
#[1 4 97 0 1 4 101 0 9 2 87 0 172] 
#[1 4 182 0 4 12 1 0 7 4 182 0 11 2 91 0 13 4 182 0 55 4 182 0 82 4 182 0 96 4 182 0 98 4 182 0 99 4 182 0 121 4 182 0 151 4 182 0 162 4 182 0 172 4 182 0 173 12 9 1 137 4 182 1 144] 
#[0 5 94 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 5 98 0 4 12 13 0 7 5 98 0 11 12 17 0 13 5 98 0 55 5 98 0 82 5 98 0 96 5 98 0 98 5 98 0 99 5 98 0 121 5 98 0 151 5 98 0 162 2 95 0 172 5 98 0 173 12 25 1 136 5 98 1 144] 
#[1 12 29 0 4 12 33 0 172] 
#[0 5 102 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 37 0 4] 
#[1 0 6 0 99 2 99 0 173 12 41 0 177 12 45 0 205 12 49 0 207] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 53 0 191 1 17 0 194 12 53 0 195 12 53 0 196 12 53 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 57 0 191 1 17 0 194 12 57 0 195 12 57 0 196 12 57 0 197] 
#[1 8 153 0 3 12 61 0 253] 
#[1 0 162 0 3 4 53 0 5 12 65 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 12 77 1 11] 
#[1 12 81 0 26 12 85 0 88 12 89 0 143] 
#[0 12 93 0 122] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 97 0 191 1 17 0 194 12 97 0 195 12 97 0 196 12 97 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 101 0 191 1 17 0 194 12 101 0 195 12 101 0 196 12 101 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 105 0 191 1 17 0 194 12 105 0 195 12 105 0 196 12 105 0 197] 
#[1 8 153 0 3 12 117 0 172 2 107 0 173 12 113 0 253 12 117 1 13] 
#[1 12 121 0 172 4 202 0 173 12 121 1 13] 
#[1 3 221 0 173 3 229 0 207 12 125 0 213] 
#[0 12 129 0 172] 
#[0 5 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 133 0 172] 
#[0 5 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 12 137 1 38 5 61 1 39 5 65 1 40 12 137 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 12 137 1 47 5 97 1 49 5 101 1 51 12 137 1 53 12 137 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 12 141 0 106 12 145 0 142] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 149 0 191 1 17 0 194 12 149 0 195 12 149 0 196 12 149 0 197] 
#[1 12 153 0 107 12 157 0 116 12 161 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 165 0 191 1 17 0 194 12 165 0 195 12 165 0 196 12 165 0 197] 
#[1 12 169 0 106 12 173 0 132 12 177 0 142] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 181 0 191 1 17 0 194 12 181 0 195 12 181 0 196 12 181 0 197] 
#[1 12 185 0 107 12 189 0 116 12 193 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 197 0 191 1 17 0 194 12 197 0 195 12 197 0 196 12 197 0 197] 
#[0 5 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 126 0 22 5 126 0 23 5 126 0 28 5 126 0 29 5 126 0 30 5 126 0 31 5 126 0 32 5 126 0 33 5 126 0 34 5 126 0 35 5 126 0 36 5 126 0 37 5 126 0 38 5 126 0 39 5 126 0 40 5 126 0 41 5 126 0 43 5 126 0 45 5 126 0 55 5 126 0 56 5 126 0 58 5 126 0 59 5 126 0 64 5 126 0 67 5 126 0 73 5 126 0 76 5 126 0 77 12 201 0 83 5 126 0 84 5 126 0 86 5 126 0 88 5 126 0 89 5 126 0 91 5 126 0 92 5 126 0 100 5 126 0 102 5 126 0 105 5 126 0 106 5 126 0 107 5 126 0 108 5 126 0 112 5 126 0 115 5 126 0 116 5 126 0 123 5 126 0 126 5 126 0 131 5 126 0 132 5 126 0 133 5 126 0 134 5 126 0 138 5 126 0 140 5 126 0 142 5 126 0 143 5 126 0 147 5 126 0 150 5 126 0 167 5 126 0 168 5 126 0 171 5 126 0 172 5 126 0 173 5 126 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 181 0 200 7 181 0 201 7 181 0 203 7 181 0 204 7 181 0 208 3 21 0 209 7 181 0 210 7 181 0 211 3 33 0 223 7 181 0 242 7 181 0 243 7 181 0 247 7 181 0 248 7 181 1 5 7 181 1 6 7 181 1 7 3 53 1 8 7 181 1 9 7 181 1 12 7 181 1 14 7 181 1 15 7 181 1 16 7 181 1 17 7 181 1 18 7 181 1 19 7 181 1 20 7 181 1 21 7 181 1 22 7 181 1 23 1 125 1 25 7 181 1 26 7 181 1 27 7 181 1 28 7 181 1 29 7 181 1 30 7 181 1 34 7 181 1 37 5 130 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 12 205 0 177 4 181 0 178 0 6 1 144] 
#[1 12 209 0 4 12 213 0 172] 
#[0 5 134 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 12 217 0 4 10 29 0 18 10 33 0 146] 
#[0 5 138 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 142 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 5 146 0 3 5 146 0 4 5 146 0 5 5 146 0 7 4 101 0 9 5 146 0 11 5 146 0 13 5 146 0 22 5 146 0 23 5 146 0 28 5 146 0 29 5 146 0 30 5 146 0 31 5 146 0 32 5 146 0 33 5 146 0 34 5 146 0 35 5 146 0 36 5 146 0 37 5 146 0 38 5 146 0 39 5 146 0 40 5 146 0 41 5 146 0 43 5 146 0 45 5 146 0 55 5 146 0 56 5 146 0 58 5 146 0 59 5 146 0 64 5 146 0 67 5 146 0 73 5 146 0 76 5 146 0 77 5 146 0 82 5 146 0 84 5 146 0 86 5 146 0 88 5 146 0 89 5 146 0 91 5 146 0 92 5 146 0 96 5 146 0 98 5 146 0 99 5 146 0 100 5 146 0 102 5 146 0 105 5 146 0 106 5 146 0 107 5 146 0 108 5 146 0 112 5 146 0 115 5 146 0 116 5 146 0 121 5 146 0 123 5 146 0 126 5 146 0 131 5 146 0 132 5 146 0 133 5 146 0 134 5 146 0 138 5 146 0 140 5 146 0 142 5 146 0 143 5 146 0 147 5 146 0 150 5 146 0 151 5 146 0 162 5 146 0 167 5 146 0 168 5 146 0 171 5 146 0 172 5 146 0 173 5 146 1 144] 
#[0 12 221 0 172] 
#[0 5 150 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 5 158 0 3 5 158 0 4 5 158 0 5 5 158 0 7 4 101 0 9 5 158 0 11 5 158 0 13 5 158 0 22 5 158 0 23 5 158 0 28 5 158 0 29 5 158 0 30 5 158 0 31 5 158 0 32 5 158 0 33 5 158 0 34 5 158 0 35 5 158 0 36 5 158 0 37 5 158 0 38 5 158 0 39 5 158 0 40 5 158 0 41 5 158 0 43 5 158 0 45 5 158 0 55 5 158 0 56 5 158 0 58 5 158 0 59 5 158 0 64 5 158 0 67 5 158 0 73 5 158 0 76 5 158 0 77 5 158 0 82 5 158 0 84 5 158 0 86 5 158 0 88 5 158 0 89 5 158 0 91 5 158 0 92 5 158 0 96 5 158 0 98 5 158 0 99 5 158 0 100 5 158 0 102 5 158 0 105 5 158 0 106 5 158 0 107 5 158 0 108 5 158 0 112 5 158 0 115 5 158 0 116 5 158 0 121 5 158 0 123 5 158 0 126 5 158 0 131 5 158 0 132 5 158 0 133 5 158 0 134 5 158 0 138 5 158 0 140 5 158 0 142 5 158 0 143 5 158 0 147 5 158 0 150 5 158 0 151 5 158 0 162 5 158 0 167 5 158 0 168 5 158 0 171 5 158 0 172 5 158 0 173 5 158 1 144] 
#[0 5 162 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 229 0 159 12 225 0 190] 
#[0 5 166 0 8 0 156 0 159] 
#[0 12 229 0 172] 
#[0 12 233 0 172] 
#[0 12 237 0 172] 
#[0 12 241 0 172] 
#[0 5 170 0 172] 
#[0 5 174 0 172] 
#[0 5 178 0 172] 
#[0 5 182 0 172] 
#[0 5 186 0 172] 
#[0 5 190 0 172] 
#[0 5 194 0 172] 
#[0 5 198 0 172] 
#[0 5 202 0 172] 
#[0 5 206 0 172] 
#[0 5 210 0 172] 
#[0 5 214 0 172] 
#[0 5 218 0 172] 
#[0 5 222 0 172] 
#[0 5 226 0 172] 
#[0 5 230 0 172] 
#[0 5 234 0 172] 
#[0 5 238 0 172] 
#[0 12 245 0 172] 
#[0 12 249 0 172] 
#[0 12 253 0 172] 
#[0 13 1 0 172] 
#[0 13 5 0 172] 
#[0 13 9 0 172] 
#[0 13 13 0 172] 
#[0 13 17 0 172] 
#[0 13 21 0 172] 
#[1 13 25 0 7 13 29 0 172] 
#[1 13 33 0 7 13 37 0 172] 
#[0 13 41 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 250 0 11 4 250 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 23 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 4 250 0 82 1 17 0 84 1 17 0 88 1 17 0 89 4 250 0 96 4 250 0 98 4 250 0 99 1 17 0 107 1 17 0 115 1 17 0 116 4 250 0 121 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 250 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 27 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 4 250 0 172 4 250 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 13 45 1 38 5 61 1 39 5 65 1 40 13 45 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 13 45 1 47 5 97 1 49 5 101 1 51 13 45 1 53 13 45 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 13 49 1 66 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143 4 250 1 144] 
#[1 4 250 0 11 4 250 0 13 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 4 250 0 151 4 250 0 162 2 111 0 172 4 250 0 173 13 57 1 66 4 250 1 144] 
#[1 5 242 0 11 13 61 0 13 5 242 0 55 5 242 0 82 5 242 0 96 5 242 0 98 5 242 0 99 5 242 0 121 5 242 0 151 5 242 0 162 5 242 0 172 5 242 0 173 13 65 1 65 5 242 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 250 0 11 4 250 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 23 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 4 250 0 82 1 17 0 84 1 17 0 88 1 17 0 89 4 250 0 96 4 250 0 98 4 250 0 99 1 17 0 107 1 17 0 115 1 17 0 116 4 250 0 121 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 250 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 27 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 115 0 172 4 250 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 13 73 1 38 5 61 1 39 5 65 1 40 13 73 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 13 73 1 47 5 97 1 49 5 101 1 51 13 73 1 53 13 73 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 13 77 1 66 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143 4 250 1 144] 
#[0 13 81 0 172] 
#[0 13 85 0 172] 
#[1 8 57 0 3 4 53 0 5 2 119 0 7 2 119 0 11 2 119 0 22 2 119 0 23 2 119 0 28 2 119 0 29 2 119 0 30 2 119 0 31 2 119 0 32 2 119 0 33 2 119 0 34 2 119 0 35 2 119 0 36 2 119 0 37 2 119 0 38 2 119 0 39 2 119 0 40 2 119 0 41 2 119 0 43 2 119 0 45 2 119 0 55 2 119 0 56 2 119 0 58 2 119 0 59 2 119 0 64 2 119 0 67 2 119 0 73 2 119 0 76 2 119 0 77 2 119 0 82 2 119 0 84 2 119 0 86 2 119 0 88 2 119 0 89 2 119 0 91 2 119 0 92 2 119 0 96 2 119 0 98 2 119 0 99 2 119 0 100 2 119 0 102 2 119 0 105 2 119 0 106 2 119 0 107 2 119 0 108 2 119 0 112 2 119 0 115 2 119 0 116 2 119 0 121 2 119 0 123 2 119 0 126 2 119 0 131 2 119 0 132 2 119 0 133 2 119 0 134 2 119 0 138 2 119 0 140 2 119 0 142 2 119 0 143 2 119 0 147 2 119 0 150 2 119 0 151 2 119 0 162 2 119 0 167 2 119 0 168 2 119 0 171 2 123 0 172 2 119 0 173 13 93 0 228 13 93 0 229 13 89 0 230 13 93 0 233 2 119 1 144] 
#[1 13 97 0 4 13 101 0 7 13 105 0 231] 
#[1 4 254 0 4 4 254 0 7 7 241 0 172 13 109 0 232] 
#[0 5 250 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 13 113 1 24] 
#[0 5 254 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 13 117 0 172 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 13 121 1 24] 
#[0 6 2 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 13 125 1 38 5 61 1 39 5 65 1 40 13 125 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 13 125 1 47 5 97 1 49 5 101 1 51 13 125 1 53 13 125 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 7 241 0 172 3 221 0 173 3 229 0 207 13 129 0 213] 
#[1 13 133 0 121 3 213 0 162 7 241 0 172 3 221 0 173 13 137 0 182 3 229 0 207 13 141 0 213] 
#[0 13 145 0 152] 
#[1 2 214 0 11 2 214 0 55 2 214 0 82 2 214 0 96 2 214 0 98 2 214 0 99 2 214 0 121 2 214 0 151 2 214 0 162 2 214 0 172 2 214 0 173 13 149 0 215] 
#[1 8 113 0 11 0 6 0 55 0 6 0 82 0 6 0 96 0 6 0 98 0 6 0 99 0 6 0 121 0 6 0 151 0 6 0 162 8 117 0 172 1 207 0 173 13 153 0 177 8 129 0 214 8 133 0 216 8 137 0 217] 
#[1 6 6 0 55 6 6 0 82 6 6 0 96 6 6 0 98 6 6 0 99 6 6 0 121 6 6 0 151 6 6 0 162 3 105 0 173] 
#[0 6 10 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 6 14 0 1 6 14 0 9 6 14 0 11 6 14 0 22 6 14 0 23 6 14 0 25 6 14 0 27 6 14 0 42 6 14 0 43 6 14 0 44 6 14 0 45 6 14 0 49 6 14 0 54 6 14 0 55 6 14 0 56 6 14 0 57 6 14 0 58 6 14 0 59 6 14 0 60 6 14 0 64 6 14 0 67 6 14 0 73 6 14 0 75 6 14 0 77 6 14 0 84 6 14 0 86 6 14 0 88 6 14 0 89 6 14 0 92 6 14 0 93 6 14 0 100 6 14 0 102 6 14 0 103 6 14 0 105 6 14 0 107 6 14 0 108 6 14 0 109 6 14 0 110 6 14 0 111 6 14 0 115 6 14 0 116 6 14 0 123 6 14 0 125 6 14 0 126 6 14 0 131 6 14 0 133 6 14 0 134 6 14 0 135 6 14 0 136 6 14 0 137 6 14 0 138 6 14 0 140 6 14 0 143 6 14 0 147 6 14 0 150 6 14 0 152 6 14 0 153 6 14 0 162 6 14 0 167 6 14 0 168 6 14 0 171 2 127 0 172 6 14 0 173] 
#[1 10 249 0 11 4 49 0 126] 
#[0 13 161 0 172] 
#[0 6 18 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173] 
#[0 6 22 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 13 165 0 172] 
#[0 13 169 0 172] 
#[1 6 26 0 11 6 26 0 55 6 26 0 82 6 26 0 96 6 26 0 98 6 26 0 99 6 26 0 121 6 26 0 151 6 26 0 162 2 131 0 172 6 26 0 173 6 26 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 13 177 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 181 0 191 1 17 0 194 13 181 0 195 13 181 0 196 13 181 0 197 13 185 0 251] 
#[0 6 30 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 6 34 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 13 189 0 172] 
#[0 13 193 0 172] 
#[0 13 197 0 4] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 13 213 0 228 13 213 0 229 13 201 0 230 13 213 0 233 13 213 1 1 13 213 1 2] 
#[0 13 217 0 172] 
#[1 6 42 0 4 6 42 0 7 6 42 0 172 13 221 0 255] 
#[0 6 46 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 13 225 0 172 13 229 0 182 13 229 0 191 1 17 0 194 13 229 0 195 13 229 0 196 13 229 0 197 13 229 1 43 13 229 1 105] 
#[0 13 233 0 7] 
#[0 6 50 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 13 237 0 172 3 221 0 173 3 229 0 207 13 241 0 213 13 245 0 218] 
#[1 13 237 0 172 13 249 0 173 13 253 0 218] 
#[0 14 1 0 172] 
#[0 14 5 0 172] 
#[0 6 54 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 6 58 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 6 62 0 11 6 62 0 22 6 62 0 23 6 62 0 28 6 62 0 29 6 62 0 30 6 62 0 31 6 62 0 32 6 62 0 33 6 62 0 34 6 62 0 35 6 62 0 36 6 62 0 37 6 62 0 38 6 62 0 39 6 62 0 40 6 62 0 41 6 62 0 43 6 62 0 45 6 62 0 55 6 62 0 56 6 62 0 58 6 62 0 59 6 62 0 64 6 62 0 67 6 62 0 73 6 62 0 76 6 62 0 77 6 62 0 82 6 62 0 84 6 62 0 86 6 62 0 88 6 62 0 89 6 62 0 91 6 62 0 92 6 62 0 96 6 62 0 98 6 62 0 99 6 62 0 100 6 62 0 102 6 62 0 105 6 62 0 106 6 62 0 107 6 62 0 108 6 62 0 112 6 62 0 115 6 62 0 116 6 62 0 121 6 62 0 123 6 62 0 126 6 62 0 131 6 62 0 132 6 62 0 133 6 62 0 134 6 62 0 138 6 62 0 140 6 62 0 142 6 62 0 143 6 62 0 147 6 62 0 150 6 62 0 151 6 62 0 162 6 62 0 167 6 62 0 168 6 62 0 171 2 143 0 172 6 62 0 173 6 62 1 144] 
#[1 8 73 0 7 6 66 0 11 6 66 0 22 6 66 0 23 6 66 0 28 6 66 0 29 6 66 0 30 6 66 0 31 6 66 0 32 6 66 0 33 6 66 0 34 6 66 0 35 6 66 0 36 6 66 0 37 6 66 0 38 6 66 0 39 6 66 0 40 6 66 0 41 6 66 0 43 6 66 0 45 6 66 0 55 6 66 0 56 6 66 0 58 6 66 0 59 6 66 0 64 6 66 0 67 6 66 0 73 6 66 0 76 6 66 0 77 6 66 0 82 6 66 0 84 6 66 0 86 6 66 0 88 6 66 0 89 6 66 0 91 6 66 0 92 6 66 0 96 6 66 0 98 6 66 0 99 6 66 0 100 6 66 0 102 6 66 0 105 6 66 0 106 6 66 0 107 6 66 0 108 6 66 0 112 6 66 0 115 6 66 0 116 6 66 0 121 6 66 0 123 6 66 0 126 6 66 0 131 6 66 0 132 6 66 0 133 6 66 0 134 6 66 0 138 6 66 0 140 6 66 0 142 6 66 0 143 6 66 0 147 6 66 0 150 6 66 0 151 6 66 0 162 6 66 0 167 6 66 0 168 6 66 0 171 2 147 0 172 6 66 0 173 8 81 1 32 8 85 1 33 6 66 1 144] 
#[0 6 70 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 74 0 11 6 74 0 22 6 74 0 23 6 74 0 28 6 74 0 29 6 74 0 30 6 74 0 31 6 74 0 32 6 74 0 33 6 74 0 34 6 74 0 35 6 74 0 36 6 74 0 37 6 74 0 38 6 74 0 39 6 74 0 40 6 74 0 41 6 74 0 43 6 74 0 45 6 74 0 55 6 74 0 56 6 74 0 58 6 74 0 59 6 74 0 64 6 74 0 67 6 74 0 73 6 74 0 76 6 74 0 77 6 74 0 82 6 74 0 84 6 74 0 86 6 74 0 88 6 74 0 89 6 74 0 91 6 74 0 92 6 74 0 96 6 74 0 98 6 74 0 99 6 74 0 100 6 74 0 102 6 74 0 105 6 74 0 106 6 74 0 107 6 74 0 108 6 74 0 112 6 74 0 115 6 74 0 116 6 74 0 121 6 74 0 123 6 74 0 126 6 74 0 131 6 74 0 132 6 74 0 133 6 74 0 134 6 74 0 138 6 74 0 140 6 74 0 142 6 74 0 143 6 74 0 147 6 74 0 150 6 74 0 151 6 74 0 162 6 74 0 167 6 74 0 168 6 74 0 171 2 151 0 172 6 74 0 173 6 74 1 144] 
#[1 7 241 0 172 3 221 0 173 14 9 0 207] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 14 13 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 14 17 0 191 1 17 0 194 14 17 0 195 14 17 0 196 14 17 0 197 14 21 0 246] 
#[0 6 78 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 14 25 0 151] 
#[0 6 82 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 14 29 0 172] 
#[0 14 33 0 172] 
#[0 14 37 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 14 41 1 38 5 61 1 39 5 65 1 40 14 41 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 14 41 1 47 5 97 1 49 5 101 1 51 14 41 1 53 14 41 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 6 86 0 3 6 86 0 4 6 86 0 5 6 86 0 7 6 86 0 11 6 86 0 22 6 86 0 23 6 86 0 28 6 86 0 29 6 86 0 30 6 86 0 31 6 86 0 32 6 86 0 33 6 86 0 34 6 86 0 35 6 86 0 36 6 86 0 37 6 86 0 38 6 86 0 39 6 86 0 40 6 86 0 41 6 86 0 43 6 86 0 45 6 86 0 55 6 86 0 56 6 86 0 58 6 86 0 59 6 86 0 64 6 86 0 67 6 86 0 73 6 86 0 76 6 86 0 77 6 86 0 82 6 86 0 84 6 86 0 86 6 86 0 88 6 86 0 89 6 86 0 91 6 86 0 92 6 86 0 96 6 86 0 98 6 86 0 99 6 86 0 100 6 86 0 102 6 86 0 105 6 86 0 106 6 86 0 107 6 86 0 108 6 86 0 112 6 86 0 115 6 86 0 116 6 86 0 121 6 86 0 123 6 86 0 126 6 86 0 131 6 86 0 132 6 86 0 133 6 86 0 134 6 86 0 138 6 86 0 140 6 86 0 142 6 86 0 143 6 86 0 147 6 86 0 150 6 86 0 151 6 86 0 162 6 86 0 167 6 86 0 168 6 86 0 171 2 155 0 172 6 86 0 173 6 86 1 144] 
#[1 6 90 0 3 6 90 0 4 6 90 0 5 6 90 0 7 6 90 0 11 6 90 0 13 6 90 0 22 6 90 0 23 6 90 0 28 6 90 0 29 6 90 0 30 6 90 0 31 6 90 0 32 6 90 0 33 6 90 0 34 6 90 0 35 6 90 0 36 6 90 0 37 6 90 0 38 6 90 0 39 6 90 0 40 6 90 0 41 6 90 0 43 6 90 0 45 6 90 0 55 6 90 0 56 6 90 0 58 6 90 0 59 6 90 0 64 6 90 0 67 6 90 0 73 6 90 0 76 6 90 0 77 6 90 0 82 6 90 0 84 6 90 0 86 6 90 0 88 6 90 0 89 6 90 0 91 6 90 0 92 6 90 0 96 6 90 0 98 6 90 0 99 6 90 0 100 6 90 0 102 6 90 0 105 6 90 0 106 6 90 0 107 6 90 0 108 6 90 0 112 6 90 0 115 6 90 0 116 6 90 0 121 6 90 0 123 6 90 0 126 6 90 0 131 6 90 0 132 6 90 0 133 6 90 0 134 6 90 0 138 6 90 0 140 6 90 0 142 6 90 0 143 6 90 0 147 6 90 0 150 6 90 0 151 6 90 0 162 6 90 0 167 6 90 0 168 6 90 0 171 2 159 0 172 6 90 0 173 6 90 1 144] 
#[1 6 94 0 7 6 98 0 11 6 98 0 55 6 98 0 82 6 98 0 96 6 98 0 98 6 98 0 99 6 98 0 121 6 98 0 151 6 98 0 162 2 163 0 172 6 98 0 173 6 98 1 144] 
#[0 14 45 0 172] 
#[1 6 102 0 3 6 102 0 4 14 49 0 5 6 102 0 7 6 102 0 11 6 102 0 22 6 102 0 23 6 102 0 28 6 102 0 29 6 102 0 30 6 102 0 31 6 102 0 32 6 102 0 33 6 102 0 34 6 102 0 35 6 102 0 36 6 102 0 37 6 102 0 38 6 102 0 39 6 102 0 40 6 102 0 41 6 102 0 43 6 102 0 45 6 102 0 55 6 102 0 56 6 102 0 58 6 102 0 59 6 102 0 64 6 102 0 67 6 102 0 73 6 102 0 76 6 102 0 77 6 102 0 82 6 102 0 84 6 102 0 86 6 102 0 88 6 102 0 89 6 102 0 91 6 102 0 92 6 102 0 96 6 102 0 98 6 102 0 99 6 102 0 100 6 102 0 102 6 102 0 105 6 102 0 106 6 102 0 107 6 102 0 108 6 102 0 112 6 102 0 115 6 102 0 116 6 102 0 121 6 102 0 123 6 102 0 126 6 102 0 131 6 102 0 132 6 102 0 133 6 102 0 134 6 102 0 138 6 102 0 140 6 102 0 142 6 102 0 143 6 102 0 147 6 102 0 150 6 102 0 151 6 102 0 162 6 102 0 167 6 102 0 168 6 102 0 171 2 167 0 172 6 102 0 173 6 102 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 14 57 1 38 5 61 1 39 5 65 1 40 14 57 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 14 57 1 47 5 97 1 49 5 101 1 51 14 57 1 53 14 57 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 4 81 0 7 6 106 0 11 6 106 0 22 6 106 0 23 6 106 0 28 6 106 0 29 6 106 0 30 6 106 0 31 6 106 0 32 6 106 0 33 6 106 0 34 6 106 0 35 6 106 0 36 6 106 0 37 6 106 0 38 6 106 0 39 6 106 0 40 6 106 0 41 6 106 0 43 6 106 0 45 6 106 0 55 6 106 0 56 6 106 0 58 6 106 0 59 6 106 0 64 6 106 0 67 6 106 0 73 6 106 0 76 6 106 0 77 6 106 0 82 6 106 0 84 6 106 0 86 6 106 0 88 6 106 0 89 6 106 0 91 6 106 0 92 6 106 0 96 6 106 0 98 6 106 0 99 6 106 0 100 6 106 0 102 6 106 0 105 6 106 0 106 6 106 0 107 6 106 0 108 6 106 0 112 6 106 0 115 6 106 0 116 6 106 0 121 6 106 0 123 6 106 0 126 6 106 0 131 6 106 0 132 6 106 0 133 6 106 0 134 6 106 0 138 6 106 0 140 6 106 0 142 6 106 0 143 6 106 0 147 6 106 0 150 6 106 0 151 6 106 0 162 6 106 0 167 6 106 0 168 6 106 0 171 2 171 0 172 6 106 0 173 4 89 1 35 4 93 1 36 6 106 1 144] 
#[0 6 110 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 70 0 22 4 70 0 23 4 70 0 43 4 70 0 45 4 70 0 55 4 70 0 56 4 70 0 58 4 70 0 59 4 70 0 64 4 70 0 67 4 70 0 77 4 70 0 84 4 70 0 88 4 70 0 89 4 70 0 99 4 70 0 107 4 70 0 115 4 70 0 116 4 70 0 123 4 70 0 138 4 70 0 143 4 70 0 150 4 70 0 167 4 70 0 168 4 70 0 171 4 70 0 173 14 61 0 250] 
#[1 8 153 0 3 14 65 0 172 14 69 0 253] 
#[1 4 146 0 22 4 146 0 23 4 146 0 43 4 146 0 45 4 146 0 55 4 146 0 56 4 146 0 58 4 146 0 59 4 146 0 64 4 146 0 67 4 146 0 77 4 146 0 84 4 146 0 88 4 146 0 89 4 146 0 99 4 146 0 107 4 146 0 115 4 146 0 116 4 146 0 123 4 146 0 138 4 146 0 143 4 146 0 150 4 146 0 167 4 146 0 168 4 146 0 171 4 146 0 173 14 73 0 245] 
#[0 14 77 0 172] 
#[0 14 81 0 172] 
#[0 14 85 0 172] 
#[0 14 89 0 172] 
#[0 6 114 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 118 0 3 6 118 0 4 6 118 0 5 6 118 0 7 6 118 0 11 6 118 0 13 6 118 0 22 6 118 0 23 6 118 0 28 6 118 0 29 6 118 0 30 6 118 0 31 6 118 0 32 6 118 0 33 6 118 0 34 6 118 0 35 6 118 0 36 6 118 0 37 6 118 0 38 6 118 0 39 6 118 0 40 6 118 0 41 6 118 0 43 6 118 0 45 6 118 0 55 6 118 0 56 6 118 0 58 6 118 0 59 6 118 0 64 6 118 0 67 6 118 0 73 6 118 0 76 6 118 0 77 6 118 0 82 6 118 0 84 6 118 0 86 6 118 0 88 6 118 0 89 6 118 0 91 6 118 0 92 6 118 0 96 6 118 0 98 6 118 0 99 6 118 0 100 6 118 0 102 6 118 0 105 6 118 0 106 6 118 0 107 6 118 0 108 6 118 0 112 6 118 0 115 6 118 0 116 6 118 0 121 6 118 0 123 6 118 0 126 6 118 0 131 6 118 0 132 6 118 0 133 6 118 0 134 6 118 0 138 6 118 0 140 6 118 0 142 6 118 0 143 6 118 0 147 6 118 0 150 6 118 0 151 6 118 0 162 6 118 0 167 6 118 0 168 6 118 0 171 2 175 0 172 6 118 0 173 6 118 1 144] 
#[1 6 122 0 3 6 122 0 4 6 122 0 5 6 122 0 7 6 122 0 11 6 122 0 13 6 122 0 22 6 122 0 23 6 122 0 28 6 122 0 29 6 122 0 30 6 122 0 31 6 122 0 32 6 122 0 33 6 122 0 34 6 122 0 35 6 122 0 36 6 122 0 37 6 122 0 38 6 122 0 39 6 122 0 40 6 122 0 41 6 122 0 43 6 122 0 45 6 122 0 55 6 122 0 56 6 122 0 58 6 122 0 59 6 122 0 64 6 122 0 67 6 122 0 73 6 122 0 76 6 122 0 77 6 122 0 82 6 122 0 84 6 122 0 86 6 122 0 88 6 122 0 89 6 122 0 91 6 122 0 92 6 122 0 96 6 122 0 98 6 122 0 99 6 122 0 100 6 122 0 102 6 122 0 105 6 122 0 106 6 122 0 107 6 122 0 108 6 122 0 112 6 122 0 115 6 122 0 116 6 122 0 121 6 122 0 123 6 122 0 126 6 122 0 131 6 122 0 132 6 122 0 133 6 122 0 134 6 122 0 138 6 122 0 140 6 122 0 142 6 122 0 143 6 122 0 147 6 122 0 150 6 122 0 151 6 122 0 162 6 122 0 167 6 122 0 168 6 122 0 171 2 179 0 172 6 122 0 173 6 122 1 144] 
#[0 6 126 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 6 130 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 14 93 0 236 14 97 1 38 5 61 1 39 5 65 1 40 14 97 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 14 97 1 47 5 97 1 49 5 101 1 51 14 97 1 53 14 97 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 6 134 0 1 6 134 0 3 6 134 0 4 6 134 0 6 6 134 0 7 6 134 0 8 6 134 0 9 6 134 0 11 6 134 0 13 6 134 0 22 6 134 0 23 6 134 0 25 6 134 0 43 6 134 0 45 6 134 0 54 6 134 0 55 6 134 0 56 6 134 0 58 6 134 0 59 6 134 0 64 6 134 0 66 6 134 0 67 6 134 0 77 6 134 0 79 6 134 0 81 6 134 0 82 6 134 0 84 6 134 0 88 6 134 0 89 6 134 0 96 6 134 0 98 6 134 0 99 6 134 0 107 6 134 0 115 6 134 0 116 6 134 0 121 6 134 0 123 6 134 0 124 6 134 0 129 6 134 0 138 6 134 0 143 6 134 0 150 6 134 0 151 6 134 0 155 6 134 0 160 6 134 0 161 6 134 0 162 6 134 0 163 6 134 0 164 6 134 0 165 6 134 0 166 6 134 0 167 6 134 0 168 6 134 0 170 6 134 0 171 2 183 0 172 6 134 0 173 6 134 1 144] 
#[1 6 138 0 1 6 138 0 3 6 138 0 4 6 138 0 6 6 138 0 7 6 138 0 8 6 138 0 9 6 138 0 11 6 138 0 13 6 138 0 22 6 138 0 23 6 138 0 25 6 138 0 43 6 138 0 45 6 138 0 54 6 138 0 55 6 138 0 56 6 138 0 58 6 138 0 59 6 138 0 64 6 138 0 66 6 138 0 67 6 138 0 77 6 138 0 79 6 138 0 81 6 138 0 82 6 138 0 84 6 138 0 88 6 138 0 89 6 138 0 96 6 138 0 98 6 138 0 99 6 138 0 107 6 138 0 115 6 138 0 116 6 138 0 121 6 138 0 123 6 138 0 124 6 138 0 129 6 138 0 138 6 138 0 143 6 138 0 150 6 138 0 151 6 138 0 155 6 138 0 160 6 138 0 161 6 138 0 162 6 138 0 163 6 138 0 164 6 138 0 165 6 138 0 166 6 138 0 167 6 138 0 168 6 138 0 170 6 138 0 171 2 187 0 172 6 138 0 173 6 138 1 144] 
#[1 14 109 0 7 14 113 0 13] 
#[1 6 233 0 12 14 117 0 18] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 14 121 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 14 125 0 236 14 129 1 38 5 61 1 39 5 65 1 40 14 129 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 14 129 1 47 5 97 1 49 5 101 1 51 14 129 1 53 14 129 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 6 142 0 1 6 142 0 3 6 142 0 4 6 142 0 6 6 142 0 7 6 142 0 8 6 142 0 9 6 142 0 11 6 142 0 13 6 142 0 22 6 142 0 23 6 142 0 25 6 142 0 43 6 142 0 45 6 142 0 54 6 142 0 55 6 142 0 56 6 142 0 58 6 142 0 59 6 142 0 64 6 142 0 66 6 142 0 67 6 142 0 77 6 142 0 79 6 142 0 81 6 142 0 82 6 142 0 84 6 142 0 88 6 142 0 89 6 142 0 96 6 142 0 98 6 142 0 99 6 142 0 107 6 142 0 115 6 142 0 116 6 142 0 121 6 142 0 123 6 142 0 124 6 142 0 129 6 142 0 138 6 142 0 143 6 142 0 150 6 142 0 151 6 142 0 155 6 142 0 160 6 142 0 161 6 142 0 162 6 142 0 163 6 142 0 164 6 142 0 165 6 142 0 166 6 142 0 167 6 142 0 168 6 142 0 170 6 142 0 171 2 191 0 172 6 142 0 173 6 142 1 144] 
#[1 6 146 0 1 6 146 0 3 6 146 0 4 6 146 0 6 6 146 0 7 6 146 0 8 6 146 0 9 6 146 0 11 6 146 0 13 6 146 0 22 6 146 0 23 6 146 0 25 6 146 0 43 6 146 0 45 6 146 0 54 6 146 0 55 6 146 0 56 6 146 0 58 6 146 0 59 6 146 0 64 6 146 0 66 6 146 0 67 6 146 0 77 6 146 0 79 6 146 0 81 6 146 0 82 6 146 0 84 6 146 0 88 6 146 0 89 6 146 0 96 6 146 0 98 6 146 0 99 6 146 0 107 6 146 0 115 6 146 0 116 6 146 0 121 6 146 0 123 6 146 0 124 6 146 0 129 6 146 0 138 6 146 0 143 6 146 0 150 6 146 0 151 6 146 0 155 6 146 0 160 6 146 0 161 6 146 0 162 6 146 0 163 6 146 0 164 6 146 0 165 6 146 0 166 6 146 0 167 6 146 0 168 6 146 0 170 6 146 0 171 2 195 0 172 6 146 0 173 6 146 1 144] 
#[1 6 150 0 4 12 13 0 7 6 150 0 11 12 17 0 13 6 150 0 55 6 150 0 82 6 150 0 96 6 150 0 98 6 150 0 99 6 150 0 121 6 150 0 151 6 150 0 162 2 199 0 172 6 150 0 173 12 25 1 136 6 150 1 144] 
#[1 0 29 0 1 4 217 0 3 6 154 0 4 4 221 0 6 6 154 0 7 4 225 0 8 0 33 0 9 6 154 0 11 6 154 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 203 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 6 154 0 82 1 17 0 84 1 17 0 88 1 17 0 89 6 154 0 96 6 154 0 98 6 154 0 99 1 17 0 107 1 17 0 115 1 17 0 116 6 154 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 6 154 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 207 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 211 0 172 6 154 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 14 145 1 132 5 141 1 141 5 141 1 143 6 154 1 144] 
#[1 0 29 0 1 4 217 0 3 6 158 0 4 4 221 0 6 6 158 0 7 4 225 0 8 0 33 0 9 6 158 0 11 6 158 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 215 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 6 158 0 82 1 17 0 84 1 17 0 88 1 17 0 89 6 158 0 96 6 158 0 98 6 158 0 99 1 17 0 107 1 17 0 115 1 17 0 116 6 158 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 6 158 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 219 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 223 0 172 6 158 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 14 153 1 132 5 141 1 141 5 141 1 143 6 158 1 144] 
#[1 14 157 0 7 14 161 0 13] 
#[0 6 162 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 6 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 14 165 0 4] 
#[0 6 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 14 169 0 99 3 105 0 173] 
#[0 6 174 0 99 0 173] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 69 0 173 6 13 0 191 1 17 0 194 6 13 0 195 6 13 0 196 6 13 0 197 14 173 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 6 21 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 14 177 0 172] 
#[0 14 181 0 172] 
#[1 0 162 0 3 4 53 0 5 14 185 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 14 189 1 11] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 14 197 1 11] 
#[1 8 57 0 3 6 178 0 173 14 201 0 230] 
#[0 6 182 0 173] 
#[1 3 221 0 173 3 229 0 207 14 205 0 213] 
#[0 6 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 14 209 0 253] 
#[1 8 153 0 3 14 213 0 253] 
#[1 8 153 0 3 14 217 0 253] 
#[0 5 110 0 173] 
#[1 14 221 0 172 4 202 0 173 14 221 1 13] 
#[1 3 221 0 173 3 229 0 207 14 225 0 213] 
#[1 3 221 0 173 3 229 0 207 14 229 0 213] 
#[0 14 233 0 99] 
#[1 14 237 0 26 14 241 0 88 14 245 0 143] 
#[0 14 249 0 122] 
#[1 6 94 0 7 6 94 0 11 6 94 0 22 6 94 0 23 6 94 0 28 6 94 0 29 6 94 0 30 6 94 0 31 6 94 0 32 6 94 0 33 6 94 0 34 6 94 0 35 6 94 0 36 6 94 0 37 6 94 0 38 6 94 0 39 6 94 0 40 6 94 0 41 6 94 0 43 6 94 0 45 6 94 0 55 6 94 0 56 6 94 0 58 6 94 0 59 6 94 0 64 6 94 0 67 6 94 0 73 6 94 0 76 6 94 0 77 6 94 0 82 6 94 0 84 6 94 0 86 6 94 0 88 6 94 0 89 6 94 0 91 6 94 0 92 6 94 0 96 6 94 0 98 6 94 0 99 6 94 0 100 6 94 0 102 6 94 0 105 6 94 0 106 6 94 0 107 6 94 0 108 6 94 0 112 6 94 0 115 6 94 0 116 6 94 0 121 6 94 0 123 6 94 0 126 6 94 0 131 6 94 0 132 6 94 0 133 6 94 0 134 6 94 0 138 6 94 0 140 6 94 0 142 6 94 0 143 6 94 0 147 6 94 0 150 6 94 0 151 6 94 0 162 6 94 0 167 6 94 0 168 6 94 0 171 2 227 0 172 6 94 0 173 6 94 1 144] 
#[0 14 253 0 172] 
#[0 15 1 0 172] 
#[1 8 153 0 3 15 5 0 172 15 9 0 253] 
#[0 15 13 0 172] 
#[0 15 17 0 172] 
#[0 15 21 0 172] 
#[1 8 153 0 3 15 25 0 172 4 202 0 173 15 29 0 253 15 33 1 13] 
#[0 15 37 0 172] 
#[0 15 41 0 172] 
#[0 15 45 0 172] 
#[1 8 153 0 3 15 49 0 172 15 53 0 253] 
#[0 15 57 0 172] 
#[0 15 61 0 172] 
#[0 15 65 0 172] 
#[1 8 153 0 3 15 69 0 172 4 202 0 173 15 73 0 253 15 77 1 13] 
#[0 6 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 181 0 200 7 181 0 201 7 181 0 203 7 181 0 204 7 181 0 208 3 21 0 209 7 181 0 210 7 181 0 211 3 33 0 223 7 181 0 242 7 181 0 243 7 181 0 247 7 181 0 248 7 181 1 5 7 181 1 6 7 181 1 7 3 53 1 8 7 181 1 9 7 181 1 12 7 181 1 14 7 181 1 15 7 181 1 16 7 181 1 17 7 181 1 18 7 181 1 19 7 181 1 20 7 181 1 21 7 181 1 22 7 181 1 23 1 125 1 25 7 181 1 26 7 181 1 27 7 181 1 28 7 181 1 29 7 181 1 30 7 181 1 34 7 181 1 37 6 206 1 144] 
#[0 6 210 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 81 0 4 10 29 0 18 10 33 0 146] 
#[0 6 214 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 85 0 46 15 89 0 47] 
#[1 15 93 0 8 10 21 0 159] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 97 1 38 5 61 1 39 5 65 1 40 15 97 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 97 1 47 5 97 1 49 5 101 1 51 15 97 1 53 15 97 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 101 1 38 5 61 1 39 5 65 1 40 15 101 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 101 1 47 5 97 1 49 5 101 1 51 15 101 1 53 15 101 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 105 1 38 5 61 1 39 5 65 1 40 15 105 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 105 1 47 5 97 1 49 5 101 1 51 15 105 1 53 15 105 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 109 1 38 5 61 1 39 5 65 1 40 15 109 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 109 1 47 5 97 1 49 5 101 1 51 15 109 1 53 15 109 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 113 1 38 5 61 1 39 5 65 1 40 15 113 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 15 117 1 46 15 113 1 47 5 97 1 49 15 121 1 51 15 113 1 53 15 113 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 125 1 38 5 61 1 39 5 65 1 40 15 125 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 125 1 47 5 97 1 49 5 101 1 51 15 125 1 53 15 125 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 129 1 38 5 61 1 39 5 65 1 40 15 129 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 129 1 47 5 97 1 49 5 101 1 51 15 129 1 53 15 129 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 133 1 38 5 61 1 39 5 65 1 40 15 133 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 133 1 47 5 97 1 49 5 101 1 51 15 133 1 53 15 133 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 113 1 38 5 61 1 39 5 65 1 40 15 113 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 15 137 1 46 15 113 1 47 5 97 1 49 15 141 1 51 15 113 1 53 15 113 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 145 1 38 5 61 1 39 5 65 1 40 15 145 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 145 1 47 5 97 1 49 5 101 1 51 15 145 1 53 15 145 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 149 1 38 5 61 1 39 5 65 1 40 15 149 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 149 1 47 5 97 1 49 5 101 1 51 15 149 1 53 15 149 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 15 153 0 113] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 157 1 38 5 61 1 39 5 65 1 40 15 157 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 157 1 47 5 97 1 49 5 101 1 51 15 157 1 53 15 157 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 161 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 165 1 38 5 61 1 39 5 65 1 40 15 165 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 165 1 47 5 97 1 49 5 101 1 51 15 165 1 53 15 165 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 15 169 0 7] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 173 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 177 1 38 5 61 1 39 5 65 1 40 15 177 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 177 1 47 5 97 1 49 5 101 1 51 15 177 1 53 15 177 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 15 181 0 7] 
#[0 15 205 0 23 0 26 0 45 0 58 0 61 1 59] 
#[1 4 250 0 11 4 250 0 13 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 4 250 0 151 4 250 0 162 2 231 0 172 4 250 0 173 15 213 1 66 4 250 1 144] 
#[1 6 218 0 11 13 61 0 13 6 218 0 55 6 218 0 82 6 218 0 96 6 218 0 98 6 218 0 99 6 218 0 121 6 218 0 151 6 218 0 162 6 218 0 172 6 218 0 173 13 65 1 65 6 218 1 144] 
#[1 4 250 0 11 4 250 0 13 10 29 0 18 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 10 33 0 146 4 250 0 151 4 250 0 162 4 250 0 172 4 250 0 173 15 217 1 66 4 250 1 144] 
#[1 6 222 0 11 13 61 0 13 6 222 0 55 6 222 0 82 6 222 0 96 6 222 0 98 6 222 0 99 6 222 0 121 6 222 0 151 6 222 0 162 6 222 0 172 6 222 0 173 13 65 1 65 6 222 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 221 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 225 1 38 5 61 1 39 5 65 1 40 15 225 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 225 1 47 5 97 1 49 5 101 1 51 15 225 1 53 15 225 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 6 226 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 250 0 11 4 250 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 23 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 4 250 0 82 1 17 0 84 1 17 0 88 1 17 0 89 4 250 0 96 4 250 0 98 4 250 0 99 1 17 0 107 1 17 0 115 1 17 0 116 4 250 0 121 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 250 0 151 4 237 0 155 4 241 0 160 4 245 0 161 2 27 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 4 250 0 172 4 250 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 229 1 38 5 61 1 39 5 65 1 40 15 229 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 229 1 47 5 97 1 49 5 101 1 51 15 229 1 53 15 229 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 15 233 1 66 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143 4 250 1 144] 
#[1 4 250 0 11 4 250 0 13 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 4 250 0 151 4 250 0 162 2 235 0 172 4 250 0 173 15 241 1 66 4 250 1 144] 
#[1 6 230 0 11 13 61 0 13 6 230 0 55 6 230 0 82 6 230 0 96 6 230 0 98 6 230 0 99 6 230 0 121 6 230 0 151 6 230 0 162 6 230 0 172 6 230 0 173 13 65 1 65 6 230 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 245 1 38 5 61 1 39 5 65 1 40 15 245 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 245 1 47 5 97 1 49 5 101 1 51 15 245 1 53 15 245 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 249 1 38 5 61 1 39 5 65 1 40 15 249 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 249 1 47 5 97 1 49 5 101 1 51 15 249 1 53 15 249 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 4 53 0 5 2 239 0 7 2 239 0 11 2 239 0 22 2 239 0 23 2 239 0 28 2 239 0 29 2 239 0 30 2 239 0 31 2 239 0 32 2 239 0 33 2 239 0 34 2 239 0 35 2 239 0 36 2 239 0 37 2 239 0 38 2 239 0 39 2 239 0 40 2 239 0 41 2 239 0 43 2 239 0 45 2 239 0 55 2 239 0 56 2 239 0 58 2 239 0 59 2 239 0 64 2 239 0 67 2 239 0 73 2 239 0 76 2 239 0 77 2 239 0 82 2 239 0 84 2 239 0 86 2 239 0 88 2 239 0 89 2 239 0 91 2 239 0 92 2 239 0 96 2 239 0 98 2 239 0 99 2 239 0 100 2 239 0 102 2 239 0 105 2 239 0 106 2 239 0 107 2 239 0 108 2 239 0 112 2 239 0 115 2 239 0 116 2 239 0 121 2 239 0 123 2 239 0 126 2 239 0 131 2 239 0 132 2 239 0 133 2 239 0 134 2 239 0 138 2 239 0 140 2 239 0 142 2 239 0 143 2 239 0 147 2 239 0 150 2 239 0 151 2 239 0 162 2 239 0 167 2 239 0 168 2 239 0 171 2 243 0 172 2 239 0 173 15 253 0 228 15 253 0 229 15 253 0 233 2 239 1 144] 
#[0 6 238 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 242 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 1 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 5 1 38 5 61 1 39 5 65 1 40 16 5 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 5 1 47 5 97 1 49 5 101 1 51 16 5 1 53 16 5 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 6 246 0 4 0 7] 
#[1 16 9 0 4 13 101 0 7 13 105 0 231] 
#[0 6 250 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 33 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 37 0 191 1 17 0 194 6 37 0 195 6 37 0 196 6 37 0 197 16 13 1 24] 
#[0 6 254 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 2 0 11 7 2 0 55 7 2 0 82 7 2 0 96 7 2 0 98 7 2 0 99 7 2 0 121 7 2 0 151 7 2 0 162 2 247 0 172 7 2 0 173 7 2 1 144] 
#[1 16 17 0 121 3 213 0 162 16 21 0 182] 
#[0 7 6 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 16 25 0 172] 
#[1 16 29 0 121 3 213 0 162 16 33 0 182] 
#[0 16 37 0 172] 
#[1 8 113 0 11 0 6 0 55 0 6 0 82 0 6 0 96 0 6 0 98 0 6 0 99 0 6 0 121 0 6 0 151 0 6 0 162 8 117 0 172 1 207 0 173 16 41 0 177 8 129 0 214 8 133 0 216 8 137 0 217] 
#[1 7 10 0 55 7 10 0 82 7 10 0 96 7 10 0 98 7 10 0 99 7 10 0 121 7 10 0 151 7 10 0 162 3 105 0 173] 
#[0 7 14 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 16 45 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 45 0 201 16 45 0 203 16 45 0 212 1 49 0 223 16 45 0 234 1 57 0 235 16 45 0 236 16 45 0 237 16 45 0 238 16 45 0 239 16 45 0 240 16 45 0 241 16 45 0 242 16 45 0 243 16 45 0 247 16 45 0 248 16 45 1 18 16 45 1 19 16 45 1 20 16 45 1 21 16 45 1 22 16 45 1 23 1 125 1 25 16 45 1 26 16 45 1 27 16 45 1 28 16 45 1 29 16 45 1 30 16 45 1 34 16 45 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 45 1 62 16 45 1 63 16 45 1 64 16 45 1 67 16 45 1 68 16 45 1 69 16 45 1 70 16 45 1 71 16 45 1 72 16 45 1 73 16 45 1 74 16 45 1 75 16 45 1 76 16 45 1 77 16 45 1 78 16 45 1 79 16 45 1 80 16 45 1 81 16 45 1 82 16 45 1 83 16 45 1 84 16 45 1 85 16 45 1 90 16 45 1 91 2 9 1 92 16 45 1 97 16 45 1 100 16 45 1 101 16 45 1 102 16 45 1 103 16 45 1 104 16 45 1 109 16 45 1 110 16 45 1 111 16 45 1 112 16 45 1 113 16 45 1 114 16 45 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 45 1 129 2 117 1 130 2 121 1 131 16 45 1 139 16 45 1 140 16 45 1 142] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 49 1 38 5 61 1 39 5 65 1 40 16 49 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 49 1 47 5 97 1 49 5 101 1 51 16 49 1 53 16 49 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 53 1 38 5 61 1 39 5 65 1 40 16 53 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 53 1 47 5 97 1 49 5 101 1 51 16 53 1 53 16 53 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 16 57 0 148 16 61 0 152] 
#[0 16 65 0 172] 
#[1 7 18 0 22 7 18 0 23 7 18 0 43 7 18 0 45 7 18 0 55 7 18 0 56 7 18 0 58 7 18 0 59 7 18 0 64 7 18 0 67 7 18 0 77 7 18 0 84 7 18 0 88 7 18 0 89 7 18 0 99 7 18 0 107 7 18 0 115 7 18 0 116 7 18 0 123 7 18 0 138 7 18 0 143 7 18 0 150 7 18 0 167 7 18 0 168 7 18 0 171 16 69 0 172 7 18 0 173] 
#[0 7 22 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 9 49 0 79 16 81 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 16 73 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 77 0 191 1 17 0 194 16 77 0 195 16 77 0 196 16 77 0 197 16 81 0 252] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 85 0 191 1 17 0 194 16 85 0 195 16 85 0 196 16 85 0 197] 
#[0 7 26 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 16 89 0 228 16 89 0 229 16 89 0 233 16 89 1 1 16 89 1 2] 
#[0 7 30 0 4 0 7 0 172] 
#[0 7 34 0 4 0 7 0 172] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 16 101 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 16 105 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 109 0 191 1 17 0 194 16 109 0 195 16 109 0 196 16 109 0 197] 
#[1 16 113 0 4 16 117 0 7 16 121 0 172 16 125 0 254] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 16 129 0 182 16 129 0 191 1 17 0 194 16 129 0 195 16 129 0 196 16 129 0 197 16 129 1 43 16 129 1 105] 
#[0 7 42 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 16 133 0 172 16 137 0 182 16 137 0 191 1 17 0 194 16 137 0 195 16 137 0 196 16 137 0 197 16 137 1 43 16 137 1 105] 
#[1 0 29 0 1 0 33 0 9 7 46 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 2 255 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 16 141 0 75 1 17 0 77 7 46 0 82 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 7 46 0 96 7 46 0 98 7 46 0 99 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 7 46 0 121 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 7 46 0 151 0 245 0 152 0 249 0 153 7 46 0 162 0 253 0 167 1 1 0 168 1 5 0 171 3 3 0 172 7 46 0 173 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 141 0 201 16 141 0 203 16 141 0 212 16 145 0 220 1 49 0 223 16 141 0 234 1 57 0 235 16 141 0 236 16 141 0 237 16 141 0 238 16 141 0 239 16 141 0 240 16 141 0 241 16 141 0 242 16 141 0 243 16 141 0 247 16 141 0 248 16 141 1 18 16 141 1 19 16 141 1 20 16 141 1 21 16 141 1 22 16 141 1 23 1 125 1 25 16 141 1 26 16 141 1 27 16 141 1 28 16 141 1 29 16 141 1 30 16 141 1 34 16 141 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 141 1 62 16 141 1 63 16 141 1 64 16 141 1 67 16 141 1 68 16 141 1 69 16 141 1 70 16 141 1 71 16 141 1 72 16 141 1 73 16 141 1 74 16 141 1 75 16 141 1 76 16 141 1 77 16 141 1 78 16 141 1 79 16 141 1 80 16 141 1 81 16 141 1 82 16 141 1 83 16 141 1 84 16 141 1 85 16 141 1 90 16 141 1 91 2 9 1 92 16 141 1 97 16 141 1 100 16 141 1 101 16 141 1 102 16 141 1 103 16 141 1 104 16 141 1 109 16 141 1 110 16 141 1 111 16 141 1 112 16 141 1 113 16 141 1 114 16 141 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 141 1 129 2 117 1 130 2 121 1 131 16 141 1 139 16 141 1 140 16 141 1 142 7 46 1 144] 
#[1 7 50 0 96 7 50 0 98 7 50 0 99 7 50 0 162 16 149 1 87] 
#[1 7 54 0 11 7 54 0 55 7 54 0 82 7 54 0 96 7 54 0 98 7 54 0 99 7 54 0 121 7 54 0 151 7 54 0 162 3 7 0 172 7 54 0 173 7 54 1 144] 
#[0 7 58 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 7 62 0 11 7 62 0 55 7 62 0 82 7 62 0 96 7 62 0 98 7 62 0 99 7 62 0 121 7 62 0 151 7 62 0 162 3 11 0 172 7 62 0 173 7 62 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 161 1 38 5 61 1 39 5 65 1 40 16 161 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 161 1 47 5 97 1 49 5 101 1 51 16 161 1 53 16 161 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 16 165 0 55] 
#[1 7 66 0 82 7 66 0 99 7 66 0 162 6 69 0 173 16 169 1 99] 
#[0 16 173 0 172] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 77 0 162 0 84 0 162 0 88 0 162 0 89 0 162 0 99 0 162 0 107 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 138 0 162 0 143 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 16 177 0 228 16 177 0 229 16 177 0 233] 
#[0 7 70 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 7 74 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 16 181 0 151] 
#[0 16 185 0 153] 
#[0 16 189 0 99] 
#[1 7 78 0 11 7 78 0 22 7 78 0 23 7 78 0 28 7 78 0 29 7 78 0 30 7 78 0 31 7 78 0 32 7 78 0 33 7 78 0 34 7 78 0 35 7 78 0 36 7 78 0 37 7 78 0 38 7 78 0 39 7 78 0 40 7 78 0 41 7 78 0 43 7 78 0 45 7 78 0 55 7 78 0 56 7 78 0 58 7 78 0 59 7 78 0 64 7 78 0 67 7 78 0 73 7 78 0 76 7 78 0 77 7 78 0 82 7 78 0 84 7 78 0 86 7 78 0 88 7 78 0 89 7 78 0 91 7 78 0 92 7 78 0 96 7 78 0 98 7 78 0 99 7 78 0 100 7 78 0 102 7 78 0 105 7 78 0 106 7 78 0 107 7 78 0 108 7 78 0 112 7 78 0 115 7 78 0 116 7 78 0 121 7 78 0 123 7 78 0 126 7 78 0 131 7 78 0 132 7 78 0 133 7 78 0 134 7 78 0 138 7 78 0 140 7 78 0 142 7 78 0 143 7 78 0 147 7 78 0 150 7 78 0 151 7 78 0 162 7 78 0 167 7 78 0 168 7 78 0 171 3 19 0 172 7 78 0 173 7 78 1 144] 
#[1 5 157 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 5 161 0 56 1 17 0 58 1 17 0 59 5 165 0 64 1 17 0 67 1 17 0 77 16 193 0 78 16 193 0 80 5 177 0 84 16 193 0 87 1 17 0 88 5 185 0 89 16 193 0 90 16 193 0 94 1 17 0 107 16 193 0 114 1 17 0 115 1 17 0 116 16 193 0 118 16 193 0 119 16 193 0 120 1 17 0 123 1 17 0 138 16 193 0 139 1 17 0 143 5 217 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 221 0 191 1 17 0 194 5 221 0 195 5 221 0 196 5 221 0 197 16 193 0 221 5 229 0 222 16 193 0 224 5 237 0 225 5 241 0 226 16 193 0 227] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 197 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 201 1 38 5 61 1 39 5 65 1 40 16 201 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 201 1 47 5 97 1 49 5 101 1 51 16 201 1 53 16 201 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 16 205 0 5] 
#[1 7 82 0 7 7 82 0 11 7 82 0 22 7 82 0 23 7 82 0 28 7 82 0 29 7 82 0 30 7 82 0 31 7 82 0 32 7 82 0 33 7 82 0 34 7 82 0 35 7 82 0 36 7 82 0 37 7 82 0 38 7 82 0 39 7 82 0 40 7 82 0 41 7 82 0 43 7 82 0 45 7 82 0 55 7 82 0 56 7 82 0 58 7 82 0 59 7 82 0 64 7 82 0 67 7 82 0 73 7 82 0 76 7 82 0 77 7 82 0 82 7 82 0 84 7 82 0 86 7 82 0 88 7 82 0 89 7 82 0 91 7 82 0 92 7 82 0 96 7 82 0 98 7 82 0 99 7 82 0 100 7 82 0 102 7 82 0 105 7 82 0 106 7 82 0 107 7 82 0 108 7 82 0 112 7 82 0 115 7 82 0 116 7 82 0 121 7 82 0 123 7 82 0 126 7 82 0 131 7 82 0 132 7 82 0 133 7 82 0 134 7 82 0 138 7 82 0 140 7 82 0 142 7 82 0 143 7 82 0 147 7 82 0 150 7 82 0 151 7 82 0 162 7 82 0 167 7 82 0 168 7 82 0 171 3 23 0 172 7 82 0 173 7 82 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 209 0 177 11 29 0 249] 
#[1 8 153 0 3 16 213 0 253] 
#[0 7 86 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 217 0 177 11 125 0 244] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 221 1 38 5 61 1 39 5 65 1 40 16 221 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 221 1 47 5 97 1 49 5 101 1 51 16 221 1 53 16 221 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 225 1 38 5 61 1 39 5 65 1 40 16 225 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 225 1 47 5 97 1 49 5 101 1 51 16 225 1 53 16 225 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 229 1 38 5 61 1 39 5 65 1 40 16 229 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 229 1 47 5 97 1 49 5 101 1 51 16 229 1 53 16 229 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 233 1 38 5 61 1 39 5 65 1 40 16 233 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 16 233 1 47 5 97 1 49 5 101 1 51 16 233 1 53 16 233 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 7 90 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 94 0 3 7 94 0 4 7 94 0 5 7 94 0 7 7 94 0 11 7 94 0 13 7 94 0 22 7 94 0 23 7 94 0 28 7 94 0 29 7 94 0 30 7 94 0 31 7 94 0 32 7 94 0 33 7 94 0 34 7 94 0 35 7 94 0 36 7 94 0 37 7 94 0 38 7 94 0 39 7 94 0 40 7 94 0 41 7 94 0 43 7 94 0 45 7 94 0 55 7 94 0 56 7 94 0 58 7 94 0 59 7 94 0 64 7 94 0 67 7 94 0 73 7 94 0 76 7 94 0 77 7 94 0 82 7 94 0 84 7 94 0 86 7 94 0 88 7 94 0 89 7 94 0 91 7 94 0 92 7 94 0 96 7 94 0 98 7 94 0 99 7 94 0 100 7 94 0 102 7 94 0 105 7 94 0 106 7 94 0 107 7 94 0 108 7 94 0 112 7 94 0 115 7 94 0 116 7 94 0 121 7 94 0 123 7 94 0 126 7 94 0 131 7 94 0 132 7 94 0 133 7 94 0 134 7 94 0 138 7 94 0 140 7 94 0 142 7 94 0 143 7 94 0 147 7 94 0 150 7 94 0 151 7 94 0 162 7 94 0 167 7 94 0 168 7 94 0 171 3 27 0 172 7 94 0 173 7 94 1 144] 
#[0 7 98 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 102 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 7 106 0 1 7 106 0 3 7 106 0 4 7 106 0 6 7 106 0 7 7 106 0 8 7 106 0 9 7 106 0 11 7 106 0 13 7 106 0 22 7 106 0 23 7 106 0 25 7 106 0 43 7 106 0 45 7 106 0 54 7 106 0 55 7 106 0 56 7 106 0 58 7 106 0 59 7 106 0 64 7 106 0 66 7 106 0 67 7 106 0 77 7 106 0 79 7 106 0 81 7 106 0 82 7 106 0 84 7 106 0 88 7 106 0 89 7 106 0 96 7 106 0 98 7 106 0 99 7 106 0 107 7 106 0 115 7 106 0 116 7 106 0 121 7 106 0 123 7 106 0 124 7 106 0 129 7 106 0 138 7 106 0 143 7 106 0 150 7 106 0 151 7 106 0 155 7 106 0 160 7 106 0 161 7 106 0 162 7 106 0 163 7 106 0 164 7 106 0 165 7 106 0 166 7 106 0 167 7 106 0 168 7 106 0 170 7 106 0 171 3 31 0 172 7 106 0 173 7 106 1 144] 
#[1 7 110 0 1 7 110 0 3 7 110 0 4 7 110 0 6 7 110 0 7 7 110 0 8 7 110 0 9 7 110 0 11 7 110 0 13 7 110 0 22 7 110 0 23 7 110 0 25 7 110 0 43 7 110 0 45 7 110 0 54 7 110 0 55 7 110 0 56 7 110 0 58 7 110 0 59 7 110 0 64 7 110 0 66 7 110 0 67 7 110 0 77 7 110 0 79 7 110 0 81 7 110 0 82 7 110 0 84 7 110 0 88 7 110 0 89 7 110 0 96 7 110 0 98 7 110 0 99 7 110 0 107 7 110 0 115 7 110 0 116 7 110 0 121 7 110 0 123 7 110 0 124 7 110 0 129 7 110 0 138 7 110 0 143 7 110 0 150 7 110 0 151 7 110 0 155 7 110 0 160 7 110 0 161 7 110 0 162 7 110 0 163 7 110 0 164 7 110 0 165 7 110 0 166 7 110 0 167 7 110 0 168 7 110 0 170 7 110 0 171 3 35 0 172 7 110 0 173 7 110 1 144] 
#[0 16 245 0 172] 
#[0 16 249 0 172] 
#[0 7 114 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 118 0 3 7 118 0 4 7 118 0 5 7 118 0 7 7 118 0 11 7 118 0 13 7 118 0 22 7 118 0 23 7 118 0 28 7 118 0 29 7 118 0 30 7 118 0 31 7 118 0 32 7 118 0 33 7 118 0 34 7 118 0 35 7 118 0 36 7 118 0 37 7 118 0 38 7 118 0 39 7 118 0 40 7 118 0 41 7 118 0 43 7 118 0 45 7 118 0 55 7 118 0 56 7 118 0 58 7 118 0 59 7 118 0 64 7 118 0 67 7 118 0 73 7 118 0 76 7 118 0 77 7 118 0 82 7 118 0 84 7 118 0 86 7 118 0 88 7 118 0 89 7 118 0 91 7 118 0 92 7 118 0 96 7 118 0 98 7 118 0 99 7 118 0 100 7 118 0 102 7 118 0 105 7 118 0 106 7 118 0 107 7 118 0 108 7 118 0 112 7 118 0 115 7 118 0 116 7 118 0 121 7 118 0 123 7 118 0 126 7 118 0 131 7 118 0 132 7 118 0 133 7 118 0 134 7 118 0 138 7 118 0 140 7 118 0 142 7 118 0 143 7 118 0 147 7 118 0 150 7 118 0 151 7 118 0 162 7 118 0 167 7 118 0 168 7 118 0 171 3 39 0 172 7 118 0 173 7 118 1 144] 
#[0 7 122 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 126 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 7 130 0 4 4 221 0 6 7 130 0 7 4 225 0 8 0 33 0 9 7 130 0 11 7 130 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 43 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 7 130 0 82 1 17 0 84 1 17 0 88 1 17 0 89 7 130 0 96 7 130 0 98 7 130 0 99 1 17 0 107 1 17 0 115 1 17 0 116 7 130 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 7 130 0 151 4 237 0 155 4 241 0 160 4 245 0 161 3 47 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 7 130 0 172 7 130 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 16 253 1 132 5 141 1 141 5 141 1 143 7 130 1 144] 
#[0 7 134 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 7 138 0 4 4 221 0 6 7 138 0 7 4 225 0 8 0 33 0 9 7 138 0 11 7 138 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 51 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 7 138 0 82 1 17 0 84 1 17 0 88 1 17 0 89 7 138 0 96 7 138 0 98 7 138 0 99 1 17 0 107 1 17 0 115 1 17 0 116 7 138 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 7 138 0 151 4 237 0 155 4 241 0 160 4 245 0 161 3 55 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 7 138 0 172 7 138 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 17 1 1 132 5 141 1 141 5 141 1 143 7 138 1 144] 
#[0 7 142 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 7 146 0 4 4 221 0 6 7 146 0 7 4 225 0 8 0 33 0 9 7 146 0 11 7 146 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 59 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 7 146 0 82 1 17 0 84 1 17 0 88 1 17 0 89 7 146 0 96 7 146 0 98 7 146 0 99 1 17 0 107 1 17 0 115 1 17 0 116 7 146 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 7 146 0 151 4 237 0 155 4 241 0 160 4 245 0 161 3 63 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 3 67 0 172 7 146 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 17 9 1 132 5 141 1 141 5 141 1 143 7 146 1 144] 
#[1 0 29 0 1 4 217 0 3 7 150 0 4 4 221 0 6 7 150 0 7 4 225 0 8 0 33 0 9 7 150 0 11 7 150 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 71 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 7 150 0 82 1 17 0 84 1 17 0 88 1 17 0 89 7 150 0 96 7 150 0 98 7 150 0 99 1 17 0 107 1 17 0 115 1 17 0 116 7 150 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 7 150 0 151 4 237 0 155 4 241 0 160 4 245 0 161 3 75 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 3 79 0 172 7 150 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 17 17 1 132 5 141 1 141 5 141 1 143 7 150 1 144] 
#[0 7 154 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 162 0 99 0 173] 
#[0 17 21 0 117] 
#[0 17 25 0 117] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 17 29 1 11] 
#[1 3 221 0 173 3 229 0 207 17 33 0 213] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 37 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 41 1 38 5 61 1 39 5 65 1 40 17 41 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 17 41 1 47 5 97 1 49 5 101 1 51 17 41 1 53 17 41 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 3 221 0 173 3 229 0 207 17 45 0 213] 
#[0 7 166 0 173] 
#[0 17 49 0 99] 
#[1 0 162 0 3 4 53 0 5 8 61 0 172 3 83 0 173 3 229 0 207 17 53 0 213 17 57 0 228 17 57 0 229 17 57 0 233] 
#[1 3 221 0 173 3 229 0 207 17 61 0 213] 
#[1 3 221 0 173 3 229 0 207 17 65 0 213] 
#[1 3 221 0 173 3 229 0 207 17 69 0 213] 
#[0 17 73 0 99] 
#[0 17 77 0 99] 
#[0 17 81 0 172] 
#[0 7 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 85 0 191 1 17 0 194 17 85 0 195 17 85 0 196 17 85 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 89 0 191 1 17 0 194 17 89 0 195 17 89 0 196 17 89 0 197] 
#[1 8 153 0 3 17 93 0 253] 
#[1 0 162 0 3 4 53 0 5 17 97 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 17 101 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 105 0 191 1 17 0 194 17 105 0 195 17 105 0 196 17 105 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 109 0 191 1 17 0 194 17 109 0 195 17 109 0 196 17 109 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 113 0 191 1 17 0 194 17 113 0 195 17 113 0 196 17 113 0 197] 
#[1 8 153 0 3 17 121 0 172 2 107 0 173 17 117 0 253 17 121 1 13] 
#[1 17 125 0 172 4 202 0 173 17 125 1 13] 
#[1 3 221 0 173 3 229 0 207 17 129 0 213] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 133 0 191 1 17 0 194 17 133 0 195 17 133 0 196 17 133 0 197] 
#[1 17 137 0 107 17 141 0 116 17 145 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 149 0 191 1 17 0 194 17 149 0 195 17 149 0 196 17 149 0 197] 
#[1 8 153 0 3 17 153 0 253] 
#[1 0 162 0 3 4 53 0 5 17 157 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 17 161 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 165 0 191 1 17 0 194 17 165 0 195 17 165 0 196 17 165 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 169 0 191 1 17 0 194 17 169 0 195 17 169 0 196 17 169 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 173 0 191 1 17 0 194 17 173 0 195 17 173 0 196 17 173 0 197] 
#[1 8 153 0 3 17 181 0 172 2 107 0 173 17 177 0 253 17 181 1 13] 
#[1 17 185 0 172 4 202 0 173 17 185 1 13] 
#[1 3 221 0 173 3 229 0 207 17 189 0 213] 
#[0 7 186 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 17 193 0 172] 
#[0 17 197 0 172] 
#[1 7 229 0 159 17 201 0 190] 
#[1 7 190 0 3 7 190 0 4 7 190 0 5 7 190 0 7 7 190 0 11 7 190 0 13 7 190 0 22 7 190 0 23 7 190 0 28 7 190 0 29 7 190 0 30 7 190 0 31 7 190 0 32 7 190 0 33 7 190 0 34 7 190 0 35 7 190 0 36 7 190 0 37 7 190 0 38 7 190 0 39 7 190 0 40 7 190 0 41 7 190 0 43 7 190 0 45 7 190 0 55 7 190 0 56 7 190 0 58 7 190 0 59 7 190 0 64 7 190 0 67 7 190 0 73 7 190 0 76 7 190 0 77 7 190 0 82 7 190 0 84 7 190 0 86 7 190 0 88 7 190 0 89 7 190 0 91 7 190 0 92 7 190 0 96 7 190 0 98 7 190 0 99 7 190 0 100 7 190 0 102 7 190 0 105 7 190 0 106 7 190 0 107 7 190 0 108 7 190 0 112 7 190 0 115 7 190 0 116 7 190 0 121 7 190 0 123 7 190 0 126 7 190 0 131 7 190 0 132 7 190 0 133 7 190 0 134 7 190 0 138 7 190 0 140 7 190 0 142 7 190 0 143 7 190 0 147 7 190 0 150 7 190 0 151 7 190 0 162 7 190 0 167 7 190 0 168 7 190 0 171 3 87 0 172 7 190 0 173 7 190 1 144] 
#[1 7 194 0 3 7 194 0 4 7 194 0 5 7 194 0 7 7 194 0 11 7 194 0 13 7 194 0 22 7 194 0 23 7 194 0 28 7 194 0 29 7 194 0 30 7 194 0 31 7 194 0 32 7 194 0 33 7 194 0 34 7 194 0 35 7 194 0 36 7 194 0 37 7 194 0 38 7 194 0 39 7 194 0 40 7 194 0 41 7 194 0 43 7 194 0 45 7 194 0 55 7 194 0 56 7 194 0 58 7 194 0 59 7 194 0 64 7 194 0 67 7 194 0 73 7 194 0 76 7 194 0 77 7 194 0 82 7 194 0 84 7 194 0 86 7 194 0 88 7 194 0 89 7 194 0 91 7 194 0 92 7 194 0 96 7 194 0 98 7 194 0 99 7 194 0 100 7 194 0 102 7 194 0 105 7 194 0 106 7 194 0 107 7 194 0 108 7 194 0 112 7 194 0 115 7 194 0 116 7 194 0 121 7 194 0 123 7 194 0 126 7 194 0 131 7 194 0 132 7 194 0 133 7 194 0 134 7 194 0 138 7 194 0 140 7 194 0 142 7 194 0 143 7 194 0 147 7 194 0 150 7 194 0 151 7 194 0 162 7 194 0 167 7 194 0 168 7 194 0 171 3 91 0 172 7 194 0 173 7 194 1 144] 
#[1 7 198 0 3 7 198 0 4 7 198 0 5 7 198 0 7 7 198 0 11 7 198 0 13 7 198 0 22 7 198 0 23 7 198 0 28 7 198 0 29 7 198 0 30 7 198 0 31 7 198 0 32 7 198 0 33 7 198 0 34 7 198 0 35 7 198 0 36 7 198 0 37 7 198 0 38 7 198 0 39 7 198 0 40 7 198 0 41 7 198 0 43 7 198 0 45 7 198 0 55 7 198 0 56 7 198 0 58 7 198 0 59 7 198 0 64 7 198 0 67 7 198 0 73 7 198 0 76 7 198 0 77 7 198 0 82 7 198 0 84 7 198 0 86 7 198 0 88 7 198 0 89 7 198 0 91 7 198 0 92 7 198 0 96 7 198 0 98 7 198 0 99 7 198 0 100 7 198 0 102 7 198 0 105 7 198 0 106 7 198 0 107 7 198 0 108 7 198 0 112 7 198 0 115 7 198 0 116 7 198 0 121 7 198 0 123 7 198 0 126 7 198 0 131 7 198 0 132 7 198 0 133 7 198 0 134 7 198 0 138 7 198 0 140 7 198 0 142 7 198 0 143 7 198 0 147 7 198 0 150 7 198 0 151 7 198 0 162 7 198 0 167 7 198 0 168 7 198 0 171 3 95 0 172 7 198 0 173 7 198 1 144] 
#[1 7 202 0 3 7 202 0 4 7 202 0 5 7 202 0 7 7 202 0 11 7 202 0 13 7 202 0 22 7 202 0 23 7 202 0 28 7 202 0 29 7 202 0 30 7 202 0 31 7 202 0 32 7 202 0 33 7 202 0 34 7 202 0 35 7 202 0 36 7 202 0 37 7 202 0 38 7 202 0 39 7 202 0 40 7 202 0 41 7 202 0 43 7 202 0 45 7 202 0 55 7 202 0 56 7 202 0 58 7 202 0 59 7 202 0 64 7 202 0 67 7 202 0 73 7 202 0 76 7 202 0 77 7 202 0 82 7 202 0 84 7 202 0 86 7 202 0 88 7 202 0 89 7 202 0 91 7 202 0 92 7 202 0 96 7 202 0 98 7 202 0 99 7 202 0 100 7 202 0 102 7 202 0 105 7 202 0 106 7 202 0 107 7 202 0 108 7 202 0 112 7 202 0 115 7 202 0 116 7 202 0 121 7 202 0 123 7 202 0 126 7 202 0 131 7 202 0 132 7 202 0 133 7 202 0 134 7 202 0 138 7 202 0 140 7 202 0 142 7 202 0 143 7 202 0 147 7 202 0 150 7 202 0 151 7 202 0 162 7 202 0 167 7 202 0 168 7 202 0 171 3 99 0 172 7 202 0 173 7 202 1 144] 
#[0 7 241 0 172] 
#[1 7 206 0 3 7 206 0 4 7 206 0 5 7 206 0 7 7 206 0 11 7 206 0 13 7 206 0 22 7 206 0 23 7 206 0 28 7 206 0 29 7 206 0 30 7 206 0 31 7 206 0 32 7 206 0 33 7 206 0 34 7 206 0 35 7 206 0 36 7 206 0 37 7 206 0 38 7 206 0 39 7 206 0 40 7 206 0 41 7 206 0 43 7 206 0 45 7 206 0 55 7 206 0 56 7 206 0 58 7 206 0 59 7 206 0 64 7 206 0 67 7 206 0 73 7 206 0 76 7 206 0 77 7 206 0 82 7 206 0 84 7 206 0 86 7 206 0 88 7 206 0 89 7 206 0 91 7 206 0 92 7 206 0 96 7 206 0 98 7 206 0 99 7 206 0 100 7 206 0 102 7 206 0 105 7 206 0 106 7 206 0 107 7 206 0 108 7 206 0 112 7 206 0 115 7 206 0 116 7 206 0 121 7 206 0 123 7 206 0 126 7 206 0 131 7 206 0 132 7 206 0 133 7 206 0 134 7 206 0 138 7 206 0 140 7 206 0 142 7 206 0 143 7 206 0 147 7 206 0 150 7 206 0 151 7 206 0 162 7 206 0 167 7 206 0 168 7 206 0 171 3 103 0 172 7 206 0 173 7 206 1 144] 
#[1 7 210 0 3 7 210 0 4 7 210 0 5 7 210 0 7 7 210 0 11 7 210 0 13 7 210 0 22 7 210 0 23 7 210 0 28 7 210 0 29 7 210 0 30 7 210 0 31 7 210 0 32 7 210 0 33 7 210 0 34 7 210 0 35 7 210 0 36 7 210 0 37 7 210 0 38 7 210 0 39 7 210 0 40 7 210 0 41 7 210 0 43 7 210 0 45 7 210 0 55 7 210 0 56 7 210 0 58 7 210 0 59 7 210 0 64 7 210 0 67 7 210 0 73 7 210 0 76 7 210 0 77 7 210 0 82 7 210 0 84 7 210 0 86 7 210 0 88 7 210 0 89 7 210 0 91 7 210 0 92 7 210 0 96 7 210 0 98 7 210 0 99 7 210 0 100 7 210 0 102 7 210 0 105 7 210 0 106 7 210 0 107 7 210 0 108 7 210 0 112 7 210 0 115 7 210 0 116 7 210 0 121 7 210 0 123 7 210 0 126 7 210 0 131 7 210 0 132 7 210 0 133 7 210 0 134 7 210 0 138 7 210 0 140 7 210 0 142 7 210 0 143 7 210 0 147 7 210 0 150 7 210 0 151 7 210 0 162 7 210 0 167 7 210 0 168 7 210 0 171 3 107 0 172 7 210 0 173 7 210 1 144] 
#[1 7 214 0 3 7 214 0 4 7 214 0 5 7 214 0 7 7 214 0 11 7 214 0 13 7 214 0 22 7 214 0 23 7 214 0 28 7 214 0 29 7 214 0 30 7 214 0 31 7 214 0 32 7 214 0 33 7 214 0 34 7 214 0 35 7 214 0 36 7 214 0 37 7 214 0 38 7 214 0 39 7 214 0 40 7 214 0 41 7 214 0 43 7 214 0 45 7 214 0 55 7 214 0 56 7 214 0 58 7 214 0 59 7 214 0 64 7 214 0 67 7 214 0 73 7 214 0 76 7 214 0 77 7 214 0 82 7 214 0 84 7 214 0 86 7 214 0 88 7 214 0 89 7 214 0 91 7 214 0 92 7 214 0 96 7 214 0 98 7 214 0 99 7 214 0 100 7 214 0 102 7 214 0 105 7 214 0 106 7 214 0 107 7 214 0 108 7 214 0 112 7 214 0 115 7 214 0 116 7 214 0 121 7 214 0 123 7 214 0 126 7 214 0 131 7 214 0 132 7 214 0 133 7 214 0 134 7 214 0 138 7 214 0 140 7 214 0 142 7 214 0 143 7 214 0 147 7 214 0 150 7 214 0 151 7 214 0 162 7 214 0 167 7 214 0 168 7 214 0 171 3 111 0 172 7 214 0 173 7 214 1 144] 
#[1 7 218 0 3 7 218 0 4 7 218 0 5 7 218 0 7 7 218 0 11 7 218 0 13 7 218 0 22 7 218 0 23 7 218 0 28 7 218 0 29 7 218 0 30 7 218 0 31 7 218 0 32 7 218 0 33 7 218 0 34 7 218 0 35 7 218 0 36 7 218 0 37 7 218 0 38 7 218 0 39 7 218 0 40 7 218 0 41 7 218 0 43 7 218 0 45 7 218 0 55 7 218 0 56 7 218 0 58 7 218 0 59 7 218 0 64 7 218 0 67 7 218 0 73 7 218 0 76 7 218 0 77 7 218 0 82 7 218 0 84 7 218 0 86 7 218 0 88 7 218 0 89 7 218 0 91 7 218 0 92 7 218 0 96 7 218 0 98 7 218 0 99 7 218 0 100 7 218 0 102 7 218 0 105 7 218 0 106 7 218 0 107 7 218 0 108 7 218 0 112 7 218 0 115 7 218 0 116 7 218 0 121 7 218 0 123 7 218 0 126 7 218 0 131 7 218 0 132 7 218 0 133 7 218 0 134 7 218 0 138 7 218 0 140 7 218 0 142 7 218 0 143 7 218 0 147 7 218 0 150 7 218 0 151 7 218 0 162 7 218 0 167 7 218 0 168 7 218 0 171 3 115 0 172 7 218 0 173 7 218 1 144] 
#[1 7 222 0 3 7 222 0 4 7 222 0 5 7 222 0 7 7 222 0 11 7 222 0 13 7 222 0 22 7 222 0 23 7 222 0 28 7 222 0 29 7 222 0 30 7 222 0 31 7 222 0 32 7 222 0 33 7 222 0 34 7 222 0 35 7 222 0 36 7 222 0 37 7 222 0 38 7 222 0 39 7 222 0 40 7 222 0 41 7 222 0 43 7 222 0 45 7 222 0 55 7 222 0 56 7 222 0 58 7 222 0 59 7 222 0 64 7 222 0 67 7 222 0 73 7 222 0 76 7 222 0 77 7 222 0 82 7 222 0 84 7 222 0 86 7 222 0 88 7 222 0 89 7 222 0 91 7 222 0 92 7 222 0 96 7 222 0 98 7 222 0 99 7 222 0 100 7 222 0 102 7 222 0 105 7 222 0 106 7 222 0 107 7 222 0 108 7 222 0 112 7 222 0 115 7 222 0 116 7 222 0 121 7 222 0 123 7 222 0 126 7 222 0 131 7 222 0 132 7 222 0 133 7 222 0 134 7 222 0 138 7 222 0 140 7 222 0 142 7 222 0 143 7 222 0 147 7 222 0 150 7 222 0 151 7 222 0 162 7 222 0 167 7 222 0 168 7 222 0 171 3 119 0 172 7 222 0 173 7 222 1 144] 
#[1 7 226 0 3 7 226 0 4 7 226 0 5 7 226 0 7 7 226 0 11 7 226 0 13 7 226 0 22 7 226 0 23 7 226 0 28 7 226 0 29 7 226 0 30 7 226 0 31 7 226 0 32 7 226 0 33 7 226 0 34 7 226 0 35 7 226 0 36 7 226 0 37 7 226 0 38 7 226 0 39 7 226 0 40 7 226 0 41 7 226 0 43 7 226 0 45 7 226 0 55 7 226 0 56 7 226 0 58 7 226 0 59 7 226 0 64 7 226 0 67 7 226 0 73 7 226 0 76 7 226 0 77 7 226 0 82 7 226 0 84 7 226 0 86 7 226 0 88 7 226 0 89 7 226 0 91 7 226 0 92 7 226 0 96 7 226 0 98 7 226 0 99 7 226 0 100 7 226 0 102 7 226 0 105 7 226 0 106 7 226 0 107 7 226 0 108 7 226 0 112 7 226 0 115 7 226 0 116 7 226 0 121 7 226 0 123 7 226 0 126 7 226 0 131 7 226 0 132 7 226 0 133 7 226 0 134 7 226 0 138 7 226 0 140 7 226 0 142 7 226 0 143 7 226 0 147 7 226 0 150 7 226 0 151 7 226 0 162 7 226 0 167 7 226 0 168 7 226 0 171 3 123 0 172 7 226 0 173 7 226 1 144] 
#[1 7 230 0 3 7 230 0 4 7 230 0 5 7 230 0 7 7 230 0 11 7 230 0 13 7 230 0 22 7 230 0 23 7 230 0 28 7 230 0 29 7 230 0 30 7 230 0 31 7 230 0 32 7 230 0 33 7 230 0 34 7 230 0 35 7 230 0 36 7 230 0 37 7 230 0 38 7 230 0 39 7 230 0 40 7 230 0 41 7 230 0 43 7 230 0 45 7 230 0 55 7 230 0 56 7 230 0 58 7 230 0 59 7 230 0 64 7 230 0 67 7 230 0 73 7 230 0 76 7 230 0 77 7 230 0 82 7 230 0 84 7 230 0 86 7 230 0 88 7 230 0 89 7 230 0 91 7 230 0 92 7 230 0 96 7 230 0 98 7 230 0 99 7 230 0 100 7 230 0 102 7 230 0 105 7 230 0 106 7 230 0 107 7 230 0 108 7 230 0 112 7 230 0 115 7 230 0 116 7 230 0 121 7 230 0 123 7 230 0 126 7 230 0 131 7 230 0 132 7 230 0 133 7 230 0 134 7 230 0 138 7 230 0 140 7 230 0 142 7 230 0 143 7 230 0 147 7 230 0 150 7 230 0 151 7 230 0 162 7 230 0 167 7 230 0 168 7 230 0 171 3 127 0 172 7 230 0 173 7 230 1 144] 
#[1 7 234 0 3 7 234 0 4 7 234 0 5 7 234 0 7 7 234 0 11 7 234 0 13 7 234 0 22 7 234 0 23 7 234 0 28 7 234 0 29 7 234 0 30 7 234 0 31 7 234 0 32 7 234 0 33 7 234 0 34 7 234 0 35 7 234 0 36 7 234 0 37 7 234 0 38 7 234 0 39 7 234 0 40 7 234 0 41 7 234 0 43 7 234 0 45 7 234 0 55 7 234 0 56 7 234 0 58 7 234 0 59 7 234 0 64 7 234 0 67 7 234 0 73 7 234 0 76 7 234 0 77 7 234 0 82 7 234 0 84 7 234 0 86 7 234 0 88 7 234 0 89 7 234 0 91 7 234 0 92 7 234 0 96 7 234 0 98 7 234 0 99 7 234 0 100 7 234 0 102 7 234 0 105 7 234 0 106 7 234 0 107 7 234 0 108 7 234 0 112 7 234 0 115 7 234 0 116 7 234 0 121 7 234 0 123 7 234 0 126 7 234 0 131 7 234 0 132 7 234 0 133 7 234 0 134 7 234 0 138 7 234 0 140 7 234 0 142 7 234 0 143 7 234 0 147 7 234 0 150 7 234 0 151 7 234 0 162 7 234 0 167 7 234 0 168 7 234 0 171 3 131 0 172 7 234 0 173 7 234 1 144] 
#[1 7 238 0 3 7 238 0 4 7 238 0 5 7 238 0 7 7 238 0 11 7 238 0 13 7 238 0 22 7 238 0 23 7 238 0 28 7 238 0 29 7 238 0 30 7 238 0 31 7 238 0 32 7 238 0 33 7 238 0 34 7 238 0 35 7 238 0 36 7 238 0 37 7 238 0 38 7 238 0 39 7 238 0 40 7 238 0 41 7 238 0 43 7 238 0 45 7 238 0 55 7 238 0 56 7 238 0 58 7 238 0 59 7 238 0 64 7 238 0 67 7 238 0 73 7 238 0 76 7 238 0 77 7 238 0 82 7 238 0 84 7 238 0 86 7 238 0 88 7 238 0 89 7 238 0 91 7 238 0 92 7 238 0 96 7 238 0 98 7 238 0 99 7 238 0 100 7 238 0 102 7 238 0 105 7 238 0 106 7 238 0 107 7 238 0 108 7 238 0 112 7 238 0 115 7 238 0 116 7 238 0 121 7 238 0 123 7 238 0 126 7 238 0 131 7 238 0 132 7 238 0 133 7 238 0 134 7 238 0 138 7 238 0 140 7 238 0 142 7 238 0 143 7 238 0 147 7 238 0 150 7 238 0 151 7 238 0 162 7 238 0 167 7 238 0 168 7 238 0 171 3 135 0 172 7 238 0 173 7 238 1 144] 
#[0 17 205 0 172] 
#[0 17 209 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 213 1 38 5 61 1 39 5 65 1 40 17 213 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 17 213 1 47 5 97 1 49 5 101 1 51 17 213 1 53 17 213 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 7 242 0 11 7 242 0 55 7 242 0 82 7 242 0 96 7 242 0 98 7 242 0 99 7 242 0 121 7 242 0 151 7 242 0 162 3 139 0 172 7 242 0 173 7 242 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 217 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 221 1 38 5 61 1 39 5 65 1 40 17 221 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 17 221 1 47 5 97 1 49 5 101 1 51 17 221 1 53 17 221 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 225 1 38 5 61 1 39 5 65 1 40 17 225 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 17 225 1 47 5 97 1 49 5 101 1 51 17 225 1 53 17 225 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 7 246 0 11 7 246 0 55 7 246 0 82 7 246 0 96 7 246 0 98 7 246 0 99 7 246 0 121 7 246 0 151 7 246 0 162 3 143 0 172 7 246 0 173 7 246 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 229 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 233 1 38 5 61 1 39 5 65 1 40 17 233 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 17 233 1 47 5 97 1 49 5 101 1 51 17 233 1 53 17 233 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 7 250 0 172] 
#[0 7 254 0 172] 
#[0 8 2 0 172] 
#[0 8 6 0 172] 
#[0 8 10 0 172] 
#[0 17 237 0 172] 
#[1 4 250 0 11 4 250 0 13 10 29 0 18 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 10 33 0 146 4 250 0 151 4 250 0 162 4 250 0 172 4 250 0 173 17 241 1 66 4 250 1 144] 
#[1 8 14 0 11 13 61 0 13 8 14 0 55 8 14 0 82 8 14 0 96 8 14 0 98 8 14 0 99 8 14 0 121 8 14 0 151 8 14 0 162 8 14 0 172 8 14 0 173 13 65 1 65 8 14 1 144] 
#[1 8 18 0 11 13 61 0 13 8 18 0 55 8 18 0 82 8 18 0 96 8 18 0 98 8 18 0 99 8 18 0 121 8 18 0 151 8 18 0 162 8 18 0 172 8 18 0 173 13 65 1 65 8 18 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 245 1 38 5 61 1 39 5 65 1 40 17 245 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 17 245 1 47 5 97 1 49 5 101 1 51 17 245 1 53 17 245 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 22 0 11 8 22 0 13 8 22 0 55 8 22 0 82 8 22 0 96 8 22 0 98 8 22 0 99 8 22 0 121 8 22 0 151 8 22 0 162 3 147 0 172 8 22 0 173 8 22 1 144] 
#[1 4 250 0 11 4 250 0 13 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 4 250 0 151 4 250 0 162 3 151 0 172 4 250 0 173 17 253 1 66 4 250 1 144] 
#[1 8 26 0 11 13 61 0 13 8 26 0 55 8 26 0 82 8 26 0 96 8 26 0 98 8 26 0 99 8 26 0 121 8 26 0 151 8 26 0 162 8 26 0 172 8 26 0 173 13 65 1 65 8 26 1 144] 
#[1 4 250 0 11 4 250 0 13 10 29 0 18 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 10 33 0 146 4 250 0 151 4 250 0 162 4 250 0 172 4 250 0 173 18 1 1 66 4 250 1 144] 
#[1 8 30 0 11 13 61 0 13 8 30 0 55 8 30 0 82 8 30 0 96 8 30 0 98 8 30 0 99 8 30 0 121 8 30 0 151 8 30 0 162 8 30 0 172 8 30 0 173 13 65 1 65 8 30 1 144] 
#[1 8 34 0 11 8 34 0 22 8 34 0 23 8 34 0 28 8 34 0 29 8 34 0 30 8 34 0 31 8 34 0 32 8 34 0 33 8 34 0 34 8 34 0 35 8 34 0 36 8 34 0 37 8 34 0 38 8 34 0 39 8 34 0 40 8 34 0 41 8 34 0 43 8 34 0 45 8 34 0 55 8 34 0 56 8 34 0 58 8 34 0 59 8 34 0 64 8 34 0 67 8 34 0 73 8 34 0 76 8 34 0 77 8 34 0 82 8 34 0 84 8 34 0 86 8 34 0 88 8 34 0 89 8 34 0 91 8 34 0 92 8 34 0 96 8 34 0 98 8 34 0 99 8 34 0 100 8 34 0 102 8 34 0 105 8 34 0 106 8 34 0 107 8 34 0 108 8 34 0 112 8 34 0 115 8 34 0 116 8 34 0 121 8 34 0 123 8 34 0 126 8 34 0 131 8 34 0 132 8 34 0 133 8 34 0 134 8 34 0 138 8 34 0 140 8 34 0 142 8 34 0 143 8 34 0 147 8 34 0 150 8 34 0 151 8 34 0 162 8 34 0 167 8 34 0 168 8 34 0 171 3 155 0 172 8 34 0 173 8 34 1 144] 
#[1 8 38 0 11 8 38 0 22 8 38 0 23 8 38 0 28 8 38 0 29 8 38 0 30 8 38 0 31 8 38 0 32 8 38 0 33 8 38 0 34 8 38 0 35 8 38 0 36 8 38 0 37 8 38 0 38 8 38 0 39 8 38 0 40 8 38 0 41 8 38 0 43 8 38 0 45 8 38 0 55 8 38 0 56 8 38 0 58 8 38 0 59 8 38 0 64 8 38 0 67 8 38 0 73 8 38 0 76 8 38 0 77 8 38 0 82 8 38 0 84 8 38 0 86 8 38 0 88 8 38 0 89 8 38 0 91 8 38 0 92 8 38 0 96 8 38 0 98 8 38 0 99 8 38 0 100 8 38 0 102 8 38 0 105 8 38 0 106 8 38 0 107 8 38 0 108 8 38 0 112 8 38 0 115 8 38 0 116 8 38 0 121 8 38 0 123 8 38 0 126 8 38 0 131 8 38 0 132 8 38 0 133 8 38 0 134 8 38 0 138 8 38 0 140 8 38 0 142 8 38 0 143 8 38 0 147 8 38 0 150 8 38 0 151 8 38 0 162 8 38 0 167 8 38 0 168 8 38 0 171 3 159 0 172 8 38 0 173 8 38 1 144] 
#[0 8 42 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 5 1 38 5 61 1 39 5 65 1 40 18 5 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 5 1 47 5 97 1 49 5 101 1 51 18 5 1 53 18 5 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 46 0 4 8 46 0 7 7 241 0 172] 
#[0 8 50 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 54 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 58 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 18 9 0 172] 
#[0 18 13 0 121] 
#[0 8 62 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 18 17 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 21 1 38 5 61 1 39 5 65 1 40 18 21 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 21 1 47 5 97 1 49 5 101 1 51 18 21 1 53 18 21 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 66 0 55 8 66 0 82 8 66 0 96 8 66 0 98 8 66 0 99 8 66 0 121 8 66 0 151 8 66 0 162 3 105 0 173] 
#[0 8 70 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173] 
#[1 8 74 0 11 8 74 0 55 8 74 0 82 8 74 0 96 8 74 0 98 8 74 0 99 8 74 0 121 8 74 0 151 8 74 0 162 3 163 0 172 8 74 0 173 8 74 1 144] 
#[1 8 78 0 11 8 78 0 55 8 78 0 82 8 78 0 96 8 78 0 98 8 78 0 99 8 78 0 121 8 78 0 151 8 78 0 162 3 167 0 172 8 78 0 173 8 78 1 144] 
#[0 18 25 0 172] 
#[0 18 29 0 172] 
#[0 18 33 0 100] 
#[0 18 37 0 18] 
#[0 18 41 0 172] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 18 49 0 228 18 49 0 229 18 45 0 230 18 49 0 233 18 49 1 1 18 49 1 2] 
#[0 18 53 0 172] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 18 61 0 228 18 61 0 229 18 57 0 230 18 61 0 233 18 61 1 1 18 61 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 18 65 1 4] 
#[0 18 69 0 18] 
#[0 8 82 0 4 0 7 0 172] 
#[0 8 86 0 4 0 7 0 172] 
#[0 18 73 0 172] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 18 81 0 228 18 81 0 229 18 77 0 230 18 81 0 233 18 81 1 1 18 81 1 2] 
#[0 8 90 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 18 85 0 172] 
#[0 18 89 0 4] 
#[0 8 94 0 4 0 7 0 172] 
#[0 8 98 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 18 93 0 182 18 93 0 191 1 17 0 194 18 93 0 195 18 93 0 196 18 93 0 197 18 93 1 43 18 93 1 105] 
#[0 8 102 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 7 46 0 11 7 46 0 55 7 46 0 82 7 46 0 96 7 46 0 98 7 46 0 99 7 46 0 121 7 46 0 151 7 46 0 162 7 46 0 172 7 46 0 173 18 97 0 220 7 46 1 144] 
#[1 18 101 0 11 8 106 0 55 8 106 0 82 8 106 0 96 8 106 0 98 8 106 0 99 8 106 0 121 8 106 0 151 8 106 0 162 3 171 0 172 8 106 0 173 18 109 0 219 8 106 1 144] 
#[1 18 113 0 96 18 117 0 98 18 121 0 99 3 213 0 162 18 125 0 182 18 129 1 86 18 133 1 88 18 129 1 89] 
#[1 18 141 0 96 18 145 0 97] 
#[1 18 149 0 96 18 153 0 97] 
#[1 8 110 0 11 8 110 0 55 8 110 0 82 8 110 0 96 8 110 0 98 8 110 0 99 8 110 0 121 8 110 0 151 8 110 0 162 3 175 0 172 8 110 0 173 8 110 1 144] 
#[0 8 114 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 18 157 0 82 18 161 0 99 3 213 0 162 18 165 0 182 18 173 1 94 18 173 1 98] 
#[0 18 177 0 147] 
#[1 18 181 0 5 8 118 0 22 8 118 0 23 8 118 0 43 8 118 0 45 8 118 0 55 8 118 0 56 8 118 0 58 8 118 0 59 8 118 0 64 8 118 0 67 8 118 0 77 8 118 0 84 8 118 0 88 8 118 0 89 8 118 0 99 8 118 0 107 8 118 0 115 8 118 0 116 8 118 0 123 8 118 0 138 8 118 0 143 8 118 0 150 8 118 0 167 8 118 0 168 8 118 0 171 18 185 0 172 8 118 0 173] 
#[0 8 122 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 8 126 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 18 189 0 172] 
#[0 8 130 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 193 1 38 5 61 1 39 5 65 1 40 18 193 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 193 1 47 5 97 1 49 5 101 1 51 18 193 1 53 18 193 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 134 0 3 8 134 0 4 8 134 0 5 8 134 0 7 8 134 0 11 8 134 0 22 8 134 0 23 8 134 0 28 8 134 0 29 8 134 0 30 8 134 0 31 8 134 0 32 8 134 0 33 8 134 0 34 8 134 0 35 8 134 0 36 8 134 0 37 8 134 0 38 8 134 0 39 8 134 0 40 8 134 0 41 8 134 0 43 8 134 0 45 8 134 0 55 8 134 0 56 8 134 0 58 8 134 0 59 8 134 0 64 8 134 0 67 8 134 0 73 8 134 0 76 8 134 0 77 8 134 0 82 8 134 0 84 8 134 0 86 8 134 0 88 8 134 0 89 8 134 0 91 8 134 0 92 8 134 0 96 8 134 0 98 8 134 0 99 8 134 0 100 8 134 0 102 8 134 0 105 8 134 0 106 8 134 0 107 8 134 0 108 8 134 0 112 8 134 0 115 8 134 0 116 8 134 0 121 8 134 0 123 8 134 0 126 8 134 0 131 8 134 0 132 8 134 0 133 8 134 0 134 8 134 0 138 8 134 0 140 8 134 0 142 8 134 0 143 8 134 0 147 8 134 0 150 8 134 0 151 8 134 0 162 8 134 0 167 8 134 0 168 8 134 0 171 3 179 0 172 8 134 0 173 8 134 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 18 197 0 172 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 201 1 38 5 61 1 39 5 65 1 40 18 201 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 201 1 47 5 97 1 49 5 101 1 51 18 201 1 53 18 201 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 18 205 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 181 0 191 1 17 0 194 13 181 0 195 13 181 0 196 13 181 0 197 13 185 0 251] 
#[0 8 138 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 18 209 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 14 17 0 191 1 17 0 194 14 17 0 195 14 17 0 196 14 17 0 197 14 21 0 246] 
#[1 8 142 0 11 8 142 0 55 8 142 0 82 8 142 0 96 8 142 0 98 8 142 0 99 8 142 0 121 8 142 0 151 8 142 0 162 3 183 0 172 8 142 0 173 8 142 1 144] 
#[1 8 146 0 11 8 146 0 55 8 146 0 82 8 146 0 96 8 146 0 98 8 146 0 99 8 146 0 121 8 146 0 151 8 146 0 162 3 187 0 172 8 146 0 173 8 146 1 144] 
#[1 8 150 0 11 8 150 0 55 8 150 0 82 8 150 0 96 8 150 0 98 8 150 0 99 8 150 0 121 8 150 0 151 8 150 0 162 3 191 0 172 8 150 0 173 8 150 1 144] 
#[1 8 154 0 11 8 154 0 55 8 154 0 82 8 154 0 96 8 154 0 98 8 154 0 99 8 154 0 121 8 154 0 151 8 154 0 162 3 195 0 172 8 154 0 173 8 154 1 144] 
#[0 8 158 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 8 162 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 82 0 84 0 88 0 89 0 96 0 98 0 99 0 107 0 115 0 116 0 121 0 123 0 124 0 129 0 138 0 143 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 213 1 38 5 61 1 39 5 65 1 40 18 213 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 213 1 47 5 97 1 49 5 101 1 51 18 213 1 53 18 213 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 18 217 0 236 18 221 1 38 5 61 1 39 5 65 1 40 18 221 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 221 1 47 5 97 1 49 5 101 1 51 18 221 1 53 18 221 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 8 166 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 8 170 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 8 174 0 4 4 221 0 6 8 174 0 7 4 225 0 8 0 33 0 9 8 174 0 11 8 174 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 199 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 8 174 0 82 1 17 0 84 1 17 0 88 1 17 0 89 8 174 0 96 8 174 0 98 8 174 0 99 1 17 0 107 1 17 0 115 1 17 0 116 8 174 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 8 174 0 151 4 237 0 155 4 241 0 160 4 245 0 161 3 203 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 174 0 172 8 174 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 18 225 1 132 5 141 1 141 5 141 1 143 8 174 1 144] 
#[0 8 178 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 8 182 0 4 4 221 0 6 8 182 0 7 4 225 0 8 0 33 0 9 8 182 0 11 8 182 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 207 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 8 182 0 82 1 17 0 84 1 17 0 88 1 17 0 89 8 182 0 96 8 182 0 98 8 182 0 99 1 17 0 107 1 17 0 115 1 17 0 116 8 182 0 121 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 8 182 0 151 4 237 0 155 4 241 0 160 4 245 0 161 3 211 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 182 0 172 8 182 0 173 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 18 229 1 132 5 141 1 141 5 141 1 143 8 182 1 144] 
#[0 8 186 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 18 233 0 172] 
#[0 18 237 0 172] 
#[1 3 221 0 173 3 229 0 207 18 241 0 213] 
#[0 18 245 0 99] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 249 1 38 5 61 1 39 5 65 1 40 18 249 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 18 249 1 47 5 97 1 49 5 101 1 51 18 249 1 53 18 249 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 3 215 0 3 7 241 0 172 3 215 0 173] 
#[0 18 253 0 99] 
#[0 19 1 0 172] 
#[0 19 5 0 99] 
#[1 8 57 0 3 3 221 0 173 3 229 0 207 19 9 0 213 19 13 0 230] 
#[0 19 17 0 99] 
#[0 19 21 0 99] 
#[0 19 25 0 99] 
#[0 19 29 0 172] 
#[0 19 33 0 172] 
#[0 19 37 0 142] 
#[0 19 41 0 172] 
#[0 19 45 0 172] 
#[1 0 162 0 3 4 53 0 5 19 49 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 19 53 1 11] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 19 57 1 11] 
#[1 3 221 0 173 3 229 0 207 19 61 0 213] 
#[1 8 153 0 3 19 65 0 253] 
#[1 8 153 0 3 19 69 0 253] 
#[1 8 153 0 3 19 73 0 253] 
#[1 19 77 0 172 4 202 0 173 19 77 1 13] 
#[1 3 221 0 173 3 229 0 207 19 81 0 213] 
#[1 3 221 0 173 3 229 0 207 19 85 0 213] 
#[0 19 89 0 99] 
#[1 8 153 0 3 19 93 0 172 19 97 0 253] 
#[0 19 101 0 172] 
#[0 19 105 0 172] 
#[0 19 109 0 172] 
#[1 8 153 0 3 19 113 0 172 4 202 0 173 19 117 0 253 19 121 1 13] 
#[1 0 162 0 3 4 53 0 5 19 125 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 19 129 1 11] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 19 133 1 11] 
#[1 3 221 0 173 3 229 0 207 19 137 0 213] 
#[1 8 153 0 3 19 141 0 253] 
#[1 8 153 0 3 19 145 0 253] 
#[1 8 153 0 3 19 149 0 253] 
#[1 19 153 0 172 4 202 0 173 19 153 1 13] 
#[1 3 221 0 173 3 229 0 207 19 157 0 213] 
#[1 3 221 0 173 3 229 0 207 19 161 0 213] 
#[0 19 165 0 99] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 19 169 1 132 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 49 0 79 9 73 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 57 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 9 65 0 191 1 17 0 194 9 65 0 195 9 65 0 196 9 65 0 197 9 69 0 236 9 73 0 252 9 77 1 38 5 61 1 39 5 65 1 40 9 77 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 9 77 1 47 5 97 1 49 5 101 1 51 9 77 1 53 9 77 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 9 81 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 19 173 1 132 5 141 1 141 5 141 1 143] 
#[1 19 177 0 8 10 21 0 159] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 181 1 38 5 61 1 39 5 65 1 40 19 181 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 19 181 1 47 5 97 1 49 5 101 1 51 19 181 1 53 19 181 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 10 29 0 18 19 185 0 146] 
#[1 8 190 0 11 8 190 0 55 8 190 0 82 8 190 0 96 8 190 0 98 8 190 0 99 8 190 0 121 8 190 0 151 8 190 0 162 3 219 0 172 8 190 0 173 8 190 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 189 1 38 5 61 1 39 5 65 1 40 19 189 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 19 189 1 47 5 97 1 49 5 101 1 51 19 189 1 53 19 189 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 194 0 11 8 194 0 55 8 194 0 82 8 194 0 96 8 194 0 98 8 194 0 99 8 194 0 121 8 194 0 151 8 194 0 162 3 223 0 172 8 194 0 173 8 194 1 144] 
#[1 8 198 0 11 8 198 0 55 8 198 0 82 8 198 0 96 8 198 0 98 8 198 0 99 8 198 0 121 8 198 0 151 8 198 0 162 3 227 0 172 8 198 0 173 8 198 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 193 1 38 5 61 1 39 5 65 1 40 19 193 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 19 193 1 47 5 97 1 49 5 101 1 51 19 193 1 53 19 193 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 202 0 11 8 202 0 55 8 202 0 82 8 202 0 96 8 202 0 98 8 202 0 99 8 202 0 121 8 202 0 151 8 202 0 162 3 231 0 172 8 202 0 173 8 202 1 144] 
#[1 19 197 0 24 19 233 0 50 19 233 0 51 19 233 0 52 19 229 0 62 19 229 0 63 19 233 0 65 19 229 0 67 19 229 1 60 19 233 1 61] 
#[1 8 206 0 11 13 61 0 13 8 206 0 55 8 206 0 82 8 206 0 96 8 206 0 98 8 206 0 99 8 206 0 121 8 206 0 151 8 206 0 162 8 206 0 172 8 206 0 173 13 65 1 65 8 206 1 144] 
#[1 8 210 0 11 8 210 0 13 8 210 0 55 8 210 0 82 8 210 0 96 8 210 0 98 8 210 0 99 8 210 0 121 8 210 0 151 8 210 0 162 3 235 0 172 8 210 0 173 8 210 1 144] 
#[1 4 250 0 11 4 250 0 13 10 29 0 18 4 250 0 55 4 250 0 82 4 250 0 96 4 250 0 98 4 250 0 99 4 250 0 121 10 33 0 146 4 250 0 151 4 250 0 162 4 250 0 172 4 250 0 173 19 237 1 66 4 250 1 144] 
#[1 8 214 0 11 13 61 0 13 8 214 0 55 8 214 0 82 8 214 0 96 8 214 0 98 8 214 0 99 8 214 0 121 8 214 0 151 8 214 0 162 8 214 0 172 8 214 0 173 13 65 1 65 8 214 1 144] 
#[1 8 218 0 11 13 61 0 13 8 218 0 55 8 218 0 82 8 218 0 96 8 218 0 98 8 218 0 99 8 218 0 121 8 218 0 151 8 218 0 162 8 218 0 172 8 218 0 173 13 65 1 65 8 218 1 144] 
#[1 8 222 0 4 8 222 0 7 7 241 0 172] 
#[0 19 241 0 121] 
#[0 8 226 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 19 245 0 121] 
#[1 8 230 0 11 8 230 0 55 8 230 0 82 8 230 0 96 8 230 0 98 8 230 0 99 8 230 0 121 8 230 0 151 8 230 0 162 3 239 0 172 8 230 0 173 8 230 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 249 1 38 5 61 1 39 5 65 1 40 19 249 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 19 249 1 47 5 97 1 49 5 101 1 51 19 249 1 53 19 249 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 253 1 38 5 61 1 39 5 65 1 40 19 253 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 19 253 1 47 5 97 1 49 5 101 1 51 19 253 1 53 19 253 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 8 234 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 1 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 5 0 191 1 17 0 194 20 5 0 195 20 5 0 196 20 5 0 197] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 20 9 0 228 20 9 0 229 20 9 0 233 20 9 1 1 20 9 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 20 13 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 20 17 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 21 0 191 1 17 0 194 20 21 0 195 20 21 0 196 20 21 0 197] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 20 25 0 228 20 25 0 229 20 25 0 233 20 25 1 1 20 25 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 20 29 1 4] 
#[0 8 238 0 4 0 7 0 172] 
#[0 20 33 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 37 0 191 1 17 0 194 20 37 0 195 20 37 0 196 20 37 0 197] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 20 41 0 228 20 41 0 229 20 41 0 233 20 41 1 1 20 41 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 20 45 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 9 49 0 79 11 53 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 11 37 0 127 11 41 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 49 0 191 1 17 0 194 11 49 0 195 11 49 0 196 11 49 0 197 11 53 0 252 20 49 1 0] 
#[0 8 242 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 246 0 7 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 18 101 0 11 8 250 0 55 8 250 0 82 8 250 0 96 8 250 0 98 8 250 0 99 8 250 0 121 8 250 0 151 8 250 0 162 3 243 0 172 8 250 0 173 18 109 0 219 8 250 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 20 57 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 20 53 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 20 57 0 201 20 57 0 203 20 57 0 212 1 49 0 223 20 57 0 234 1 57 0 235 20 57 0 236 20 57 0 237 20 57 0 238 20 57 0 239 20 57 0 240 20 57 0 241 20 57 0 242 20 57 0 243 20 57 0 247 20 57 0 248 20 57 1 18 20 57 1 19 20 57 1 20 20 57 1 21 20 57 1 22 20 57 1 23 1 125 1 25 20 57 1 26 20 57 1 27 20 57 1 28 20 57 1 29 20 57 1 30 20 57 1 34 20 57 1 37 1 157 1 56 1 157 1 57 1 157 1 58 20 57 1 62 20 57 1 63 20 57 1 64 20 57 1 67 20 57 1 68 20 57 1 69 20 57 1 70 20 57 1 71 20 57 1 72 20 57 1 73 20 57 1 74 20 57 1 75 20 57 1 76 20 57 1 77 20 57 1 78 20 57 1 79 20 57 1 80 20 57 1 81 20 57 1 82 20 57 1 83 20 57 1 84 20 57 1 85 20 57 1 90 20 57 1 91 2 9 1 92 20 57 1 97 20 57 1 100 20 57 1 101 20 57 1 102 20 57 1 103 20 57 1 104 20 57 1 109 20 57 1 110 20 57 1 111 20 57 1 112 20 57 1 113 20 57 1 114 20 57 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 20 57 1 129 2 117 1 130 2 121 1 131 20 57 1 139 20 57 1 140 20 57 1 142] 
#[0 20 61 0 11] 
#[0 8 254 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 9 2 0 99 9 2 0 162 3 221 0 173 3 229 0 207 20 65 0 213] 
#[0 20 69 0 172] 
#[0 20 73 0 172] 
#[0 20 77 0 172] 
#[0 9 6 0 96 0 98 0 99 0 162] 
#[1 20 81 0 99 3 213 0 162 20 85 0 182] 
#[0 9 10 0 96 0 98 0 99 0 162] 
#[1 13 237 0 172 20 89 0 218] 
#[1 13 237 0 172 20 93 0 218] 
#[1 13 237 0 172 20 97 0 218] 
#[1 13 237 0 172 20 101 0 218] 
#[0 20 105 0 172] 
#[0 20 109 0 172] 
#[0 20 113 0 172] 
#[0 9 14 0 82 0 99 0 162] 
#[0 9 18 0 82 0 99 0 162] 
#[0 9 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 213 0 162 20 117 0 172 20 121 0 182] 
#[0 20 125 0 5] 
#[0 20 129 0 153] 
#[1 9 26 0 3 9 26 0 4 9 26 0 5 9 26 0 7 9 26 0 11 9 26 0 22 9 26 0 23 9 26 0 28 9 26 0 29 9 26 0 30 9 26 0 31 9 26 0 32 9 26 0 33 9 26 0 34 9 26 0 35 9 26 0 36 9 26 0 37 9 26 0 38 9 26 0 39 9 26 0 40 9 26 0 41 9 26 0 43 9 26 0 45 9 26 0 55 9 26 0 56 9 26 0 58 9 26 0 59 9 26 0 64 9 26 0 67 9 26 0 73 9 26 0 76 9 26 0 77 9 26 0 82 9 26 0 84 9 26 0 86 9 26 0 88 9 26 0 89 9 26 0 91 9 26 0 92 9 26 0 96 9 26 0 98 9 26 0 99 9 26 0 100 9 26 0 102 9 26 0 105 9 26 0 106 9 26 0 107 9 26 0 108 9 26 0 112 9 26 0 115 9 26 0 116 9 26 0 121 9 26 0 123 9 26 0 126 9 26 0 131 9 26 0 132 9 26 0 133 9 26 0 134 9 26 0 138 9 26 0 140 9 26 0 142 9 26 0 143 9 26 0 147 9 26 0 150 9 26 0 151 9 26 0 162 9 26 0 167 9 26 0 168 9 26 0 171 3 247 0 172 9 26 0 173 9 26 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 20 133 1 38 5 61 1 39 5 65 1 40 20 133 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 20 133 1 47 5 97 1 49 5 101 1 51 20 133 1 53 20 133 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 9 30 0 3 9 30 0 4 9 30 0 5 9 30 0 7 9 30 0 11 9 30 0 22 9 30 0 23 9 30 0 28 9 30 0 29 9 30 0 30 9 30 0 31 9 30 0 32 9 30 0 33 9 30 0 34 9 30 0 35 9 30 0 36 9 30 0 37 9 30 0 38 9 30 0 39 9 30 0 40 9 30 0 41 9 30 0 43 9 30 0 45 9 30 0 55 9 30 0 56 9 30 0 58 9 30 0 59 9 30 0 64 9 30 0 67 9 30 0 73 9 30 0 76 9 30 0 77 9 30 0 82 9 30 0 84 9 30 0 86 9 30 0 88 9 30 0 89 9 30 0 91 9 30 0 92 9 30 0 96 9 30 0 98 9 30 0 99 9 30 0 100 9 30 0 102 9 30 0 105 9 30 0 106 9 30 0 107 9 30 0 108 9 30 0 112 9 30 0 115 9 30 0 116 9 30 0 121 9 30 0 123 9 30 0 126 9 30 0 131 9 30 0 132 9 30 0 133 9 30 0 134 9 30 0 138 9 30 0 140 9 30 0 142 9 30 0 143 9 30 0 147 9 30 0 150 9 30 0 151 9 30 0 162 9 30 0 167 9 30 0 168 9 30 0 171 3 251 0 172 9 30 0 173 9 30 1 144] 
#[0 20 137 0 172] 
#[0 20 141 0 172] 
#[1 3 255 0 3 3 255 0 4 3 255 0 5 3 255 0 7 3 255 0 11 3 255 0 13 3 255 0 22 3 255 0 23 3 255 0 28 3 255 0 29 3 255 0 30 3 255 0 31 3 255 0 32 3 255 0 33 3 255 0 34 3 255 0 35 3 255 0 36 3 255 0 37 3 255 0 38 3 255 0 39 3 255 0 40 3 255 0 41 3 255 0 43 3 255 0 45 3 255 0 55 3 255 0 56 3 255 0 58 3 255 0 59 3 255 0 64 3 255 0 67 3 255 0 73 3 255 0 76 3 255 0 77 3 255 0 82 3 255 0 84 3 255 0 86 3 255 0 88 3 255 0 89 3 255 0 91 3 255 0 92 3 255 0 96 3 255 0 98 3 255 0 99 3 255 0 100 3 255 0 102 3 255 0 105 3 255 0 106 3 255 0 107 3 255 0 108 3 255 0 112 3 255 0 115 3 255 0 116 3 255 0 121 3 255 0 123 3 255 0 126 3 255 0 131 3 255 0 132 3 255 0 133 3 255 0 134 3 255 0 138 3 255 0 140 3 255 0 142 3 255 0 143 3 255 0 147 3 255 0 150 3 255 0 151 3 255 0 162 3 255 0 167 3 255 0 168 3 255 0 171 4 3 0 172 3 255 0 173 3 255 1 144] 
#[0 9 34 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 9 38 0 3 9 38 0 4 9 38 0 5 9 38 0 7 9 38 0 11 9 38 0 13 9 38 0 22 9 38 0 23 9 38 0 28 9 38 0 29 9 38 0 30 9 38 0 31 9 38 0 32 9 38 0 33 9 38 0 34 9 38 0 35 9 38 0 36 9 38 0 37 9 38 0 38 9 38 0 39 9 38 0 40 9 38 0 41 9 38 0 43 9 38 0 45 9 38 0 55 9 38 0 56 9 38 0 58 9 38 0 59 9 38 0 64 9 38 0 67 9 38 0 73 9 38 0 76 9 38 0 77 9 38 0 82 9 38 0 84 9 38 0 86 9 38 0 88 9 38 0 89 9 38 0 91 9 38 0 92 9 38 0 96 9 38 0 98 9 38 0 99 9 38 0 100 9 38 0 102 9 38 0 105 9 38 0 106 9 38 0 107 9 38 0 108 9 38 0 112 9 38 0 115 9 38 0 116 9 38 0 121 9 38 0 123 9 38 0 126 9 38 0 131 9 38 0 132 9 38 0 133 9 38 0 134 9 38 0 138 9 38 0 140 9 38 0 142 9 38 0 143 9 38 0 147 9 38 0 150 9 38 0 151 9 38 0 162 9 38 0 167 9 38 0 168 9 38 0 171 4 7 0 172 9 38 0 173 9 38 1 144] 
#[0 9 42 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 9 46 0 4 0 7 0 11 0 13 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 5 1 0 165 20 145 0 187] 
#[1 5 1 0 165 20 149 0 187] 
#[0 20 153 0 99] 
#[0 20 157 0 172] 
#[1 4 11 0 3 7 241 0 172 4 11 0 173] 
#[0 20 161 0 172] 
#[0 20 165 0 106] 
#[0 20 169 0 172] 
#[0 20 173 0 99] 
#[1 3 221 0 173 3 229 0 207 20 177 0 213] 
#[0 20 181 0 172] 
#[0 20 185 0 172] 
#[0 20 189 0 172] 
#[0 20 193 0 142] 
#[0 20 197 0 142] 
#[0 9 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 201 0 117] 
#[0 20 205 0 117] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 20 209 1 11] 
#[1 3 221 0 173 3 229 0 207 20 213 0 213] 
#[1 3 221 0 173 3 229 0 207 20 217 0 213] 
#[0 20 221 0 99] 
#[1 0 162 0 3 4 53 0 5 8 61 0 172 3 83 0 173 3 229 0 207 20 225 0 213 20 229 0 228 20 229 0 229 20 229 0 233] 
#[1 3 221 0 173 3 229 0 207 20 233 0 213] 
#[1 3 221 0 173 3 229 0 207 20 237 0 213] 
#[1 3 221 0 173 3 229 0 207 20 241 0 213] 
#[0 20 245 0 99] 
#[0 20 249 0 99] 
#[0 20 253 0 172] 
#[1 8 153 0 3 21 1 0 253] 
#[1 0 162 0 3 4 53 0 5 21 5 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 21 9 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 21 13 0 191 1 17 0 194 21 13 0 195 21 13 0 196 21 13 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 21 17 0 191 1 17 0 194 21 17 0 195 21 17 0 196 21 17 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 21 21 0 191 1 17 0 194 21 21 0 195 21 21 0 196 21 21 0 197] 
#[1 8 153 0 3 21 29 0 172 2 107 0 173 21 25 0 253 21 29 1 13] 
#[1 21 33 0 172 4 202 0 173 21 33 1 13] 
#[1 3 221 0 173 3 229 0 207 21 37 0 213] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 21 41 1 11] 
#[1 3 221 0 173 3 229 0 207 21 45 0 213] 
#[1 3 221 0 173 3 229 0 207 21 49 0 213] 
#[0 21 53 0 99] 
#[1 0 162 0 3 4 53 0 5 8 61 0 172 3 83 0 173 3 229 0 207 21 57 0 213 21 61 0 228 21 61 0 229 21 61 0 233] 
#[1 3 221 0 173 3 229 0 207 21 65 0 213] 
#[1 3 221 0 173 3 229 0 207 21 69 0 213] 
#[1 3 221 0 173 3 229 0 207 21 73 0 213] 
#[0 21 77 0 99] 
#[0 21 81 0 99] 
#[0 21 85 0 172] 
#[0 9 54 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 58 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 229 0 159 21 89 0 190] 
#[1 21 93 0 55 3 213 0 162 21 97 0 172 3 221 0 173 21 101 0 182 3 229 0 207 21 105 0 213] 
#[0 21 109 0 172] 
#[1 9 62 0 11 9 62 0 55 9 62 0 82 9 62 0 96 9 62 0 98 9 62 0 99 9 62 0 121 9 62 0 151 9 62 0 162 4 15 0 172 9 62 0 173 9 62 1 144] 
#[1 9 66 0 11 9 66 0 55 9 66 0 82 9 66 0 96 9 66 0 98 9 66 0 99 9 66 0 121 9 66 0 151 9 66 0 162 4 19 0 172 9 66 0 173 9 66 1 144] 
#[0 21 113 0 172] 
#[0 9 70 0 172] 
#[0 9 74 0 172] 
#[0 9 78 0 172] 
#[0 9 82 0 172] 
#[0 9 86 0 172] 
#[0 9 90 0 172] 
#[0 9 94 0 172] 
#[0 21 117 0 172] 
#[0 21 121 0 172] 
#[1 9 98 0 11 13 61 0 13 9 98 0 55 9 98 0 82 9 98 0 96 9 98 0 98 9 98 0 99 9 98 0 121 9 98 0 151 9 98 0 162 9 98 0 172 9 98 0 173 13 65 1 65 9 98 1 144] 
#[0 9 102 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 9 106 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 9 110 0 11 9 110 0 55 9 110 0 82 9 110 0 96 9 110 0 98 9 110 0 99 9 110 0 121 9 110 0 151 9 110 0 162 4 23 0 172 9 110 0 173 9 110 1 144] 
#[1 9 114 0 11 9 114 0 55 9 114 0 82 9 114 0 96 9 114 0 98 9 114 0 99 9 114 0 121 9 114 0 151 9 114 0 162 4 27 0 172 9 114 0 173 9 114 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 21 125 1 38 5 61 1 39 5 65 1 40 21 125 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 21 125 1 47 5 97 1 49 5 101 1 51 21 125 1 53 21 125 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 21 133 0 228 21 133 0 229 21 129 0 230 21 133 0 233 21 133 1 1 21 133 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 21 137 1 4] 
#[0 9 118 0 4 0 7 0 172] 
#[0 21 141 0 172] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 21 149 0 228 21 149 0 229 21 145 0 230 21 149 0 233 21 149 1 1 21 149 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 21 153 1 4] 
#[0 9 122 0 4 0 7 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 21 157 1 38 5 61 1 39 5 65 1 40 21 157 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 21 157 1 47 5 97 1 49 5 101 1 51 21 157 1 53 21 157 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 21 165 0 228 21 165 0 229 21 161 0 230 21 165 0 233 21 165 1 1 21 165 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 21 169 1 4] 
#[0 9 126 0 4 0 7 0 172] 
#[0 9 130 0 4 0 7 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 21 177 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 21 173 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 21 177 0 201 21 177 0 203 21 177 0 212 1 49 0 223 21 177 0 234 1 57 0 235 21 177 0 236 21 177 0 237 21 177 0 238 21 177 0 239 21 177 0 240 21 177 0 241 21 177 0 242 21 177 0 243 21 177 0 247 21 177 0 248 21 177 1 18 21 177 1 19 21 177 1 20 21 177 1 21 21 177 1 22 21 177 1 23 1 125 1 25 21 177 1 26 21 177 1 27 21 177 1 28 21 177 1 29 21 177 1 30 21 177 1 34 21 177 1 37 1 157 1 56 1 157 1 57 1 157 1 58 21 177 1 62 21 177 1 63 21 177 1 64 21 177 1 67 21 177 1 68 21 177 1 69 21 177 1 70 21 177 1 71 21 177 1 72 21 177 1 73 21 177 1 74 21 177 1 75 21 177 1 76 21 177 1 77 21 177 1 78 21 177 1 79 21 177 1 80 21 177 1 81 21 177 1 82 21 177 1 83 21 177 1 84 21 177 1 85 21 177 1 90 21 177 1 91 2 9 1 92 21 177 1 97 21 177 1 100 21 177 1 101 21 177 1 102 21 177 1 103 21 177 1 104 21 177 1 109 21 177 1 110 21 177 1 111 21 177 1 112 21 177 1 113 21 177 1 114 21 177 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 21 177 1 129 2 117 1 130 2 121 1 131 21 177 1 139 21 177 1 140 21 177 1 142] 
#[0 9 134 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 21 185 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 21 181 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 21 185 0 201 21 185 0 203 21 185 0 212 1 49 0 223 21 185 0 234 1 57 0 235 21 185 0 236 21 185 0 237 21 185 0 238 21 185 0 239 21 185 0 240 21 185 0 241 21 185 0 242 21 185 0 243 21 185 0 247 21 185 0 248 21 185 1 18 21 185 1 19 21 185 1 20 21 185 1 21 21 185 1 22 21 185 1 23 1 125 1 25 21 185 1 26 21 185 1 27 21 185 1 28 21 185 1 29 21 185 1 30 21 185 1 34 21 185 1 37 1 157 1 56 1 157 1 57 1 157 1 58 21 185 1 62 21 185 1 63 21 185 1 64 21 185 1 67 21 185 1 68 21 185 1 69 21 185 1 70 21 185 1 71 21 185 1 72 21 185 1 73 21 185 1 74 21 185 1 75 21 185 1 76 21 185 1 77 21 185 1 78 21 185 1 79 21 185 1 80 21 185 1 81 21 185 1 82 21 185 1 83 21 185 1 84 21 185 1 85 21 185 1 90 21 185 1 91 2 9 1 92 21 185 1 97 21 185 1 100 21 185 1 101 21 185 1 102 21 185 1 103 21 185 1 104 21 185 1 109 21 185 1 110 21 185 1 111 21 185 1 112 21 185 1 113 21 185 1 114 21 185 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 21 185 1 129 2 117 1 130 2 121 1 131 21 185 1 139 21 185 1 140 21 185 1 142] 
#[0 9 138 0 99 0 162] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 21 189 1 38 5 61 1 39 5 65 1 40 21 189 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 21 189 1 47 5 97 1 49 5 101 1 51 21 189 1 53 21 189 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 21 193 0 111] 
#[1 21 197 0 96 21 201 0 98 21 205 0 99] 
#[0 21 209 0 172] 
#[0 21 213 0 172] 
#[0 9 142 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 9 146 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 9 150 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 9 154 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 21 217 0 96 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 221 0 180 21 221 0 181 21 221 0 182 21 221 0 183 21 221 0 184 21 221 0 185 21 221 0 186 21 221 0 187 21 221 0 188 21 221 0 189 21 225 0 191 1 17 0 194 21 225 0 195 21 225 0 196 21 225 0 197 15 113 1 38 5 61 1 39 21 229 1 40 15 113 1 41 5 73 1 42 21 233 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 113 1 47 5 97 1 49 5 101 1 51 15 113 1 53 15 113 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 21 237 1 93 5 121 1 124 5 129 1 125 21 241 1 126 5 129 1 127 2 117 1 130 5 133 1 131 21 245 1 141 21 245 1 143] 
#[0 21 249 0 137] 
#[1 21 253 0 82 22 1 0 99] 
#[1 3 213 0 162 22 5 0 182] 
#[0 9 158 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 3 213 0 162 22 9 0 172 22 13 0 182] 
#[0 9 162 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 9 166 0 3 9 166 0 4 9 166 0 5 9 166 0 7 9 166 0 11 9 166 0 22 9 166 0 23 9 166 0 28 9 166 0 29 9 166 0 30 9 166 0 31 9 166 0 32 9 166 0 33 9 166 0 34 9 166 0 35 9 166 0 36 9 166 0 37 9 166 0 38 9 166 0 39 9 166 0 40 9 166 0 41 9 166 0 43 9 166 0 45 9 166 0 55 9 166 0 56 9 166 0 58 9 166 0 59 9 166 0 64 9 166 0 67 9 166 0 73 9 166 0 76 9 166 0 77 9 166 0 82 9 166 0 84 9 166 0 86 9 166 0 88 9 166 0 89 9 166 0 91 9 166 0 92 9 166 0 96 9 166 0 98 9 166 0 99 9 166 0 100 9 166 0 102 9 166 0 105 9 166 0 106 9 166 0 107 9 166 0 108 9 166 0 112 9 166 0 115 9 166 0 116 9 166 0 121 9 166 0 123 9 166 0 126 9 166 0 131 9 166 0 132 9 166 0 133 9 166 0 134 9 166 0 138 9 166 0 140 9 166 0 142 9 166 0 143 9 166 0 147 9 166 0 150 9 166 0 151 9 166 0 162 9 166 0 167 9 166 0 168 9 166 0 171 4 31 0 172 9 166 0 173 9 166 1 144] 
#[0 22 17 0 100] 
#[0 22 21 0 147] 
#[1 8 153 0 3 22 25 0 22 22 29 0 172 22 33 0 253] 
#[1 8 153 0 3 22 37 0 22 22 41 0 172 22 45 0 253] 
#[0 22 49 0 172] 
#[0 22 53 0 106] 
#[0 22 57 0 106] 
#[0 9 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 22 61 0 106 22 65 0 132] 
#[0 22 69 0 172] 
#[0 22 73 0 99] 
#[1 22 77 0 106 22 81 0 132] 
#[1 22 85 0 106 22 89 0 132] 
#[0 22 93 0 142] 
#[0 9 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 22 97 0 172] 
#[0 22 101 0 172] 
#[1 3 221 0 173 3 229 0 207 22 105 0 213] 
#[0 22 109 0 99] 
#[0 22 113 0 99] 
#[0 22 117 0 172] 
#[0 22 121 0 99] 
#[1 8 57 0 3 3 221 0 173 3 229 0 207 22 125 0 213 22 129 0 230] 
#[0 22 133 0 99] 
#[0 22 137 0 99] 
#[0 22 141 0 99] 
#[0 22 145 0 172] 
#[0 22 149 0 172] 
#[0 22 153 0 142] 
#[1 0 162 0 3 4 53 0 5 22 157 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 22 161 1 11] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 22 165 1 11] 
#[1 3 221 0 173 3 229 0 207 22 169 0 213] 
#[1 8 153 0 3 22 173 0 253] 
#[1 8 153 0 3 22 177 0 253] 
#[1 8 153 0 3 22 181 0 253] 
#[1 22 185 0 172 4 202 0 173 22 185 1 13] 
#[1 3 221 0 173 3 229 0 207 22 189 0 213] 
#[1 3 221 0 173 3 229 0 207 22 193 0 213] 
#[0 22 197 0 99] 
#[1 3 221 0 173 3 229 0 207 22 201 0 213] 
#[0 22 205 0 99] 
#[0 22 209 0 99] 
#[0 22 213 0 172] 
#[0 22 217 0 99] 
#[1 8 57 0 3 3 221 0 173 3 229 0 207 22 221 0 213 22 225 0 230] 
#[0 22 229 0 99] 
#[0 22 233 0 99] 
#[0 22 237 0 99] 
#[0 22 241 0 172] 
#[0 22 245 0 172] 
#[0 22 249 0 142] 
#[1 22 253 0 8 10 21 0 159] 
#[1 9 182 0 11 9 182 0 55 9 182 0 82 9 182 0 96 9 182 0 98 9 182 0 99 9 182 0 121 9 182 0 151 9 182 0 162 4 35 0 172 9 182 0 173 9 182 1 144] 
#[1 10 29 0 18 23 5 0 55 10 33 0 146 3 213 0 162 3 221 0 173 23 9 0 182 3 229 0 207 23 13 0 213] 
#[0 23 17 0 172] 
#[1 23 21 0 55 3 213 0 162 23 25 0 182] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 23 29 1 38 5 61 1 39 5 65 1 40 23 29 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 23 29 1 47 5 97 1 49 5 101 1 51 23 29 1 53 23 29 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 23 33 1 38 5 61 1 39 5 65 1 40 23 33 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 23 33 1 47 5 97 1 49 5 101 1 51 23 33 1 53 23 33 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 23 37 0 24 23 41 0 50 23 41 0 51 23 41 0 52 23 41 0 65 23 41 1 61] 
#[0 23 45 0 24] 
#[1 9 186 0 22 9 186 0 23 9 186 0 43 9 186 0 45 9 186 0 55 9 186 0 56 9 186 0 58 9 186 0 59 9 186 0 64 9 186 0 67 9 186 0 77 9 186 0 84 9 186 0 88 9 186 0 89 9 186 0 99 9 186 0 107 9 186 0 115 9 186 0 116 9 186 0 123 9 186 0 138 9 186 0 143 9 186 0 150 9 186 0 167 9 186 0 168 9 186 0 171 7 241 0 172 9 186 0 173] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 23 49 0 228 23 49 0 229 23 49 0 233 23 49 1 1 23 49 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 23 53 1 4] 
#[0 9 190 0 4 0 7 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 23 57 0 191 1 17 0 194 23 57 0 195 23 57 0 196 23 57 0 197] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 23 61 0 228 23 61 0 229 23 61 0 233 23 61 1 1 23 61 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 23 65 1 4] 
#[0 9 194 0 4 0 7 0 172] 
#[1 9 198 0 4 9 198 0 7 4 39 0 172] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 23 69 0 228 23 69 0 229 23 69 0 233 23 69 1 1 23 69 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 23 73 1 4] 
#[0 9 202 0 4 0 7 0 172] 
#[0 23 77 0 172] 
#[0 9 206 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 23 81 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 21 173 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 23 81 0 201 23 81 0 203 23 81 0 212 1 49 0 223 23 81 0 234 1 57 0 235 23 81 0 236 23 81 0 237 23 81 0 238 23 81 0 239 23 81 0 240 23 81 0 241 23 81 0 242 23 81 0 243 23 81 0 247 23 81 0 248 23 81 1 18 23 81 1 19 23 81 1 20 23 81 1 21 23 81 1 22 23 81 1 23 1 125 1 25 23 81 1 26 23 81 1 27 23 81 1 28 23 81 1 29 23 81 1 30 23 81 1 34 23 81 1 37 1 157 1 56 1 157 1 57 1 157 1 58 23 81 1 62 23 81 1 63 23 81 1 64 23 81 1 67 23 81 1 68 23 81 1 69 23 81 1 70 23 81 1 71 23 81 1 72 23 81 1 73 23 81 1 74 23 81 1 75 23 81 1 76 23 81 1 77 23 81 1 78 23 81 1 79 23 81 1 80 23 81 1 81 23 81 1 82 23 81 1 83 23 81 1 84 23 81 1 85 23 81 1 90 23 81 1 91 2 9 1 92 23 81 1 97 23 81 1 100 23 81 1 101 23 81 1 102 23 81 1 103 23 81 1 104 23 81 1 109 23 81 1 110 23 81 1 111 23 81 1 112 23 81 1 113 23 81 1 114 23 81 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 23 81 1 129 2 117 1 130 2 121 1 131 23 81 1 139 23 81 1 140 23 81 1 142] 
#[0 9 210 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 23 85 0 172] 
#[0 9 214 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 9 218 0 99 9 218 0 162 3 221 0 173 3 229 0 207 23 89 0 213] 
#[0 23 93 0 172] 
#[0 23 97 0 172] 
#[0 23 101 0 111] 
#[0 23 105 0 99] 
#[1 9 222 0 7 9 222 0 11 9 222 0 82 9 222 0 99 9 222 0 162 9 222 0 172 9 222 0 173 23 109 1 96] 
#[1 9 226 0 7 9 226 0 11 9 226 0 82 9 226 0 99 9 226 0 162 4 43 0 172 9 226 0 173] 
#[1 0 150 0 1 0 154 0 3 9 230 0 7 0 150 0 9 9 230 0 11 9 230 0 82 9 230 0 99 9 230 0 162 4 47 0 172 9 230 0 173] 
#[1 9 234 0 7 9 234 0 11 9 234 0 82 9 234 0 99 9 234 0 162 4 51 0 172 9 234 0 173] 
#[1 9 238 0 7 9 238 0 11 9 238 0 82 9 238 0 99 9 238 0 162 4 55 0 172 9 238 0 173] 
#[1 9 222 0 7 9 222 0 11 9 222 0 82 9 222 0 99 9 222 0 162 9 222 0 172 9 222 0 173 23 113 1 96] 
#[1 1 242 0 1 1 242 0 3 9 242 0 7 1 242 0 9 9 242 0 11 9 242 0 82 9 242 0 99 9 242 0 162 4 59 0 172 9 242 0 173] 
#[1 9 246 0 7 9 246 0 11 9 246 0 82 9 246 0 99 9 246 0 162 4 63 0 172 9 246 0 173] 
#[0 9 250 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 23 117 0 172] 
#[0 23 121 0 172] 
#[0 9 254 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 3 213 0 162 23 125 0 182] 
#[0 10 2 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 10 6 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 129 0 172] 
#[1 8 153 0 3 23 133 0 22 23 137 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 23 141 0 228 23 141 0 229 23 141 0 233 0 162 1 144] 
#[0 23 145 0 172] 
#[1 8 153 0 3 23 149 0 22 23 153 0 253] 
#[0 10 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 157 0 106] 
#[0 10 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 23 161 0 106 23 165 0 132] 
#[0 23 169 0 172] 
#[0 10 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 1 0 165 23 173 0 187] 
#[1 5 1 0 165 23 177 0 187] 
#[0 23 181 0 99] 
#[0 23 185 0 172] 
#[0 23 189 0 172] 
#[0 23 193 0 106] 
#[0 23 197 0 172] 
#[0 23 201 0 99] 
#[1 3 221 0 173 3 229 0 207 23 205 0 213] 
#[0 23 209 0 172] 
#[0 23 213 0 172] 
#[0 23 217 0 172] 
#[0 23 221 0 142] 
#[0 23 225 0 142] 
#[0 10 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 162 0 3 14 193 0 5 6 241 0 24 8 61 0 172 2 103 0 173 12 69 0 228 12 69 0 229 12 69 0 233 12 73 1 10 23 229 1 11] 
#[1 3 221 0 173 3 229 0 207 23 233 0 213] 
#[1 3 221 0 173 3 229 0 207 23 237 0 213] 
#[0 23 241 0 99] 
#[1 0 162 0 3 4 53 0 5 8 61 0 172 3 83 0 173 3 229 0 207 23 245 0 213 23 249 0 228 23 249 0 229 23 249 0 233] 
#[1 3 221 0 173 3 229 0 207 23 253 0 213] 
#[1 3 221 0 173 3 229 0 207 24 1 0 213] 
#[1 3 221 0 173 3 229 0 207 24 5 0 213] 
#[0 24 9 0 99] 
#[0 24 13 0 99] 
#[0 24 17 0 172] 
#[0 24 21 0 99] 
#[0 24 25 0 172] 
#[0 24 29 0 172] 
#[0 24 33 0 106] 
#[0 24 37 0 172] 
#[0 24 41 0 99] 
#[1 3 221 0 173 3 229 0 207 24 45 0 213] 
#[0 24 49 0 172] 
#[0 24 53 0 172] 
#[0 24 57 0 172] 
#[0 24 61 0 142] 
#[0 24 65 0 142] 
#[0 10 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 229 0 159 24 69 0 190] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 24 73 0 191 1 17 0 194 24 73 0 195 24 73 0 196 24 73 0 197] 
#[1 10 62 0 11 10 62 0 55 10 62 0 82 10 62 0 96 10 62 0 98 10 62 0 99 10 62 0 121 10 62 0 151 10 62 0 162 4 67 0 172 10 62 0 173 10 62 1 144] 
#[0 24 81 0 172] 
#[1 24 85 0 55 3 213 0 162 24 89 0 182] 
#[0 24 93 0 55] 
#[1 10 66 0 11 10 66 0 55 10 66 0 82 10 66 0 96 10 66 0 98 10 66 0 99 10 66 0 121 10 66 0 151 10 66 0 162 4 71 0 172 10 66 0 173 10 66 1 144] 
#[0 24 101 0 172] 
#[1 24 105 0 55 3 213 0 162 4 75 0 172 3 221 0 173 24 113 0 182 3 229 0 207 24 117 0 213 24 121 0 218] 
#[1 10 70 0 11 10 70 0 55 10 70 0 82 10 70 0 96 10 70 0 98 10 70 0 99 10 70 0 121 10 70 0 151 10 70 0 162 4 79 0 172 10 70 0 173 10 70 1 144] 
#[0 24 129 0 172] 
#[0 24 133 0 172] 
#[0 24 137 0 172] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 24 141 1 4] 
#[0 10 74 0 4 0 7 0 172] 
#[1 8 57 0 3 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 24 149 0 228 24 149 0 229 24 145 0 230 24 149 0 233 24 149 1 1 24 149 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 24 153 1 4] 
#[0 10 78 0 4 0 7 0 172] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 24 157 1 4] 
#[0 10 82 0 4 0 7 0 172] 
#[0 24 161 0 74] 
#[0 10 86 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 10 29 0 18 24 165 0 144 10 33 0 146] 
#[0 10 90 0 99 0 162] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 24 169 1 38 5 61 1 39 5 65 1 40 24 169 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 24 169 1 47 5 97 1 49 5 101 1 51 24 169 1 53 24 169 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 24 173 0 111] 
#[0 10 94 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 24 177 0 172] 
#[1 24 181 0 7 24 185 0 11 10 98 0 82 10 98 0 99 10 98 0 162 13 237 0 172 3 221 0 173 3 229 0 207 24 189 0 213 24 193 0 218 24 197 1 95] 
#[1 24 181 0 7 24 201 0 11 10 102 0 82 10 102 0 99 10 102 0 162 13 237 0 172 3 221 0 173 3 229 0 207 24 205 0 213 24 209 0 218 24 197 1 95] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 24 213 0 96 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 221 0 180 21 221 0 181 21 221 0 182 21 221 0 183 21 221 0 184 21 221 0 185 21 221 0 186 21 221 0 187 21 221 0 188 21 221 0 189 21 225 0 191 1 17 0 194 21 225 0 195 21 225 0 196 21 225 0 197 15 113 1 38 5 61 1 39 21 229 1 40 15 113 1 41 5 73 1 42 21 233 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 113 1 47 5 97 1 49 5 101 1 51 15 113 1 53 15 113 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 24 217 1 93 5 121 1 124 5 129 1 125 21 241 1 126 5 129 1 127 2 117 1 130 5 133 1 131 21 245 1 141 21 245 1 143] 
#[0 24 221 0 137] 
#[0 10 106 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 5 1 0 165 24 225 0 187] 
#[0 24 229 0 172] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 24 233 0 228 24 233 0 229 24 233 0 233 0 162 1 144] 
#[0 10 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 1 0 165 24 237 0 187] 
#[0 24 241 0 172] 
#[0 10 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 24 245 0 106 24 249 0 132] 
#[1 8 153 0 3 24 253 0 22 25 1 0 172 25 5 0 253] 
#[1 8 153 0 3 25 9 0 22 25 13 0 172 25 17 0 253] 
#[0 25 21 0 172] 
#[0 25 25 0 106] 
#[0 25 29 0 106] 
#[0 10 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 33 0 106 25 37 0 132] 
#[0 25 41 0 172] 
#[0 25 45 0 99] 
#[1 25 49 0 106 25 53 0 132] 
#[1 25 57 0 106 25 61 0 132] 
#[0 25 65 0 142] 
#[0 10 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 221 0 173 3 229 0 207 25 69 0 213] 
#[0 25 73 0 99] 
#[0 25 77 0 99] 
#[0 25 81 0 172] 
#[0 25 85 0 99] 
#[1 8 57 0 3 3 221 0 173 3 229 0 207 25 89 0 213 25 93 0 230] 
#[0 25 97 0 99] 
#[0 25 101 0 99] 
#[0 25 105 0 99] 
#[0 25 109 0 172] 
#[0 25 113 0 172] 
#[0 25 117 0 142] 
#[0 25 121 0 172] 
#[0 25 125 0 106] 
#[0 25 129 0 106] 
#[0 10 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 133 0 106 25 137 0 132] 
#[0 25 141 0 172] 
#[0 25 145 0 99] 
#[1 25 149 0 106 25 153 0 132] 
#[1 25 157 0 106 25 161 0 132] 
#[0 25 165 0 142] 
#[0 10 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 169 0 156 10 21 0 159] 
#[0 10 154 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 25 173 0 191 1 17 0 194 25 173 0 195 25 173 0 196 25 173 0 197] 
#[0 25 177 0 55] 
#[1 10 158 0 11 10 158 0 55 10 158 0 82 10 158 0 96 10 158 0 98 10 158 0 99 10 158 0 121 10 158 0 151 10 158 0 162 4 83 0 172 10 158 0 173 10 158 1 144] 
#[0 25 185 0 172] 
#[1 10 162 0 11 10 162 0 55 10 162 0 82 10 162 0 96 10 162 0 98 10 162 0 99 10 162 0 121 10 162 0 151 10 162 0 162 4 87 0 172 10 162 0 173 10 162 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 25 193 0 191 1 17 0 194 25 193 0 195 25 193 0 196 25 193 0 197] 
#[0 25 197 0 55] 
#[1 4 91 0 11 4 91 0 55 4 91 0 82 4 91 0 96 4 91 0 98 4 91 0 99 4 91 0 121 4 91 0 151 4 91 0 162 4 95 0 172 4 91 0 173 4 91 1 144] 
#[1 0 29 0 1 0 33 0 9 7 46 0 11 10 29 0 18 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 2 255 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 16 141 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 25 205 0 141 1 17 0 143 10 33 0 146 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 3 3 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 141 0 201 16 141 0 203 16 141 0 212 16 145 0 220 1 49 0 223 16 141 0 234 1 57 0 235 16 141 0 236 16 141 0 237 16 141 0 238 16 141 0 239 16 141 0 240 16 141 0 241 16 141 0 242 16 141 0 243 16 141 0 247 16 141 0 248 16 141 1 18 16 141 1 19 16 141 1 20 16 141 1 21 16 141 1 22 16 141 1 23 1 125 1 25 16 141 1 26 16 141 1 27 16 141 1 28 16 141 1 29 16 141 1 30 16 141 1 34 16 141 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 141 1 62 16 141 1 63 16 141 1 64 16 141 1 67 16 141 1 68 16 141 1 69 16 141 1 70 16 141 1 71 16 141 1 72 16 141 1 73 16 141 1 74 16 141 1 75 16 141 1 76 16 141 1 77 16 141 1 78 16 141 1 79 16 141 1 80 16 141 1 81 16 141 1 82 16 141 1 83 16 141 1 84 16 141 1 85 16 141 1 90 16 141 1 91 2 9 1 92 16 141 1 97 16 141 1 100 16 141 1 101 16 141 1 102 16 141 1 103 16 141 1 104 16 141 1 109 16 141 1 110 16 141 1 111 16 141 1 112 16 141 1 113 16 141 1 114 16 141 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 141 1 129 2 117 1 130 2 121 1 131 16 141 1 139 16 141 1 140 16 141 1 142] 
#[0 25 209 0 172] 
#[1 25 213 0 55 3 213 0 162 25 217 0 182] 
#[0 25 221 0 55] 
#[1 10 29 0 18 25 225 0 115 10 33 0 146] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 25 229 1 38 5 61 1 39 5 65 1 40 25 229 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 25 229 1 47 5 97 1 49 5 101 1 51 25 229 1 53 25 229 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 25 233 0 24] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 25 237 1 38 5 61 1 39 5 65 1 40 25 237 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 25 237 1 47 5 97 1 49 5 101 1 51 25 237 1 53 25 237 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 10 174 0 4 0 7 0 172] 
#[1 2 135 0 4 4 53 0 5 2 135 0 7 2 139 0 172 25 241 0 228 25 241 0 229 25 241 0 233 25 241 1 1 25 241 1 2] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 25 245 1 4] 
#[0 10 178 0 4 0 7 0 172] 
#[0 10 182 0 4 0 7 0 172] 
#[0 25 249 0 172] 
#[1 10 186 0 96 10 186 0 98 10 186 0 99 10 186 0 162 3 221 0 173 3 229 0 207 25 253 0 213] 
#[0 26 1 0 172] 
#[0 10 190 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 26 5 0 111] 
#[0 26 9 0 172] 
#[1 10 194 0 82 10 194 0 99 10 194 0 162 13 237 0 172 3 221 0 173 3 229 0 207 26 13 0 213 26 17 0 218] 
#[0 10 198 0 82 0 99 0 162] 
#[0 26 21 0 173] 
#[0 10 202 0 7 0 11 0 82 0 99 0 162 0 172 0 173] 
#[1 10 206 0 82 10 206 0 99 10 206 0 162 13 237 0 172 3 221 0 173 3 229 0 207 26 25 0 213 26 29 0 218] 
#[0 10 210 0 82 0 99 0 162] 
#[0 26 33 0 173] 
#[1 9 222 0 7 9 222 0 11 9 222 0 82 9 222 0 99 9 222 0 162 9 222 0 172 9 222 0 173 26 37 1 96] 
#[1 9 222 0 7 9 222 0 11 9 222 0 82 9 222 0 99 9 222 0 162 9 222 0 172 9 222 0 173 26 41 1 96] 
#[0 10 214 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 8 153 0 3 26 45 0 172 26 49 0 253] 
#[1 5 1 0 165 26 53 0 187] 
#[0 10 218 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 26 57 0 172 26 61 0 253] 
#[1 5 1 0 165 26 65 0 187] 
#[0 10 222 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 226 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 69 0 172] 
#[1 8 153 0 3 26 73 0 22 26 77 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 26 81 0 228 26 81 0 229 26 81 0 233 0 162 1 144] 
#[0 26 85 0 172] 
#[1 8 153 0 3 26 89 0 22 26 93 0 253] 
#[0 10 230 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 97 0 106] 
#[0 10 234 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 238 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 242 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 101 0 106 26 105 0 132] 
#[0 26 109 0 172] 
#[0 10 250 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 6 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 10 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 113 0 99] 
#[0 26 117 0 172] 
#[0 26 121 0 172] 
#[0 26 125 0 106] 
#[0 26 129 0 172] 
#[0 26 133 0 99] 
#[1 3 221 0 173 3 229 0 207 26 137 0 213] 
#[0 26 141 0 172] 
#[0 26 145 0 172] 
#[0 26 149 0 172] 
#[0 26 153 0 142] 
#[0 26 157 0 142] 
#[0 11 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 161 0 106] 
#[0 11 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 165 0 106 26 169 0 132] 
#[0 26 173 0 172] 
#[0 11 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 54 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 96 0 98 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 58 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 11 62 0 11 11 62 0 55 11 62 0 82 11 62 0 96 11 62 0 98 11 62 0 99 11 62 0 121 11 62 0 151 11 62 0 162 4 99 0 172 11 62 0 173 11 62 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 181 0 191 1 17 0 194 26 181 0 195 26 181 0 196 26 181 0 197] 
#[0 26 185 0 55] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 189 0 191 1 17 0 194 26 189 0 195 26 189 0 196 26 189 0 197] 
#[0 11 66 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 11 70 0 11 11 70 0 55 11 70 0 82 11 70 0 96 11 70 0 98 11 70 0 99 11 70 0 121 11 70 0 151 11 70 0 162 4 103 0 172 11 70 0 173 11 70 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 197 0 191 1 17 0 194 26 197 0 195 26 197 0 196 26 197 0 197] 
#[0 26 201 0 172] 
#[0 26 205 0 55] 
#[1 11 74 0 11 11 74 0 55 11 74 0 82 11 74 0 96 11 74 0 98 11 74 0 99 11 74 0 121 11 74 0 151 11 74 0 162 4 107 0 172 11 74 0 173 11 74 1 144] 
#[0 26 213 0 172] 
#[0 11 78 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[0 26 217 0 172] 
#[1 11 82 0 11 11 82 0 55 11 82 0 82 11 82 0 96 11 82 0 98 11 82 0 99 11 82 0 121 11 82 0 151 11 82 0 162 4 111 0 172 11 82 0 173 11 82 1 144] 
#[0 26 225 0 172] 
#[1 11 86 0 11 11 86 0 55 11 86 0 82 11 86 0 96 11 86 0 98 11 86 0 99 11 86 0 121 11 86 0 151 11 86 0 162 4 115 0 172 11 86 0 173 11 86 1 144] 
#[1 7 38 0 4 7 38 0 7 2 251 0 172 16 97 1 3 26 233 1 4] 
#[0 11 90 0 4 0 7 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 26 237 1 38 5 61 1 39 5 65 1 40 26 237 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 26 237 1 47 5 97 1 49 5 101 1 51 26 237 1 53 26 237 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 11 94 0 96 0 98 0 99 0 162] 
#[1 10 29 0 18 26 241 0 144 10 33 0 146] 
#[0 11 98 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 221 0 180 21 221 0 181 21 221 0 182 21 221 0 183 21 221 0 184 21 221 0 185 21 221 0 186 21 221 0 187 21 221 0 188 21 221 0 189 21 225 0 191 1 17 0 194 21 225 0 195 21 225 0 196 21 225 0 197 15 113 1 38 5 61 1 39 21 229 1 40 15 113 1 41 5 73 1 42 21 233 1 43 5 73 1 44 5 73 1 45 5 89 1 46 15 113 1 47 5 97 1 49 5 101 1 51 15 113 1 53 15 113 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 26 245 1 93 5 121 1 124 5 129 1 125 21 241 1 126 5 129 1 127 2 117 1 130 5 133 1 131 21 245 1 141 21 245 1 143] 
#[0 11 102 0 82 0 99 0 162] 
#[0 26 249 0 173] 
#[0 11 106 0 82 0 99 0 162] 
#[0 11 110 0 82 0 99 0 162] 
#[0 26 253 0 173] 
#[0 11 114 0 82 0 99 0 162] 
#[1 24 181 0 7 27 1 0 11 11 118 0 82 11 118 0 99 11 118 0 162 13 237 0 172 3 221 0 173 3 229 0 207 27 5 0 213 27 9 0 218 24 197 1 95] 
#[1 24 181 0 7 27 13 0 11 11 122 0 82 11 122 0 99 11 122 0 162 13 237 0 172 3 221 0 173 3 229 0 207 27 17 0 213 27 21 0 218 24 197 1 95] 
#[1 8 153 0 3 27 25 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 27 29 0 228 27 29 0 229 27 29 0 233 0 162 1 144] 
#[1 8 153 0 3 27 33 0 172 27 37 0 253] 
#[1 8 153 0 3 27 41 0 253] 
#[0 11 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 27 45 0 172 27 49 0 253] 
#[1 5 1 0 165 27 53 0 187] 
#[0 27 57 0 172] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 27 61 0 228 27 61 0 229 27 61 0 233 0 162 1 144] 
#[0 11 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 1 0 165 27 65 0 187] 
#[0 27 69 0 172] 
#[0 11 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 73 0 106 27 77 0 132] 
#[0 27 81 0 172] 
#[0 27 85 0 106] 
#[0 27 89 0 106] 
#[0 11 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 93 0 106 27 97 0 132] 
#[0 27 101 0 172] 
#[0 27 105 0 99] 
#[1 27 109 0 106 27 113 0 132] 
#[1 27 117 0 106 27 121 0 132] 
#[0 27 125 0 142] 
#[0 11 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 129 0 106 27 133 0 132] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 137 0 191 1 17 0 194 27 137 0 195 27 137 0 196 27 137 0 197] 
#[0 11 174 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 11 178 0 11 11 178 0 55 11 178 0 82 11 178 0 96 11 178 0 98 11 178 0 99 11 178 0 121 11 178 0 151 11 178 0 162 4 119 0 172 11 178 0 173 11 178 1 144] 
#[0 11 182 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 145 0 191 1 17 0 194 27 145 0 195 27 145 0 196 27 145 0 197] 
#[0 11 186 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 27 149 1 38 5 61 1 39 5 65 1 40 27 149 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 27 149 1 47 5 97 1 49 5 101 1 51 27 149 1 53 27 149 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 11 190 0 11 11 190 0 55 11 190 0 82 11 190 0 96 11 190 0 98 11 190 0 99 11 190 0 121 11 190 0 151 11 190 0 162 4 123 0 172 11 190 0 173 11 190 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 157 0 191 1 17 0 194 27 157 0 195 27 157 0 196 27 157 0 197] 
#[0 27 161 0 55] 
#[0 27 165 0 18] 
#[1 10 29 0 18 27 169 0 115 10 33 0 146] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 27 173 1 38 5 61 1 39 5 65 1 40 27 173 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 27 173 1 47 5 97 1 49 5 101 1 51 27 173 1 53 27 173 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[1 10 29 0 18 27 177 0 115 10 33 0 146] 
#[0 11 194 0 4 0 7 0 172] 
#[1 4 127 0 11 4 127 0 55 4 127 0 82 4 127 0 96 4 127 0 98 4 127 0 99 4 127 0 121 4 127 0 151 4 127 0 162 4 131 0 172 4 127 0 173 4 127 1 144] 
#[1 11 198 0 96 11 198 0 98 11 198 0 99 11 198 0 162 3 221 0 173 3 229 0 207 27 181 0 213] 
#[0 11 202 0 7 0 11 0 82 0 99 0 162 0 172 0 173] 
#[0 11 206 0 82 0 99 0 162] 
#[0 11 210 0 82 0 99 0 162] 
#[1 11 214 0 82 11 214 0 99 11 214 0 162 13 237 0 172 3 221 0 173 3 229 0 207 27 185 0 213 27 189 0 218] 
#[0 11 218 0 82 0 99 0 162] 
#[0 27 193 0 173] 
#[1 11 222 0 82 11 222 0 99 11 222 0 162 13 237 0 172 3 221 0 173 3 229 0 207 27 197 0 213 27 201 0 218] 
#[0 11 226 0 82 0 99 0 162] 
#[0 27 205 0 173] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 27 209 0 228 27 209 0 229 27 209 0 233 0 162 1 144] 
#[0 11 230 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 27 213 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 27 217 0 228 27 217 0 229 27 217 0 233 0 162 1 144] 
#[0 11 234 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 27 221 0 253] 
#[0 11 238 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 27 225 0 172 27 229 0 253] 
#[1 5 1 0 165 27 233 0 187] 
#[0 11 242 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 27 237 0 172 27 241 0 253] 
#[1 5 1 0 165 27 245 0 187] 
#[0 11 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 250 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 27 249 0 106] 
#[0 11 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 6 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 10 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 253 0 106 28 1 0 132] 
#[0 28 5 0 172] 
#[0 12 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 42 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 9 0 191 1 17 0 194 28 9 0 195 28 9 0 196 28 9 0 197] 
#[0 12 46 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 28 13 0 55 3 213 0 162 7 241 0 172 3 221 0 173 28 17 0 182 3 229 0 207 28 21 0 213] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 25 0 191 1 17 0 194 28 25 0 195 28 25 0 196 28 25 0 197] 
#[0 12 50 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 12 54 0 11 12 54 0 55 12 54 0 82 12 54 0 96 12 54 0 98 12 54 0 99 12 54 0 121 12 54 0 151 12 54 0 162 4 135 0 172 12 54 0 173 12 54 1 144] 
#[0 28 33 0 172] 
#[0 28 37 0 172] 
#[1 12 58 0 11 12 58 0 55 12 58 0 82 12 58 0 96 12 58 0 98 12 58 0 99 12 58 0 121 12 58 0 151 12 58 0 162 4 139 0 172 12 58 0 173 12 58 1 144] 
#[0 28 45 0 172] 
#[0 12 62 0 96 0 98 0 99 0 162] 
#[0 12 66 0 82 0 99 0 162] 
#[0 28 49 0 173] 
#[0 12 70 0 82 0 99 0 162] 
#[0 12 74 0 82 0 99 0 162] 
#[0 28 53 0 173] 
#[0 12 78 0 82 0 99 0 162] 
#[0 12 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 28 57 0 228 28 57 0 229 28 57 0 233 0 162 1 144] 
#[0 12 86 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 28 61 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 28 65 0 228 28 65 0 229 28 65 0 233 0 162 1 144] 
#[1 8 153 0 3 28 69 0 172 28 73 0 253] 
#[1 8 153 0 3 28 77 0 253] 
#[0 12 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 28 81 0 172 28 85 0 253] 
#[0 12 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 102 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 106 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 28 89 0 106 28 93 0 132] 
#[0 12 110 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 12 114 0 11 12 114 0 55 12 114 0 82 12 114 0 96 12 114 0 98 12 114 0 99 12 114 0 121 12 114 0 151 12 114 0 162 4 143 0 172 12 114 0 173 12 114 1 144] 
#[0 28 101 0 172] 
#[1 28 105 0 55 3 213 0 162 28 109 0 182] 
#[0 12 118 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 113 0 191 1 17 0 194 28 113 0 195 28 113 0 196 28 113 0 197] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 117 1 38 5 61 1 39 5 65 1 40 28 117 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 28 117 1 47 5 97 1 49 5 101 1 51 28 117 1 53 28 117 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 28 121 0 18] 
#[1 10 29 0 18 28 125 0 115 10 33 0 146] 
#[0 28 129 0 18] 
#[0 12 122 0 82 0 99 0 162] 
#[0 12 126 0 82 0 99 0 162] 
#[0 12 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 28 133 0 228 28 133 0 229 28 133 0 233 0 162 1 144] 
#[0 12 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 28 137 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 28 141 0 228 28 141 0 229 28 141 0 233 0 162 1 144] 
#[0 12 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 153 0 3 28 145 0 253] 
#[0 12 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 149 0 191 1 17 0 194 28 149 0 195 28 149 0 196 28 149 0 197] 
#[0 28 153 0 55] 
#[1 12 154 0 11 12 154 0 55 12 154 0 82 12 154 0 96 12 154 0 98 12 154 0 99 12 154 0 121 12 154 0 151 12 154 0 162 4 147 0 172 12 154 0 173 12 154 1 144] 
#[0 28 161 0 172] 
#[0 12 158 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 12 162 0 11 12 162 0 55 12 162 0 82 12 162 0 96 12 162 0 98 12 162 0 99 12 162 0 121 12 162 0 151 12 162 0 162 4 151 0 172 12 162 0 173 12 162 1 144] 
#[0 28 165 0 172] 
#[0 28 169 0 172] 
#[0 28 173 0 172] 
#[0 12 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 3 15 0 172 0 162 0 173 28 177 0 228 28 177 0 229 28 177 0 233 0 162 1 144] 
#[0 12 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 178 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 12 182 0 11 12 182 0 55 12 182 0 82 12 182 0 96 12 182 0 98 12 182 0 99 12 182 0 121 12 182 0 151 12 182 0 162 4 155 0 172 12 182 0 173 12 182 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 185 0 191 1 17 0 194 28 185 0 195 28 185 0 196 28 185 0 197] 
#[0 28 189 0 55] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 193 1 38 5 61 1 39 5 65 1 40 28 193 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 28 193 1 47 5 97 1 49 5 101 1 51 28 193 1 53 28 193 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 28 197 0 18] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 201 1 38 5 61 1 39 5 65 1 40 28 201 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 28 201 1 47 5 97 1 49 5 101 1 51 28 201 1 53 28 201 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 12 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 205 0 191 1 17 0 194 28 205 0 195 28 205 0 196 28 205 0 197] 
#[0 12 190 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 12 194 0 11 12 194 0 55 12 194 0 82 12 194 0 96 12 194 0 98 12 194 0 99 12 194 0 121 12 194 0 151 12 194 0 162 4 159 0 172 12 194 0 173 12 194 1 144] 
#[1 12 198 0 11 12 198 0 55 12 198 0 82 12 198 0 96 12 198 0 98 12 198 0 99 12 198 0 121 12 198 0 151 12 198 0 162 4 163 0 172 12 198 0 173 12 198 1 144] 
#[0 28 213 0 172] 
#[1 12 202 0 11 12 202 0 55 12 202 0 82 12 202 0 96 12 202 0 98 12 202 0 99 12 202 0 121 12 202 0 151 12 202 0 162 4 167 0 172 12 202 0 173 12 202 1 144] 
#[0 12 206 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 217 0 191 1 17 0 194 28 217 0 195 28 217 0 196 28 217 0 197] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 13 0 180 5 13 0 181 5 13 0 182 5 13 0 183 5 13 0 184 5 13 0 185 5 13 0 186 5 13 0 187 5 13 0 188 5 13 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 221 1 38 5 61 1 39 5 65 1 40 28 221 1 41 5 73 1 42 5 73 1 43 5 73 1 44 5 73 1 45 5 89 1 46 28 221 1 47 5 97 1 49 5 101 1 51 28 221 1 53 28 221 1 54 5 113 1 55 5 117 1 56 5 117 1 57 5 117 1 58 5 121 1 124 5 129 1 125 5 125 1 126 5 129 1 127 2 117 1 130 5 133 1 131 5 141 1 141 5 141 1 143] 
#[0 12 210 0 11 0 55 0 82 0 96 0 98 0 99 0 121 0 151 0 162 0 172 0 173 1 144] 
#[1 12 214 0 11 12 214 0 55 12 214 0 82 12 214 0 96 12 214 0 98 12 214 0 99 12 214 0 121 12 214 0 151 12 214 0 162 4 171 0 172 12 214 0 173 12 214 1 144]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument6: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument8: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result timesToken: ((nodes at: 3) at: 1).
	result plusToken: ((nodes at: 3) at: 2).
	result minusToken: ((nodes at: 3) at: 3).
	result divideToken: ((nodes at: 3) at: 4).
	result upArrowToken: ((nodes at: 3) at: 5).
	result _Token: ((nodes at: 3) at: 6).
	result modToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignment2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result setting: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType15: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 1) to: result statements.
	result addNodes: ((nodes at: 2) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addObjects: ((nodes at: 3) at: 1) to: result statements.
	result addNodes: ((nodes at: 3) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock3: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObjects: ((nodes at: 4) at: 1) to: result statements.
	result addNodes: ((nodes at: 4) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 4) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 4) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock4: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObject: (nodes at: 4) to: result statements.
	result addObjects: ((nodes at: 5) at: 1) to: result statements.
	result addNodes: ((nodes at: 5) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 5) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation3: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: ((nodes at: 3) at: 1).
	result orToken: ((nodes at: 3) at: 2).
	result xorToken: ((nodes at: 3) at: 3).
	result eqvToken: ((nodes at: 3) at: 4).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase10: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase11: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase12: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase13: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase14: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase15: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase16: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase17: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase18: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase19: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase1: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase20: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase21: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase22: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase23: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase24: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase2: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase3: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase4: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase5: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase6: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase7: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase8: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase9: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result greaterThanToken: ((nodes at: 3) at: 1).
	result lessThanToken: ((nodes at: 3) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 3) at: 3).
	result lessThanEqualToken: ((nodes at: 3) at: 4).
	result greaterThanEqualToken: ((nodes at: 3) at: 5).
	result iSToken: ((nodes at: 3) at: 6).
	result lIKEToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType2: nodes [
	| result |
	result := VBComplexTypeNode new.
	result base: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant1: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant2: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result equalToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstantList1: nodes [
	| result |
	result := VBConstantListNode new.
	result addNode: (nodes at: 1) to: result constants.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result constants.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction10: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction11: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction12: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	result type: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	result type: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction5: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction6: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction7: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	result type: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction8: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction9: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub10: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub11: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub12: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub5: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub6: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub7: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub8: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub9: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefType1: nodes [
	| result |
	result := VBDefTypeNode new.
	result deftype: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result pattern: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result enumTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction10: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction11: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction12: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction13: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction14: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction15: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction16: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result type: ((nodes at: 11) at: 1).
	result _size: ((nodes at: 11) at: 2).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: ((nodes at: 5) at: 1).
	result _size: ((nodes at: 5) at: 2).
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction9: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub10: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub11: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub12: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub13: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub14: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub15: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub16: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub9: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result typeTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDestinationList1: nodes [
	| result |
	result := VBDestinationListNode new.
	result addNode: (nodes at: 1) to: result labels.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result labels.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result bangToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess2: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoEvents1: nodes [
	| result |
	result := VBDoEventsNode new.
	result doEventsToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result untilToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result untilToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result whileToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result loopToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result whileToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result whileToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result whileToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	result ifMatch: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result ifMatch: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result ifMatch: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	result ifMatch: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEquals1: nodes [
	| result |
	result := VBEqualsNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent3: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent4: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result doToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result fORToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result propertyToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result kind: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result left: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result operator: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result right: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFileDescriptorLiteral1: nodes [
	| result |
	result := VBFileDescriptorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach10: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach11: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach12: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach13: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach14: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach15: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach16: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addNode: (nodes at: 16) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addNode: (nodes at: 12) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach9: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result element: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result element: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext5: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext6: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result element: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext7: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext8: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result element: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result element: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	result addToken: (nodes at: 19) to: result whitespaceTokens.
	result element: (nodes at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext5: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext6: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result element: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext7: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext8: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result element: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSub1: nodes [
	| result |
	result := VBGoSubNode new.
	result gosubToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endLineNumber: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenEmpty1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplements1: nodes [
	| result |
	result := VBImplementsNode new.
	result implementsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result interface: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall2: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result whitespaceToken: (nodes at: 3).
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result whitespaceToken: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral2: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	result andToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInterval1: nodes [
	| result |
	result := VBIntervalNode new.
	result from: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result toToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBLabelNode new.
	result label: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelTag1: nodes [
	| result |
	result := VBLabelTagNode new.
	result name: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause5: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause6: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause7: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause8: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result periodToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess2: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constant: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constant: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants1: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constants: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants2: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constants: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet17: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet18: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet19: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet20: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet21: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet22: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result functionToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet23: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addToken: (nodes at: 16) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet24: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result functionToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result functionToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation2: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result typeName: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation2: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result resumeToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result integerExpression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 3) at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause1: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause2: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result lenToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result equalToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result length: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause3: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause4: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause5: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause6: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause7: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause8: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result lenToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result equalToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result length: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption10: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result explicitToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption11: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result privateToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result moduleToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption12: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result privateToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result moduleToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionValueNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result databaseToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result databaseToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result compare: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption7: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption8: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result compare: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption9: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result explicitToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase1: nodes [
	| result |
	result := VBOptionBaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result baseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase2: nodes [
	| result |
	result := VBOptionBaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result baseToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result type: (nodes at: 8).
	result addTokens: ((nodes at: 9) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 9) at: 2).
	result default: ((nodes at: 9) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result _size: (nodes at: 8).
	result type: (nodes at: 9).
	result addTokens: ((nodes at: 10) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 10) at: 2).
	result default: ((nodes at: 10) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 3) at: 2).
	result default: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 4) at: 2).
	result default: ((nodes at: 4) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList3: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList4: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression2: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression3: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression4: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation2: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause10: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause11: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause12: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addTokens: ((nodes at: 9) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 9) at: 2) to: result values.
	result addTokens: ((nodes at: 9) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause1: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result values.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause2: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause3: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause4: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause5: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause6: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause7: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause8: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause9: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess2: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess3: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess4: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseError1: nodes [
	| result |
	result := VBRaiseErrorNode new.
	result eRRORToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result errorCode: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variable: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variables: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRename1: nodes [
	| result |
	result := VBRenameNode new.
	result nameToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result oldName: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result aSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result newName: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeEmpty1: nodes [
	| result |
	result := VBResumeEmptyNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result nEXTToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReturn1: nodes [
	| result |
	result := VBReturnNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect1: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect2: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleType1: nodes [
	| result |
	result := VBSimpleTypeNode new.
	result typeName: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSquareBracketIdentifier1: nodes [
	| result |
	result := VBSquareBracketIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry3: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result _size: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry4: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result _size: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry5: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result _size: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf1: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result iSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf2: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result isNotToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize1: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result sizes.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize2: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result nEWToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing10: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result fixedSize: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBTypedThingNode new.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result fixedSize: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing3: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing4: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing5: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result fixedSize: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing6: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing7: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result fixedSize: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing8: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing9: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable5: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable6: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable7: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable8: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result endLineNumber: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result wendToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 5 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 1).
	self add: ((nodes at: 2) at: 5) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace__Parameter__parameter__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___SetUpAssignation__setting___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____5: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___10: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___11: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___12: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___13: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___14: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___15: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___16: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___3: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___4: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___5: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___6: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___7: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___8: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___9: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____10: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____11: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____12: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____13: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____14: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____15: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____16: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____6: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____7: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____8: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____9: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument______2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Destination__label___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	result classToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader3: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader4: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	result classToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result elements.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result elements.
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result elements.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule3: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result elements.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule4: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addNode: (nodes at: 4) to: result elements.
	result addTokens: ((nodes at: 5) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result elements.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]
