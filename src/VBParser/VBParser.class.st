Class {
	#name : #VBParser,
	#superclass : #VBAbstractParser,
	#category : #'VBParser-ParsingCore'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 10 0 37] 
#[ 0 10 0 41] 
#[ 0 10 2 137] 
#[ 0 10 2 141] 
#[ 0 10 2 145] 
#[ 0 10 2 149] 
#[ 0 10 2 153] 
#[ 0 10 2 157] 
#[ 0 10 2 161] 
#[ 0 10 2 165] 
#[ 0 10 2 169] 
#[ 0 10 2 173] 
#[ 0 10 2 177] 
#[ 0 10 2 181] 
#[ 0 10 2 185] 
#[ 0 10 2 189] 
#[ 0 10 2 193] 
#[ 0 10 0 65] 
#[ 0 10 0 77] 
#[ 0 10 0 81] 
#[ 0 10 0 89] 
#[ 0 10 2 197] 
#[ 0 10 0 101] 
#[ 0 10 0 105] 
#[ 0 10 0 109] 
#[ 0 10 2 201] 
#[ 0 10 0 117] 
#[ 0 10 0 121] 
#[ 0 10 0 125] 
#[ 0 10 0 129] 
#[ 0 10 0 133] 
#[ 0 10 2 205] 
#[ 0 10 0 137] 
#[ 0 10 0 145] 
#[ 0 10 0 149] 
#[ 0 10 0 157] 
#[ 0 10 2 209] 
#[ 0 10 0 161] 
#[ 0 10 0 165] 
#[ 0 10 2 213] 
#[ 0 10 0 181] 
#[ 0 10 2 217] 
#[ 0 10 2 221] 
#[ 0 10 2 225] 
#[ 0 10 0 201] 
#[ 0 10 2 229] 
#[ 0 10 0 205] 
#[ 0 10 0 209] 
#[ 0 10 2 233] 
#[ 0 10 2 237] 
#[ 0 10 2 241] 
#[ 0 10 0 233] 
#[ 0 10 0 237] 
#[ 0 10 3 97] 
#[ 0 10 2 245] 
#[ 0 10 1 1] 
#[ 0 10 1 5] 
#[ 0 10 3 101] 
#[ 0 10 3 105] 
#[ 0 26 3 169] 
#[ 0 46 3 189] 
#[ 0 94 0 98] 
#[ 0 102 4 5] 
#[ 0 114 4 21] 
#[ 0 122 0 126] 
#[ 0 150 0 158 0 162 4 57] 
#[ 1 34 1 38] 
#[ 1 146 1 150] 
#[ 1 206 1 210] 
#[ 1 242 1 246] 
#[ 1 250 1 254] 
#[ 2 2 4 109] 
#[ 2 10 2 14] 
#[ 2 86 4 29] 
#[ 0 162 4 149] 
#[ 0 134 4 169] 
#[ 2 202 6 41] 
#[ 1 9 2 214] 
#[ 2 214 6 61] 
#[ 2 234 4 85] 
#[ 2 238 7 57] 
#[ 0 10 0 241] 
#[ 0 10 2 249] 
#[ 0 154 3 82] 
#[ 3 82 7 229] 
#[ 3 86 7 233] 
#[ 1 38 3 142] 
#[ 1 34 3 142] 
#[ 1 242 7 237] 
#[ 1 254 3 146] 
#[ 1 250 3 146] 
#[ 2 14 3 150] 
#[ 2 10 3 150] 
#[ 0 38 3 162] 
#[ 0 50 3 166] 
#[ 0 66 3 178] 
#[ 0 74 3 186] 
#[ 3 230 5 149] 
#[ 3 242 5 149] 
#[ 4 6 4 85] 
#[ 0 162 4 14] 
#[ 0 162 4 14 8 37] 
#[ 4 18 8 53] 
#[ 4 34 8 117] 
#[ 0 26 8 153] 
#[ 0 162 3 82 4 14] 
#[ 0 162 3 82 4 14 8 169] 
#[ 4 86 8 53] 
#[ 4 94 7 233] 
#[ 0 34 4 98] 
#[ 4 106 8 53] 
#[ 4 118 7 233] 
#[ 4 122 8 53] 
#[ 0 150 8 245] 
#[ 4 150 9 21] 
#[ 0 77 4 150] 
#[ 4 150 9 37] 
#[ 0 150 0 154] 
#[ 4 210 5 149] 
#[ 0 77 4 218] 
#[ 4 218 10 121] 
#[ 0 162 4 226] 
#[ 0 162 4 226 8 37] 
#[ 4 238 8 53] 
#[ 4 242 10 189] 
#[ 4 246 10 205] 
#[ 2 210 4 250] 
#[ 5 14 11 33] 
#[ 5 22 7 233] 
#[ 5 26 7 233] 
#[ 5 38 11 189] 
#[ 5 42 11 193] 
#[ 0 150 3 82 11 213] 
#[ 5 58 7 233] 
#[ 4 150 11 225] 
#[ 5 66 11 241] 
#[ 0 6 3 221] 
#[ 0 162 5 74] 
#[ 4 170 5 78] 
#[ 4 218 13 5] 
#[ 4 218 13 21] 
#[ 0 162 5 214] 
#[ 0 162 5 214 8 37] 
#[ 5 238 13 109] 
#[ 5 250 13 125] 
#[ 0 162 6 6] 
#[ 0 162 6 6 8 37] 
#[ 6 30 7 233] 
#[ 6 34 8 53] 
#[ 6 42 7 233] 
#[ 6 54 7 233] 
#[ 6 58 7 233] 
#[ 6 62 6 66 7 233] 
#[ 6 70 14 5] 
#[ 4 85 6 74] 
#[ 6 86 7 233] 
#[ 6 90 7 233] 
#[ 6 102 14 53] 
#[ 6 106 14 57] 
#[ 6 110 14 85] 
#[ 6 114 14 89] 
#[ 6 118 11 241] 
#[ 0 77 6 122] 
#[ 6 122 14 93] 
#[ 0 77 6 126] 
#[ 6 126 14 101] 
#[ 6 62 7 233] 
#[ 4 218 15 137] 
#[ 4 218 15 165] 
#[ 0 162 6 202] 
#[ 0 162 6 202 8 37] 
#[ 6 226 7 233] 
#[ 7 6 16 21] 
#[ 0 77 7 14] 
#[ 1 9 7 14] 
#[ 7 22 16 81] 
#[ 7 30 16 85] 
#[ 0 162 8 37] 
#[ 7 46 7 233] 
#[ 7 50 7 233] 
#[ 7 62 7 233] 
#[ 7 74 16 165] 
#[ 7 78 16 169] 
#[ 7 86 7 233] 
#[ 0 77 7 98] 
#[ 0 77 7 106] 
#[ 0 77 7 114] 
#[ 7 114 16 189] 
#[ 0 77 7 118] 
#[ 7 118 16 197] 
#[ 0 162 3 221] 
#[ 7 158 7 233] 
#[ 7 162 7 233] 
#[ 7 166 7 233] 
#[ 7 170 7 233] 
#[ 7 174 7 233] 
#[ 7 178 7 233] 
#[ 7 182 7 233] 
#[ 7 186 7 233] 
#[ 7 190 7 233] 
#[ 7 194 7 233] 
#[ 7 226 7 233] 
#[ 4 218 17 177] 
#[ 7 233 7 238] 
#[ 7 233 7 242] 
#[ 7 233 8 22] 
#[ 7 233 8 26] 
#[ 8 54 18 33] 
#[ 7 233 8 58] 
#[ 7 233 8 82] 
#[ 7 233 8 90] 
#[ 7 233 8 94] 
#[ 7 233 8 98] 
#[ 7 233 8 102] 
#[ 0 77 8 122] 
#[ 0 77 8 130] 
#[ 4 118 5 26] 
#[ 7 233 8 138] 
#[ 7 233 8 142] 
#[ 7 233 8 146] 
#[ 7 233 8 150] 
#[ 7 233 8 158] 
#[ 7 233 8 178] 
#[ 8 198 18 33] 
#[ 7 233 8 230] 
#[ 7 233 8 234] 
#[ 6 66 7 158] 
#[ 6 66 7 158 7 233] 
#[ 7 233 8 242] 
#[ 5 22 6 54] 
#[ 7 233 9 10] 
#[ 7 233 9 14] 
#[ 7 233 9 58] 
#[ 7 233 9 62] 
#[ 7 233 9 114] 
#[ 9 130 22 189] 
#[ 7 233 9 146] 
#[ 3 42 9 174] 
#[ 3 82 7 229 9 178] 
#[ 3 94 9 182] 
#[ 3 106 9 186] 
#[ 1 242 7 237 9 190] 
#[ 3 158 9 194] 
#[ 10 10 24 9] 
#[ 10 14 24 29] 
#[ 7 170 24 41] 
#[ 10 18 24 57] 
#[ 10 106 25 113] 
#[ 10 110 25 121] 
#[ 10 114 10 118] 
#[ 10 114 10 118 25 133] 
#[ 11 10 26 109] 
#[ 11 18 26 125] 
#[ 11 22 26 141] 
#[ 11 30 26 153] 
#[ 11 34 26 161] 
#[ 11 126 27 73] 
#[ 11 138 27 85] 
#[ 6 30 7 46] 
#[ 6 30 7 46 7 233] 
#[ 12 2 27 217] 
#[ 12 6 27 229] 
#[ 12 62 28 29] 
#[ 12 102 28 89] 
#[ 7 233 12 110] 
#[ 12 130 28 113] 
#[ 12 142 28 141] 
#[ 7 233 12 146] 
#[ 7 233 12 150] 
#[ 7 233 12 162]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2022-06-19T07:23:25.448471+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.

%left "")""  ;
%nonassoc  ""="" "":="";
%nonassoc  ""New"";
%left "","";
%right "":"";
%left ""eqv"" ;

%left ""xor"";
%left  ""or"";
%left  ""and"";
%nonassoc  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"" ;
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""not"" ;
%right ""^"";
%right  ""~"";
%right ""["" ""("";
%right ""!"" ;


%prefix VB;
%root Program;
%suffix Node;
%start module Statement ModuleStatement BehaviourDefinition;

<lineContinuation>
   :   ( \x20 | \xA0 | \x9) (_) ( \x20 | \xA0 | \x9)* ( \r | \n | \r\n | \x2028 ) ( \x20 | \xA0 | \x9)*
   ;

<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
	
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : (\#) ([^\#\r\n])* (\#)
   ;

<COLOR_LITERAL>
   : \& H [0-9a-fA-F]+ \&?
   ;


<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)* 
	;

<SBIDENTIFIER>
	: (\[) (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|/|$|\s)* (\]) 
	;
<DEFTYPE> 
	: ([a-zA-Z]) (\-) ([a-zA-Z]); 
	
<HASH_NUMBER>
	: ( \#) (<DECIMAL_INTEGER>)
	;
	
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;

<whitespace> : ( \x20 | \xA0 | \x9) + ; 

<eol>
   : (<whitespace>?) ( \r | \n | \r\n | \x2028 | \ ) (<whitespace>?)
   ;

<comment>
   :  (<whitespace>?)(\' | :?  REM  \ ) ( [^\n\r])* 
   ;

###################################################### 
########## Basic module
###################################################### 

module: <eol>* (header 'header' <eol>*)? (ModuleStatement 'element')?  (<eol>* ModuleStatement 'element' )*  <eol>* {{Module}};

###################################################### 
########## Literals
###################################################### 
literal 
	: 
	  FileDescriptorLiteral
	| IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;

FileDescriptorLiteral 	: <HASH_NUMBER> 'token' 			{{FileDescriptorLiteral}};
IntegerLiteral 			: <INTEGER_LITERAL> 'token' ""&""? 	{{IntegerLiteral}};
ColorLiteral			: <COLOR_LITERAL> 'token' 			{{ColorLiteral}} ; 
DateLiteral				: <DATE_LITERAL> 'token' 			{{DateLiteral}};
FloatLiteral			: <FLOATING_POINT_LITERAL> 'token' 	{{FloatLiteral}};
BooleanLiteral			: <BOOLEAN_LITERAL> 'token' 		{{BooleanLiteral}};
StringLiteral			: <STRING_LITERAL> 'token' 			{{StringLiteral}};
Null					: <NULL_LITERAL> 'token' 			{{Null}};




GuidLiteral: 
		""{""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> +
		""-"" 
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""}"" 
		{{GuidLiteral}};


Identifier : 
	 SimpleIdentifier
	| HashIdentifier
	| SquareBracketIdentifier;

KeywordIdentifier : UsableKeywords 'token'  {{SimpleIdentifier}} | SquareBracketIdentifier;


UsableKeywords  :  
  IdentifierWords  
| ""open"" 
| ""type"" 
| ""select"" 
| ""case"" 
| ""else""   
;

IdentifierWords :  
  <IDENTIFIER>     
| ""text"" 
| ""name"" 
| ""version"" 
| ""database"" 
| ""collection"" 
| ""bold"" 
| ""append"" 
| ""Object""  
| ""len"" 
| ""get"" | ""set"" | ""let"" 
| ""date"" 
| ""input"" 
| ""print"" 
| ""write"" 
| ""Error""
| ""Next""
| ""Output""
| ""Alias""
| ""String"" 
;

HashIdentifier 			: <HASH_IDENTIFIER> 'token' {{HashIdentifier}};
SquareBracketIdentifier : <SBIDENTIFIER> 'token' 	{{SquareBracketIdentifier}};
SimpleIdentifier 		: IdentifierWords 'token'  	{{SimpleIdentifier}};


LabelTag : <IDENTIFIER> 'name' "":""  {{LabelTag}};

###################################################### 
########## Module header and configuration
###################################################### 

header: <whitespace>? ""version"" <whitespace> FloatLiteral  'version'  (""class"")?  {{}};
Option
   :  <whitespace>? ""option"" <whitespace> IntegerLiteral 'value' {{OptionValue}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> ""database"" {{OptionCompareDatabase}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> (""binary""| ""text"" 'compare') {{OptionCompare}}
   |  <whitespace>? ""option"" <whitespace> ""explicit"" {{OptionExplicit}}
   |  <whitespace>? ""option"" <whitespace> ""private"" <whitespace> ""module""{{OptionPrivateModule}}
   | OptionBase
   ;
   
OptionBase : 
	<whitespace>? 
	""option"" <whitespace> 
	""base"" <whitespace> 
	Expression 'value' {{OptionBase}} 
;

SetUpAssignation :  
	(Identifier  'identifier' | MemberAccess 'identifier') <whitespace> ""="" <whitespace> Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" <whitespace> SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* <eol>*""end"" {{Configuration}};

Implements : ""implements"" <whitespace> StateAccessBase 'interface' {{Implements}}; 

DefTypeLabel : 
  ""DefBool"" | ""DefByte"" |""DefCur"" 
| ""DefDate"" | ""DefDec"" | ""DefDbl"" 
| ""DefInt"" | ""DefLng"" | ""DefLnglng"" 
| ""DefLngPtr"" | ""DefObj"" | ""DefSng"" 
| ""DefStr"" | ""DefVar"" 
;

DefType : DefTypeLabel 'deftype' <whitespace> <DEFTYPE> 'pattern' {{DefType}}; 

ModuleStatement :  
  Option  
| Configuration 
| Attribute 
| DeclareExternal 
| VariableDefinition 
| BehaviourDefinition 
| Types 
| Implements 
| DefType
 ;

###################################################### 
########## Body statements
###################################################### 

Statement :  
  StatementAssignment 
| VariableDefinition 
| Attribute 
| OptionBase 
| StatementCalls  
| ControlFlowStatement 
| Types 
| Label 
| Exits 
| Go 
| FileClauses 
| RaiseEvent 
| OtherStatements ;

# A Block is a list of statements. Each entry can be headed with a line number. Lines are splitted by newline 
Block: 
	    <eol>+
		(IntegerLiteral 'lineNumber' <whitespace>)? 
		 Statement 'statement'?
	   (
		 (<eol> | (<whitespace>? "":"" <whitespace>?))+ 
		 (IntegerLiteral 'lineNumber' <whitespace>)? 
		  Statement 'statement' 
	   )*
	   <eol>+ 
	   {{Block}};
	   
# Oneline blocks can have one or more ""lines"" splitted by "":"" 

OneLineBlock : 
	<whitespace> Statement 'statement'? 
	(<whitespace>? "":"" <whitespace>? Statement 'statement')* 
	{{Block}}
;

BaseType : 
  ""boolean"" 
| ""byte"" 
| ""currency"" 
| ""collection"" 
| ""date"" 
| ""decimal"" 
| ""double"" 
| ""integer"" 
| ""long"" 
| ""longlong""
| ""longptr"" 
| ""object"" 
| ""single"" 
| ""string"" 
| ""variant""
{{BaseType}};

SimpleType : 
	Identifier 'typeName'
	{{SimpleType}}
	;


Visibility: 
  ""private"" 
| ""public"" 
| ""friend"" 
| ""global"" ; 

ComplexType: 
	(SimpleType 'base')?  
	(""."" UsableKeywords 'member')+ 
	{{ComplexType}}
;

Type: 
  BaseType 
| SimpleType 
| ComplexType 
;



TypedThing : 
			 (<whitespace> ""as"" <whitespace> Type 'type')?
			 (<whitespace>? ""*"" <whitespace>? Expression 'fixedSize')?  
			 {{TypedThing}}
;
			 
TypedAndInstantiatedThing :	 
			<whitespace> ""as"" <whitespace>
			""new"" <whitespace> 
			Type 'type'
			{{AsTypeAndNew}}
; 

TypeSize : ""("" 
			Expression 'size'? 
			("",""<whitespace>? Expression 'size')* 
			"")"" 
			{{TypeSize}} 
;

AsType : 
  TypedThing 
| TypedAndInstantiatedThing;



###################################################### 
########## assign statements
###################################################### 

StatementAssignment : Assignment | ExplicitAssignement ;

ExplicitLetSet: ""let"" | ""set""; 

Assignment : 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' | "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};
		
ExplicitAssignement : 
		ExplicitLetSet 'kind' <whitespace> 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' |  "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};

###################################################### 
########## other statements
###################################################### 
 
OtherStatements : 
  Rename 
| Beep 
| DoEvents;

Rename : 
	""name"" <whitespace> 
	Expression 'oldName' <whitespace> 
	""as"" <whitespace> 
	Expression 'newName' 
	{{Rename}} ;
	
Beep : ""beep"" ;
DoEvents : ""DoEvents"" {{DoEvents}} ;

###################################################### 
########## Types
###################################################### 

Types : 
  DefineEnum 
| DefineType 
| Event ;

DefineType : 
      (Visibility 'visibility' <whitespace>)? 
	  ""type"" <whitespace> 
	  Identifier 'name' 
	  ( <eol>* TypeEntry 'field' )* 
	  <eol>* 
	  ""end"" <whitespace>  ""type"" 
	  {{DefineType}} ;
	  
TypeEntry :
	  Identifier 'name'
	  AsType 'type' 
	  (<whitespace>?""*""<whitespace>? IntegerLiteral 'size' )? 
	  {{TypeEntry}};
	  
Event  : 
	  (Visibility 'visibility' <whitespace>)?  
	  ""event"" <whitespace> 
	  Identifier 'selector' <whitespace>?
	  ParameterList 'parameters'
	  {{Event}} ;
	  
DefineEnum :  
	  (Visibility 'visibility' <whitespace>)?  
	  ""enum"" <whitespace> 
	  Identifier 'name'  
	  ( <eol>* EnumEntry 'field')* 
	  <eol>*  
	  ""end"" <whitespace> ""enum"" 
	  {{DefineEnum}};
	  
EnumEntry : 
      Identifier 'name'  
	  ( <whitespace> ""="" <whitespace> Expression 'value')? 
	  {{EnumEntry}};

###################################################### 
########## Parameters
###################################################### 

ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:""(""(Parameter 'parameter' ("","" <whitespace> Parameter 'parameter')* )? <whitespace>? "")"" {{ParameterList}};
	
Parameter: 
	(""optional"" <whitespace>)? 
	(ParameterPassingStrategy 'strategy' <whitespace>)? 
	(""paramarray"" <whitespace>)? 
	Identifier 'name' 
	(TypeSize 'size')?
	(AsType 'type')? 
	(<whitespace> ""="" <whitespace> Expression 'default')? 
	{{Parameter}};

###################################################### 
########## External declaration
###################################################### 

DeclareSub: 
			(Visibility 'visibility' <whitespace> )? 
			""declare"" <whitespace> 
			""sub"" <whitespace> 
			Identifier 'selector' <whitespace> 
			""lib"" <whitespace> 
			StringLiteral 'library' <whitespace>?
			(""alias"" <whitespace> StringLiteral 'alias' <whitespace>?)? 
			ParameterList 'parameters' 
			{{ExternalSub}};
			
DeclareFunction: 
		(Visibility 'visibility' <whitespace> )? 
		""declare"" <whitespace> 
		""function"" <whitespace> 
		Identifier 'selector' <whitespace> 
		""lib"" <whitespace> 
		StringLiteral 'library' <whitespace>? 
		(""alias"" <whitespace>  StringLiteral 'alias' <whitespace>? )? 
		ParameterList 'parameters'
		AsType 'type'
		{{ExternalFunction}};
		
		
DeclareExternal : DeclareSub|DeclareFunction; 

###################################################### 
########## Function / Sub Definition 
###################################################### 

Modifier: ""static"" ;

DefineFunction: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""function""  <whitespace>
	Identifier 'selector'<whitespace>?
	ParameterList 'parameters' <whitespace>?
	(AsType 'type' TypeSize 'size'?  )?
	Block 'block' 
	""end""  <whitespace> ""function"" 
   {{FunctionDefinition}};

DefineSub: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""sub""  <whitespace>
	Identifier 'selector'<whitespace>?
	(ParameterList 'parameters')? <whitespace>?
	Block 'block' 
	""end"" <whitespace> ""sub"" 
   {{SubDefinition}};
   

ModulePropertyGet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""get""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	(AsType 'type' TypeSize 'size'?)? 
	Block 'block' 
	""end"" <whitespace> (""property"" | ""function"") 
    {{ModulePropertyGet}}; 
	
	
ModulePropertySet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""set""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	Block 'block'  
	""end"" <whitespace> (""property"" | ""function"")
  {{ModulePropertyGet}}; 
  
ModulePropertyLet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""let""  <whitespace>
	Identifier 'selector' 
	ParameterList 'parameters'
	 Block 'block'  
	 ""end"" <whitespace> (""property"" | ""function"") 
{{ModulePropertyGet}}; 

BehaviourDefinition:  
  DefineFunction 
| DefineSub 
| ModulePropertyGet 
| ModulePropertySet 
| ModulePropertyLet ;

###################################################### 
########## Variable / And Multiple Variables
###################################################### 

ModuleProperty : 
	Visibility 'visibility' <whitespace>
	Variable 'variable' 
	{{ModuleProperty}};
	
ModuleConstant : 
	(Visibility 'visibility' <whitespace>)? 
	""const"" <whitespace> 
	Constant 'constant'
	{{ModuleConstant}};

DefineVariable : 
	""dim"" <whitespace> 
	Variable 'variable' 
	{{DimVariable}};


ReDefineVariable : 
	""redim"" <whitespace> 
	(""preserve"" <whitespace>)? 
	Variable 'variable' 
	{{ReDimVariable}};
	
ReDefineExpression : 
	""redim"" <whitespace>
	(""preserve"" <whitespace>)? 
	Expression 'variable' 
	{{ReDimVariable}};
	
StaticVariable : 
	""static""  <whitespace>  
	Variable 'variable'
	{{StaticVariable}};
	
Variable : 
	(""WithEvents""  <whitespace> )? 
	Identifier 'name'
	(TypeSize 'size')?
	(AsType 'type') ? 
	{{Variable}};
	
Constant :  
	Identifier 'constant'
	(AsType 'type') ? 
	<whitespace> ""=""  <whitespace> 
	Expression 'value' 
	{{Constant}} ;

ModuleProperties : 
	Visibility 'visibility'  <whitespace>
	VariableList 'variables' 
	{{ModuleMultipleProperties}};
	
	
ModuleConstants : 
	(Visibility 'visibility'  <whitespace> )? 
	""const""  <whitespace> 
	ConstantList 'constants' 
	{{ModuleMultipleConstants}};
	
DefineVariables : 
	""dim""  <whitespace>
	VariableList 'variables' 
	{{DimMultipleVariables}};
	
ReDefineVariables : 
	""redim""  <whitespace> 
	(""preserve""  <whitespace>)?  
	VariableList 'variables' 
	{{ReDimMultipleVariables}};
	
StaticVariables : 
	""static"" <whitespace> 
	VariableList 'variables' 
	{{StaticMultipleVariables}};
	
VariableList : Variable 'variable' ( <whitespace>? "",""  <whitespace>?  Variable 'variable' )+ {{VariableList}};
ConstantList : Constant 'constant' ( <whitespace>? "",""  <whitespace>?  Constant 'constant' )+ {{ConstantList}};

VariableDefinition :
  ModuleProperties 
| ModuleProperty 
| ModuleConstant 
| ModuleConstants 
| ConstantList 
| DefineVariable 
| ReDefineVariable 
| ReDefineExpression 
| DefineVariables 
| ReDefineVariables 
| StaticVariable 
| StaticVariables ;

###################################################### 
########## Value Statements
###################################################### 


Expression :   
  ValueClause  
| StateAccess 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval 
| Operation ; 

ParentheseesExpression : 
	""(""  <whitespace>? 
	Expression 'expression'  
	<whitespace>? "")"" 
	{{ParentheseesExpression}};
	
Interval : 
	Expression 'from' <whitespace> 
	""to""  <whitespace> 
	Expression 'to'  
	{{Interval}} ; 


##########
### Ops
##########

Operation : 
  UnaryOperation 
| BinaryOperation ;

####################
### Unary Ops 
####################

UnaryOperation:   
  NegatedOperation
| PositiveOperation 
| NotOperation 
; 

NegatedOperation : 
	""-""
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{NegatedOperation}}
;
	
PositiveOperation : 
	""+"" <whitespace> 
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{PositiveOperation}} 
;

NotOperation : 
	""not"" <whitespace>
	(StateAccessBase 'value' | BooleanLiteral 'value' | ParentheseesExpression 'value' | TypeOf 'value' )
	{{NotOperation}}
;


####################
### Binary Ops 
####################


BinaryOperation : 
  ComparisonOperation  
| ArithmeticOperation 
| BooleanBinaryOperation 
| Equals  
| ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like"" ;

ComparisonOperation : 
		Expression 'left' <whitespace>
		ComparisonOperator <whitespace> 
		Expression 'right' 
		{{ComparisonOperation}};
		
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";

ArithmeticOperation : 
		Expression 'left' <whitespace>
		ArithmeticOperator <whitespace>
		Expression 'right' {{ArithmeticOperation}};


BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";
BooleanBinaryOperation : 
		Expression 'left' <whitespace>
		BooleanOperator   <whitespace>
		Expression 'right' 
		{{ArithmeticOperation}};

Concatenable : 
  Identifier 
| StateAccessBase
| literal 
| ConcatenationOperation;

ConcatenationOperation : 
		Expression 'left' <whitespace>
		""&"" <whitespace>
		Expression 'right' 
		{{ConcatenationOperation}}; 

Equals : 
	(Identifier 'left' | MemberAccess 'left' | Expression 'left') <whitespace>
	""="" 'operator' <whitespace>
	Expression 'right' 
	{{Equals}}; 


####################
### Value Clause 
####################

ValueClause: 
  AddressOfClause 
| NewClause ;

AddressOfClause : 
		""AddressOf"" <whitespace>
		Identifier 'name'  
		{{AddressOfClause}}; 
		
NewClause : 
		""New"" <whitespace>
		Type 'typeName' 
		{{NewClause}};

OpenMode :  
  ""Append"" 
| ""Binary"" 
| ""Input"" 
| ""Output"" 
| ""Random"" ;


OpenAccess : 
  ""Read"" 
| ""Write"" 
| ""Read Write"" ;

Lock :  
  ""Shared"" 
| ""Lock Read"" 
| ""Lock Write"" 
| ""Lock Read Write"";


FileClauses : 
  OpenFileClause 
| PrintFileClause 
| LineInputClause ;

OpenFileClause : 
		""Open"" <whitespace>
		Expression 'filepath' <whitespace>
		""For"" <whitespace>
		OpenMode 'mode' <whitespace>
		(OpenAccess 'access' <whitespace>)? 
		(Lock 'lock' <whitespace>)? 
		""As"" <whitespace>
		Expression 'fileDescriptor' 
		(<whitespace> ""len"" <whitespace> ""="" <whitespace> Expression'length')? 
		{{OpenClause}};
		
		
PrintFileClause : 
		""Print"" <whitespace>
		Identifier 'fileNumber' <whitespace>?
		"","" <whitespace>? 
		(Expression 'value' <whitespace>?)? 
		("";"" <whitespace>? Expression 'value')*  
		{{PrintIntoFileClause}};
		
LineInputClause : 
		""Line"" <whitespace>
		""Input"" <whitespace>
		(Identifier 'fileNumber' | FileDescriptorLiteral  'fileNumber') <whitespace>?  
		"",""  <whitespace>?
		(Expression 'value') 
		{{LineInputClause}};


###################################################### 
########## Control flow statements
###################################################### 

ControlFlowStatement : 
  Exits
| Loops 
| If  
| On 
| Resume 
| To 
| With 
| RaiseError 
| Select ; 

####################
#### Loops
####################


Loops : 
  DoLoop 
| WhileWend 
| ForLoop ;

####################
########## Do
####################

DoLoop : 
  InfinityLoop 
| WhileTrue 
| UntilTrue 
| DoWhileTrue 
| DoUntilTrue; 


InfinityLoop : 
	""do""  
		(Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{InfinityLoop}} ;

WhileTrue :  
	""do"" <whitespace>
	""while"" <whitespace>
	Expression 'condition' 
	( Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{WhileTrue}}; 
	
	
UntilTrue : 
	""do"" <whitespace>
	""until"" <whitespace>
	Expression 'condition'
		Block 'body'
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""loop"" 
   {{UntilTrue}}; 

DoWhileTrue :  
	""do"" 
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)?  
	""loop"" <whitespace> 
	""while"" <whitespace> 
	Expression 'condition' 
    {{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" 
	 Block 'body' 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop"" <whitespace> 
	""until"" <whitespace>
	Expression 'condition'
    {{DoUntilTrue}}; 


####################
########## WhileWend
####################

WhileWend: 
	""while"" <whitespace> 
	Expression 'condition'
	( Block 'body')?   
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""wend"" 
	{{WhileWend}}; 

####################
########## For 
####################

ForLoop : 
  ForEach 
| ForNext 
| ForNextOneLine 
| ForStepNext;

ForEach :  
	""for"" <whitespace> 
	""each"" <whitespace> 
	Identifier 'element' <whitespace> 
	""in"" <whitespace> 
	Expression 'group' <whitespace>?
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForEach}} ;

ForNext :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'   
	( Block 'body')? 
	 (IntegerLiteral 'endLineNumber' <whitespace>) ? 
	 ""next"" 
	 (<whitespace> Identifier 'element')? 
    {{ForNext}} ;

ForNextOneLine :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace> 
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'
		( OneLineBlock 'body')? 
	""next""
   {{ForNext}} ;

ForStepNext:   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace>
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit' <whitespace> 
	""step"" <whitespace> 
	Expression 'step'   
		( Block 'body')?  
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForStepNext}} ;

####################
########## If
####################

If : 
  IfThenElseOneLine 
| IfThenEmpty
| IfThenElse ; 

IfThenEmpty : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then:"") <eol> 
{{IfThenElse}};


IfThenElseOneLine : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then""|""then:"") 
	OneLineBlock 'ifTrue' 
	(<whitespace> (""else""|""else:"") OneLineBlock 'ifFalse' )?
{{IfThenElse}};

IfThenElse : 
	""if"" <whitespace> 
	Expression  'condition' 
	<whitespace> 
	""then""
	(Block 'ifTrue')  
	(ElseIf 'elseif')* 
	(Else 'else')?
    (IntegerLiteral 'endLineNumber'<whitespace>)? 
	""end"" <whitespace> ""if""
	{{IfThenElse}};
	
Else: 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""else"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}};
	
ElseIf: 
    (IntegerLiteral 'endLineNumber' <whitespace>)? 
	""elseif"" <whitespace> 
	Expression  'condition' <whitespace>
	""then"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}}; 



####################
###### Error 
####################

RaiseError : 
  ""Error"" <whitespace> Expression 'errorCode'  
  {{RaiseError}} ;
	
##########################
###### Label / LabelSub
##########################

	To : Label ;
	Label : LabelTag 'label' {{Label}}; 	
	
	
####################
###### Select Case 
####################
CaseCondition : 
  ExpressionCalls
| NegatedOperation 
| Interval
| Identifier 
| MemberAccess 
| literal;

Case : 
	(IntegerLiteral 'lineNumber' <whitespace>)? 
	""case"" <whitespace>
	(CaseCondition 'expression' | ""else"")
	("","" <whitespace> (CaseCondition 'expression'))*
	"":""?
	(Block 'body' | (OneLineBlock 'body' <eol>))? 
	{{Case}};
	
Select : 
	""select"" <whitespace> 
	""case"" <whitespace>
	Expression 'expression' 
	<eol>+ (Case 'case')* 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""end"" <whitespace> ""select"" 
	{{Select}};

####################
###### Resume
####################

Resume: 
  ResumeLabel 
| ResumeNext 
| ResumeEmpty ;
	
ResumeLabel : 
	""resume"" <whitespace> 
	DestinationList 'destination' 
	{{ResumeLabel}} ; 
	
ResumeNext : 
	""resume"" <whitespace> 
	""next"" 
	{{ResumeNext}} ; 
	
ResumeEmpty : ""resume"" {{ResumeEmpty}}; 

####################
###### GoTo / GoSub 
####################

Go : 
  GoToStatement 
| GoSub ;


Destination : 
  Identifier 
| IntegerLiteral 
| NegatedOperation ;

 
DestinationList :  
	Destination 'label' 
	(<whitespace>?"","" <whitespace>?Destination 'label')*
	{{DestinationList}};

GoToStatement : 
	""goto"" <whitespace> 
	DestinationList 'destination'   
	{{GoToStatement}};
	
GoSub :  
	""gosub"" <whitespace> 
	DestinationList 'destination'  
	{{GoSub}} ;

####################
########## On 
####################

On : 
  OnErrorGoTo 
| OnErrorResumeNext 
| OnExpressionGo; 

OnErrorGoTo : 
	""on"" <whitespace>
	""error"" <whitespace>
	GoToStatement 'to' 
	{{OnErrorGoTo}};
	
OnErrorResumeNext : 
	""on""  <whitespace>
	""error"" <whitespace>
	""resume""  <whitespace>
	""next""
	{{OnErrorResumeNext}} ;
	
OnExpressionGo : 
	""on"" <whitespace>
	Expression 'integerExpression' <whitespace>
	Go 'to' 
	{{OnExpressionGo}} ;

####################
########## Error
####################

Error: 
	""error"" <whitespace>
	Expression 'errorCode' 
	{{Error}} ;

####################
########## With
####################

With : 
	""with"" <whitespace>
	Expression 'with' 
	Block 'block' 
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""end"" <whitespace> ""with"" 
	{{With}} ;

####################
########## Exits
####################

Exits : 
  ExitFunction 
| ExitSub 
| ExitProperty 
| ExitDo 
| ExitFor 
| Return; 

ExitFunction : 
	""exit"" <whitespace>
	""function"" 
	{{Exits}} ;
	
ExitSub : 
	""exit"" <whitespace>
	""sub"" 
	{{Exits}} ; 
ExitDo : 
	""exit"" <whitespace>
	""do"" 
	{{Exits}} ; 
	
ExitFor : 
	""exit"" <whitespace>
	""for"" 
	{{Exits}} ;
	
ExitProperty : 
	""exit"" <whitespace> 
	""property"" 
	{{Exits}} ;
	
Return : 
	""return"" 
	{{Return}} ;

########################################
### Calls and accesses 
########################################

StateAccessBase :
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess; 

############################################################
### Normal accesses.  object.value dic!key
############################################################

DictionaryAccess : 
	(StateAccessBase 'receiver')?
	""!"" 
	KeywordIdentifier 'member' 
	{{DictionaryAccess}} ;

MemberAccess : 
	(StateAccessBase 'receiver')?
	"".""  
	KeywordIdentifier 'member' 
	{{MemberAccess}};


StateAccess : 
	DictionaryAccess 
  | MemberAccess;
  
  
############################################################
### ImplicitParenthesesLessCall.   selector arg1, arg2, , , arg
############################################################

ImplicitCallExpression : 
  MemberAccess
| Identifier
;


ImplicitParenthesesLessCall :  
		ImplicitCallExpression 'selector'  <whitespace> 
		ArgumentList 'arguments' 
		{{ImplicitParenthesesLessCall}} 
		
|       ImplicitCallExpression 'selector'
		{{ImplicitParenthesesLessCall}} 
 
;

############################################################
### ImplicitCalls.   selector(arg1, arg2, , , arg). 
############################################################
ProcedureCallOrArrayExpression : 
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess
;

ProcedureCallOrArrayAccess :  
		ProcedureCallOrArrayExpression 'selector'
		""(""<whitespace>?
		  ArgumentList 'arguments'
		 <whitespace>?"")""
		{{ProcedureCallOrArrayAccess}} 

;

############################################################
### Argument and argument list. 
### Expression, expression, assignment 
############################################################

Argument : 
        (ParameterPassingStrategy 'strategy' <whitespace>)?  
		(""paramarray"" <whitespace>)?  
		(Expression 'value' | Assignment 'value') 
		{{Argument}};
		
		
ArgumentList : 
		(<whitespace>? Argument 'argument' ? ("","" | "";"" )  <whitespace>?)* 
		Argument 'argument'? 
		(<whitespace>?("","" | "";"" ) <whitespace>? Argument 'argument' ? )*
		{{ArgumentList}};


ExplicitCallSelectorTypes :
  Identifier 
| MemberAccess  
| ProcedureCallOrArrayAccess;


############################################################
### ExplicitCall.  Call selector(arg1, arg2, , , arg). 
############################################################

ExplicitCall : 
		""Call"" <whitespace>
		 ExplicitCallSelectorTypes 'selector'  
		{{ExplicitCall}} ;
		
RaiseEvent : 
		""RaiseEvent"" <whitespace>
		(Identifier 'selector' | ProcedureCallOrArrayAccess 'selector' )
		{{RaiseEvent}};

TypeOf : 
		""TypeOf"" <whitespace>
		Argument 'argument' <whitespace>
		(""Is"" | ""IsNot"") <whitespace>
		Argument 'type'  
		{{TypeOf}};

StatementCalls :  
  ImplicitParenthesesLessCall 
| ExplicitCall ;

ExpressionCalls : 
  ProcedureCallOrArrayAccess 
| TypeOf ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(177 0 #reduceActionFor_eol__1: 2054145 false ) 
	#(179 0 #reduceActionFor__eol___ModuleStatement__element____1: 2118657 false ) 
	#(194 1 #liftFirstValue: 3467285 false ) 
	#(194 1 #liftFirstValue: 3467272 false ) 
	#(241 1 #reduceActionForDoEvents1: 8673281 false ) 
	#(194 1 #liftFirstValue: 3467282 false ) 
	#(194 1 #liftFirstValue: 3467279 false ) 
	#(194 1 #liftFirstValue: 3467283 false ) 
	#(194 1 #liftFirstValue: 3467273 false ) 
	#(194 1 #liftFirstValue: 3467284 false ) 
	#(194 1 #liftFirstValue: 3467280 false ) 
	#(194 1 #liftFirstValue: 3467286 false ) 
	#(194 1 #liftFirstValue: 3467281 false ) 
	#(240 1 #liftFirstValue: 8656897 false ) 
	#(194 1 #liftFirstValue: 3467271 false ) 
	#(194 1 #liftFirstValue: 3467270 false ) 
	#(194 1 #liftFirstValue: 3467269 false ) 
	#(194 1 #liftFirstValue: 3467278 false ) 
	#(223 1 #liftFirstValue: 7010307 false ) 
	#(194 1 #liftFirstValue: 3467275 false ) 
	#(223 1 #liftFirstValue: 7010308 false ) 
	#(194 1 #liftFirstValue: 3467274 false ) 
	#(194 1 #liftFirstValue: 3467277 false ) 
	#(235 1 #liftFirstValue: 7884801 false ) 
	#(194 1 #liftFirstValue: 3467267 false ) 
	#(223 1 #liftFirstValue: 7010305 false ) 
	#(223 1 #liftFirstValue: 7010306 false ) 
	#(359 1 #reduceActionForResumeEmpty1: 24068097 false ) 
	#(379 1 #reduceActionForReturn1: 25850881 false ) 
	#(194 1 #liftFirstValue: 3467276 false ) 
	#(235 1 #liftFirstValue: 7884802 false ) 
	#(194 1 #liftFirstValue: 3467266 false ) 
	#(194 1 #liftFirstValue: 3467268 false ) 
	#(194 1 #liftFirstValue: 3467265 false ) 
	#(196 1 #reduceActionForSquareBracketIdentifier1: 3811329 false ) 
	#(195 1 #reduceActionForHashIdentifier1: 3743745 false ) 
	#(380 1 #liftFirstValue: 25997315 false ) 
	#(386 1 #liftFirstValue: 27206659 false ) 
	#(384 1 #liftFirstValue: 26731522 false ) 
	#(228 0 #reduceActionForTypedThing1: 7224321 false ) 
	#(197 1 #reduceActionForSimpleIdentifier1: 3892225 false ) 
	#(191 1 #liftFirstValue: 3189762 false ) 
	#(191 1 #liftFirstValue: 3189763 false ) 
	#(191 1 #liftFirstValue: 3189761 false ) 
	#(348 1 #reduceActionForLabel1: 23131137 false ) 
	#(212 1 #liftFirstValue: 5939204 false ) 
	#(212 1 #liftFirstValue: 5939203 false ) 
	#(212 1 #liftFirstValue: 5939201 false ) 
	#(234 1 #liftFirstValue: 7825409 false ) 
	#(234 1 #liftFirstValue: 7825410 false ) 
	#(212 1 #liftFirstValue: 5939213 false ) 
	#(238 1 #liftFirstValue: 8475649 false ) 
	#(238 1 #liftFirstValue: 8475650 false ) 
	#(238 1 #liftFirstValue: 8475651 false ) 
	#(212 1 #liftFirstValue: 5939207 false ) 
	#(242 1 #liftFirstValue: 8845314 false ) 
	#(242 1 #liftFirstValue: 8845315 false ) 
	#(242 1 #liftFirstValue: 8845313 false ) 
	#(293 1 #liftFirstValue: 14974978 false ) 
	#(293 1 #liftFirstValue: 14974979 false ) 
	#(293 1 #liftFirstValue: 14974982 false ) 
	#(293 1 #liftFirstValue: 14974983 false ) 
	#(293 1 #liftFirstValue: 14974984 false ) 
	#(293 1 #liftFirstValue: 14974987 false ) 
	#(293 1 #liftFirstValue: 14974977 false ) 
	#(293 1 #liftFirstValue: 14974980 false ) 
	#(293 1 #liftFirstValue: 14974985 false ) 
	#(293 1 #liftFirstValue: 14974986 false ) 
	#(293 1 #liftFirstValue: 14974988 false ) 
	#(293 1 #liftFirstValue: 14974981 false ) 
	#(212 1 #liftFirstValue: 5939202 false ) 
	#(380 1 #liftFirstValue: 25997314 false ) 
	#(386 1 #liftFirstValue: 27206658 false ) 
	#(312 1 #liftFirstValue: 17686529 false ) 
	#(312 1 #liftFirstValue: 17686530 false ) 
	#(212 1 #liftFirstValue: 5939211 false ) 
	#(318 1 #liftFirstValue: 18113537 false ) 
	#(318 1 #liftFirstValue: 18113538 false ) 
	#(318 1 #liftFirstValue: 18113539 false ) 
	#(212 1 #liftFirstValue: 5939206 false ) 
	#(324 1 #liftFirstValue: 19138562 false ) 
	#(325 1 #liftFirstValue: 19302401 false ) 
	#(326 1 #liftFirstValue: 19406849 false ) 
	#(326 1 #liftFirstValue: 19406850 false ) 
	#(326 1 #liftFirstValue: 19406851 false ) 
	#(326 1 #liftFirstValue: 19406852 false ) 
	#(326 1 #liftFirstValue: 19406853 false ) 
	#(325 1 #liftFirstValue: 19302402 false ) 
	#(325 1 #liftFirstValue: 19302403 false ) 
	#(333 1 #liftFirstValue: 20634625 false ) 
	#(333 1 #liftFirstValue: 20634626 false ) 
	#(333 1 #liftFirstValue: 20634627 false ) 
	#(333 1 #liftFirstValue: 20634628 false ) 
	#(324 1 #liftFirstValue: 19138563 false ) 
	#(338 1 #liftFirstValue: 21988354 false ) 
	#(338 1 #liftFirstValue: 21988353 false ) 
	#(338 1 #liftFirstValue: 21988355 false ) 
	#(324 1 #liftFirstValue: 19138568 false ) 
	#(324 1 #liftFirstValue: 19138566 false ) 
	#(347 1 #liftFirstValue: 23116801 false ) 
	#(212 1 #liftFirstValue: 5939208 false ) 
	#(324 1 #liftFirstValue: 19138569 false ) 
	#(324 1 #liftFirstValue: 19138565 false ) 
	#(356 1 #liftFirstValue: 23845889 false ) 
	#(356 1 #liftFirstValue: 23845890 false ) 
	#(356 1 #liftFirstValue: 23845891 false ) 
	#(212 1 #liftFirstValue: 5939210 false ) 
	#(360 1 #liftFirstValue: 24176641 false ) 
	#(360 1 #liftFirstValue: 24176642 false ) 
	#(324 1 #liftFirstValue: 19138564 false ) 
	#(367 1 #liftFirstValue: 24645633 false ) 
	#(367 1 #liftFirstValue: 24645634 false ) 
	#(367 1 #liftFirstValue: 24645635 false ) 
	#(324 1 #liftFirstValue: 19138567 false ) 
	#(212 1 #liftFirstValue: 5939209 false ) 
	#(324 1 #liftFirstValue: 19138561 false ) 
	#(373 1 #liftFirstValue: 25462785 false ) 
	#(373 1 #liftFirstValue: 25462786 false ) 
	#(373 1 #liftFirstValue: 25462788 false ) 
	#(373 1 #liftFirstValue: 25462789 false ) 
	#(373 1 #liftFirstValue: 25462787 false ) 
	#(373 1 #liftFirstValue: 25462790 false ) 
	#(383 1 #liftFirstValue: 26480641 false ) 
	#(383 1 #liftFirstValue: 26480642 false ) 
	#(384 1 #liftFirstValue: 26731521 false ) 
	#(380 1 #liftFirstValue: 25997313 false ) 
	#(386 1 #liftFirstValue: 27206657 false ) 
	#(385 1 #reduceActionForImplicitParenthesesLessCall2: 26790914 false ) 
	#(398 1 #liftFirstValue: 28738561 false ) 
	#(380 1 #liftFirstValue: 25997316 false ) 
	#(386 1 #liftFirstValue: 27206660 false ) 
	#(398 1 #liftFirstValue: 28738562 false ) 
	#(212 1 #liftFirstValue: 5939212 false ) 
	#(212 1 #liftFirstValue: 5939205 false ) 
	#(209 1 #liftFirstValue: 5356545 false ) 
	#(209 1 #liftFirstValue: 5356546 false ) 
	#(209 1 #liftFirstValue: 5356547 false ) 
	#(209 1 #liftFirstValue: 5356548 false ) 
	#(209 1 #liftFirstValue: 5356550 false ) 
	#(209 1 #liftFirstValue: 5356549 false ) 
	#(209 1 #liftFirstValue: 5356551 false ) 
	#(209 1 #liftFirstValue: 5356552 false ) 
	#(209 1 #liftFirstValue: 5356554 false ) 
	#(209 1 #liftFirstValue: 5356553 false ) 
	#(209 1 #liftFirstValue: 5356555 false ) 
	#(209 1 #liftFirstValue: 5356556 false ) 
	#(209 1 #liftFirstValue: 5356557 false ) 
	#(209 1 #liftFirstValue: 5356558 false ) 
	#(264 1 #liftFirstValue: 11404289 false ) 
	#(211 1 #liftFirstValue: 5629953 false ) 
	#(200 1 #liftFirstValue: 4267021 false ) 
	#(211 1 #liftFirstValue: 5629955 false ) 
	#(211 1 #liftFirstValue: 5629954 false ) 
	#(211 1 #liftFirstValue: 5629960 false ) 
	#(211 1 #liftFirstValue: 5629961 false ) 
	#(211 1 #liftFirstValue: 5629959 false ) 
	#(263 1 #liftFirstValue: 11200513 false ) 
	#(263 1 #liftFirstValue: 11200514 false ) 
	#(211 1 #liftFirstValue: 5629956 false ) 
	#(273 1 #liftFirstValue: 12947457 false ) 
	#(273 1 #liftFirstValue: 12947458 false ) 
	#(273 1 #liftFirstValue: 12947459 false ) 
	#(273 1 #liftFirstValue: 12947460 false ) 
	#(273 1 #liftFirstValue: 12947461 false ) 
	#(211 1 #liftFirstValue: 5629958 false ) 
	#(211 1 #liftFirstValue: 5629957 false ) 
	#(177 2 #reduceActionFor_eol__2: 2054146 false ) 
	#(193 1 #liftFirstValue: 3367938 false ) 
	#(193 1 #liftFirstValue: 3367941 false ) 
	#(193 1 #liftFirstValue: 3367942 false ) 
	#(193 1 #liftFirstValue: 3367940 false ) 
	#(193 1 #liftFirstValue: 3367939 false ) 
	#(381 2 #reduceActionForDictionaryAccess1: 26260481 false ) 
	#(192 1 #reduceActionForSimpleIdentifier1: 3271681 false ) 
	#(193 1 #liftFirstValue: 3367937 false ) 
	#(192 1 #liftFirstValue: 3271682 false ) 
	#(382 2 #reduceActionForMemberAccess1: 26374145 false ) 
	#(327 2 #reduceActionForInfinityLoop1: 19493889 false ) 
	#(182 1 #reduceActionForIntegerLiteral1: 2560001 false ) 
	#(207 1 #reduceActionFor_eol__1: 5199873 false ) 
	#(215 0 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: 6369281 false ) 
	#(198 2 #reduceActionForLabelTag1: 3964929 false ) 
	#(233 1 #liftFirstValue: 7622657 false ) 
	#(233 1 #liftFirstValue: 7622658 false ) 
	#(292 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14895105 false ) 
	#(290 2 #reduceActionForConstantList1: 14859265 false ) 
	#(391 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 27898881 false ) 
	#(176 3 #reduceActionFormodule1: 2045953 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element____2: 2118658 false ) 
	#(313 3 #reduceActionForAddressOfClause1: 17735681 false ) 
	#(394 1 #liftFirstValue: 28085249 false ) 
	#(394 1 #liftFirstValue: 28085250 false ) 
	#(394 1 #liftFirstValue: 28085251 false ) 
	#(395 3 #reduceActionForExplicitCall1: 28361729 false ) 
	#(184 1 #reduceActionForDateLiteral1: 2699265 false ) 
	#(183 1 #reduceActionForColorLiteral1: 2633729 false ) 
	#(185 1 #reduceActionForFloatLiteral1: 2760705 false ) 
	#(186 1 #reduceActionForBooleanLiteral1: 2831361 false ) 
	#(187 1 #reduceActionForStringLiteral1: 2899969 false ) 
	#(188 1 #reduceActionForNull1: 2966529 false ) 
	#(181 1 #reduceActionForFileDescriptorLiteral1: 2481153 false ) 
	#(294 1 #liftFirstValue: 15377413 false ) 
	#(180 1 #liftFirstValue: 2313217 false ) 
	#(180 1 #liftFirstValue: 2313218 false ) 
	#(180 1 #liftFirstValue: 2313219 false ) 
	#(180 1 #liftFirstValue: 2313220 false ) 
	#(180 1 #liftFirstValue: 2313221 false ) 
	#(180 1 #liftFirstValue: 2313222 false ) 
	#(180 1 #liftFirstValue: 2313223 false ) 
	#(180 1 #liftFirstValue: 2313224 false ) 
	#(180 1 #liftFirstValue: 2313225 false ) 
	#(294 1 #liftFirstValue: 15377412 false ) 
	#(346 3 #reduceActionForRaiseError1: 22949889 false ) 
	#(294 1 #liftFirstValue: 15377414 false ) 
	#(294 1 #liftFirstValue: 15377415 false ) 
	#(294 1 #liftFirstValue: 15377416 false ) 
	#(297 1 #liftFirstValue: 15793153 false ) 
	#(298 1 #liftFirstValue: 15905793 false ) 
	#(298 1 #liftFirstValue: 15905794 false ) 
	#(298 1 #liftFirstValue: 15905795 false ) 
	#(297 1 #liftFirstValue: 15793154 false ) 
	#(302 1 #liftFirstValue: 16487425 false ) 
	#(302 1 #liftFirstValue: 16487426 false ) 
	#(302 1 #liftFirstValue: 16487427 false ) 
	#(302 1 #liftFirstValue: 16487429 false ) 
	#(302 1 #liftFirstValue: 16487428 false ) 
	#(294 1 #liftFirstValue: 15377409 false ) 
	#(294 1 #liftFirstValue: 15377410 false ) 
	#(399 1 #liftFirstValue: 28808193 false ) 
	#(399 1 #liftFirstValue: 28808194 false ) 
	#(294 1 #liftFirstValue: 15377411 false ) 
	#(221 1 #liftFirstValue: 6733836 false ) 
	#(221 1 #liftFirstValue: 6733838 false ) 
	#(221 1 #liftFirstValue: 6733825 false ) 
	#(221 1 #liftFirstValue: 6733826 false ) 
	#(221 1 #liftFirstValue: 6733828 false ) 
	#(221 1 #liftFirstValue: 6733827 false ) 
	#(221 1 #liftFirstValue: 6733829 false ) 
	#(221 1 #liftFirstValue: 6733830 false ) 
	#(221 1 #liftFirstValue: 6733831 false ) 
	#(221 1 #liftFirstValue: 6733832 false ) 
	#(221 1 #liftFirstValue: 6733833 false ) 
	#(221 1 #liftFirstValue: 6733834 false ) 
	#(221 1 #liftFirstValue: 6733835 false ) 
	#(221 1 #liftFirstValue: 6733837 false ) 
	#(221 1 #reduceActionForBaseType15: 6733839 false ) 
	#(222 1 #reduceActionForSimpleType1: 6950913 false ) 
	#(227 1 #liftFirstValue: 7170049 false ) 
	#(227 1 #liftFirstValue: 7170050 false ) 
	#(227 1 #liftFirstValue: 7170051 false ) 
	#(226 1 #reduceActionFor_____UsableKeywords__member___1: 7116801 false ) 
	#(224 1 #reduceActionForComplexType1: 7076865 false ) 
	#(314 3 #reduceActionForNewClause1: 17832961 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28468225 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28468226 false ) 
	#(203 3 #reduceActionForAttribute1: 5046273 false ) 
	#(275 3 #reduceActionForModuleConstant1: 13334529 false ) 
	#(283 3 #reduceActionForModuleConstants1: 14255105 false ) 
	#(280 1 #reduceActionForVariable1: 13877249 false ) 
	#(276 3 #reduceActionForDefineVariable1: 13463553 false ) 
	#(284 3 #reduceActionForDefineVariables1: 14404609 false ) 
	#(182 2 #reduceActionForIntegerLiteral2: 2560002 false ) 
	#(207 2 #reduceActionFor_eol__2: 5199874 false ) 
	#(327 3 #reduceActionForInfinityLoop3: 19493891 false ) 
	#(250 0 #reduceActionFor__eol___ModuleStatement__element____1: 9527297 false ) 
	#(377 3 #reduceActionForExitFor1: 25726977 false ) 
	#(376 3 #reduceActionForExitDo1: 25671681 false ) 
	#(374 3 #reduceActionForExitFunction1: 25549825 false ) 
	#(378 3 #reduceActionForExitProperty1: 25783297 false ) 
	#(375 3 #reduceActionForExitSub1: 25616385 false ) 
	#(361 1 #liftFirstValue: 24212482 false ) 
	#(361 1 #liftFirstValue: 24212481 false ) 
	#(361 1 #liftFirstValue: 24212483 false ) 
	#(364 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 24329217 false ) 
	#(366 3 #reduceActionForGoSub1: 24504321 false ) 
	#(365 3 #reduceActionForGoToStatement1: 24407041 false ) 
	#(277 3 #reduceActionForReDefineVariable1: 13546497 false ) 
	#(285 3 #reduceActionForReDefineVariables1: 14502913 false ) 
	#(278 3 #reduceActionForReDefineVariable1: 13665281 false ) 
	#(358 3 #reduceActionForResumeNext1: 23998465 false ) 
	#(357 3 #reduceActionForResumeLabel1: 23903233 false ) 
	#(279 3 #reduceActionForStaticVariable1: 13787137 false ) 
	#(286 3 #reduceActionForStaticVariables1: 14640129 false ) 
	#(245 0 #reduceActionFor__eol___ModuleStatement__element____1: 9007105 false ) 
	#(228 2 #reduceActionForTypedThing2: 7224322 false ) 
	#(274 3 #reduceActionForModuleProperty1: 13231105 false ) 
	#(282 3 #reduceActionForModuleProperties1: 14131201 false ) 
	#(291 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14895105 false ) 
	#(292 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14895106 false ) 
	#(381 3 #reduceActionForDictionaryAccess2: 26260482 false ) 
	#(382 3 #reduceActionForMemberAccess2: 26374146 false ) 
	#(385 3 #reduceActionForImplicitParenthesesLessCall1: 26790913 false ) 
	#(393 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 27995137 false ) 
	#(206 0 #reduceActionFor__eol___ModuleStatement__element____1: 5197825 false ) 
	#(208 3 #reduceActionForImplements1: 5269505 false ) 
	#(200 3 #reduceActionForOption9: 4267017 false ) 
	#(200 3 #reduceActionForOption1: 4267009 false ) 
	#(269 0 #nil 11933697 false ) 
	#(210 3 #reduceActionForDefType1: 5547009 false ) 
	#(199 3 #reduceActionForheader1: 4176897 false ) 
	#(178 2 #reduceActionFor__eol___ModuleStatement__element___1: 2118657 false ) 
	#(176 4 #reduceActionFormodule2: 2045954 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 15986690 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 15986691 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 15986689 false ) 
	#(190 1 #reduceActionFor_HEX_INTEGER___1: 3041281 false ) 
	#(225 2 #reduceActionFor_____UsableKeywords__member__1: 7116801 false ) 
	#(224 2 #reduceActionForComplexType2: 7076866 false ) 
	#(226 2 #reduceActionFor_____UsableKeywords__member___2: 7116802 false ) 
	#(322 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 18692097 false ) 
	#(232 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 7554049 false ) 
	#(280 2 #reduceActionForVariable3: 13877251 false ) 
	#(280 2 #reduceActionForVariable2: 13877250 false ) 
	#(289 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14780417 false ) 
	#(287 2 #reduceActionForVariableList1: 14744577 false ) 
	#(327 4 #reduceActionForInfinityLoop2: 19493890 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____2: 6374402 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____1: 6374401 false ) 
	#(213 3 #reduceActionForBlock1: 6269953 false ) 
	#(215 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: 6369282 false ) 
	#(217 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 6374401 false ) 
	#(247 4 #reduceActionForEvent1: 9242625 false ) 
	#(362 2 #reduceActionForDestinationList1: 24285185 false ) 
	#(332 4 #reduceActionForWhileWend1: 20414465 false ) 
	#(228 3 #reduceActionForTypedThing3: 7224323 false ) 
	#(228 3 #reduceActionForTypedThing4: 7224324 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14895106 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14895107 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___1: 27898881 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___3: 27898883 false ) 
	#(252 1 #reduceActionForParameterPassingStrategy2: 9880578 false ) 
	#(252 1 #liftFirstValue: 9880577 false ) 
	#(388 1 #reduceActionForArgument2: 27702274 false ) 
	#(388 1 #reduceActionForArgument2: 27702273 false ) 
	#(391 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace____2: 27898882 false ) 
	#(389 2 #reduceActionForArgumentList1: 27880449 false ) 
	#(387 4 #reduceActionForProcedureCallOrArrayAccess1: 27316225 false ) 
	#(267 0 #reduceActionFor_AsType__type__TypeSize__size______1: 11633665 false ) 
	#(269 1 #liftFirstValue: 11933698 false ) 
	#(200 4 #reduceActionForOption10: 4267018 false ) 
	#(200 4 #reduceActionForOption2: 4267010 false ) 
	#(199 4 #reduceActionForheader2: 4176898 false ) 
	#(199 4 #reduceActionForheader3: 4176899 false ) 
	#(176 5 #reduceActionFormodule3: 2045955 false ) 
	#(295 3 #reduceActionForParentheseesExpression1: 15526913 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16115714 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16115715 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16115713 false ) 
	#(301 3 #reduceActionForNotOperation2: 16261122 false ) 
	#(301 3 #reduceActionForNotOperation2: 16261123 false ) 
	#(301 3 #reduceActionForNotOperation2: 16261121 false ) 
	#(301 3 #reduceActionForNotOperation2: 16261124 false ) 
	#(190 2 #reduceActionFor_eol__2: 3041282 false ) 
	#(305 1 #reduceActionForArithmeticOperator1: 16842753 false ) 
	#(305 1 #reduceActionForArithmeticOperator2: 16842754 false ) 
	#(305 1 #reduceActionForArithmeticOperator3: 16842755 false ) 
	#(305 1 #reduceActionForArithmeticOperator4: 16842756 false ) 
	#(303 1 #reduceActionForArithmeticOperator2: 16621570 false ) 
	#(303 1 #reduceActionForArithmeticOperator4: 16621572 false ) 
	#(303 1 #reduceActionForArithmeticOperator3: 16621571 false ) 
	#(303 1 #reduceActionForArithmeticOperator1: 16621569 false ) 
	#(303 1 #reduceActionForComparisonOperator5: 16621573 false ) 
	#(303 1 #reduceActionForComparisonOperator6: 16621574 false ) 
	#(303 1 #reduceActionForComparisonOperator7: 16621575 false ) 
	#(305 1 #reduceActionForComparisonOperator7: 16842759 false ) 
	#(305 1 #reduceActionForComparisonOperator6: 16842758 false ) 
	#(305 1 #reduceActionForComparisonOperator5: 16842757 false ) 
	#(307 1 #reduceActionForBooleanOperator1: 17050625 false ) 
	#(307 1 #reduceActionForBooleanOperator4: 17050628 false ) 
	#(307 1 #reduceActionForBooleanOperator2: 17050626 false ) 
	#(307 1 #reduceActionForBooleanOperator3: 17050627 false ) 
	#(320 5 #reduceActionForPrintFileClause1: 18544641 false ) 
	#(280 3 #reduceActionForVariable5: 13877253 false ) 
	#(280 3 #reduceActionForVariable4: 13877252 false ) 
	#(288 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14780417 false ) 
	#(289 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14780418 false ) 
	#(213 4 #reduceActionForBlock2: 6269954 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____3: 6374403 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____4: 6374404 false ) 
	#(214 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: 6369281 false ) 
	#(217 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6374402 false ) 
	#(327 5 #reduceActionForInfinityLoop4: 19493892 false ) 
	#(250 2 #reduceActionFor__eol___ModuleStatement__element____2: 9527298 false ) 
	#(253 2 #reduceActionForParameterList1: 9958401 false ) 
	#(258 0 #nil 10256385 false ) 
	#(255 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 9999361 false ) 
	#(247 5 #reduceActionForEvent2: 9242626 false ) 
	#(364 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 24329218 false ) 
	#(368 5 #reduceActionForOnErrorGoTo1: 24709121 false ) 
	#(370 5 #reduceActionForOnExpressionGo1: 24933377 false ) 
	#(201 5 #reduceActionForOptionBase1: 4774913 false ) 
	#(277 5 #reduceActionForReDefineVariable2: 13546498 false ) 
	#(285 5 #reduceActionForReDefineVariables2: 14502914 false ) 
	#(278 5 #reduceActionForReDefineVariable2: 13665282 false ) 
	#(245 2 #reduceActionFor__eol___ModuleStatement__element____2: 9007106 false ) 
	#(332 5 #reduceActionForWhileWend3: 20414467 false ) 
	#(228 4 #reduceActionForTypedThing5: 7224325 false ) 
	#(236 5 #reduceActionForAssignment2: 7918594 false ) 
	#(281 5 #reduceActionForConstant1: 14001153 false ) 
	#(236 5 #reduceActionForAssignment2: 7918593 false ) 
	#(228 4 #reduceActionForTypedThing6: 7224326 false ) 
	#(275 5 #reduceActionForModuleConstant2: 13334530 false ) 
	#(283 5 #reduceActionForModuleConstants2: 14255106 false ) 
	#(291 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14895108 false ) 
	#(236 5 #reduceActionForAssignment2: 7918596 false ) 
	#(236 5 #reduceActionForAssignment2: 7918595 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___2: 27898882 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___4: 27898884 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___9: 27898889 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___11: 27898891 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___5: 27898885 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___7: 27898887 false ) 
	#(389 3 #reduceActionForArgumentList2: 27880450 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____1: 27995137 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____5: 27995141 false ) 
	#(393 2 #reduceActionFor__whitespace________________whitespace___Argument__argument______2: 27995138 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess3: 27316227 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess2: 27316226 false ) 
	#(206 2 #reduceActionFor___eol___SetUpAssignation__setting___2: 5197826 false ) 
	#(266 1 #reduceActionFor_AsType__type__TypeSize__size_____1: 11633665 false ) 
	#(267 1 #reduceActionFor_AsType__type__TypeSize__size______2: 11633666 false ) 
	#(200 5 #reduceActionForOption5: 4267013 false ) 
	#(200 5 #reduceActionForOption3: 4267011 false ) 
	#(200 5 #reduceActionForOption6: 4267014 false ) 
	#(200 5 #reduceActionForOption11: 4267019 false ) 
	#(199 5 #reduceActionForheader4: 4176900 false ) 
	#(176 6 #reduceActionFormodule4: 2045956 false ) 
	#(295 4 #reduceActionForParentheseesExpression3: 15526915 false ) 
	#(295 4 #reduceActionForParentheseesExpression2: 15526914 false ) 
	#(320 6 #reduceActionForPrintFileClause4: 18544644 false ) 
	#(320 6 #reduceActionForPrintFileClause2: 18544642 false ) 
	#(322 2 #reduceActionFor______whitespace___Expression__value___2: 18692098 false ) 
	#(320 6 #reduceActionForPrintFileClause7: 18544647 false ) 
	#(280 4 #reduceActionForVariable7: 13877255 false ) 
	#(280 4 #reduceActionForVariable6: 13877254 false ) 
	#(230 3 #reduceActionForTypeSize1: 7511041 false ) 
	#(232 2 #reduceActionFor______whitespace___Expression__value___2: 7554050 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14780418 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14780419 false ) 
	#(330 6 #reduceActionForDoWhileTrue1: 19977217 false ) 
	#(328 6 #reduceActionForWhileTrue1: 19619841 false ) 
	#(213 5 #reduceActionForBlock3: 6269955 false ) 
	#(216 3 #reduceActionFor__eol______whitespace________whitespace____5: 6374405 false ) 
	#(251 1 #reduceActionForEnumEntry1: 9624577 false ) 
	#(249 2 #reduceActionFor__eol___ModuleStatement__element___1: 9527297 false ) 
	#(253 3 #reduceActionForParameterList2: 9958402 false ) 
	#(257 1 #liftFirstValue: 10256385 false ) 
	#(258 1 #liftFirstValue: 10256386 false ) 
	#(260 0 #reduceActionFor__whitespace_______whitespace__Expression__default___1: 10275841 false ) 
	#(363 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 24329217 false ) 
	#(220 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 6660097 false ) 
	#(343 0 #reduceActionFor_eol__1: 22467585 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine1: 22159361 false ) 
	#(339 6 #reduceActionForIfThenEmpty1: 22047745 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine4: 22159364 false ) 
	#(355 0 #reduceActionFor_eol__1: 23675905 false ) 
	#(244 2 #reduceActionFor__eol___ModuleStatement__element___1: 9007105 false ) 
	#(332 6 #reduceActionForWhileWend2: 20414466 false ) 
	#(201 6 #reduceActionForOptionBase2: 4774914 false ) 
	#(281 6 #reduceActionForConstant2: 14001154 false ) 
	#(247 6 #reduceActionForEvent3: 9242627 false ) 
	#(388 3 #reduceActionForArgument4: 27702276 false ) 
	#(388 3 #reduceActionForArgument4: 27702275 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___10: 27898890 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___12: 27898892 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___13: 27898893 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___15: 27898895 false ) 
	#(388 3 #reduceActionForArgument6: 27702278 false ) 
	#(388 3 #reduceActionForArgument6: 27702277 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___6: 27898886 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___8: 27898888 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____3: 27995139 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____2: 27995138 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____7: 27995143 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____6: 27995142 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____9: 27995145 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____13: 27995149 false ) 
	#(387 6 #reduceActionForProcedureCallOrArrayAccess4: 27316228 false ) 
	#(204 6 #reduceActionForConfiguration1: 5136385 false ) 
	#(205 2 #reduceActionFor__eol___ModuleStatement__element___1: 5197825 false ) 
	#(266 2 #reduceActionFor_____UsableKeywords__member__1: 11633666 false ) 
	#(200 6 #reduceActionForOption7: 4267015 false ) 
	#(200 6 #reduceActionForOption4: 4267012 false ) 
	#(200 6 #reduceActionForOption8: 4267016 false ) 
	#(200 6 #reduceActionForOption12: 4267020 false ) 
	#(295 5 #reduceActionForParentheseesExpression4: 15526916 false ) 
	#(311 5 #reduceActionForEquals1: 17468417 false ) 
	#(310 5 #reduceActionForConcatenationOperation1: 17333249 false ) 
	#(311 5 #reduceActionForEquals1: 17468419 false ) 
	#(296 5 #reduceActionForInterval1: 15654913 false ) 
	#(304 5 #reduceActionForComparisonOperation1: 16696321 false ) 
	#(306 5 #reduceActionForArithmeticOperation1: 16909313 false ) 
	#(308 5 #reduceActionForBooleanBinaryOperation1: 17099777 false ) 
	#(311 5 #reduceActionForEquals1: 17468418 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18765829 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18765825 false ) 
	#(315 1 #liftFirstValue: 17905665 false ) 
	#(315 1 #liftFirstValue: 17905666 false ) 
	#(315 1 #liftFirstValue: 17905667 false ) 
	#(315 1 #liftFirstValue: 17905668 false ) 
	#(315 1 #liftFirstValue: 17905669 false ) 
	#(320 7 #reduceActionForPrintFileClause5: 18544645 false ) 
	#(320 7 #reduceActionForPrintFileClause3: 18544643 false ) 
	#(321 2 #reduceActionFor______whitespace___Expression__value__1: 18692097 false ) 
	#(320 7 #reduceActionForPrintFileClause10: 18544650 false ) 
	#(320 7 #reduceActionForPrintFileClause8: 18544648 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4892673 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4892674 false ) 
	#(280 5 #reduceActionForVariable8: 13877256 false ) 
	#(231 2 #reduceActionFor______whitespace___Expression__value__1: 7554049 false ) 
	#(230 4 #reduceActionForTypeSize2: 7511042 false ) 
	#(288 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14780420 false ) 
	#(329 7 #reduceActionForUntilTrue1: 19803137 false ) 
	#(328 7 #reduceActionForWhileTrue3: 19619843 false ) 
	#(213 6 #reduceActionForBlock4: 6269956 false ) 
	#(214 4 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: 6369282 false ) 
	#(331 7 #reduceActionForDoUntilTrue1: 20165633 false ) 
	#(330 7 #reduceActionForDoWhileTrue3: 19977219 false ) 
	#(260 1 #reduceActionFor_AsType__type__TypeSize__size______2: 10275842 false ) 
	#(256 3 #reduceActionForParameter1: 10085377 false ) 
	#(253 4 #reduceActionForParameterList3: 9958403 false ) 
	#(255 2 #reduceActionFor______whitespace___Expression__value___2: 9999362 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 24329218 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 24329219 false ) 
	#(218 2 #reduceActionForOneLineBlock1: 6603777 false ) 
	#(239 7 #reduceActionForRename1: 8526849 false ) 
	#(369 7 #reduceActionForOnErrorResumeNext1: 24808449 false ) 
	#(246 2 #reduceActionForTypeEntry1: 9106433 false ) 
	#(332 7 #reduceActionForWhileWend4: 20414468 false ) 
	#(372 7 #reduceActionForWith1: 25243649 false ) 
	#(229 6 #reduceActionForTypedAndInstantiatedThing1: 7382017 false ) 
	#(228 6 #reduceActionForTypedThing7: 7224327 false ) 
	#(247 7 #reduceActionForEvent4: 9242628 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8100866 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8100865 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8100868 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8100867 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___14: 27898894 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___16: 27898896 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____4: 27995140 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____8: 27995144 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____11: 27995147 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____10: 27995146 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____15: 27995151 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____14: 27995150 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18765830 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18765831 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18765826 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18765827 false ) 
	#(320 8 #reduceActionForPrintFileClause6: 18544646 false ) 
	#(321 3 #reduceActionFor______whitespace___Expression__value__2: 18692098 false ) 
	#(320 8 #reduceActionForPrintFileClause11: 18544651 false ) 
	#(320 8 #reduceActionForPrintFileClause9: 18544649 false ) 
	#(231 3 #reduceActionFor______whitespace___Expression__value__2: 7554050 false ) 
	#(328 8 #reduceActionForWhileTrue2: 19619842 false ) 
	#(330 8 #reduceActionForDoWhileTrue2: 19977218 false ) 
	#(248 8 #reduceActionForDefineEnum1: 9414657 false ) 
	#(256 4 #reduceActionForParameter2: 10085378 false ) 
	#(253 5 #reduceActionForParameterList4: 9958404 false ) 
	#(363 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 24329220 false ) 
	#(218 3 #reduceActionForOneLineBlock2: 6603778 false ) 
	#(220 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6660098 false ) 
	#(344 1 #reduceActionForElse1: 22601729 false ) 
	#(343 2 #reduceActionFor_eol__2: 22467586 false ) 
	#(342 1 #liftFirstValue: 22467585 false ) 
	#(354 1 #liftFirstValue: 23675905 false ) 
	#(355 2 #reduceActionFor_eol__2: 23675906 false ) 
	#(243 8 #reduceActionForDefineType1: 8894465 false ) 
	#(228 7 #reduceActionForTypedThing8: 7224328 false ) 
	#(228 7 #reduceActionForTypedThing9: 7224329 false ) 
	#(388 5 #reduceActionForArgument8: 27702280 false ) 
	#(388 5 #reduceActionForArgument8: 27702279 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____12: 27995148 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____16: 27995152 false ) 
	#(268 8 #reduceActionForDefineSub1: 11749377 false ) 
	#(397 7 #reduceActionForTypeOf1: 28599297 false ) 
	#(397 7 #reduceActionForTypeOf2: 28599298 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18765832 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18765828 false ) 
	#(317 1 #liftFirstValue: 18036740 false ) 
	#(317 1 #liftFirstValue: 18036738 false ) 
	#(317 1 #liftFirstValue: 18036739 false ) 
	#(316 1 #liftFirstValue: 17982467 false ) 
	#(316 1 #liftFirstValue: 17982465 false ) 
	#(317 1 #liftFirstValue: 18036737 false ) 
	#(316 1 #liftFirstValue: 17982466 false ) 
	#(320 9 #reduceActionForPrintFileClause12: 18544652 false ) 
	#(329 9 #reduceActionForUntilTrue2: 19803138 false ) 
	#(328 9 #reduceActionForWhileTrue4: 19619844 false ) 
	#(331 9 #reduceActionForDoUntilTrue2: 20165634 false ) 
	#(330 9 #reduceActionForDoWhileTrue4: 19977220 false ) 
	#(256 5 #reduceActionForParameter9: 10085385 false ) 
	#(256 5 #reduceActionForParameter3: 10085379 false ) 
	#(256 5 #reduceActionForParameter5: 10085381 false ) 
	#(254 3 #reduceActionFor______whitespace__Parameter__parameter__1: 9999361 false ) 
	#(219 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 6660097 false ) 
	#(344 2 #reduceActionForElse2: 22601730 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine2: 22159362 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine3: 22159363 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine5: 22159365 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine6: 22159366 false ) 
	#(246 4 #reduceActionForTypeEntry2: 9106434 false ) 
	#(372 9 #reduceActionForWith2: 25243650 false ) 
	#(228 8 #reduceActionForTypedThing10: 7224330 false ) 
	#(265 9 #reduceActionForDefineFunction1: 11426817 false ) 
	#(268 9 #reduceActionForDefineSub3: 11749379 false ) 
	#(268 9 #reduceActionForDefineSub2: 11749378 false ) 
	#(334 10 #reduceActionForForEach1: 20703233 false ) 
	#(251 5 #reduceActionForEnumEntry2: 9624578 false ) 
	#(256 6 #reduceActionForParameter10: 10085386 false ) 
	#(256 6 #reduceActionForParameter4: 10085380 false ) 
	#(259 4 #reduceActionFor__whitespace_______whitespace__Expression__default__1: 10275841 false ) 
	#(256 6 #reduceActionForParameter6: 10085382 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 6660098 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 6660099 false ) 
	#(341 10 #reduceActionForIfThenElse1: 22361089 false ) 
	#(344 3 #reduceActionForElse3: 22601731 false ) 
	#(352 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 23465985 false ) 
	#(349 1 #liftFirstValue: 23237638 false ) 
	#(349 1 #liftFirstValue: 23237636 false ) 
	#(349 1 #liftFirstValue: 23237635 false ) 
	#(349 1 #liftFirstValue: 23237634 false ) 
	#(349 1 #liftFirstValue: 23237637 false ) 
	#(349 1 #liftFirstValue: 23237633 false ) 
	#(353 10 #reduceActionForSelect1: 23584769 false ) 
	#(246 5 #reduceActionForTypeEntry3: 9106435 false ) 
	#(246 5 #reduceActionForTypeEntry4: 9106436 false ) 
	#(248 10 #reduceActionForDefineEnum2: 9414658 false ) 
	#(243 10 #reduceActionForDefineType2: 8894466 false ) 
	#(261 10 #reduceActionForDeclareSub1: 10498049 false ) 
	#(265 10 #reduceActionForDefineFunction3: 11426819 false ) 
	#(265 10 #reduceActionForDefineFunction2: 11426818 false ) 
	#(270 10 #reduceActionForModulePropertyGet2: 12019714 false ) 
	#(270 10 #reduceActionForModulePropertyGet1: 12019713 false ) 
	#(272 10 #reduceActionForModulePropertyLet2: 12651522 false ) 
	#(272 10 #reduceActionForModulePropertyLet1: 12651521 false ) 
	#(271 10 #reduceActionForModulePropertySet2: 12355586 false ) 
	#(271 10 #reduceActionForModulePropertySet1: 12355585 false ) 
	#(268 10 #reduceActionForDefineSub4: 11749380 false ) 
	#(268 10 #reduceActionForDefineSub9: 11749385 false ) 
	#(268 10 #reduceActionForDefineSub5: 11749381 false ) 
	#(334 11 #reduceActionForForEach9: 20703241 false ) 
	#(334 11 #reduceActionForForEach5: 20703237 false ) 
	#(319 11 #reduceActionForOpenFileClause1: 18188289 false ) 
	#(256 7 #reduceActionForParameter11: 10085387 false ) 
	#(256 7 #reduceActionForParameter13: 10085389 false ) 
	#(256 7 #reduceActionForParameter7: 10085383 false ) 
	#(219 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 6660100 false ) 
	#(344 4 #reduceActionForElse4: 22601732 false ) 
	#(341 11 #reduceActionForIfThenElse3: 22361091 false ) 
	#(350 4 #reduceActionForCase7: 23348231 false ) 
	#(350 4 #reduceActionForCase1: 23348225 false ) 
	#(246 6 #reduceActionForTypeEntry5: 9106437 false ) 
	#(262 11 #reduceActionForDeclareFunction1: 10835969 false ) 
	#(261 11 #reduceActionForDeclareSub4: 10498052 false ) 
	#(265 11 #reduceActionForDefineFunction4: 11426820 false ) 
	#(270 11 #reduceActionForModulePropertyGet4: 12019716 false ) 
	#(270 11 #reduceActionForModulePropertyGet3: 12019715 false ) 
	#(265 11 #reduceActionForDefineFunction9: 11426825 false ) 
	#(268 11 #reduceActionForDefineSub11: 11749387 false ) 
	#(268 11 #reduceActionForDefineSub10: 11749386 false ) 
	#(265 11 #reduceActionForDefineFunction5: 11426821 false ) 
	#(268 11 #reduceActionForDefineSub7: 11749383 false ) 
	#(268 11 #reduceActionForDefineSub6: 11749382 false ) 
	#(334 12 #reduceActionForForEach2: 20703234 false ) 
	#(334 12 #reduceActionForForEach13: 20703245 false ) 
	#(334 12 #reduceActionForForEach3: 20703235 false ) 
	#(336 12 #reduceActionForForNextOneLine1: 21310465 false ) 
	#(335 12 #reduceActionForForNextOneLine1: 20989953 false ) 
	#(256 8 #reduceActionForParameter12: 10085388 false ) 
	#(256 8 #reduceActionForParameter14: 10085390 false ) 
	#(256 8 #reduceActionForParameter8: 10085384 false ) 
	#(345 5 #reduceActionForElseIf1: 22711297 false ) 
	#(341 12 #reduceActionForIfThenElse2: 22361090 false ) 
	#(350 5 #reduceActionForCase10: 23348234 false ) 
	#(350 5 #reduceActionForCase8: 23348232 false ) 
	#(352 2 #reduceActionFor______whitespace___Expression__value___2: 23465986 false ) 
	#(350 5 #reduceActionForCase4: 23348228 false ) 
	#(350 5 #reduceActionForCase2: 23348226 false ) 
	#(353 12 #reduceActionForSelect2: 23584770 false ) 
	#(262 12 #reduceActionForDeclareFunction4: 10835972 false ) 
	#(270 12 #reduceActionForModulePropertyGet6: 12019718 false ) 
	#(270 12 #reduceActionForModulePropertyGet5: 12019717 false ) 
	#(261 12 #reduceActionForDeclareSub7: 10498055 false ) 
	#(265 12 #reduceActionForDefineFunction11: 11426827 false ) 
	#(265 12 #reduceActionForDefineFunction10: 11426826 false ) 
	#(270 12 #reduceActionForModulePropertyGet14: 12019726 false ) 
	#(270 12 #reduceActionForModulePropertyGet13: 12019725 false ) 
	#(272 12 #reduceActionForModulePropertyLet6: 12651526 false ) 
	#(272 12 #reduceActionForModulePropertyLet5: 12651525 false ) 
	#(271 12 #reduceActionForModulePropertySet6: 12355590 false ) 
	#(271 12 #reduceActionForModulePropertySet5: 12355589 false ) 
	#(268 12 #reduceActionForDefineSub12: 11749388 false ) 
	#(268 12 #reduceActionForDefineSub13: 11749389 false ) 
	#(265 12 #reduceActionForDefineFunction7: 11426823 false ) 
	#(265 12 #reduceActionForDefineFunction6: 11426822 false ) 
	#(270 12 #reduceActionForModulePropertyGet8: 12019720 false ) 
	#(270 12 #reduceActionForModulePropertyGet7: 12019719 false ) 
	#(272 12 #reduceActionForModulePropertyLet4: 12651524 false ) 
	#(272 12 #reduceActionForModulePropertyLet3: 12651523 false ) 
	#(271 12 #reduceActionForModulePropertySet4: 12355588 false ) 
	#(271 12 #reduceActionForModulePropertySet3: 12355587 false ) 
	#(268 12 #reduceActionForDefineSub8: 11749384 false ) 
	#(189 11 #reduceActionForGuidLiteral1: 3018753 false ) 
	#(334 13 #reduceActionForForEach10: 20703242 false ) 
	#(334 13 #reduceActionForForEach11: 20703243 false ) 
	#(334 13 #reduceActionForForEach6: 20703238 false ) 
	#(334 13 #reduceActionForForEach7: 20703239 false ) 
	#(335 13 #reduceActionForForNext5: 20989957 false ) 
	#(336 13 #reduceActionForForNext5: 21310466 false ) 
	#(319 13 #reduceActionForOpenFileClause5: 18188293 false ) 
	#(319 13 #reduceActionForOpenFileClause3: 18188291 false ) 
	#(256 9 #reduceActionForParameter15: 10085391 false ) 
	#(345 6 #reduceActionForElseIf2: 22711298 false ) 
	#(341 13 #reduceActionForIfThenElse4: 22361092 false ) 
	#(350 6 #reduceActionForCase11: 23348235 false ) 
	#(350 6 #reduceActionForCase9: 23348233 false ) 
	#(350 6 #reduceActionForCase5: 23348229 false ) 
	#(350 6 #reduceActionForCase3: 23348227 false ) 
	#(350 6 #reduceActionForCase19: 23348243 false ) 
	#(350 6 #reduceActionForCase13: 23348237 false ) 
	#(261 13 #reduceActionForDeclareSub2: 10498050 false ) 
	#(262 13 #reduceActionForDeclareFunction7: 10835975 false ) 
	#(261 13 #reduceActionForDeclareSub10: 10498058 false ) 
	#(265 13 #reduceActionForDefineFunction12: 11426828 false ) 
	#(270 13 #reduceActionForModulePropertyGet16: 12019728 false ) 
	#(270 13 #reduceActionForModulePropertyGet15: 12019727 false ) 
	#(265 13 #reduceActionForDefineFunction13: 11426829 false ) 
	#(268 13 #reduceActionForDefineSub15: 11749391 false ) 
	#(268 13 #reduceActionForDefineSub14: 11749390 false ) 
	#(265 13 #reduceActionForDefineFunction8: 11426824 false ) 
	#(270 13 #reduceActionForModulePropertyGet10: 12019722 false ) 
	#(270 13 #reduceActionForModulePropertyGet9: 12019721 false ) 
	#(334 14 #reduceActionForForEach14: 20703246 false ) 
	#(334 14 #reduceActionForForEach15: 20703247 false ) 
	#(334 14 #reduceActionForForEach4: 20703236 false ) 
	#(335 14 #reduceActionForForNext2: 20989954 false ) 
	#(335 14 #reduceActionForForNext3: 20989955 false ) 
	#(256 10 #reduceActionForParameter16: 10085392 false ) 
	#(345 7 #reduceActionForElseIf3: 22711299 false ) 
	#(351 3 #reduceActionFor______whitespace__Parameter__parameter__1: 23465985 false ) 
	#(350 7 #reduceActionForCase12: 23348236 false ) 
	#(350 7 #reduceActionForCase6: 23348230 false ) 
	#(350 7 #reduceActionForCase22: 23348246 false ) 
	#(350 7 #reduceActionForCase20: 23348244 false ) 
	#(350 7 #reduceActionForCase16: 23348240 false ) 
	#(350 7 #reduceActionForCase14: 23348238 false ) 
	#(262 14 #reduceActionForDeclareFunction2: 10835970 false ) 
	#(261 14 #reduceActionForDeclareSub3: 10498051 false ) 
	#(261 14 #reduceActionForDeclareSub5: 10498053 false ) 
	#(262 14 #reduceActionForDeclareFunction10: 10835978 false ) 
	#(270 14 #reduceActionForModulePropertyGet18: 12019730 false ) 
	#(270 14 #reduceActionForModulePropertyGet17: 12019729 false ) 
	#(265 14 #reduceActionForDefineFunction15: 11426831 false ) 
	#(265 14 #reduceActionForDefineFunction14: 11426830 false ) 
	#(270 14 #reduceActionForModulePropertyGet20: 12019732 false ) 
	#(270 14 #reduceActionForModulePropertyGet19: 12019731 false ) 
	#(272 14 #reduceActionForModulePropertyLet8: 12651528 false ) 
	#(272 14 #reduceActionForModulePropertyLet7: 12651527 false ) 
	#(271 14 #reduceActionForModulePropertySet8: 12355592 false ) 
	#(271 14 #reduceActionForModulePropertySet7: 12355591 false ) 
	#(268 14 #reduceActionForDefineSub16: 11749392 false ) 
	#(270 14 #reduceActionForModulePropertyGet12: 12019724 false ) 
	#(270 14 #reduceActionForModulePropertyGet11: 12019723 false ) 
	#(334 15 #reduceActionForForEach12: 20703244 false ) 
	#(334 15 #reduceActionForForEach8: 20703240 false ) 
	#(335 15 #reduceActionForForNext6: 20989958 false ) 
	#(335 15 #reduceActionForForNext7: 20989959 false ) 
	#(319 15 #reduceActionForOpenFileClause7: 18188295 false ) 
	#(345 8 #reduceActionForElseIf4: 22711300 false ) 
	#(350 8 #reduceActionForCase23: 23348247 false ) 
	#(350 8 #reduceActionForCase21: 23348245 false ) 
	#(350 8 #reduceActionForCase17: 23348241 false ) 
	#(350 8 #reduceActionForCase15: 23348239 false ) 
	#(262 15 #reduceActionForDeclareFunction3: 10835971 false ) 
	#(262 15 #reduceActionForDeclareFunction5: 10835973 false ) 
	#(261 15 #reduceActionForDeclareSub6: 10498054 false ) 
	#(261 15 #reduceActionForDeclareSub8: 10498056 false ) 
	#(265 15 #reduceActionForDefineFunction16: 11426832 false ) 
	#(270 15 #reduceActionForModulePropertyGet22: 12019734 false ) 
	#(270 15 #reduceActionForModulePropertyGet21: 12019733 false ) 
	#(334 16 #reduceActionForForEach16: 20703248 false ) 
	#(337 16 #reduceActionForForStepNext1: 21548033 false ) 
	#(335 16 #reduceActionForForNext4: 20989956 false ) 
	#(350 9 #reduceActionForCase24: 23348248 false ) 
	#(350 9 #reduceActionForCase18: 23348242 false ) 
	#(262 16 #reduceActionForDeclareFunction6: 10835974 false ) 
	#(262 16 #reduceActionForDeclareFunction8: 10835976 false ) 
	#(261 16 #reduceActionForDeclareSub9: 10498057 false ) 
	#(261 16 #reduceActionForDeclareSub11: 10498059 false ) 
	#(270 16 #reduceActionForModulePropertyGet24: 12019736 false ) 
	#(270 16 #reduceActionForModulePropertyGet23: 12019735 false ) 
	#(337 17 #reduceActionForForStepNext5: 21548037 false ) 
	#(335 17 #reduceActionForForNext8: 20989960 false ) 
	#(319 17 #reduceActionForOpenFileClause2: 18188290 false ) 
	#(262 17 #reduceActionForDeclareFunction9: 10835977 false ) 
	#(262 17 #reduceActionForDeclareFunction11: 10835979 false ) 
	#(261 17 #reduceActionForDeclareSub12: 10498060 false ) 
	#(337 18 #reduceActionForForStepNext2: 21548034 false ) 
	#(337 18 #reduceActionForForStepNext3: 21548035 false ) 
	#(262 18 #reduceActionForDeclareFunction12: 10835980 false ) 
	#(337 19 #reduceActionForForStepNext6: 21548038 false ) 
	#(337 19 #reduceActionForForStepNext7: 21548039 false ) 
	#(319 19 #reduceActionForOpenFileClause6: 18188294 false ) 
	#(319 19 #reduceActionForOpenFileClause4: 18188292 false ) 
	#(337 20 #reduceActionForForStepNext4: 21548036 false ) 
	#(337 21 #reduceActionForForStepNext8: 21548040 false ) 
	#(319 21 #reduceActionForOpenFileClause8: 18188296 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateForBehaviourDefinition [
	^ 4
]

{ #category : #generated }
VBParser class >> startingStateForModuleStatement [
	^ 3
]

{ #category : #generated }
VBParser class >> startingStateForStatement [
	^ 2
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<<"' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '"ALIAS"' '"APPEND"' '"AS"' '"AddressOf"' '"BINARY"' '"Call"' '"DefBool"' '"DefByte"' '"DefCur"' '"DefDate"' '"DefDbl"' '"DefDec"' '"DefInt"' '"DefLng"' '"DefLngPtr"' '"DefLnglng"' '"DefObj"' '"DefSng"' '"DefStr"' '"DefVar"' '"DoEvents"' '"ERROR"' '"FOR"' '"INPUT"' '"IS"' '"IsNot"' '"LIKE"' '"Line"' '"Lock Read Write"' '"Lock Read"' '"Lock Write"' '"Mod"' '"NEW"' '"NEXT"' '"OBJECT"' '"OPEN"' '"Output"' '"PRINT"' '"RaiseEvent"' '"Random"' '"Read Write"' '"Read"' '"STRING"' '"Shared"' '"TypeOf"' '"WRITE"' '"WithEvents"' '"["' '"\"' '"^"' '"and"' '"attribute"' '"base"' '"beep"' '"begin"' '"bold"' '"boolean"' '"byref"' '"byte"' '"byval"' '"case"' '"class"' '"collection"' '"compare"' '"const"' '"currency"' '"database"' '"date"' '"decimal"' '"declare"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"else:"' '"elseif"' '"end"' '"enum"' '"eqv"' '"event"' '"exit"' '"explicit"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"implements"' '"in"' '"integer"' '"len"' '"let"' '"lib"' '"long"' '"longlong"' '"longptr"' '"loop"' '"module"' '"name"' '"not"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"select"' '"set"' '"single"' '"static"' '"step"' '"sub"' '"text"' '"then"' '"then:"' '"to"' '"type"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<SBIDENTIFIER>' '<DEFTYPE>' '<HASH_NUMBER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '<eol>*' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' 'literal' 'FileDescriptorLiteral' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' 'Identifier' 'KeywordIdentifier' 'UsableKeywords' 'IdentifierWords' 'HashIdentifier' 'SquareBracketIdentifier' 'SimpleIdentifier' 'LabelTag' 'header' 'Option' 'OptionBase' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'Implements' 'DefTypeLabel' 'DefType' 'ModuleStatement' 'Statement' 'Block' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )*' '(<eol> | (<whitespace>? ":" <whitespace>?))' '(<eol> | (<whitespace>? ":" <whitespace>?))+' 'OneLineBlock' '(<whitespace>? ":" <whitespace>? Statement ''statement'')' '(<whitespace>? ":" <whitespace>? Statement ''statement'')*' 'BaseType' 'SimpleType' 'Visibility' 'ComplexType' '("." UsableKeywords ''member'')' '("." UsableKeywords ''member'')+' 'Type' 'TypedThing' 'TypedAndInstantiatedThing' 'TypeSize' '(","<whitespace>? Expression ''size'')' '(","<whitespace>? Expression ''size'')*' 'AsType' 'StatementAssignment' 'ExplicitLetSet' 'Assignment' 'ExplicitAssignement' 'OtherStatements' 'Rename' 'Beep' 'DoEvents' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '("," <whitespace> Parameter ''parameter'')' '("," <whitespace> Parameter ''parameter'')*' 'Parameter' '(AsType ''type'')' '(AsType ''type'')?' '(<whitespace> "=" <whitespace> Expression ''default'')' '(<whitespace> "=" <whitespace> Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' '(AsType ''type'' TypeSize ''size''?  )' '(AsType ''type'' TypeSize ''size''?  )?' 'DefineSub' '<whitespace>?' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'ReDefineExpression' 'StaticVariable' 'Variable' 'Constant' 'ModuleProperties' 'ModuleConstants' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )+' 'ConstantList' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )+' 'VariableDefinition' 'Expression' 'ParentheseesExpression' 'Interval' 'Operation' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'Concatenable' 'ConcatenationOperation' 'Equals' 'ValueClause' 'AddressOfClause' 'NewClause' 'OpenMode' 'OpenAccess' 'Lock' 'FileClauses' 'OpenFileClause' 'PrintFileClause' '(";" <whitespace>? Expression ''value'')' '(";" <whitespace>? Expression ''value'')*' 'LineInputClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForNextOneLine' 'ForStepNext' 'If' 'IfThenEmpty' 'IfThenElseOneLine' 'IfThenElse' '(ElseIf ''elseif'')' '(ElseIf ''elseif'')*' 'Else' 'ElseIf' 'RaiseError' 'To' 'Label' 'CaseCondition' 'Case' '("," <whitespace> (CaseCondition ''expression''))' '("," <whitespace> (CaseCondition ''expression''))*' 'Select' '(Case ''case'')' '(Case ''case'')*' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'Destination' 'DestinationList' '(<whitespace>?"," <whitespace>?Destination ''label'')' '(<whitespace>?"," <whitespace>?Destination ''label'')*' 'GoToStatement' 'GoSub' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'Return' 'StateAccessBase' 'DictionaryAccess' 'MemberAccess' 'StateAccess' 'ImplicitCallExpression' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayExpression' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)*' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )*' 'ExplicitCallSelectorTypes' 'ExplicitCall' 'RaiseEvent' 'TypeOf' 'StatementCalls' 'ExpressionCalls' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBFileDescriptorLiteralNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCToken #VBHashIdentifierNode #VBSquareBracketIdentifierNode #VBSimpleIdentifierNode #VBLabelTagNode #VBHeaderNode #VBProgramNode #VBOptionBaseNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBImplementsNode #SmaCCToken #VBDefTypeNode #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBBlockNode #OrderedCollection #OrderedCollection #Object #VBSimpleTypeNode #SmaCCToken #VBComplexTypeNode #OrderedCollection #OrderedCollection #Object #VBTypedThingNode #VBAsTypeAndNewNode #VBTypeSizeNode #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitAssignementNode #SmaCCToken #VBExplicitAssignementNode #VBExplicitAssignementNode #Object #VBRenameNode #SmaCCToken #VBDoEventsNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #VBProgramNode #VBProgramNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #OrderedCollection #OrderedCollection #VBSubDefinitionNode #SmaCCToken #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBConstantNode #VBModuleMultiplePropertiesNode #VBModuleMultipleConstantsNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBConstantListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBParentheseesExpressionNode #VBIntervalNode #VBProgramNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #VBProgramNode #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBProgramNode #VBConcatenationOperationNode #VBEqualsNode #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #SmaCCToken #SmaCCToken #SmaCCToken #VBProgramNode #VBOpenClauseNode #VBPrintIntoFileClauseNode #OrderedCollection #OrderedCollection #VBLineInputClauseNode #VBProgramNode #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForNextNode #VBForStepNextNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBElseIfBlockNode #OrderedCollection #VBElseIfBlockNode #VBElseIfBlockNode #VBRaiseErrorNode #VBLabelNode #VBLabelNode #VBProgramNode #VBCaseNode #OrderedCollection #OrderedCollection #VBSelectNode #VBCaseNode #OrderedCollection #VBProgramNode #VBResumeLabelNode #VBResumeNextNode #VBResumeEmptyNode #VBProgramNode #VBProgramNode #VBDestinationListNode #OrderedCollection #OrderedCollection #VBGoToStatementNode #VBGoSubNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBProgramNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBReturnNode #VBProgramNode #VBDictionaryAccessNode #VBMemberAccessNode #VBProgramNode #VBProgramNode #VBImplicitParenthesesLessCallNode #VBProgramNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBTypeOfNode #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 0 21 0 176 0 25 0 177 0 6 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 1 45 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 1 45 0 201 1 45 0 203 1 45 0 212 1 49 0 223 1 45 0 234 1 57 0 235 1 45 0 236 1 45 0 237 1 45 0 238 1 45 0 239 1 45 0 240 1 45 0 241 1 45 0 242 1 45 0 243 1 45 0 247 1 45 0 248 1 45 1 18 1 45 1 19 1 45 1 20 1 45 1 21 1 45 1 22 1 45 1 23 1 125 1 25 1 45 1 26 1 45 1 27 1 45 1 28 1 45 1 29 1 45 1 30 1 45 1 34 1 45 1 37 1 157 1 56 1 157 1 57 1 157 1 58 1 45 1 62 1 45 1 63 1 45 1 64 1 45 1 67 1 45 1 68 1 45 1 69 1 45 1 70 1 45 1 71 1 45 1 72 1 45 1 73 1 45 1 74 1 45 1 75 1 45 1 76 1 45 1 77 1 45 1 78 1 45 1 79 1 45 1 80 1 45 1 81 1 45 1 82 1 45 1 83 1 45 1 84 1 45 1 85 1 45 1 90 1 45 1 91 2 9 1 92 1 45 1 97 1 45 1 100 1 45 1 101 1 45 1 102 1 45 1 103 1 45 1 104 1 45 1 109 1 45 1 110 1 45 1 111 1 45 1 112 1 45 1 113 1 45 1 114 1 45 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 1 45 1 129 2 117 1 130 2 121 1 131 1 45 1 139 1 45 1 140 1 45 1 142] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 3 29 0 200 3 29 0 201 3 29 0 203 3 29 0 204 3 29 0 208 3 21 0 209 3 29 0 210 3 29 0 211 3 33 0 223 3 29 0 242 3 29 0 243 3 29 0 247 3 29 0 248 3 29 1 5 3 29 1 6 3 29 1 7 3 53 1 8 3 29 1 9 3 29 1 12 3 29 1 14 3 29 1 15 3 29 1 16 3 29 1 17 3 29 1 18 3 29 1 19 3 29 1 20 3 29 1 21 3 29 1 22 3 29 1 23 1 125 1 25 3 29 1 26 3 29 1 27 3 29 1 28 3 29 1 29 3 29 1 30 3 29 1 34 3 29 1 37] 
#[1 3 89 0 105 2 209 0 106 3 89 0 108 3 89 0 131 2 229 0 132 3 89 0 133 3 53 0 140 2 241 0 142 3 89 0 223 3 53 1 8 3 93 1 9 3 93 1 12 3 93 1 14 3 93 1 15 3 93 1 16 3 93 1 17] 
#[0 0 0 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 55 0 83 0 56 0 87 0 58 0 91 0 59 0 95 0 64 0 99 0 67 0 103 0 73 0 107 0 76 0 111 0 77 0 115 0 84 0 119 0 86 0 123 0 88 0 127 0 89 0 131 0 91 0 135 0 92 0 139 0 100 0 143 0 102 0 147 0 105 0 151 0 106 0 155 0 107 0 159 0 108 0 163 0 112 0 167 0 115 0 171 0 116 0 175 0 123 0 179 0 126 0 183 0 131 0 187 0 132 0 191 0 133 0 195 0 134 0 199 0 138 0 203 0 140 0 207 0 142 0 211 0 143 0 215 0 147 0 219 0 150 0 223 0 167 0 227 0 168 0 231 0 171 0 235 0 172 0 239 0 173 3 109 0 179 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 3 113 0 199 3 117 0 200 3 117 0 201 3 117 0 203 3 117 0 204 3 117 0 208 3 21 0 209 3 117 0 210 3 117 0 211 3 33 0 223 3 117 0 242 3 117 0 243 3 117 0 247 3 117 0 248 3 117 1 5 3 117 1 6 3 117 1 7 3 53 1 8 3 117 1 9 3 117 1 12 3 117 1 14 3 117 1 15 3 117 1 16 3 117 1 17 3 117 1 18 3 117 1 19 3 117 1 20 3 117 1 21 3 117 1 22 3 117 1 23 1 125 1 25 3 117 1 26 3 117 1 27 3 117 1 28 3 117 1 29 3 117 1 30 3 117 1 34 3 117 1 37 0 10 1 144] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 3 141 0 192 3 145 0 193 3 145 0 194 3 141 0 196] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 3 157 0 192 3 145 0 193 3 145 0 194 3 157 0 196] 
#[0 0 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 18 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 161 0 172] 
#[0 3 165 0 172] 
#[0 0 22 0 11 0 55 0 172 0 173 1 144] 
#[1 0 26 0 1 0 26 0 3 0 26 0 5 0 26 0 9 0 26 0 11 0 26 0 55 0 243 0 172 0 26 0 173 0 26 1 144] 
#[0 3 173 0 172] 
#[0 0 30 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 177 0 172] 
#[0 3 181 0 172] 
#[0 0 34 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 38 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 185 0 172] 
#[0 0 42 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 46 0 1 0 46 0 3 0 46 0 5 0 46 0 9 0 46 0 11 0 46 0 55 0 247 0 172 0 46 0 173 0 46 1 144] 
#[0 3 193 0 172] 
#[0 0 50 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 54 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 197 0 172] 
#[0 0 58 0 11 0 55 0 172 0 173 1 144] 
#[0 0 62 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 66 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 201 0 172] 
#[0 0 70 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 74 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 205 0 172] 
#[1 3 209 0 121 3 213 0 162 3 217 0 172 3 221 0 173 3 225 0 182 3 229 0 207 3 233 0 213] 
#[0 3 237 0 172] 
#[0 3 241 0 172] 
#[0 3 245 0 172] 
#[0 0 78 0 172] 
#[0 0 82 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 86 0 172] 
#[0 3 249 0 172] 
#[0 3 253 0 172] 
#[0 4 1 0 172] 
#[0 0 90 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 94 0 1 0 94 0 3 0 94 0 5 0 94 0 9 0 94 0 11 0 94 0 55 0 251 0 172 0 94 0 173 0 94 1 144] 
#[1 0 102 0 1 0 102 0 3 0 102 0 5 0 102 0 9 0 102 0 11 0 102 0 55 0 255 0 172 0 102 0 173 0 102 1 144] 
#[0 4 9 0 172] 
#[0 4 13 0 172] 
#[0 0 106 0 172] 
#[0 0 110 0 172] 
#[0 4 17 0 172] 
#[1 0 114 0 11 0 114 0 55 1 3 0 172 0 114 0 173 0 114 1 144] 
#[0 0 118 0 11 0 55 0 172 0 173 1 144] 
#[0 4 25 0 172] 
#[1 0 122 0 1 0 122 0 3 0 122 0 5 0 122 0 9 0 122 0 11 0 122 0 55 1 7 0 172 0 122 0 173 0 122 1 144] 
#[0 4 29 0 172] 
#[0 0 130 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 33 0 172] 
#[0 0 134 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 37 0 172] 
#[0 4 41 0 172] 
#[1 0 138 0 1 0 138 0 3 0 138 0 5 0 138 0 9 4 45 0 11 0 138 0 55 0 138 0 172 0 138 0 173 0 138 1 144] 
#[0 0 142 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 146 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 49 0 126] 
#[1 0 150 0 1 0 154 0 3 4 53 0 5 0 150 0 9 0 158 0 11 0 158 0 55 1 11 0 172 0 158 0 173 4 69 0 228 4 69 0 229 4 69 0 233 0 158 1 144] 
#[0 0 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 182 0 11 0 55 0 172 0 173 1 144] 
#[0 0 186 0 11 0 55 0 172 0 173 1 144] 
#[0 0 190 0 11 0 55 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 73 0 172] 
#[0 0 194 0 11 0 55 0 172 0 173 1 144] 
#[0 4 77 0 172] 
#[0 0 198 0 11 0 55 0 172 0 173 1 144] 
#[0 0 202 0 11 0 55 0 172 0 173 1 144] 
#[0 0 206 0 11 0 55 0 172 0 173 1 144] 
#[0 0 210 0 11 0 55 0 172 0 173 1 144] 
#[0 0 214 0 11 0 55 0 172 0 173 1 144] 
#[0 0 218 0 11 0 55 0 172 0 173 1 144] 
#[0 0 222 0 11 0 55 0 172 0 173 1 144] 
#[0 0 226 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 230 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 234 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 238 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 242 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 246 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 250 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 254 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 2 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 81 0 7 4 85 0 172 4 89 1 35 4 93 1 36] 
#[0 1 6 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 14 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 18 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 26 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 30 0 11 0 55 0 172 0 173 1 144] 
#[1 1 34 0 1 1 15 0 3 1 34 0 4 1 34 0 5 1 34 0 7 1 34 0 9 1 34 0 11 1 34 0 13 1 34 0 22 1 34 0 23 1 34 0 28 1 34 0 29 1 34 0 30 1 34 0 31 1 34 0 32 1 34 0 33 1 34 0 34 1 34 0 35 1 34 0 36 1 34 0 37 1 34 0 38 1 34 0 39 1 34 0 40 1 34 0 41 1 34 0 43 1 34 0 45 1 34 0 55 1 34 0 56 1 34 0 58 1 34 0 59 1 34 0 64 1 34 0 67 1 34 0 73 1 34 0 76 1 34 0 77 1 34 0 82 1 34 0 84 1 34 0 86 1 34 0 88 1 34 0 89 1 34 0 91 1 34 0 92 1 34 0 99 1 34 0 100 1 34 0 102 1 34 0 105 1 34 0 106 1 34 0 107 1 34 0 108 1 34 0 112 1 34 0 115 1 34 0 116 1 34 0 121 1 34 0 123 1 34 0 126 1 34 0 131 1 34 0 132 1 34 0 133 1 34 0 134 1 34 0 138 1 34 0 140 1 34 0 142 1 34 0 143 1 34 0 147 1 34 0 150 1 34 0 151 1 34 0 162 1 34 0 167 1 34 0 168 1 34 0 171 1 34 0 172 1 34 0 173 1 34 1 144] 
#[0 1 42 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 50 0 11 0 55 0 172 0 173 1 144] 
#[0 1 54 0 11 0 55 0 172 0 173 1 144] 
#[0 1 58 0 11 0 55 0 172 0 173 1 144] 
#[0 1 62 0 11 0 55 0 172 0 173 1 144] 
#[0 1 66 0 11 0 55 0 172 0 173 1 144] 
#[0 1 70 0 11 0 55 0 172 0 173 1 144] 
#[0 1 74 0 11 0 55 0 172 0 173 1 144] 
#[0 1 78 0 11 0 55 0 172 0 173 1 144] 
#[0 1 82 0 11 0 55 0 172 0 173 1 144] 
#[0 1 86 0 11 0 55 0 172 0 173 1 144] 
#[0 1 90 0 11 0 55 0 172 0 173 1 144] 
#[0 1 94 0 11 0 55 0 172 0 173 1 144] 
#[0 1 98 0 11 0 55 0 172 0 173 1 144] 
#[0 1 102 0 11 0 55 0 172 0 173 1 144] 
#[0 1 106 0 11 0 55 0 172 0 173 1 144] 
#[0 1 110 0 11 0 55 0 172 0 173 1 144] 
#[0 1 114 0 11 0 55 0 172 0 173 1 144] 
#[0 1 118 0 11 0 55 0 172 0 173 1 144] 
#[0 1 122 0 11 0 55 0 172 0 173 1 144] 
#[0 1 126 0 11 0 55 0 172 0 173 1 144] 
#[0 1 130 0 11 0 55 0 172 0 173 1 144] 
#[0 1 134 0 11 0 55 0 172 0 173 1 144] 
#[0 1 138 0 11 0 55 0 172 0 173 1 144] 
#[0 1 142 0 11 0 55 0 172 0 173 1 144] 
#[0 1 19 0 11 0 55 0 172 0 173 1 144] 
#[0 1 154 0 11 0 55 0 172 0 173 1 144] 
#[0 1 158 0 11 0 55 0 172 0 173 1 144] 
#[0 1 162 0 11 0 55 0 172 0 173 1 144] 
#[0 1 166 0 11 0 55 0 172 0 173 1 144] 
#[0 1 170 0 11 0 55 0 172 0 173 1 144] 
#[0 1 174 0 11 0 55 0 172 0 173 1 144] 
#[0 1 178 0 11 0 55 0 172 0 173 1 144] 
#[0 1 182 0 11 0 55 0 172 0 173 1 144] 
#[0 1 186 0 11 0 55 0 172 0 173 1 144] 
#[0 1 190 0 11 0 55 0 172 0 173 1 144] 
#[0 1 194 0 11 0 55 0 172 0 173 1 144] 
#[0 1 198 0 11 0 55 0 172 0 173 1 144] 
#[0 1 202 0 11 0 55 0 172 0 173 1 144] 
#[0 1 23 0 11 0 55 0 172 0 173 1 144] 
#[0 1 214 0 11 0 55 0 172 0 173 1 144] 
#[0 1 218 0 11 0 55 0 172 0 173 1 144] 
#[0 1 222 0 11 0 55 0 172 0 173 1 144] 
#[0 1 226 0 11 0 55 0 172 0 173 1 144] 
#[0 1 230 0 11 0 55 0 172 0 173 1 144] 
#[0 1 234 0 11 0 55 0 172 0 173 1 144] 
#[1 4 97 0 1 4 101 0 9 4 105 0 172] 
#[0 1 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 242 0 1 1 242 0 3 1 242 0 9 1 246 0 11 1 246 0 55 1 27 0 172 1 246 0 173 1 246 1 144] 
#[1 1 250 0 1 1 31 0 3 1 250 0 4 1 250 0 5 1 250 0 7 1 250 0 9 1 250 0 11 1 250 0 13 1 250 0 22 1 250 0 23 1 250 0 28 1 250 0 29 1 250 0 30 1 250 0 31 1 250 0 32 1 250 0 33 1 250 0 34 1 250 0 35 1 250 0 36 1 250 0 37 1 250 0 38 1 250 0 39 1 250 0 40 1 250 0 41 1 250 0 43 1 250 0 45 1 250 0 55 1 250 0 56 1 250 0 58 1 250 0 59 1 250 0 64 1 250 0 67 1 250 0 73 1 250 0 76 1 250 0 77 1 250 0 82 1 250 0 84 1 250 0 86 1 250 0 88 1 250 0 89 1 250 0 91 1 250 0 92 1 250 0 99 1 250 0 100 1 250 0 102 1 250 0 105 1 250 0 106 1 250 0 107 1 250 0 108 1 250 0 112 1 250 0 115 1 250 0 116 1 250 0 121 1 250 0 123 1 250 0 126 1 250 0 131 1 250 0 132 1 250 0 133 1 250 0 134 1 250 0 138 1 250 0 140 1 250 0 142 1 250 0 143 1 250 0 147 1 250 0 150 1 250 0 151 1 250 0 162 1 250 0 167 1 250 0 168 1 250 0 171 1 250 0 172 1 250 0 173 1 250 1 144] 
#[1 2 2 0 11 2 2 0 55 1 35 0 172 2 2 0 173 2 2 1 144] 
#[0 2 6 0 11 0 55 0 172 0 173 1 144] 
#[0 4 113 0 3] 
#[1 2 10 0 1 1 39 0 3 2 10 0 4 2 10 0 5 2 10 0 7 2 10 0 9 2 10 0 11 2 10 0 13 2 10 0 22 2 10 0 23 2 10 0 28 2 10 0 29 2 10 0 30 2 10 0 31 2 10 0 32 2 10 0 33 2 10 0 34 2 10 0 35 2 10 0 36 2 10 0 37 2 10 0 38 2 10 0 39 2 10 0 40 2 10 0 41 2 10 0 43 2 10 0 45 2 10 0 55 2 10 0 56 2 10 0 58 2 10 0 59 2 10 0 64 2 10 0 67 2 10 0 73 2 10 0 76 2 10 0 77 2 10 0 82 2 10 0 84 2 10 0 86 2 10 0 88 2 10 0 89 2 10 0 91 2 10 0 92 2 10 0 99 2 10 0 100 2 10 0 102 2 10 0 105 2 10 0 106 2 10 0 107 2 10 0 108 2 10 0 112 2 10 0 115 2 10 0 116 2 10 0 121 2 10 0 123 2 10 0 126 2 10 0 131 2 10 0 132 2 10 0 133 2 10 0 134 2 10 0 138 2 10 0 140 2 10 0 142 2 10 0 143 2 10 0 147 2 10 0 150 2 10 0 151 2 10 0 162 2 10 0 167 2 10 0 168 2 10 0 171 2 10 0 172 2 10 0 173 2 10 1 144] 
#[0 2 18 0 11 0 55 0 172 0 173 1 144] 
#[0 2 22 0 11 0 55 0 172 0 173 1 144] 
#[0 2 26 0 11 0 55 0 172 0 173 1 144] 
#[0 2 30 0 172] 
#[0 2 34 0 172] 
#[0 2 38 0 172] 
#[0 2 42 0 172] 
#[0 2 46 0 172] 
#[0 2 50 0 172] 
#[0 2 54 0 172] 
#[0 2 58 0 172] 
#[0 2 62 0 172] 
#[0 2 66 0 172] 
#[0 2 70 0 172] 
#[0 2 74 0 172] 
#[0 2 78 0 172] 
#[0 2 82 0 172] 
#[0 0 26 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 1 0 6 0 9 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 43 0 6 0 45 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 4 117 0 177] 
#[0 4 121 0 172] 
#[0 4 125 0 172] 
#[0 4 129 0 172] 
#[0 0 94 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 102 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 133 0 172] 
#[0 4 137 0 172] 
#[0 0 122 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 43 0 172] 
#[0 4 141 0 172] 
#[0 0 138 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 145 0 126] 
#[1 4 53 0 5 1 47 0 172 4 69 0 228 4 69 0 229 4 69 0 233] 
#[0 2 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 102 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 106 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 153 0 172] 
#[0 2 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 157 0 172] 
#[0 2 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 161 0 172] 
#[0 2 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 86 0 172] 
#[0 4 165 0 172] 
#[0 0 0 1 144] 
#[1 0 134 0 5 1 51 0 172] 
#[1 4 145 0 126 4 173 0 150] 
#[0 2 158 0 1 0 9 0 22 0 23 0 25 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 177 0 177 4 181 0 178 0 6 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 185 0 177 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 67 0 10 0 73 0 10 0 76 0 10 0 77 0 10 0 84 0 10 0 86 0 10 0 88 0 10 0 89 0 10 0 91 0 10 0 92 0 10 0 100 0 10 0 102 0 10 0 105 0 10 0 106 0 10 0 107 0 10 0 108 0 10 0 112 0 10 0 115 0 10 0 116 0 10 0 123 0 10 0 126 0 10 0 131 0 10 0 132 0 10 0 133 0 10 0 134 0 10 0 138 0 10 0 140 0 10 0 142 0 10 0 143 0 10 0 147 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 4 189 0 179 0 10 1 144] 
#[0 2 162 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 186 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 190 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 194 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 198 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 4 193 0 191 1 17 0 194 4 193 0 195 4 193 0 196 4 193 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 4 197 0 191 1 17 0 194 4 197 0 195 4 197 0 196 4 197 0 197 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 4 205 1 126 2 105 1 127 2 117 1 130 4 209 1 131 4 213 1 138] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 57 0 180 5 57 0 181 5 57 0 182 5 57 0 183 5 57 0 184 5 57 0 185 5 57 0 186 5 57 0 187 5 57 0 188 5 57 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 5 57 1 38 5 57 1 39 5 57 1 40 5 57 1 41 5 57 1 42 5 57 1 43 5 57 1 44 5 57 1 45 5 57 1 46 5 57 1 48 5 57 1 50 5 57 1 52 5 57 1 54 5 57 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 5 57 1 141 5 57 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 5 137 0 95 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 141 0 191 1 17 0 194 5 141 0 195 5 141 0 196 5 141 0 197] 
#[0 5 145 0 45] 
#[1 5 149 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 5 153 0 56 1 17 0 58 1 17 0 59 5 157 0 64 1 17 0 67 1 17 0 77 5 237 0 78 5 237 0 80 5 169 0 84 5 237 0 87 1 17 0 88 5 177 0 89 5 237 0 90 5 237 0 94 1 17 0 107 5 237 0 114 1 17 0 115 1 17 0 116 5 237 0 118 5 237 0 119 5 237 0 120 1 17 0 123 1 17 0 138 5 237 0 139 1 17 0 143 5 209 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 213 0 191 1 17 0 194 5 213 0 195 5 213 0 196 5 213 0 197 5 237 0 221 5 221 0 222 5 237 0 224 5 229 0 225 5 233 0 226 5 237 0 227] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 5 241 0 180 5 241 0 181 5 241 0 182 5 241 0 183 5 241 0 184 5 241 0 185 5 241 0 186 5 241 0 187 5 241 0 188 5 241 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 5 241 1 38 5 241 1 39 5 241 1 40 5 241 1 41 5 241 1 42 5 241 1 43 5 241 1 44 5 241 1 45 5 241 1 46 5 241 1 48 5 241 1 50 5 241 1 52 5 241 1 54 5 241 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 5 241 1 141 5 241 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 245 0 191 1 17 0 194 5 245 0 195 5 245 0 196 5 245 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 249 0 191 1 17 0 194 5 249 0 195 5 249 0 196 5 249 0 197 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 6 1 1 131] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 5 0 191 1 17 0 194 6 5 0 195 6 5 0 196 6 5 0 197 6 9 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 6 13 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 6 17 1 25 6 21 1 34] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 6 33 1 24 6 37 1 31] 
#[1 2 202 0 11 2 202 0 55 1 55 0 172 2 202 0 173 2 202 1 144] 
#[1 6 45 0 2 2 206 0 3 2 206 0 4 2 206 0 5 2 206 0 7 2 206 0 11 2 206 0 13 2 206 0 22 2 206 0 23 2 206 0 28 2 206 0 29 2 206 0 30 2 206 0 31 2 206 0 32 2 206 0 33 2 206 0 34 2 206 0 35 2 206 0 36 2 206 0 37 2 206 0 38 2 206 0 39 2 206 0 40 2 206 0 41 2 206 0 43 2 206 0 45 2 206 0 55 2 206 0 56 2 206 0 58 2 206 0 59 2 206 0 64 2 206 0 67 2 206 0 73 2 206 0 76 2 206 0 77 2 206 0 82 2 206 0 84 2 206 0 86 2 206 0 88 2 206 0 89 2 206 0 91 2 206 0 92 2 206 0 99 2 206 0 100 2 206 0 102 2 206 0 105 2 206 0 106 2 206 0 107 2 206 0 108 2 206 0 112 2 206 0 115 2 206 0 116 2 206 0 121 2 206 0 123 2 206 0 126 2 206 0 131 2 206 0 132 2 206 0 133 2 206 0 134 2 206 0 138 2 206 0 140 2 206 0 142 2 206 0 143 2 206 0 147 2 206 0 150 2 206 0 151 2 206 0 162 2 206 0 167 2 206 0 168 2 206 0 171 2 206 0 172 2 206 0 173 2 206 1 144] 
#[1 6 49 0 148 6 53 0 152] 
#[0 2 210 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 82 0 84 0 86 0 88 0 89 0 92 0 93 0 99 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 6 57 0 172] 
#[1 0 29 0 1 0 33 0 9 2 214 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 6 69 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 3 213 0 162 0 253 0 167 1 1 0 168 1 5 0 171 1 59 0 172 1 63 0 173 6 65 0 182 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 6 69 0 201 6 69 0 203 6 69 0 212 6 73 0 215 1 49 0 223 6 69 0 234 1 57 0 235 6 69 0 236 6 69 0 237 6 69 0 238 6 69 0 239 6 69 0 240 6 69 0 241 6 69 0 242 6 69 0 243 6 69 0 247 6 69 0 248 6 69 1 18 6 69 1 19 6 69 1 20 6 69 1 21 6 69 1 22 6 69 1 23 1 125 1 25 6 69 1 26 6 69 1 27 6 69 1 28 6 69 1 29 6 69 1 30 6 69 1 34 6 69 1 37 1 157 1 56 1 157 1 57 1 157 1 58 6 69 1 62 6 69 1 63 6 69 1 64 6 69 1 67 6 69 1 68 6 69 1 69 6 69 1 70 6 69 1 71 6 69 1 72 6 69 1 73 6 69 1 74 6 69 1 75 6 69 1 76 6 69 1 77 6 69 1 78 6 69 1 79 6 69 1 80 6 69 1 81 6 69 1 82 6 69 1 83 6 69 1 84 6 69 1 85 6 69 1 90 6 69 1 91 2 9 1 92 6 69 1 97 6 69 1 100 6 69 1 101 6 69 1 102 6 69 1 103 6 69 1 104 6 69 1 109 6 69 1 110 6 69 1 111 6 69 1 112 6 69 1 113 6 69 1 114 6 69 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 6 69 1 129 2 117 1 130 2 121 1 131 6 69 1 139 6 69 1 140 6 69 1 142] 
#[1 6 77 0 121 3 213 0 162 6 81 0 182] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 85 0 191 1 17 0 194 6 85 0 195 6 85 0 196 6 85 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 89 0 191 1 17 0 194 6 89 0 195 6 89 0 196 6 89 0 197] 
#[1 6 93 0 44 6 97 0 93 6 101 0 106 6 105 0 132 6 109 0 142] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 125 0 182 6 125 0 191 1 17 0 194 6 125 0 195 6 125 0 196 6 125 0 197 6 125 1 43 6 125 1 105 6 129 1 106] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 125 0 182 6 125 0 191 1 17 0 194 6 125 0 195 6 125 0 196 6 125 0 197 6 125 1 43 6 125 1 105 6 133 1 106] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 137 0 180 6 137 0 181 6 137 0 182 6 137 0 183 6 137 0 184 6 137 0 185 6 137 0 186 6 137 0 187 6 137 0 188 6 137 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 137 1 38 6 137 1 39 6 137 1 40 6 137 1 41 6 137 1 42 6 137 1 43 6 137 1 44 6 137 1 45 6 137 1 46 6 137 1 48 6 137 1 50 6 137 1 52 6 137 1 54 6 137 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 137 1 141 6 137 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 141 0 180 6 141 0 181 6 141 0 182 6 141 0 183 6 141 0 184 6 141 0 185 6 141 0 186 6 141 0 187 6 141 0 188 6 141 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 141 1 38 6 141 1 39 6 141 1 40 6 141 1 41 6 141 1 42 6 141 1 43 6 141 1 44 6 141 1 45 6 141 1 46 6 141 1 48 6 141 1 50 6 141 1 52 6 141 1 54 6 141 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 141 1 141 6 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 6 145 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 149 0 180 6 149 0 181 6 149 0 182 6 149 0 183 6 149 0 184 6 149 0 185 6 149 0 186 6 149 0 187 6 149 0 188 6 149 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 149 1 38 6 149 1 39 6 149 1 40 6 149 1 41 6 149 1 42 6 149 1 43 6 149 1 44 6 149 1 45 6 149 1 46 6 149 1 48 6 149 1 50 6 149 1 52 6 149 1 54 6 149 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 149 1 141 6 149 1 143] 
#[0 6 153 0 74] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 6 157 0 130 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 173 0 180 6 173 0 181 6 173 0 182 6 173 0 183 6 173 0 184 6 173 0 185 6 173 0 186 6 173 0 187 6 173 0 188 6 173 0 189 6 161 0 191 1 17 0 194 6 161 0 195 6 161 0 196 6 161 0 197 6 165 1 24 6 169 1 31 6 173 1 38 6 173 1 39 6 173 1 40 6 173 1 41 6 173 1 42 6 173 1 43 6 173 1 44 6 173 1 45 6 173 1 46 6 173 1 48 6 173 1 50 6 173 1 52 6 173 1 54 6 173 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 173 1 141 6 173 1 143] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 6 177 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 125 0 182 6 125 0 191 1 17 0 194 6 125 0 195 6 125 0 196 6 125 0 197 6 125 1 43 6 125 1 105 6 181 1 106] 
#[0 6 185 0 82] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 6 189 1 24 6 193 1 31] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 197 0 191 1 17 0 194 6 197 0 195 6 197 0 196 6 197 0 197] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 201 0 180 6 201 0 181 6 201 0 182 6 201 0 183 6 201 0 184 6 201 0 185 6 201 0 186 6 201 0 187 6 201 0 188 6 201 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 201 1 38 6 201 1 39 6 201 1 40 6 201 1 41 6 201 1 42 6 201 1 43 6 201 1 44 6 201 1 45 6 201 1 46 6 201 1 48 6 201 1 50 6 201 1 52 6 201 1 54 6 201 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 201 1 141 6 201 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 205 0 180 6 205 0 181 6 205 0 182 6 205 0 183 6 205 0 184 6 205 0 185 6 205 0 186 6 205 0 187 6 205 0 188 6 205 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 205 1 38 6 205 1 39 6 205 1 40 6 205 1 41 6 205 1 42 6 205 1 43 6 205 1 44 6 205 1 45 6 205 1 46 6 205 1 48 6 205 1 50 6 205 1 52 6 205 1 54 6 205 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 205 1 141 6 205 1 143] 
#[0 2 218 0 11 0 55 0 172 0 173 1 144] 
#[0 6 209 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 6 213 0 172 6 217 0 180 6 217 0 181 6 217 0 182 6 217 0 183 6 217 0 184 6 217 0 185 6 217 0 186 6 217 0 187 6 217 0 188 6 217 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 6 217 1 38 6 217 1 39 6 217 1 40 6 217 1 41 6 217 1 42 6 217 1 43 6 217 1 44 6 217 1 45 6 217 1 46 6 217 1 48 6 217 1 50 6 217 1 52 6 217 1 54 6 217 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 6 217 1 141 6 217 1 143] 
#[1 6 221 0 5 6 225 0 12 6 229 0 18 6 233 0 24] 
#[0 2 222 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 226 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 237 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 6 241 0 86 1 17 0 88 1 17 0 89 6 245 0 100 6 249 0 102 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 6 253 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 7 1 1 24 7 5 1 31] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 9 0 191 1 17 0 194 7 9 0 195 7 9 0 196 7 9 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 13 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 17 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 21 1 25] 
#[0 7 25 0 7] 
#[0 2 230 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 81 0 7 2 234 0 11 2 234 0 22 2 234 0 23 2 234 0 28 2 234 0 29 2 234 0 30 2 234 0 31 2 234 0 32 2 234 0 33 2 234 0 34 2 234 0 35 2 234 0 36 2 234 0 37 2 234 0 38 2 234 0 39 2 234 0 40 2 234 0 41 2 234 0 43 2 234 0 45 2 234 0 55 2 234 0 56 2 234 0 58 2 234 0 59 2 234 0 64 2 234 0 67 2 234 0 73 2 234 0 76 2 234 0 77 2 234 0 84 2 234 0 86 2 234 0 88 2 234 0 89 2 234 0 91 2 234 0 92 2 234 0 100 2 234 0 102 2 234 0 105 2 234 0 106 2 234 0 107 2 234 0 108 2 234 0 112 2 234 0 115 2 234 0 116 2 234 0 123 2 234 0 126 2 234 0 131 2 234 0 132 2 234 0 133 2 234 0 134 2 234 0 138 2 234 0 140 2 234 0 142 2 234 0 143 2 234 0 147 2 234 0 150 2 234 0 167 2 234 0 168 2 234 0 171 1 67 0 172 2 234 0 173 7 29 1 35 2 234 1 144] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 7 33 0 192 3 145 0 193 3 145 0 194 7 33 0 196] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 145 0 67 3 145 0 77 3 145 0 82 3 145 0 84 3 145 0 88 3 145 0 89 3 145 0 96 3 145 0 107 3 145 0 115 3 145 0 116 3 145 0 123 3 145 0 137 3 145 0 138 3 145 0 143 3 145 0 147 3 145 0 150 3 145 0 167 1 1 0 168 7 37 0 192 3 145 0 193 3 145 0 194 7 37 0 196] 
#[1 7 41 0 12 7 45 0 18] 
#[1 2 238 0 1 2 238 0 3 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 11 2 238 0 13 2 238 0 22 2 238 0 23 2 238 0 25 2 238 0 43 2 238 0 45 2 238 0 54 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 67 2 238 0 77 2 238 0 79 2 238 0 81 2 238 0 84 2 238 0 88 2 238 0 89 2 238 0 107 2 238 0 115 2 238 0 116 2 238 0 123 2 238 0 124 2 238 0 129 2 238 0 138 2 238 0 143 2 238 0 150 2 238 0 155 2 238 0 160 2 238 0 161 2 238 0 162 2 238 0 163 2 238 0 164 2 238 0 165 2 238 0 166 2 238 0 167 2 238 0 168 2 238 0 170 2 238 0 171 2 238 0 172 2 238 0 173 7 49 1 133 7 53 1 135 2 238 1 144] 
#[1 2 238 0 1 2 238 0 3 2 238 0 4 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 13 2 238 0 22 2 238 0 23 2 238 0 25 2 238 0 43 2 238 0 45 2 238 0 54 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 67 2 238 0 77 2 238 0 79 2 238 0 81 2 238 0 84 2 238 0 88 2 238 0 89 2 238 0 107 2 238 0 115 2 238 0 116 2 238 0 123 2 238 0 124 2 238 0 129 2 238 0 138 2 238 0 143 2 238 0 150 2 238 0 155 2 238 0 160 2 238 0 161 2 238 0 162 2 238 0 163 2 238 0 164 2 238 0 165 2 238 0 166 2 238 0 167 2 238 0 168 2 238 0 170 2 238 0 171 1 71 0 172 7 61 1 133 7 53 1 135] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 6 5 0 191 1 17 0 194 6 5 0 195 6 5 0 196 6 5 0 197 7 65 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 6 13 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 7 69 0 106 7 73 0 142] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 77 0 191 1 17 0 194 7 77 0 195 7 77 0 196 7 77 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 81 0 191 1 17 0 194 7 81 0 195 7 81 0 196 7 81 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 85 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 6 153 0 74 7 89 0 85 7 93 0 104 7 97 0 131 3 213 0 162 7 101 0 182] 
#[1 7 105 0 107 7 109 0 116 7 113 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 117 0 191 1 17 0 194 7 117 0 195 7 117 0 196 7 117 0 197] 
#[0 7 121 0 172] 
#[1 6 221 0 5 7 125 0 18 6 233 0 24] 
#[0 7 129 0 169] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 6 241 0 86 1 17 0 88 1 17 0 89 7 133 0 91 6 245 0 100 6 249 0 102 7 137 0 106 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 7 141 0 132 1 17 0 138 7 149 0 140 7 145 0 142 1 17 0 143 6 253 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 7 149 1 8 7 1 1 24 7 5 1 31] 
#[1 7 153 0 106 7 157 0 132 7 161 0 142] 
#[1 7 137 0 106 7 141 0 132 7 149 0 140 7 145 0 142 7 149 1 8] 
#[1 4 249 0 163 7 165 0 185] 
#[0 7 169 0 172] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 173 0 200 7 173 0 201 7 173 0 203 7 173 0 204 7 173 0 208 3 21 0 209 7 173 0 210 7 173 0 211 3 33 0 223 7 173 0 242 7 173 0 243 7 173 0 247 7 173 0 248 7 173 1 5 7 173 1 6 7 173 1 7 3 53 1 8 7 173 1 9 7 173 1 12 7 173 1 14 7 173 1 15 7 173 1 16 7 173 1 17 7 173 1 18 7 173 1 19 7 173 1 20 7 173 1 21 7 173 1 22 7 173 1 23 1 125 1 25 7 173 1 26 7 173 1 27 7 173 1 28 7 173 1 29 7 173 1 30 7 173 1 34 7 173 1 37 2 242 1 144] 
#[0 2 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 55 0 83 0 56 0 87 0 58 0 91 0 59 0 95 0 64 0 99 0 67 0 103 0 73 0 107 0 76 0 111 0 77 0 115 0 84 0 119 0 86 0 123 0 88 0 127 0 89 0 131 0 91 0 135 0 92 0 139 0 100 0 143 0 102 0 147 0 105 0 151 0 106 0 155 0 107 0 159 0 108 0 163 0 112 0 167 0 115 0 171 0 116 0 175 0 123 0 179 0 126 0 183 0 131 0 187 0 132 0 191 0 133 0 195 0 134 0 199 0 138 0 203 0 140 0 207 0 142 0 211 0 143 0 215 0 147 1 75 0 150 0 223 0 167 0 227 0 168 0 231 0 171 1 79 0 172 0 239 0 173 7 177 0 179 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 181 0 200 7 181 0 201 7 181 0 203 7 181 0 204 7 181 0 208 3 21 0 209 7 181 0 210 7 181 0 211 3 33 0 223 7 181 0 242 7 181 0 243 7 181 0 247 7 181 0 248 7 181 1 5 7 181 1 6 7 181 1 7 3 53 1 8 7 181 1 9 7 181 1 12 7 181 1 14 7 181 1 15 7 181 1 16 7 181 1 17 7 181 1 18 7 181 1 19 7 181 1 20 7 181 1 21 7 181 1 22 7 181 1 23 1 125 1 25 7 181 1 26 7 181 1 27 7 181 1 28 7 181 1 29 7 181 1 30 7 181 1 34 7 181 1 37 0 10 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 7 185 0 177 4 181 0 178 0 6 1 144] 
#[0 2 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 2 254 0 11 2 254 0 55 2 254 0 172 2 254 0 173 2 254 1 144] 
#[1 4 97 0 1 4 101 0 9] 
#[1 1 242 0 1 1 242 0 3 1 242 0 9 3 2 0 11 3 2 0 55 3 2 0 172 3 2 0 173 3 2 1 144] 
#[1 2 10 0 1 2 14 0 3 2 10 0 9 3 6 0 11 3 6 0 55 3 6 0 172 3 6 0 173 3 6 1 144] 
#[0 3 10 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 7 189 0 172 7 193 0 180 7 193 0 181 7 193 0 182 7 193 0 183 7 193 0 184 7 193 0 185 7 193 0 186 7 193 0 187 7 193 0 188 7 193 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 7 193 1 38 7 193 1 39 7 193 1 40 7 193 1 41 7 193 1 42 7 193 1 43 7 193 1 44 7 193 1 45 7 193 1 46 7 193 1 48 7 193 1 50 7 193 1 52 7 193 1 54 7 193 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 7 193 1 141 7 193 1 143] 
#[0 7 197 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 4 249 0 163 1 17 0 167 1 1 0 168 1 5 0 171 7 201 0 182 7 205 0 185 7 81 0 191 1 17 0 194 7 81 0 195 7 81 0 196 7 81 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 209 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 7 213 0 172] 
#[0 7 217 0 172] 
#[1 7 221 0 159 7 225 0 190] 
#[0 3 14 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 18 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 22 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 83 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 26 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 30 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 34 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 38 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 42 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 46 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 50 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 54 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 58 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 62 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 66 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 70 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 74 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 78 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 150 0 1 1 83 0 3 3 82 0 4 3 82 0 5 3 82 0 7 0 150 0 9 3 82 0 11 3 82 0 13 3 82 0 22 3 82 0 23 3 82 0 28 3 82 0 29 3 82 0 30 3 82 0 31 3 82 0 32 3 82 0 33 3 82 0 34 3 82 0 35 3 82 0 36 3 82 0 37 3 82 0 38 3 82 0 39 3 82 0 40 3 82 0 41 3 82 0 43 3 82 0 45 3 82 0 55 3 82 0 56 3 82 0 58 3 82 0 59 3 82 0 64 3 82 0 67 3 82 0 73 3 82 0 76 3 82 0 77 3 82 0 82 3 82 0 84 3 82 0 86 3 82 0 88 3 82 0 89 3 82 0 91 3 82 0 92 3 82 0 99 3 82 0 100 3 82 0 102 3 82 0 105 3 82 0 106 3 82 0 107 3 82 0 108 3 82 0 112 3 82 0 115 3 82 0 116 3 82 0 121 3 82 0 123 3 82 0 126 3 82 0 131 3 82 0 132 3 82 0 133 3 82 0 134 3 82 0 138 3 82 0 140 3 82 0 142 3 82 0 143 3 82 0 147 3 82 0 150 3 82 0 151 3 82 0 162 3 82 0 167 3 82 0 168 3 82 0 171 1 87 0 172 3 82 0 173 3 82 1 144] 
#[1 3 86 0 11 3 86 0 55 1 91 0 172 3 86 0 173 3 86 1 144] 
#[0 3 90 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 94 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 98 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 102 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 106 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 110 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 114 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 118 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 122 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 126 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 130 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 134 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 138 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 34 0 1 1 95 0 3 3 142 0 4 3 142 0 5 3 142 0 7 1 34 0 9 3 142 0 11 3 142 0 13 3 142 0 22 3 142 0 23 3 142 0 28 3 142 0 29 3 142 0 30 3 142 0 31 3 142 0 32 3 142 0 33 3 142 0 34 3 142 0 35 3 142 0 36 3 142 0 37 3 142 0 38 3 142 0 39 3 142 0 40 3 142 0 41 3 142 0 43 3 142 0 45 3 142 0 55 3 142 0 56 3 142 0 58 3 142 0 59 3 142 0 64 3 142 0 67 3 142 0 73 3 142 0 76 3 142 0 77 3 142 0 82 3 142 0 84 3 142 0 86 3 142 0 88 3 142 0 89 3 142 0 91 3 142 0 92 3 142 0 99 3 142 0 100 3 142 0 102 3 142 0 105 3 142 0 106 3 142 0 107 3 142 0 108 3 142 0 112 3 142 0 115 3 142 0 116 3 142 0 121 3 142 0 123 3 142 0 126 3 142 0 131 3 142 0 132 3 142 0 133 3 142 0 134 3 142 0 138 3 142 0 140 3 142 0 142 3 142 0 143 3 142 0 147 3 142 0 150 3 142 0 151 3 142 0 162 3 142 0 167 3 142 0 168 3 142 0 171 1 99 0 172 3 142 0 173 3 142 1 144] 
#[1 1 242 0 1 1 242 0 3 1 242 0 4 1 242 0 5 1 242 0 7 1 242 0 9 1 242 0 11 1 242 0 13 1 242 0 22 1 242 0 23 1 242 0 28 1 242 0 29 1 242 0 30 1 242 0 31 1 242 0 32 1 242 0 33 1 242 0 34 1 242 0 35 1 242 0 36 1 242 0 37 1 242 0 38 1 242 0 39 1 242 0 40 1 242 0 41 1 242 0 43 1 242 0 45 1 242 0 55 1 242 0 56 1 242 0 58 1 242 0 59 1 242 0 64 1 242 0 67 1 242 0 73 1 242 0 76 1 242 0 77 1 242 0 82 1 242 0 84 1 242 0 86 1 242 0 88 1 242 0 89 1 242 0 91 1 242 0 92 1 242 0 99 1 242 0 100 1 242 0 102 1 242 0 105 1 242 0 106 1 242 0 107 1 242 0 108 1 242 0 112 1 242 0 115 1 242 0 116 1 242 0 121 1 242 0 123 1 242 0 126 1 242 0 131 1 242 0 132 1 242 0 133 1 242 0 134 1 242 0 138 1 242 0 140 1 242 0 142 1 242 0 143 1 242 0 147 1 242 0 150 1 242 0 151 1 242 0 162 1 242 0 167 1 242 0 168 1 242 0 171 1 103 0 172 1 242 0 173 1 242 1 144] 
#[1 1 250 0 1 1 107 0 3 3 146 0 4 3 146 0 5 3 146 0 7 1 250 0 9 3 146 0 11 3 146 0 13 3 146 0 22 3 146 0 23 3 146 0 28 3 146 0 29 3 146 0 30 3 146 0 31 3 146 0 32 3 146 0 33 3 146 0 34 3 146 0 35 3 146 0 36 3 146 0 37 3 146 0 38 3 146 0 39 3 146 0 40 3 146 0 41 3 146 0 43 3 146 0 45 3 146 0 55 3 146 0 56 3 146 0 58 3 146 0 59 3 146 0 64 3 146 0 67 3 146 0 73 3 146 0 76 3 146 0 77 3 146 0 82 3 146 0 84 3 146 0 86 3 146 0 88 3 146 0 89 3 146 0 91 3 146 0 92 3 146 0 99 3 146 0 100 3 146 0 102 3 146 0 105 3 146 0 106 3 146 0 107 3 146 0 108 3 146 0 112 3 146 0 115 3 146 0 116 3 146 0 121 3 146 0 123 3 146 0 126 3 146 0 131 3 146 0 132 3 146 0 133 3 146 0 134 3 146 0 138 3 146 0 140 3 146 0 142 3 146 0 143 3 146 0 147 3 146 0 150 3 146 0 151 3 146 0 162 3 146 0 167 3 146 0 168 3 146 0 171 1 111 0 172 3 146 0 173 3 146 1 144] 
#[1 2 10 0 1 1 115 0 3 3 150 0 4 3 150 0 5 3 150 0 7 2 10 0 9 3 150 0 11 3 150 0 13 3 150 0 22 3 150 0 23 3 150 0 28 3 150 0 29 3 150 0 30 3 150 0 31 3 150 0 32 3 150 0 33 3 150 0 34 3 150 0 35 3 150 0 36 3 150 0 37 3 150 0 38 3 150 0 39 3 150 0 40 3 150 0 41 3 150 0 43 3 150 0 45 3 150 0 55 3 150 0 56 3 150 0 58 3 150 0 59 3 150 0 64 3 150 0 67 3 150 0 73 3 150 0 76 3 150 0 77 3 150 0 82 3 150 0 84 3 150 0 86 3 150 0 88 3 150 0 89 3 150 0 91 3 150 0 92 3 150 0 99 3 150 0 100 3 150 0 102 3 150 0 105 3 150 0 106 3 150 0 107 3 150 0 108 3 150 0 112 3 150 0 115 3 150 0 116 3 150 0 121 3 150 0 123 3 150 0 126 3 150 0 131 3 150 0 132 3 150 0 133 3 150 0 134 3 150 0 138 3 150 0 140 3 150 0 142 3 150 0 143 3 150 0 147 3 150 0 150 3 150 0 151 3 150 0 162 3 150 0 167 3 150 0 168 3 150 0 171 1 119 0 172 3 150 0 173 3 150 1 144] 
#[0 3 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 158 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 241 0 172] 
#[0 7 245 0 172] 
#[0 7 249 0 172] 
#[0 7 253 0 22 0 23 0 43 0 45 0 55 0 56 0 57 0 58 0 59 0 64 0 67 0 77 0 82 0 84 0 88 0 89 0 96 0 107 0 115 0 116 0 123 0 137 0 138 0 143 0 147 0 150 0 167 0 193 0 194] 
#[0 1 123 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 127 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 131 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 135 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 190 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 194 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 198 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 202 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 206 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 210 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 214 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 218 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 222 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 226 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 230 0 1 3 230 0 3 3 230 0 4 3 230 0 5 3 230 0 7 1 139 0 9 3 230 0 11 3 230 0 13 3 230 0 22 3 230 0 23 3 230 0 28 3 230 0 29 3 230 0 30 3 230 0 31 3 230 0 32 3 230 0 33 3 230 0 34 3 230 0 35 3 230 0 36 3 230 0 37 3 230 0 38 3 230 0 39 3 230 0 40 3 230 0 41 3 230 0 43 3 230 0 45 3 230 0 55 3 230 0 56 3 230 0 58 3 230 0 59 3 230 0 64 3 230 0 67 3 230 0 73 3 230 0 76 3 230 0 77 3 230 0 82 3 230 0 84 3 230 0 86 3 230 0 88 3 230 0 89 3 230 0 91 3 230 0 92 3 230 0 99 3 230 0 100 3 230 0 102 3 230 0 105 3 230 0 106 3 230 0 107 3 230 0 108 3 230 0 112 3 230 0 115 3 230 0 116 3 230 0 121 3 230 0 123 3 230 0 126 3 230 0 131 3 230 0 132 3 230 0 133 3 230 0 134 3 230 0 138 3 230 0 140 3 230 0 142 3 230 0 143 3 230 0 147 3 230 0 150 3 230 0 151 3 230 0 162 3 230 0 167 3 230 0 168 3 230 0 171 3 230 0 172 3 230 0 173 5 229 0 225 8 1 0 226 3 230 1 144] 
#[0 3 234 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 242 0 1 3 242 0 3 3 242 0 4 3 242 0 5 3 242 0 7 1 143 0 9 3 242 0 11 3 242 0 13 3 242 0 22 3 242 0 23 3 242 0 28 3 242 0 29 3 242 0 30 3 242 0 31 3 242 0 32 3 242 0 33 3 242 0 34 3 242 0 35 3 242 0 36 3 242 0 37 3 242 0 38 3 242 0 39 3 242 0 40 3 242 0 41 3 242 0 43 3 242 0 45 3 242 0 55 3 242 0 56 3 242 0 58 3 242 0 59 3 242 0 64 3 242 0 67 3 242 0 73 3 242 0 76 3 242 0 77 3 242 0 82 3 242 0 84 3 242 0 86 3 242 0 88 3 242 0 89 3 242 0 91 3 242 0 92 3 242 0 99 3 242 0 100 3 242 0 102 3 242 0 105 3 242 0 106 3 242 0 107 3 242 0 108 3 242 0 112 3 242 0 115 3 242 0 116 3 242 0 121 3 242 0 123 3 242 0 126 3 242 0 131 3 242 0 132 3 242 0 133 3 242 0 134 3 242 0 138 3 242 0 140 3 242 0 142 3 242 0 143 3 242 0 147 3 242 0 150 3 242 0 151 3 242 0 162 3 242 0 167 3 242 0 168 3 242 0 171 3 242 0 172 3 242 0 173 8 5 0 225 3 242 1 144] 
#[0 3 246 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 9 0 172] 
#[1 8 13 0 7 8 17 0 172] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 3 250 0 11 3 250 0 55 3 250 0 172 3 250 0 173 3 250 1 144] 
#[0 1 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 10 0 1 2 14 0 3 2 10 0 9 3 254 0 11 3 254 0 55 3 254 0 172 3 254 0 173 3 254 1 144] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 8 21 0 172] 
#[0 4 2 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 242 0 1 1 242 0 3 1 242 0 9 8 25 0 172] 
#[1 4 81 0 7 4 6 0 11 4 6 0 22 4 6 0 23 4 6 0 28 4 6 0 29 4 6 0 30 4 6 0 31 4 6 0 32 4 6 0 33 4 6 0 34 4 6 0 35 4 6 0 36 4 6 0 37 4 6 0 38 4 6 0 39 4 6 0 40 4 6 0 41 4 6 0 43 4 6 0 45 4 6 0 55 4 6 0 56 4 6 0 58 4 6 0 59 4 6 0 64 4 6 0 67 4 6 0 73 4 6 0 76 4 6 0 77 4 6 0 84 4 6 0 86 4 6 0 88 4 6 0 89 4 6 0 91 4 6 0 92 4 6 0 100 4 6 0 102 4 6 0 105 4 6 0 106 4 6 0 107 4 6 0 108 4 6 0 112 4 6 0 115 4 6 0 116 4 6 0 123 4 6 0 126 4 6 0 131 4 6 0 132 4 6 0 133 4 6 0 134 4 6 0 138 4 6 0 140 4 6 0 142 4 6 0 143 4 6 0 147 4 6 0 150 4 6 0 167 4 6 0 168 4 6 0 171 1 147 0 172 4 6 0 173 4 89 1 35 4 93 1 36 4 6 1 144] 
#[0 4 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 29 0 172] 
#[1 8 33 0 3 4 53 0 5 1 151 0 7 1 151 0 11 1 151 0 22 1 151 0 23 1 151 0 28 1 151 0 29 1 151 0 30 1 151 0 31 1 151 0 32 1 151 0 33 1 151 0 34 1 151 0 35 1 151 0 36 1 151 0 37 1 151 0 38 1 151 0 39 1 151 0 40 1 151 0 41 1 151 0 43 1 151 0 45 1 151 0 55 1 151 0 56 1 151 0 58 1 151 0 59 1 151 0 64 1 151 0 67 1 151 0 73 1 151 0 76 1 151 0 77 1 151 0 84 1 151 0 86 1 151 0 88 1 151 0 89 1 151 0 91 1 151 0 92 1 151 0 100 1 151 0 102 1 151 0 105 1 151 0 106 1 151 0 107 1 151 0 108 1 151 0 112 1 151 0 115 1 151 0 116 1 151 0 123 1 151 0 126 1 151 0 131 1 151 0 132 1 151 0 133 1 151 0 134 1 151 0 138 1 151 0 140 1 151 0 142 1 151 0 143 1 151 0 147 1 151 0 150 1 151 0 167 1 151 0 168 1 151 0 171 1 155 0 172 1 151 0 173 8 45 0 228 8 45 0 229 8 41 0 230 8 45 0 233 1 151 1 144] 
#[1 8 49 0 7 4 18 0 11 4 18 0 22 4 18 0 23 4 18 0 28 4 18 0 29 4 18 0 30 4 18 0 31 4 18 0 32 4 18 0 33 4 18 0 34 4 18 0 35 4 18 0 36 4 18 0 37 4 18 0 38 4 18 0 39 4 18 0 40 4 18 0 41 4 18 0 43 4 18 0 45 4 18 0 55 4 18 0 56 4 18 0 58 4 18 0 59 4 18 0 64 4 18 0 67 4 18 0 73 4 18 0 76 4 18 0 77 4 18 0 84 4 18 0 86 4 18 0 88 4 18 0 89 4 18 0 91 4 18 0 92 4 18 0 100 4 18 0 102 4 18 0 105 4 18 0 106 4 18 0 107 4 18 0 108 4 18 0 112 4 18 0 115 4 18 0 116 4 18 0 123 4 18 0 126 4 18 0 131 4 18 0 132 4 18 0 133 4 18 0 134 4 18 0 138 4 18 0 140 4 18 0 142 4 18 0 143 4 18 0 147 4 18 0 150 4 18 0 167 4 18 0 168 4 18 0 171 1 159 0 172 4 18 0 173 8 57 1 32 8 61 1 33 4 18 1 144] 
#[0 4 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 65 0 152] 
#[0 4 26 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 69 0 172] 
#[0 8 73 0 172] 
#[0 8 77 0 121] 
#[0 4 30 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 82 0 84 0 86 0 88 0 89 0 92 0 93 0 96 0 98 0 99 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 121 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 8 81 0 172] 
#[1 2 214 0 11 2 214 0 172 2 214 0 173 8 85 0 215] 
#[1 8 89 0 11 8 93 0 172 8 97 0 173 8 101 0 207 8 105 0 214 8 109 0 216 8 113 0 217] 
#[1 4 34 0 11 4 34 0 55 1 163 0 172 4 34 0 173 4 34 1 144] 
#[0 8 121 0 172] 
#[1 4 38 0 22 4 38 0 23 4 38 0 43 4 38 0 45 4 38 0 55 4 38 0 56 4 38 0 58 4 38 0 59 4 38 0 64 4 38 0 67 4 38 0 77 4 38 0 84 4 38 0 88 4 38 0 89 4 38 0 99 4 38 0 107 4 38 0 115 4 38 0 116 4 38 0 123 4 38 0 138 4 38 0 143 4 38 0 150 4 38 0 167 4 38 0 168 4 38 0 171 4 38 0 173 8 125 0 250] 
#[1 8 129 0 3 8 133 0 172 8 137 0 253] 
#[0 4 42 0 11 0 55 0 172 0 173 1 144] 
#[0 4 46 0 11 0 55 0 172 0 173 1 144] 
#[0 4 50 0 11 0 55 0 172 0 173 1 144] 
#[0 4 54 0 11 0 55 0 172 0 173 1 144] 
#[0 4 58 0 11 0 55 0 172 0 173 1 144] 
#[0 4 62 0 7 0 11 0 55 0 172 0 173 1 144] 
#[0 4 66 0 7 0 11 0 55 0 172 0 173 1 144] 
#[0 4 70 0 7 0 11 0 55 0 172 0 173 1 144] 
#[1 4 74 0 7 4 74 0 11 4 74 0 55 4 74 0 172 4 74 0 173 8 141 1 108 4 74 1 144] 
#[0 4 78 0 11 0 55 0 172 0 173 1 144] 
#[0 4 82 0 11 0 55 0 172 0 173 1 144] 
#[0 8 145 0 172] 
#[0 8 149 0 172] 
#[1 0 26 0 1 0 26 0 3 0 26 0 9 1 167 0 172] 
#[0 8 157 0 172] 
#[0 8 161 0 172] 
#[0 8 165 0 172] 
#[1 0 150 0 1 8 33 0 3 4 53 0 5 1 151 0 7 0 150 0 9 1 171 0 11 1 171 0 22 1 171 0 23 1 171 0 28 1 171 0 29 1 171 0 30 1 171 0 31 1 171 0 32 1 171 0 33 1 171 0 34 1 171 0 35 1 171 0 36 1 171 0 37 1 171 0 38 1 171 0 39 1 171 0 40 1 171 0 41 1 171 0 43 1 171 0 45 1 171 0 55 1 171 0 56 1 171 0 58 1 171 0 59 1 171 0 64 1 171 0 67 1 171 0 73 1 171 0 76 1 171 0 77 1 171 0 84 1 171 0 86 1 171 0 88 1 171 0 89 1 171 0 91 1 171 0 92 1 171 0 100 1 171 0 102 1 171 0 105 1 171 0 106 1 171 0 107 1 171 0 108 1 171 0 112 1 171 0 115 1 171 0 116 1 171 0 123 1 171 0 126 1 171 0 131 1 171 0 132 1 171 0 133 1 171 0 134 1 171 0 138 1 171 0 140 1 171 0 142 1 171 0 143 1 171 0 147 1 171 0 150 1 171 0 167 1 171 0 168 1 171 0 171 1 175 0 172 1 171 0 173 8 45 0 228 8 45 0 229 8 41 0 230 8 45 0 233 1 171 1 144] 
#[1 8 49 0 7 4 86 0 11 4 86 0 22 4 86 0 23 4 86 0 28 4 86 0 29 4 86 0 30 4 86 0 31 4 86 0 32 4 86 0 33 4 86 0 34 4 86 0 35 4 86 0 36 4 86 0 37 4 86 0 38 4 86 0 39 4 86 0 40 4 86 0 41 4 86 0 43 4 86 0 45 4 86 0 55 4 86 0 56 4 86 0 58 4 86 0 59 4 86 0 64 4 86 0 67 4 86 0 73 4 86 0 76 4 86 0 77 4 86 0 84 4 86 0 86 4 86 0 88 4 86 0 89 4 86 0 91 4 86 0 92 4 86 0 100 4 86 0 102 4 86 0 105 4 86 0 106 4 86 0 107 4 86 0 108 4 86 0 112 4 86 0 115 4 86 0 116 4 86 0 123 4 86 0 126 4 86 0 131 4 86 0 132 4 86 0 133 4 86 0 134 4 86 0 138 4 86 0 140 4 86 0 142 4 86 0 143 4 86 0 147 4 86 0 150 4 86 0 167 4 86 0 168 4 86 0 171 1 179 0 172 4 86 0 173 8 57 1 32 8 61 1 33 4 86 1 144] 
#[0 4 90 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 94 0 11 4 94 0 22 4 94 0 23 4 94 0 28 4 94 0 29 4 94 0 30 4 94 0 31 4 94 0 32 4 94 0 33 4 94 0 34 4 94 0 35 4 94 0 36 4 94 0 37 4 94 0 38 4 94 0 39 4 94 0 40 4 94 0 41 4 94 0 43 4 94 0 45 4 94 0 55 4 94 0 56 4 94 0 58 4 94 0 59 4 94 0 64 4 94 0 67 4 94 0 73 4 94 0 76 4 94 0 77 4 94 0 84 4 94 0 86 4 94 0 88 4 94 0 89 4 94 0 91 4 94 0 92 4 94 0 100 4 94 0 102 4 94 0 105 4 94 0 106 4 94 0 107 4 94 0 108 4 94 0 112 4 94 0 115 4 94 0 116 4 94 0 123 4 94 0 126 4 94 0 131 4 94 0 132 4 94 0 133 4 94 0 134 4 94 0 138 4 94 0 140 4 94 0 142 4 94 0 143 4 94 0 147 4 94 0 150 4 94 0 167 4 94 0 168 4 94 0 171 1 183 0 172 4 94 0 173 4 94 1 144] 
#[1 0 34 0 7 1 187 0 11 1 187 0 55 1 187 0 172 1 187 0 173 1 187 1 144] 
#[0 4 102 0 11 0 55 0 172 0 173 1 144] 
#[0 8 173 0 172] 
#[1 8 49 0 7 4 106 0 11 4 106 0 22 4 106 0 23 4 106 0 28 4 106 0 29 4 106 0 30 4 106 0 31 4 106 0 32 4 106 0 33 4 106 0 34 4 106 0 35 4 106 0 36 4 106 0 37 4 106 0 38 4 106 0 39 4 106 0 40 4 106 0 41 4 106 0 43 4 106 0 45 4 106 0 55 4 106 0 56 4 106 0 58 4 106 0 59 4 106 0 64 4 106 0 67 4 106 0 73 4 106 0 76 4 106 0 77 4 106 0 84 4 106 0 86 4 106 0 88 4 106 0 89 4 106 0 91 4 106 0 92 4 106 0 100 4 106 0 102 4 106 0 105 4 106 0 106 4 106 0 107 4 106 0 108 4 106 0 112 4 106 0 115 4 106 0 116 4 106 0 123 4 106 0 126 4 106 0 131 4 106 0 132 4 106 0 133 4 106 0 134 4 106 0 138 4 106 0 140 4 106 0 142 4 106 0 143 4 106 0 147 4 106 0 150 4 106 0 167 4 106 0 168 4 106 0 171 1 191 0 172 4 106 0 173 8 57 1 32 8 61 1 33 4 106 1 144] 
#[0 4 110 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 114 0 22 4 114 0 23 4 114 0 43 4 114 0 45 4 114 0 55 4 114 0 56 4 114 0 58 4 114 0 59 4 114 0 64 4 114 0 67 4 114 0 77 4 114 0 84 4 114 0 88 4 114 0 89 4 114 0 99 4 114 0 107 4 114 0 115 4 114 0 116 4 114 0 123 4 114 0 138 4 114 0 143 4 114 0 150 4 114 0 167 4 114 0 168 4 114 0 171 4 114 0 173 8 177 0 245] 
#[1 8 181 0 151 3 213 0 162 7 233 0 172 3 221 0 173 8 185 0 182 3 229 0 207 8 189 0 213] 
#[1 7 233 0 172 3 221 0 173 3 229 0 207 8 193 0 213] 
#[0 8 197 0 74] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 201 0 180 8 201 0 181 8 201 0 182 8 201 0 183 8 201 0 184 8 201 0 185 8 201 0 186 8 201 0 187 8 201 0 188 8 201 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 8 201 1 38 8 201 1 39 8 201 1 40 8 201 1 41 8 201 1 42 8 201 1 43 8 201 1 44 8 201 1 45 8 201 1 46 8 201 1 48 8 201 1 50 8 201 1 52 8 201 1 54 8 201 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 8 201 1 141 8 201 1 143] 
#[1 4 118 0 3 4 118 0 4 4 118 0 5 4 118 0 7 4 118 0 11 4 118 0 22 4 118 0 23 4 118 0 28 4 118 0 29 4 118 0 30 4 118 0 31 4 118 0 32 4 118 0 33 4 118 0 34 4 118 0 35 4 118 0 36 4 118 0 37 4 118 0 38 4 118 0 39 4 118 0 40 4 118 0 41 4 118 0 43 4 118 0 45 4 118 0 55 4 118 0 56 4 118 0 58 4 118 0 59 4 118 0 64 4 118 0 67 4 118 0 73 4 118 0 76 4 118 0 77 4 118 0 84 4 118 0 86 4 118 0 88 4 118 0 89 4 118 0 91 4 118 0 92 4 118 0 99 4 118 0 100 4 118 0 102 4 118 0 105 4 118 0 106 4 118 0 107 4 118 0 108 4 118 0 112 4 118 0 115 4 118 0 116 4 118 0 123 4 118 0 126 4 118 0 131 4 118 0 132 4 118 0 133 4 118 0 134 4 118 0 138 4 118 0 140 4 118 0 142 4 118 0 143 4 118 0 147 4 118 0 150 4 118 0 167 4 118 0 168 4 118 0 171 1 195 0 172 4 118 0 173 4 118 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 205 0 172 8 209 0 180 8 209 0 181 8 209 0 182 8 209 0 183 8 209 0 184 8 209 0 185 8 209 0 186 8 209 0 187 8 209 0 188 8 209 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 8 209 1 38 8 209 1 39 8 209 1 40 8 209 1 41 8 209 1 42 8 209 1 43 8 209 1 44 8 209 1 45 8 209 1 46 8 209 1 48 8 209 1 50 8 209 1 52 8 209 1 54 8 209 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 8 209 1 141 8 209 1 143] 
#[0 8 213 0 172] 
#[0 8 217 0 172] 
#[0 8 221 0 172] 
#[0 8 225 0 18] 
#[0 8 229 0 172] 
#[0 8 233 0 172] 
#[0 8 237 0 172] 
#[0 8 241 0 172] 
#[1 8 49 0 7 4 122 0 11 4 122 0 22 4 122 0 23 4 122 0 28 4 122 0 29 4 122 0 30 4 122 0 31 4 122 0 32 4 122 0 33 4 122 0 34 4 122 0 35 4 122 0 36 4 122 0 37 4 122 0 38 4 122 0 39 4 122 0 40 4 122 0 41 4 122 0 43 4 122 0 45 4 122 0 55 4 122 0 56 4 122 0 58 4 122 0 59 4 122 0 64 4 122 0 67 4 122 0 73 4 122 0 76 4 122 0 77 4 122 0 84 4 122 0 86 4 122 0 88 4 122 0 89 4 122 0 91 4 122 0 92 4 122 0 100 4 122 0 102 4 122 0 105 4 122 0 106 4 122 0 107 4 122 0 108 4 122 0 112 4 122 0 115 4 122 0 116 4 122 0 123 4 122 0 126 4 122 0 131 4 122 0 132 4 122 0 133 4 122 0 134 4 122 0 138 4 122 0 140 4 122 0 142 4 122 0 143 4 122 0 147 4 122 0 150 4 122 0 167 4 122 0 168 4 122 0 171 1 199 0 172 4 122 0 173 8 57 1 32 8 61 1 33 4 122 1 144] 
#[0 4 126 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 150 0 1 0 154 0 3 0 150 0 9 1 203 0 172] 
#[1 4 97 0 1 4 101 0 9 8 249 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 8 253 1 25] 
#[0 4 130 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 9 1 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 9 5 1 25] 
#[0 4 134 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 138 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 142 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 9 0 172] 
#[0 9 13 0 172] 
#[0 4 146 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 150 0 4 4 221 0 6 9 17 0 7 4 225 0 8 0 33 0 9 4 150 0 11 1 207 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 211 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 1 215 0 172 4 150 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 9 57 1 132 9 61 1 134 9 65 1 137 9 53 1 141 9 53 1 143 4 150 1 144] 
#[1 2 238 0 1 2 238 0 3 2 238 0 4 2 238 0 6 2 238 0 7 2 238 0 8 2 238 0 9 2 238 0 13 2 238 0 22 2 238 0 23 2 238 0 25 2 238 0 43 2 238 0 45 2 238 0 54 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 67 2 238 0 77 2 238 0 79 2 238 0 81 2 238 0 84 2 238 0 88 2 238 0 89 2 238 0 107 2 238 0 115 2 238 0 116 2 238 0 123 2 238 0 124 2 238 0 129 2 238 0 138 2 238 0 143 2 238 0 150 2 238 0 155 2 238 0 160 2 238 0 161 2 238 0 162 2 238 0 163 2 238 0 164 2 238 0 165 2 238 0 166 2 238 0 167 2 238 0 168 2 238 0 170 2 238 0 171 2 238 0 172 9 69 1 133 7 53 1 135] 
#[1 9 73 0 4 9 77 0 172] 
#[1 4 154 0 99 4 154 0 173 9 81 0 206] 
#[0 9 85 0 172] 
#[0 9 89 0 172] 
#[1 8 129 0 3 9 93 0 172 9 97 0 253] 
#[1 0 150 0 1 1 219 0 3 0 150 0 4 0 150 0 5 0 150 0 7 0 150 0 9 0 150 0 11 0 150 0 13 0 150 0 22 0 150 0 23 0 150 0 28 0 150 0 29 0 150 0 30 0 150 0 31 0 150 0 32 0 150 0 33 0 150 0 34 0 150 0 35 0 150 0 36 0 150 0 37 0 150 0 38 0 150 0 39 0 150 0 40 0 150 0 41 0 150 0 43 0 150 0 45 0 150 0 55 0 150 0 56 0 150 0 58 0 150 0 59 0 150 0 64 0 150 0 67 0 150 0 73 0 150 0 76 0 150 0 77 0 150 0 82 0 150 0 84 0 150 0 86 0 150 0 88 0 150 0 89 0 150 0 91 0 150 0 92 0 150 0 99 0 150 0 100 0 150 0 102 0 150 0 105 0 150 0 106 0 150 0 107 0 150 0 108 0 150 0 112 0 150 0 115 0 150 0 116 0 150 0 121 0 150 0 123 0 150 0 126 0 150 0 131 0 150 0 132 0 150 0 133 0 150 0 134 0 150 0 138 0 150 0 140 0 150 0 142 0 150 0 143 0 150 0 147 0 150 0 150 0 150 0 151 0 150 0 162 0 150 0 167 0 150 0 168 0 150 0 171 0 150 0 172 0 150 0 173 0 150 1 144] 
#[1 4 97 0 1 4 101 0 9 4 158 0 22 4 158 0 23 4 158 0 28 4 158 0 29 4 158 0 30 4 158 0 31 4 158 0 32 4 158 0 33 4 158 0 34 4 158 0 35 4 158 0 36 4 158 0 37 4 158 0 38 4 158 0 39 4 158 0 40 4 158 0 41 4 158 0 43 4 158 0 45 4 158 0 55 4 158 0 56 4 158 0 58 4 158 0 59 4 158 0 64 4 158 0 67 4 158 0 73 4 158 0 76 4 158 0 77 4 158 0 84 4 158 0 86 4 158 0 88 4 158 0 89 4 158 0 91 4 158 0 92 4 158 0 100 4 158 0 102 4 158 0 105 4 158 0 106 4 158 0 107 4 158 0 108 4 158 0 112 4 158 0 115 4 158 0 116 4 158 0 123 4 158 0 126 4 158 0 131 4 158 0 132 4 158 0 133 4 158 0 134 4 158 0 138 4 158 0 140 4 158 0 142 4 158 0 143 4 158 0 147 4 158 0 150 4 158 0 167 4 158 0 168 4 158 0 171 4 158 0 172 4 158 0 173 4 158 1 144] 
#[0 9 101 0 172] 
#[0 4 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 105 0 172] 
#[0 4 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 109 0 172] 
#[0 9 113 0 172] 
#[0 9 117 0 172] 
#[1 8 129 0 3 9 121 0 172 4 170 0 173 9 125 0 253 9 129 1 13] 
#[1 8 197 0 74 9 133 0 85 9 137 0 104 9 141 0 131 3 213 0 162 9 145 0 182] 
#[0 9 149 0 172] 
#[0 4 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 153 0 172] 
#[0 9 157 0 172] 
#[0 9 161 0 172] 
#[0 9 165 0 172] 
#[0 9 169 0 172] 
#[0 9 173 0 172] 
#[0 9 177 0 172] 
#[0 9 181 0 172] 
#[1 4 178 0 22 4 178 0 23 4 178 0 28 4 178 0 29 4 178 0 30 4 178 0 31 4 178 0 32 4 178 0 33 4 178 0 34 4 178 0 35 4 178 0 36 4 178 0 37 4 178 0 38 4 178 0 39 4 178 0 40 4 178 0 41 4 178 0 43 4 178 0 45 4 178 0 55 4 178 0 56 4 178 0 58 4 178 0 59 4 178 0 64 4 178 0 67 4 178 0 73 4 178 0 76 4 178 0 77 9 185 0 83 4 178 0 84 4 178 0 86 4 178 0 88 4 178 0 89 4 178 0 91 4 178 0 92 4 178 0 100 4 178 0 102 4 178 0 105 4 178 0 106 4 178 0 107 4 178 0 108 4 178 0 112 4 178 0 115 4 178 0 116 4 178 0 123 4 178 0 126 4 178 0 131 4 178 0 132 4 178 0 133 4 178 0 134 4 178 0 138 4 178 0 140 4 178 0 142 4 178 0 143 4 178 0 147 4 178 0 150 4 178 0 167 4 178 0 168 4 178 0 171 4 178 0 172 4 178 0 173 4 178 1 144] 
#[1 4 249 0 163 9 189 0 185] 
#[0 4 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 9 193 0 177 4 181 0 178 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 67 0 10 0 73 0 10 0 76 0 10 0 77 0 10 0 84 0 10 0 86 0 10 0 88 0 10 0 89 0 10 0 91 0 10 0 92 0 10 0 100 0 10 0 102 0 10 0 105 0 10 0 106 0 10 0 107 0 10 0 108 0 10 0 112 0 10 0 115 0 10 0 116 0 10 0 123 0 10 0 126 0 10 0 131 0 10 0 132 0 10 0 133 0 10 0 134 0 10 0 138 0 10 0 140 0 10 0 142 0 10 0 143 0 10 0 147 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 9 197 0 179 0 10 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 173 0 200 7 173 0 201 7 173 0 203 7 173 0 204 7 173 0 208 3 21 0 209 7 173 0 210 7 173 0 211 3 33 0 223 7 173 0 242 7 173 0 243 7 173 0 247 7 173 0 248 7 173 1 5 7 173 1 6 7 173 1 7 3 53 1 8 7 173 1 9 7 173 1 12 7 173 1 14 7 173 1 15 7 173 1 16 7 173 1 17 7 173 1 18 7 173 1 19 7 173 1 20 7 173 1 21 7 173 1 22 7 173 1 23 1 125 1 25 7 173 1 26 7 173 1 27 7 173 1 28 7 173 1 29 7 173 1 30 7 173 1 34 7 173 1 37 4 186 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 9 201 0 180 9 201 0 181 9 201 0 182 9 201 0 183 9 201 0 184 9 201 0 185 9 201 0 186 9 201 0 187 9 201 0 188 9 201 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 9 201 1 38 9 201 1 39 9 201 1 40 9 201 1 41 9 201 1 42 9 201 1 43 9 201 1 44 9 201 1 45 9 201 1 46 9 201 1 48 9 201 1 50 9 201 1 52 9 201 1 54 9 201 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 9 201 1 141 9 201 1 143] 
#[1 9 205 0 4 9 209 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 4 249 0 163 1 17 0 167 1 1 0 168 1 5 0 171 9 213 0 182 9 217 0 185 7 81 0 191 1 17 0 194 7 81 0 195 7 81 0 196 7 81 0 197 1 157 1 56 1 157 1 57 1 157 1 58 9 221 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 4 190 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 194 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 4 198 0 3 4 198 0 4 4 198 0 5 4 198 0 7 4 101 0 9 4 198 0 11 4 198 0 13 4 198 0 22 4 198 0 23 4 198 0 28 4 198 0 29 4 198 0 30 4 198 0 31 4 198 0 32 4 198 0 33 4 198 0 34 4 198 0 35 4 198 0 36 4 198 0 37 4 198 0 38 4 198 0 39 4 198 0 40 4 198 0 41 4 198 0 43 4 198 0 45 4 198 0 55 4 198 0 56 4 198 0 58 4 198 0 59 4 198 0 64 4 198 0 67 4 198 0 73 4 198 0 76 4 198 0 77 4 198 0 82 4 198 0 84 4 198 0 86 4 198 0 88 4 198 0 89 4 198 0 91 4 198 0 92 4 198 0 99 4 198 0 100 4 198 0 102 4 198 0 105 4 198 0 106 4 198 0 107 4 198 0 108 4 198 0 112 4 198 0 115 4 198 0 116 4 198 0 121 4 198 0 123 4 198 0 126 4 198 0 131 4 198 0 132 4 198 0 133 4 198 0 134 4 198 0 138 4 198 0 140 4 198 0 142 4 198 0 143 4 198 0 147 4 198 0 150 4 198 0 151 4 198 0 162 4 198 0 167 4 198 0 168 4 198 0 171 4 198 0 172 4 198 0 173 4 198 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 9 225 1 132 9 53 1 141 9 53 1 143] 
#[1 0 29 0 1 4 217 0 3 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 4 253 0 164 1 17 0 167 1 1 0 168 1 5 0 171 9 229 0 186 7 81 0 191 1 17 0 194 7 81 0 195 7 81 0 196 7 81 0 197 9 233 1 39 1 157 1 56 1 157 1 57 1 157 1 58 9 237 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131 9 241 1 141] 
#[0 4 202 0 8 0 156 0 159] 
#[1 9 245 0 8 9 249 0 159] 
#[0 9 253 0 18] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 10 97 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 101 0 191 1 17 0 194 10 101 0 195 10 101 0 196 10 101 0 197] 
#[0 10 105 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 10 109 0 181 10 113 0 191 1 17 0 194 10 113 0 195 10 113 0 196 10 113 0 197] 
#[0 4 206 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 210 0 1 4 210 0 3 4 210 0 4 4 210 0 5 4 210 0 7 1 223 0 9 4 210 0 11 4 210 0 13 4 210 0 22 4 210 0 23 4 210 0 28 4 210 0 29 4 210 0 30 4 210 0 31 4 210 0 32 4 210 0 33 4 210 0 34 4 210 0 35 4 210 0 36 4 210 0 37 4 210 0 38 4 210 0 39 4 210 0 40 4 210 0 41 4 210 0 43 4 210 0 45 4 210 0 55 4 210 0 56 4 210 0 58 4 210 0 59 4 210 0 64 4 210 0 67 4 210 0 73 4 210 0 76 4 210 0 77 4 210 0 82 4 210 0 84 4 210 0 86 4 210 0 88 4 210 0 89 4 210 0 91 4 210 0 92 4 210 0 99 4 210 0 100 4 210 0 102 4 210 0 105 4 210 0 106 4 210 0 107 4 210 0 108 4 210 0 112 4 210 0 115 4 210 0 116 4 210 0 121 4 210 0 123 4 210 0 126 4 210 0 131 4 210 0 132 4 210 0 133 4 210 0 134 4 210 0 138 4 210 0 140 4 210 0 142 4 210 0 143 4 210 0 147 4 210 0 150 4 210 0 151 4 210 0 162 4 210 0 167 4 210 0 168 4 210 0 171 4 210 0 172 4 210 0 173 8 5 0 225 4 210 1 144] 
#[0 4 214 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 117 0 44 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 218 0 11 4 218 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 227 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 1 231 0 172 4 218 0 173 10 125 0 180 10 125 0 181 10 125 0 182 10 125 0 183 10 125 0 184 10 125 0 185 10 125 0 186 10 125 0 187 10 125 0 188 10 125 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 125 1 38 10 125 1 39 10 125 1 40 10 125 1 41 10 125 1 42 10 125 1 43 10 125 1 44 10 125 1 45 10 125 1 46 10 125 1 48 10 125 1 50 10 125 1 52 10 125 1 54 10 125 1 55 5 113 1 56 5 113 1 57 5 113 1 58 10 129 1 66 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 10 125 1 141 10 125 1 143 4 218 1 144] 
#[0 10 133 0 7] 
#[0 10 137 0 18] 
#[0 10 141 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 145 0 191 1 17 0 194 10 145 0 195 10 145 0 196 10 145 0 197] 
#[1 0 29 0 1 4 217 0 3 4 222 0 4 4 221 0 6 4 222 0 7 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 10 153 0 180 10 153 0 181 10 153 0 182 10 153 0 183 10 153 0 184 10 153 0 185 10 153 0 186 10 153 0 187 10 153 0 188 10 153 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 149 0 232 10 153 1 38 10 153 1 39 10 153 1 40 10 153 1 41 10 153 1 42 10 153 1 43 10 153 1 44 10 153 1 45 10 153 1 46 10 153 1 48 10 153 1 50 10 153 1 52 10 153 1 54 10 153 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 10 153 1 141 10 153 1 143] 
#[1 6 221 0 5 6 233 0 24] 
#[1 4 53 0 5 1 235 0 7 1 235 0 11 1 235 0 22 1 235 0 23 1 235 0 28 1 235 0 29 1 235 0 30 1 235 0 31 1 235 0 32 1 235 0 33 1 235 0 34 1 235 0 35 1 235 0 36 1 235 0 37 1 235 0 38 1 235 0 39 1 235 0 40 1 235 0 41 1 235 0 43 1 235 0 45 1 235 0 55 1 235 0 56 1 235 0 58 1 235 0 59 1 235 0 64 1 235 0 67 1 235 0 73 1 235 0 76 1 235 0 77 1 235 0 84 1 235 0 86 1 235 0 88 1 235 0 89 1 235 0 91 1 235 0 92 1 235 0 100 1 235 0 102 1 235 0 105 1 235 0 106 1 235 0 107 1 235 0 108 1 235 0 112 1 235 0 115 1 235 0 116 1 235 0 123 1 235 0 126 1 235 0 131 1 235 0 132 1 235 0 133 1 235 0 134 1 235 0 138 1 235 0 140 1 235 0 142 1 235 0 143 1 235 0 147 1 235 0 150 1 235 0 167 1 235 0 168 1 235 0 171 1 239 0 172 1 235 0 173 10 157 0 228 10 157 0 229 10 157 0 233 1 235 1 144] 
#[0 4 230 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 161 0 172 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 10 165 1 24] 
#[0 10 169 0 7] 
#[0 4 234 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 49 0 7 4 238 0 11 4 238 0 22 4 238 0 23 4 238 0 28 4 238 0 29 4 238 0 30 4 238 0 31 4 238 0 32 4 238 0 33 4 238 0 34 4 238 0 35 4 238 0 36 4 238 0 37 4 238 0 38 4 238 0 39 4 238 0 40 4 238 0 41 4 238 0 43 4 238 0 45 4 238 0 55 4 238 0 56 4 238 0 58 4 238 0 59 4 238 0 64 4 238 0 67 4 238 0 73 4 238 0 76 4 238 0 77 4 238 0 84 4 238 0 86 4 238 0 88 4 238 0 89 4 238 0 91 4 238 0 92 4 238 0 100 4 238 0 102 4 238 0 105 4 238 0 106 4 238 0 107 4 238 0 108 4 238 0 112 4 238 0 115 4 238 0 116 4 238 0 123 4 238 0 126 4 238 0 131 4 238 0 132 4 238 0 133 4 238 0 134 4 238 0 138 4 238 0 140 4 238 0 142 4 238 0 143 4 238 0 147 4 238 0 150 4 238 0 167 4 238 0 168 4 238 0 171 1 243 0 172 4 238 0 173 10 173 1 32 4 238 1 144] 
#[0 10 177 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 10 181 0 180 10 181 0 181 10 181 0 182 10 181 0 183 10 181 0 184 10 181 0 185 10 181 0 186 10 181 0 187 10 181 0 188 10 181 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 181 1 38 10 181 1 39 10 181 1 40 10 181 1 41 10 181 1 42 10 181 1 43 10 181 1 44 10 181 1 45 10 181 1 46 10 181 1 48 10 181 1 50 10 181 1 52 10 181 1 54 10 181 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 10 181 1 141 10 181 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 10 185 0 180 10 185 0 181 10 185 0 182 10 185 0 183 10 185 0 184 10 185 0 185 10 185 0 186 10 185 0 187 10 185 0 188 10 185 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 10 185 1 38 10 185 1 39 10 185 1 40 10 185 1 41 10 185 1 42 10 185 1 43 10 185 1 44 10 185 1 45 10 185 1 46 10 185 1 48 10 185 1 50 10 185 1 52 10 185 1 54 10 185 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 10 185 1 141 10 185 1 143] 
#[1 4 242 0 11 4 242 0 55 1 247 0 172 4 242 0 173 4 242 1 144] 
#[1 0 29 0 1 0 33 0 9 2 214 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 10 193 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 59 0 172 2 214 0 173 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 10 193 0 201 10 193 0 203 10 193 0 212 10 197 0 215 1 49 0 223 10 193 0 234 1 57 0 235 10 193 0 236 10 193 0 237 10 193 0 238 10 193 0 239 10 193 0 240 10 193 0 241 10 193 0 242 10 193 0 243 10 193 0 247 10 193 0 248 10 193 1 18 10 193 1 19 10 193 1 20 10 193 1 21 10 193 1 22 10 193 1 23 1 125 1 25 10 193 1 26 10 193 1 27 10 193 1 28 10 193 1 29 10 193 1 30 10 193 1 34 10 193 1 37 1 157 1 56 1 157 1 57 1 157 1 58 10 193 1 62 10 193 1 63 10 193 1 64 10 193 1 67 10 193 1 68 10 193 1 69 10 193 1 70 10 193 1 71 10 193 1 72 10 193 1 73 10 193 1 74 10 193 1 75 10 193 1 76 10 193 1 77 10 193 1 78 10 193 1 79 10 193 1 80 10 193 1 81 10 193 1 82 10 193 1 83 10 193 1 84 10 193 1 85 10 193 1 90 10 193 1 91 2 9 1 92 10 193 1 97 10 193 1 100 10 193 1 101 10 193 1 102 10 193 1 103 10 193 1 104 10 193 1 109 10 193 1 110 10 193 1 111 10 193 1 112 10 193 1 113 10 193 1 114 10 193 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 10 193 1 129 2 117 1 130 2 121 1 131 10 193 1 139 10 193 1 140 10 193 1 142] 
#[1 8 89 0 11 8 93 0 172 8 97 0 173 10 201 0 207 8 105 0 214 8 109 0 216 8 113 0 217] 
#[1 4 246 0 1 4 246 0 9 4 246 0 11 4 246 0 22 4 246 0 23 4 246 0 25 4 246 0 27 4 246 0 42 4 246 0 43 4 246 0 44 4 246 0 45 4 246 0 49 4 246 0 54 4 246 0 55 4 246 0 56 4 246 0 57 4 246 0 58 4 246 0 59 4 246 0 60 4 246 0 64 4 246 0 67 4 246 0 73 4 246 0 75 4 246 0 77 4 246 0 84 4 246 0 86 4 246 0 88 4 246 0 89 4 246 0 92 4 246 0 93 4 246 0 100 4 246 0 102 4 246 0 103 4 246 0 105 4 246 0 107 4 246 0 108 4 246 0 109 4 246 0 110 4 246 0 111 4 246 0 115 4 246 0 116 4 246 0 123 4 246 0 125 4 246 0 126 4 246 0 131 4 246 0 133 4 246 0 134 4 246 0 135 4 246 0 136 4 246 0 137 4 246 0 138 4 246 0 140 4 246 0 143 4 246 0 147 4 246 0 150 4 246 0 152 4 246 0 153 4 246 0 162 4 246 0 167 4 246 0 168 4 246 0 171 1 251 0 172 4 246 0 173] 
#[0 10 209 0 11] 
#[1 4 250 0 1 4 250 0 9 4 250 0 11 4 250 0 22 4 250 0 23 4 250 0 25 4 250 0 27 4 250 0 42 4 250 0 43 4 250 0 44 4 250 0 45 4 250 0 49 4 250 0 54 1 255 0 55 4 250 0 56 4 250 0 57 4 250 0 58 4 250 0 59 4 250 0 60 4 250 0 64 4 250 0 67 4 250 0 73 4 250 0 75 4 250 0 77 2 210 0 82 4 250 0 84 4 250 0 86 4 250 0 88 4 250 0 89 4 250 0 92 4 250 0 93 2 210 0 96 2 210 0 98 2 210 0 99 4 250 0 100 4 250 0 102 4 250 0 103 4 250 0 105 4 250 0 107 4 250 0 108 4 250 0 109 4 250 0 110 4 250 0 111 4 250 0 115 4 250 0 116 2 210 0 121 4 250 0 123 4 250 0 125 4 250 0 126 4 250 0 131 4 250 0 133 4 250 0 134 4 250 0 135 4 250 0 136 4 250 0 137 4 250 0 138 4 250 0 140 4 250 0 143 4 250 0 147 4 250 0 150 2 210 0 151 4 250 0 152 4 250 0 153 1 255 0 162 4 250 0 167 4 250 0 168 4 250 0 171 4 250 0 172 1 255 0 173] 
#[1 4 254 0 55 4 254 0 82 4 254 0 96 4 254 0 98 4 254 0 99 4 254 0 121 4 254 0 151 4 254 0 162 6 61 0 173] 
#[0 5 2 0 11 0 172 0 173] 
#[0 5 6 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 8 89 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 10 225 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 3 213 0 162 0 253 0 167 1 1 0 168 1 5 0 171 10 213 0 172 10 217 0 173 10 221 0 182 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 10 225 0 201 10 225 0 203 10 225 0 212 10 229 0 216 1 49 0 223 10 225 0 234 1 57 0 235 10 225 0 236 10 225 0 237 10 225 0 238 10 225 0 239 10 225 0 240 10 225 0 241 10 225 0 242 10 225 0 243 10 225 0 247 10 225 0 248 10 225 1 18 10 225 1 19 10 225 1 20 10 225 1 21 10 225 1 22 10 225 1 23 1 125 1 25 10 225 1 26 10 225 1 27 10 225 1 28 10 225 1 29 10 225 1 30 10 225 1 34 10 225 1 37 1 157 1 56 1 157 1 57 1 157 1 58 10 225 1 62 10 225 1 63 10 225 1 64 10 225 1 67 10 225 1 68 10 225 1 69 10 225 1 70 10 225 1 71 10 225 1 72 10 225 1 73 10 225 1 74 10 225 1 75 10 225 1 76 10 225 1 77 10 225 1 78 10 225 1 79 10 225 1 80 10 225 1 81 10 225 1 82 10 225 1 83 10 225 1 84 10 225 1 85 10 225 1 90 10 225 1 91 2 9 1 92 10 225 1 97 10 225 1 100 10 225 1 101 10 225 1 102 10 225 1 103 10 225 1 104 10 225 1 109 10 225 1 110 10 225 1 111 10 225 1 112 10 225 1 113 10 225 1 114 10 225 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 10 225 1 129 2 117 1 130 2 121 1 131 10 225 1 139 10 225 1 140 10 225 1 142] 
#[1 10 233 0 148 10 237 0 152] 
#[0 10 241 0 121] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 10 245 0 177 10 249 0 249] 
#[1 10 253 0 4 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 9 25 0 79 11 17 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 11 1 0 127 11 5 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 9 0 172 11 13 0 191 1 17 0 194 11 13 0 195 11 13 0 196 11 13 0 197 11 17 0 252 11 21 1 0] 
#[1 8 129 0 3 11 25 0 253] 
#[0 5 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 11 29 0 7 5 14 0 11 5 14 0 55 2 3 0 172 5 14 0 173 11 37 1 107 5 14 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 11 41 0 144 11 45 0 145 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 11 49 0 24 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[1 0 173 0 110 11 53 0 135 11 57 1 109] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 0 169 0 109 0 173 0 110 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51 11 61 1 104 11 61 1 109 11 61 1 110] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 65 0 180 11 65 0 181 11 65 0 182 11 65 0 183 11 65 0 184 11 65 0 185 11 65 0 186 11 65 0 187 11 65 0 188 11 65 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 65 1 38 11 65 1 39 11 65 1 40 11 65 1 41 11 65 1 42 11 65 1 43 11 65 1 44 11 65 1 45 11 65 1 46 11 65 1 48 11 65 1 50 11 65 1 52 11 65 1 54 11 65 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 65 1 141 11 65 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 77 0 180 11 77 0 181 11 77 0 182 11 77 0 183 11 77 0 184 11 77 0 185 11 77 0 186 11 77 0 187 11 77 0 188 11 77 0 189 6 161 0 191 1 17 0 194 6 161 0 195 6 161 0 196 6 161 0 197 11 69 1 24 11 73 1 31 11 77 1 38 11 77 1 39 11 77 1 40 11 77 1 41 11 77 1 42 11 77 1 43 11 77 1 44 11 77 1 45 11 77 1 46 11 77 1 48 11 77 1 50 11 77 1 52 11 77 1 54 11 77 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 77 1 141 11 77 1 143] 
#[1 6 221 0 5 9 253 0 18 6 233 0 24] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 81 0 180 11 81 0 181 11 81 0 182 11 81 0 183 11 81 0 184 11 81 0 185 11 81 0 186 11 81 0 187 11 81 0 188 11 81 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 81 1 38 11 81 1 39 11 81 1 40 11 81 1 41 11 81 1 42 11 81 1 43 11 81 1 44 11 81 1 45 11 81 1 46 11 81 1 48 11 81 1 50 11 81 1 52 11 81 1 54 11 81 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 81 1 141 11 81 1 143] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 11 85 0 177 11 89 0 244] 
#[0 5 18 0 11 0 55 0 172 0 173 1 144] 
#[0 11 93 0 172] 
#[1 11 97 0 151 3 213 0 162 11 101 0 182] 
#[1 11 105 0 99 3 213 0 162 11 109 0 182] 
#[0 11 113 0 172] 
#[1 5 22 0 3 5 22 0 4 5 22 0 5 5 22 0 7 5 22 0 11 5 22 0 22 5 22 0 23 5 22 0 28 5 22 0 29 5 22 0 30 5 22 0 31 5 22 0 32 5 22 0 33 5 22 0 34 5 22 0 35 5 22 0 36 5 22 0 37 5 22 0 38 5 22 0 39 5 22 0 40 5 22 0 41 5 22 0 43 5 22 0 45 5 22 0 55 5 22 0 56 5 22 0 58 5 22 0 59 5 22 0 64 5 22 0 67 5 22 0 73 5 22 0 76 5 22 0 77 5 22 0 84 5 22 0 86 5 22 0 88 5 22 0 89 5 22 0 91 5 22 0 92 5 22 0 99 5 22 0 100 5 22 0 102 5 22 0 105 5 22 0 106 5 22 0 107 5 22 0 108 5 22 0 112 5 22 0 115 5 22 0 116 5 22 0 123 5 22 0 126 5 22 0 131 5 22 0 132 5 22 0 133 5 22 0 134 5 22 0 138 5 22 0 140 5 22 0 142 5 22 0 143 5 22 0 147 5 22 0 150 5 22 0 167 5 22 0 168 5 22 0 171 2 7 0 172 5 22 0 173 5 22 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 117 0 180 11 117 0 181 11 117 0 182 11 117 0 183 11 117 0 184 11 117 0 185 11 117 0 186 11 117 0 187 11 117 0 188 11 117 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 117 1 38 11 117 1 39 11 117 1 40 11 117 1 41 11 117 1 42 11 117 1 43 11 117 1 44 11 117 1 45 11 117 1 46 11 117 1 48 11 117 1 50 11 117 1 52 11 117 1 54 11 117 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 117 1 141 11 117 1 143] 
#[1 5 26 0 3 5 26 0 4 5 26 0 5 5 26 0 7 5 26 0 11 5 26 0 22 5 26 0 23 5 26 0 28 5 26 0 29 5 26 0 30 5 26 0 31 5 26 0 32 5 26 0 33 5 26 0 34 5 26 0 35 5 26 0 36 5 26 0 37 5 26 0 38 5 26 0 39 5 26 0 40 5 26 0 41 5 26 0 43 5 26 0 45 5 26 0 55 5 26 0 56 5 26 0 58 5 26 0 59 5 26 0 64 5 26 0 67 5 26 0 73 5 26 0 76 5 26 0 77 5 26 0 84 5 26 0 86 5 26 0 88 5 26 0 89 5 26 0 91 5 26 0 92 5 26 0 99 5 26 0 100 5 26 0 102 5 26 0 105 5 26 0 106 5 26 0 107 5 26 0 108 5 26 0 112 5 26 0 115 5 26 0 116 5 26 0 123 5 26 0 126 5 26 0 131 5 26 0 132 5 26 0 133 5 26 0 134 5 26 0 138 5 26 0 140 5 26 0 142 5 26 0 143 5 26 0 147 5 26 0 150 5 26 0 167 5 26 0 168 5 26 0 171 2 11 0 172 5 26 0 173 5 26 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 121 0 180 11 121 0 181 11 121 0 182 11 121 0 183 11 121 0 184 11 121 0 185 11 121 0 186 11 121 0 187 11 121 0 188 11 121 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 121 1 38 11 121 1 39 11 121 1 40 11 121 1 41 11 121 1 42 11 121 1 43 11 121 1 44 11 121 1 45 11 121 1 46 11 121 1 48 11 121 1 50 11 121 1 52 11 121 1 54 11 121 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 121 1 141 11 121 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 125 0 180 11 125 0 181 11 125 0 182 11 125 0 183 11 125 0 184 11 125 0 185 11 125 0 186 11 125 0 187 11 125 0 188 11 125 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 125 1 38 11 125 1 39 11 125 1 40 11 125 1 41 11 125 1 42 11 125 1 43 11 125 1 44 11 125 1 45 11 125 1 46 11 125 1 48 11 125 1 50 11 125 1 52 11 125 1 54 11 125 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 125 1 141 11 125 1 143] 
#[1 5 149 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 11 129 0 54 1 17 0 55 5 153 0 56 1 17 0 58 1 17 0 59 5 157 0 64 1 17 0 67 1 17 0 77 11 133 0 78 11 133 0 80 5 169 0 84 11 133 0 87 1 17 0 88 5 177 0 89 11 133 0 90 11 133 0 94 1 17 0 107 11 133 0 114 1 17 0 115 1 17 0 116 11 133 0 118 11 133 0 119 11 133 0 120 1 17 0 123 1 17 0 138 11 133 0 139 1 17 0 143 5 209 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 213 0 191 1 17 0 194 5 213 0 195 5 213 0 196 5 213 0 197 11 133 0 221 5 221 0 222 11 133 0 224 5 229 0 225 5 233 0 226 11 133 0 227] 
#[0 11 137 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 11 141 1 25 11 145 1 34] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 149 0 191 1 17 0 194 11 149 0 195 11 149 0 196 11 149 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 153 0 191 1 17 0 194 11 153 0 195 11 153 0 196 11 153 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 157 0 191 1 17 0 194 11 157 0 195 11 157 0 196 11 157 0 197] 
#[1 11 161 0 12 11 165 0 18] 
#[1 11 169 0 12 11 173 0 18] 
#[0 5 30 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 11 177 1 25] 
#[0 5 34 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 181 0 180 11 181 0 181 11 181 0 182 11 181 0 183 11 181 0 184 11 181 0 185 11 181 0 186 11 181 0 187 11 181 0 188 11 181 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 181 1 38 11 181 1 39 11 181 1 40 11 181 1 41 11 181 1 42 11 181 1 43 11 181 1 44 11 181 1 45 11 181 1 46 11 181 1 48 11 181 1 50 11 181 1 52 11 181 1 54 11 181 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 181 1 141 11 181 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 11 185 0 180 11 185 0 181 11 185 0 182 11 185 0 183 11 185 0 184 11 185 0 185 11 185 0 186 11 185 0 187 11 185 0 188 11 185 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 11 185 1 38 11 185 1 39 11 185 1 40 11 185 1 41 11 185 1 42 11 185 1 43 11 185 1 44 11 185 1 45 11 185 1 46 11 185 1 48 11 185 1 50 11 185 1 52 11 185 1 54 11 185 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 185 1 141 11 185 1 143] 
#[1 5 38 0 1 5 38 0 3 5 38 0 4 5 38 0 6 5 38 0 7 5 38 0 8 5 38 0 9 5 38 0 11 5 38 0 13 5 38 0 22 5 38 0 23 5 38 0 25 5 38 0 43 5 38 0 45 5 38 0 54 5 38 0 55 5 38 0 56 5 38 0 58 5 38 0 59 5 38 0 64 5 38 0 66 5 38 0 67 5 38 0 77 5 38 0 79 5 38 0 81 5 38 0 84 5 38 0 88 5 38 0 89 5 38 0 107 5 38 0 115 5 38 0 116 5 38 0 123 5 38 0 124 5 38 0 129 5 38 0 138 5 38 0 143 5 38 0 150 5 38 0 155 5 38 0 160 5 38 0 161 5 38 0 162 5 38 0 163 5 38 0 164 5 38 0 165 5 38 0 166 5 38 0 167 5 38 0 168 5 38 0 170 5 38 0 171 2 15 0 172 5 38 0 173 5 38 1 144] 
#[1 5 42 0 1 5 42 0 3 5 42 0 4 5 42 0 6 5 42 0 7 5 42 0 8 5 42 0 9 5 42 0 11 5 42 0 13 5 42 0 22 5 42 0 23 5 42 0 25 5 42 0 43 5 42 0 45 5 42 0 54 5 42 0 55 5 42 0 56 5 42 0 58 5 42 0 59 5 42 0 64 5 42 0 66 5 42 0 67 5 42 0 77 5 42 0 79 5 42 0 81 5 42 0 84 5 42 0 88 5 42 0 89 5 42 0 107 5 42 0 115 5 42 0 116 5 42 0 123 5 42 0 124 5 42 0 129 5 42 0 138 5 42 0 143 5 42 0 150 5 42 0 155 5 42 0 160 5 42 0 161 5 42 0 162 5 42 0 163 5 42 0 164 5 42 0 165 5 42 0 166 5 42 0 167 5 42 0 168 5 42 0 170 5 42 0 171 2 19 0 172 5 42 0 173 5 42 1 144] 
#[0 5 46 0 172] 
#[0 5 50 0 172] 
#[0 11 197 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 11 201 0 7 4 225 0 8 0 33 0 9 11 205 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 11 209 1 132 9 53 1 141 9 53 1 143] 
#[1 0 150 0 1 1 83 0 3 3 82 0 4 3 82 0 5 3 82 0 7 0 150 0 9 3 82 0 11 3 82 0 13 3 82 0 22 3 82 0 23 3 82 0 28 3 82 0 29 3 82 0 30 3 82 0 31 3 82 0 32 3 82 0 33 3 82 0 34 3 82 0 35 3 82 0 36 3 82 0 37 3 82 0 38 3 82 0 39 3 82 0 40 3 82 0 41 3 82 0 43 3 82 0 45 3 82 0 55 3 82 0 56 3 82 0 58 3 82 0 59 3 82 0 64 3 82 0 67 3 82 0 73 3 82 0 76 3 82 0 77 3 82 0 82 3 82 0 84 3 82 0 86 3 82 0 88 3 82 0 89 3 82 0 91 3 82 0 92 3 82 0 99 3 82 0 100 3 82 0 102 3 82 0 105 3 82 0 106 3 82 0 107 3 82 0 108 3 82 0 112 3 82 0 115 3 82 0 116 3 82 0 121 3 82 0 123 3 82 0 126 3 82 0 131 3 82 0 132 3 82 0 133 3 82 0 134 3 82 0 138 3 82 0 140 3 82 0 142 3 82 0 143 3 82 0 147 3 82 0 150 3 82 0 151 3 82 0 162 3 82 0 167 3 82 0 168 3 82 0 171 2 23 0 172 3 82 0 173 3 82 1 144] 
#[0 5 54 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 217 0 172] 
#[1 5 58 0 3 5 58 0 4 5 58 0 5 5 58 0 7 5 58 0 11 5 58 0 13 5 58 0 22 5 58 0 23 5 58 0 28 5 58 0 29 5 58 0 30 5 58 0 31 5 58 0 32 5 58 0 33 5 58 0 34 5 58 0 35 5 58 0 36 5 58 0 37 5 58 0 38 5 58 0 39 5 58 0 40 5 58 0 41 5 58 0 43 5 58 0 45 5 58 0 55 5 58 0 56 5 58 0 58 5 58 0 59 5 58 0 64 5 58 0 67 5 58 0 73 5 58 0 76 5 58 0 77 5 58 0 82 5 58 0 84 5 58 0 86 5 58 0 88 5 58 0 89 5 58 0 91 5 58 0 92 5 58 0 99 5 58 0 100 5 58 0 102 5 58 0 105 5 58 0 106 5 58 0 107 5 58 0 108 5 58 0 112 5 58 0 115 5 58 0 116 5 58 0 121 5 58 0 123 5 58 0 126 5 58 0 131 5 58 0 132 5 58 0 133 5 58 0 134 5 58 0 138 5 58 0 140 5 58 0 142 5 58 0 143 5 58 0 147 5 58 0 150 5 58 0 151 5 58 0 162 5 58 0 167 5 58 0 168 5 58 0 171 2 27 0 172 5 58 0 173 5 58 1 144] 
#[1 4 150 0 4 11 221 0 7 4 150 0 11 2 31 0 13 4 150 0 55 4 150 0 172 4 150 0 173 11 229 1 137 4 150 1 144] 
#[0 5 62 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 5 66 0 4 11 233 0 7 5 66 0 11 11 237 0 13 5 66 0 55 2 35 0 172 5 66 0 173 11 245 1 136 5 66 1 144] 
#[1 11 249 0 4 11 253 0 172] 
#[0 5 70 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 1 0 4] 
#[1 0 6 0 99 2 39 0 173 12 5 0 177 12 9 0 205 12 13 0 207] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 17 0 191 1 17 0 194 12 17 0 195 12 17 0 196 12 17 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 21 0 191 1 17 0 194 12 21 0 195 12 21 0 196 12 21 0 197] 
#[1 8 129 0 3 12 25 0 253] 
#[1 0 162 0 3 4 53 0 5 12 29 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 12 41 1 11] 
#[1 12 45 0 26 12 49 0 88 12 53 0 143] 
#[0 12 57 0 122] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 61 0 191 1 17 0 194 12 61 0 195 12 61 0 196 12 61 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 65 0 191 1 17 0 194 12 65 0 195 12 65 0 196 12 65 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 69 0 191 1 17 0 194 12 69 0 195 12 69 0 196 12 69 0 197] 
#[1 8 129 0 3 12 81 0 172 2 47 0 173 12 77 0 253 12 81 1 13] 
#[1 12 85 0 172 4 170 0 173 12 85 1 13] 
#[1 3 221 0 173 3 229 0 207 12 89 0 213] 
#[0 12 93 0 172] 
#[0 5 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 97 0 172] 
#[0 5 86 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 12 101 0 180 12 101 0 181 12 101 0 182 12 101 0 183 12 101 0 184 12 101 0 185 12 101 0 186 12 101 0 187 12 101 0 188 12 101 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 12 101 1 38 12 101 1 39 12 101 1 40 12 101 1 41 12 101 1 42 12 101 1 43 12 101 1 44 12 101 1 45 12 101 1 46 12 101 1 48 12 101 1 50 12 101 1 52 12 101 1 54 12 101 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 12 101 1 141 12 101 1 143] 
#[1 12 105 0 106 12 109 0 142] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 113 0 191 1 17 0 194 12 113 0 195 12 113 0 196 12 113 0 197] 
#[1 12 117 0 107 12 121 0 116 12 125 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 129 0 191 1 17 0 194 12 129 0 195 12 129 0 196 12 129 0 197] 
#[1 12 133 0 106 12 137 0 132 12 141 0 142] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 145 0 191 1 17 0 194 12 145 0 195 12 145 0 196 12 145 0 197] 
#[1 12 149 0 107 12 153 0 116 12 157 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 161 0 191 1 17 0 194 12 161 0 195 12 161 0 196 12 161 0 197] 
#[0 5 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 94 0 22 5 94 0 23 5 94 0 28 5 94 0 29 5 94 0 30 5 94 0 31 5 94 0 32 5 94 0 33 5 94 0 34 5 94 0 35 5 94 0 36 5 94 0 37 5 94 0 38 5 94 0 39 5 94 0 40 5 94 0 41 5 94 0 43 5 94 0 45 5 94 0 55 5 94 0 56 5 94 0 58 5 94 0 59 5 94 0 64 5 94 0 67 5 94 0 73 5 94 0 76 5 94 0 77 12 165 0 83 5 94 0 84 5 94 0 86 5 94 0 88 5 94 0 89 5 94 0 91 5 94 0 92 5 94 0 100 5 94 0 102 5 94 0 105 5 94 0 106 5 94 0 107 5 94 0 108 5 94 0 112 5 94 0 115 5 94 0 116 5 94 0 123 5 94 0 126 5 94 0 131 5 94 0 132 5 94 0 133 5 94 0 134 5 94 0 138 5 94 0 140 5 94 0 142 5 94 0 143 5 94 0 147 5 94 0 150 5 94 0 167 5 94 0 168 5 94 0 171 5 94 0 172 5 94 0 173 5 94 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 173 0 200 7 173 0 201 7 173 0 203 7 173 0 204 7 173 0 208 3 21 0 209 7 173 0 210 7 173 0 211 3 33 0 223 7 173 0 242 7 173 0 243 7 173 0 247 7 173 0 248 7 173 1 5 7 173 1 6 7 173 1 7 3 53 1 8 7 173 1 9 7 173 1 12 7 173 1 14 7 173 1 15 7 173 1 16 7 173 1 17 7 173 1 18 7 173 1 19 7 173 1 20 7 173 1 21 7 173 1 22 7 173 1 23 1 125 1 25 7 173 1 26 7 173 1 27 7 173 1 28 7 173 1 29 7 173 1 30 7 173 1 34 7 173 1 37 5 98 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 73 0 6 0 76 0 6 0 77 0 6 0 84 0 6 0 86 0 6 0 88 0 6 0 89 0 6 0 91 0 6 0 92 0 6 0 100 0 6 0 102 0 6 0 105 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 112 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 126 0 6 0 131 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 138 0 6 0 140 0 6 0 142 0 6 0 143 0 6 0 147 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 12 169 0 177 4 181 0 178 0 6 1 144] 
#[1 12 173 0 4 12 177 0 172] 
#[0 5 102 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 10 1 0 2 12 181 0 4 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 5 106 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 110 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 5 114 0 3 5 114 0 4 5 114 0 5 5 114 0 7 4 101 0 9 5 114 0 11 5 114 0 13 5 114 0 22 5 114 0 23 5 114 0 28 5 114 0 29 5 114 0 30 5 114 0 31 5 114 0 32 5 114 0 33 5 114 0 34 5 114 0 35 5 114 0 36 5 114 0 37 5 114 0 38 5 114 0 39 5 114 0 40 5 114 0 41 5 114 0 43 5 114 0 45 5 114 0 55 5 114 0 56 5 114 0 58 5 114 0 59 5 114 0 64 5 114 0 67 5 114 0 73 5 114 0 76 5 114 0 77 5 114 0 82 5 114 0 84 5 114 0 86 5 114 0 88 5 114 0 89 5 114 0 91 5 114 0 92 5 114 0 99 5 114 0 100 5 114 0 102 5 114 0 105 5 114 0 106 5 114 0 107 5 114 0 108 5 114 0 112 5 114 0 115 5 114 0 116 5 114 0 121 5 114 0 123 5 114 0 126 5 114 0 131 5 114 0 132 5 114 0 133 5 114 0 134 5 114 0 138 5 114 0 140 5 114 0 142 5 114 0 143 5 114 0 147 5 114 0 150 5 114 0 151 5 114 0 162 5 114 0 167 5 114 0 168 5 114 0 171 5 114 0 172 5 114 0 173 5 114 1 144] 
#[0 12 185 0 172] 
#[0 5 118 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 122 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 5 126 0 3 5 126 0 4 5 126 0 5 5 126 0 7 4 101 0 9 5 126 0 11 5 126 0 13 5 126 0 22 5 126 0 23 5 126 0 28 5 126 0 29 5 126 0 30 5 126 0 31 5 126 0 32 5 126 0 33 5 126 0 34 5 126 0 35 5 126 0 36 5 126 0 37 5 126 0 38 5 126 0 39 5 126 0 40 5 126 0 41 5 126 0 43 5 126 0 45 5 126 0 55 5 126 0 56 5 126 0 58 5 126 0 59 5 126 0 64 5 126 0 67 5 126 0 73 5 126 0 76 5 126 0 77 5 126 0 82 5 126 0 84 5 126 0 86 5 126 0 88 5 126 0 89 5 126 0 91 5 126 0 92 5 126 0 99 5 126 0 100 5 126 0 102 5 126 0 105 5 126 0 106 5 126 0 107 5 126 0 108 5 126 0 112 5 126 0 115 5 126 0 116 5 126 0 121 5 126 0 123 5 126 0 126 5 126 0 131 5 126 0 132 5 126 0 133 5 126 0 134 5 126 0 138 5 126 0 140 5 126 0 142 5 126 0 143 5 126 0 147 5 126 0 150 5 126 0 151 5 126 0 162 5 126 0 167 5 126 0 168 5 126 0 171 5 126 0 172 5 126 0 173 5 126 1 144] 
#[0 5 130 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 221 0 159 12 189 0 190] 
#[0 5 134 0 8 0 156 0 159] 
#[0 12 193 0 172] 
#[0 12 197 0 172] 
#[0 5 138 0 172] 
#[0 5 142 0 172] 
#[0 5 146 0 172] 
#[0 5 150 0 172] 
#[0 5 154 0 172] 
#[0 5 158 0 172] 
#[0 5 162 0 172] 
#[0 12 201 0 172] 
#[0 5 166 0 172] 
#[0 5 170 0 172] 
#[0 5 174 0 172] 
#[0 5 178 0 172] 
#[0 5 182 0 172] 
#[0 5 186 0 172] 
#[0 5 190 0 172] 
#[0 5 194 0 172] 
#[0 5 198 0 172] 
#[0 5 202 0 172] 
#[0 12 205 0 172] 
#[0 5 206 0 172] 
#[0 12 209 0 172] 
#[0 12 213 0 172] 
#[0 12 217 0 172] 
#[0 12 221 0 172] 
#[0 12 225 0 172] 
#[0 12 229 0 172] 
#[1 12 233 0 7 12 237 0 172] 
#[1 12 241 0 7 12 245 0 172] 
#[0 12 249 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 218 0 11 4 218 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 227 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 4 218 0 172 4 218 0 173 12 253 0 180 12 253 0 181 12 253 0 182 12 253 0 183 12 253 0 184 12 253 0 185 12 253 0 186 12 253 0 187 12 253 0 188 12 253 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 12 253 1 38 12 253 1 39 12 253 1 40 12 253 1 41 12 253 1 42 12 253 1 43 12 253 1 44 12 253 1 45 12 253 1 46 12 253 1 48 12 253 1 50 12 253 1 52 12 253 1 54 12 253 1 55 5 113 1 56 5 113 1 57 5 113 1 58 13 1 1 66 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 12 253 1 141 12 253 1 143 4 218 1 144] 
#[1 4 218 0 11 4 218 0 13 4 218 0 55 2 51 0 172 4 218 0 173 13 9 1 66 4 218 1 144] 
#[1 5 210 0 11 13 13 0 13 5 210 0 55 5 210 0 172 5 210 0 173 13 17 1 65 5 210 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 218 0 11 4 218 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 227 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 55 0 172 4 218 0 173 13 25 0 180 13 25 0 181 13 25 0 182 13 25 0 183 13 25 0 184 13 25 0 185 13 25 0 186 13 25 0 187 13 25 0 188 13 25 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 13 25 1 38 13 25 1 39 13 25 1 40 13 25 1 41 13 25 1 42 13 25 1 43 13 25 1 44 13 25 1 45 13 25 1 46 13 25 1 48 13 25 1 50 13 25 1 52 13 25 1 54 13 25 1 55 5 113 1 56 5 113 1 57 5 113 1 58 13 29 1 66 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 13 25 1 141 13 25 1 143 4 218 1 144] 
#[0 13 33 0 172] 
#[0 13 37 0 172] 
#[1 8 33 0 3 4 53 0 5 2 59 0 7 2 59 0 11 2 59 0 22 2 59 0 23 2 59 0 28 2 59 0 29 2 59 0 30 2 59 0 31 2 59 0 32 2 59 0 33 2 59 0 34 2 59 0 35 2 59 0 36 2 59 0 37 2 59 0 38 2 59 0 39 2 59 0 40 2 59 0 41 2 59 0 43 2 59 0 45 2 59 0 55 2 59 0 56 2 59 0 58 2 59 0 59 2 59 0 64 2 59 0 67 2 59 0 73 2 59 0 76 2 59 0 77 2 59 0 84 2 59 0 86 2 59 0 88 2 59 0 89 2 59 0 91 2 59 0 92 2 59 0 100 2 59 0 102 2 59 0 105 2 59 0 106 2 59 0 107 2 59 0 108 2 59 0 112 2 59 0 115 2 59 0 116 2 59 0 123 2 59 0 126 2 59 0 131 2 59 0 132 2 59 0 133 2 59 0 134 2 59 0 138 2 59 0 140 2 59 0 142 2 59 0 143 2 59 0 147 2 59 0 150 2 59 0 167 2 59 0 168 2 59 0 171 2 63 0 172 2 59 0 173 13 45 0 228 13 45 0 229 13 41 0 230 13 45 0 233 2 59 1 144] 
#[1 13 49 0 4 13 53 0 7 13 57 0 231] 
#[1 4 222 0 4 4 222 0 7 7 233 0 172 13 61 0 232] 
#[0 5 218 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 13 65 1 24] 
#[0 5 222 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 13 69 0 172 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 13 73 1 24] 
#[0 5 226 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 13 77 0 180 13 77 0 181 13 77 0 182 13 77 0 183 13 77 0 184 13 77 0 185 13 77 0 186 13 77 0 187 13 77 0 188 13 77 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 13 77 1 38 13 77 1 39 13 77 1 40 13 77 1 41 13 77 1 42 13 77 1 43 13 77 1 44 13 77 1 45 13 77 1 46 13 77 1 48 13 77 1 50 13 77 1 52 13 77 1 54 13 77 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 13 77 1 141 13 77 1 143] 
#[1 7 233 0 172 3 221 0 173 3 229 0 207 13 81 0 213] 
#[1 13 85 0 121 3 213 0 162 7 233 0 172 3 221 0 173 13 89 0 182 3 229 0 207 13 93 0 213] 
#[0 13 97 0 152] 
#[1 2 214 0 11 2 214 0 172 2 214 0 173 13 101 0 215] 
#[1 8 89 0 11 8 93 0 172 8 97 0 173 13 105 0 207 8 105 0 214 8 109 0 216 8 113 0 217] 
#[1 5 230 0 55 5 230 0 82 5 230 0 96 5 230 0 98 5 230 0 99 5 230 0 121 5 230 0 151 5 230 0 162 6 61 0 173] 
#[0 5 234 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 5 238 0 1 5 238 0 9 5 238 0 11 5 238 0 22 5 238 0 23 5 238 0 25 5 238 0 27 5 238 0 42 5 238 0 43 5 238 0 44 5 238 0 45 5 238 0 49 5 238 0 54 5 238 0 55 5 238 0 56 5 238 0 57 5 238 0 58 5 238 0 59 5 238 0 60 5 238 0 64 5 238 0 67 5 238 0 73 5 238 0 75 5 238 0 77 5 238 0 84 5 238 0 86 5 238 0 88 5 238 0 89 5 238 0 92 5 238 0 93 5 238 0 100 5 238 0 102 5 238 0 103 5 238 0 105 5 238 0 107 5 238 0 108 5 238 0 109 5 238 0 110 5 238 0 111 5 238 0 115 5 238 0 116 5 238 0 123 5 238 0 125 5 238 0 126 5 238 0 131 5 238 0 133 5 238 0 134 5 238 0 135 5 238 0 136 5 238 0 137 5 238 0 138 5 238 0 140 5 238 0 143 5 238 0 147 5 238 0 150 5 238 0 152 5 238 0 153 5 238 0 162 5 238 0 167 5 238 0 168 5 238 0 171 2 67 0 172 5 238 0 173] 
#[1 10 209 0 11 4 49 0 126] 
#[0 4 250 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 13 113 0 172] 
#[0 5 242 0 11 0 172 0 173] 
#[0 5 246 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 13 117 0 172] 
#[0 13 121 0 172] 
#[1 5 250 0 11 5 250 0 55 2 71 0 172 5 250 0 173 5 250 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 13 129 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 133 0 191 1 17 0 194 13 133 0 195 13 133 0 196 13 133 0 197 13 137 0 251] 
#[0 5 254 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 6 2 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 13 141 0 172] 
#[0 13 145 0 172] 
#[0 13 149 0 4] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 13 165 0 228 13 165 0 229 13 153 0 230 13 165 0 233 13 165 1 1 13 165 1 2] 
#[0 13 169 0 172] 
#[1 6 10 0 4 6 10 0 7 6 10 0 172 13 173 0 255] 
#[0 6 14 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 13 177 0 172 13 181 0 182 13 181 0 191 1 17 0 194 13 181 0 195 13 181 0 196 13 181 0 197 13 181 1 43 13 181 1 105] 
#[0 13 185 0 7] 
#[0 6 18 0 7 0 11 0 55 0 172 0 173 1 144] 
#[1 13 189 0 172 3 221 0 173 3 229 0 207 13 193 0 213 13 197 0 218] 
#[1 13 189 0 172 13 201 0 173 13 205 0 218] 
#[0 13 209 0 172] 
#[0 13 213 0 172] 
#[0 6 22 0 11 0 55 0 172 0 173 1 144] 
#[0 6 26 0 11 0 55 0 172 0 173 1 144] 
#[1 6 30 0 11 6 30 0 22 6 30 0 23 6 30 0 28 6 30 0 29 6 30 0 30 6 30 0 31 6 30 0 32 6 30 0 33 6 30 0 34 6 30 0 35 6 30 0 36 6 30 0 37 6 30 0 38 6 30 0 39 6 30 0 40 6 30 0 41 6 30 0 43 6 30 0 45 6 30 0 55 6 30 0 56 6 30 0 58 6 30 0 59 6 30 0 64 6 30 0 67 6 30 0 73 6 30 0 76 6 30 0 77 6 30 0 84 6 30 0 86 6 30 0 88 6 30 0 89 6 30 0 91 6 30 0 92 6 30 0 100 6 30 0 102 6 30 0 105 6 30 0 106 6 30 0 107 6 30 0 108 6 30 0 112 6 30 0 115 6 30 0 116 6 30 0 123 6 30 0 126 6 30 0 131 6 30 0 132 6 30 0 133 6 30 0 134 6 30 0 138 6 30 0 140 6 30 0 142 6 30 0 143 6 30 0 147 6 30 0 150 6 30 0 167 6 30 0 168 6 30 0 171 2 83 0 172 6 30 0 173 6 30 1 144] 
#[1 8 49 0 7 6 34 0 11 6 34 0 22 6 34 0 23 6 34 0 28 6 34 0 29 6 34 0 30 6 34 0 31 6 34 0 32 6 34 0 33 6 34 0 34 6 34 0 35 6 34 0 36 6 34 0 37 6 34 0 38 6 34 0 39 6 34 0 40 6 34 0 41 6 34 0 43 6 34 0 45 6 34 0 55 6 34 0 56 6 34 0 58 6 34 0 59 6 34 0 64 6 34 0 67 6 34 0 73 6 34 0 76 6 34 0 77 6 34 0 84 6 34 0 86 6 34 0 88 6 34 0 89 6 34 0 91 6 34 0 92 6 34 0 100 6 34 0 102 6 34 0 105 6 34 0 106 6 34 0 107 6 34 0 108 6 34 0 112 6 34 0 115 6 34 0 116 6 34 0 123 6 34 0 126 6 34 0 131 6 34 0 132 6 34 0 133 6 34 0 134 6 34 0 138 6 34 0 140 6 34 0 142 6 34 0 143 6 34 0 147 6 34 0 150 6 34 0 167 6 34 0 168 6 34 0 171 2 87 0 172 6 34 0 173 8 57 1 32 8 61 1 33 6 34 1 144] 
#[0 6 38 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 42 0 11 6 42 0 22 6 42 0 23 6 42 0 28 6 42 0 29 6 42 0 30 6 42 0 31 6 42 0 32 6 42 0 33 6 42 0 34 6 42 0 35 6 42 0 36 6 42 0 37 6 42 0 38 6 42 0 39 6 42 0 40 6 42 0 41 6 42 0 43 6 42 0 45 6 42 0 55 6 42 0 56 6 42 0 58 6 42 0 59 6 42 0 64 6 42 0 67 6 42 0 73 6 42 0 76 6 42 0 77 6 42 0 84 6 42 0 86 6 42 0 88 6 42 0 89 6 42 0 91 6 42 0 92 6 42 0 100 6 42 0 102 6 42 0 105 6 42 0 106 6 42 0 107 6 42 0 108 6 42 0 112 6 42 0 115 6 42 0 116 6 42 0 123 6 42 0 126 6 42 0 131 6 42 0 132 6 42 0 133 6 42 0 134 6 42 0 138 6 42 0 140 6 42 0 142 6 42 0 143 6 42 0 147 6 42 0 150 6 42 0 167 6 42 0 168 6 42 0 171 2 91 0 172 6 42 0 173 6 42 1 144] 
#[1 7 233 0 172 3 221 0 173 13 217 0 207] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 13 221 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 225 0 191 1 17 0 194 13 225 0 195 13 225 0 196 13 225 0 197 13 229 0 246] 
#[0 6 46 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 13 233 0 151] 
#[0 6 50 0 11 0 55 0 172 0 173 1 144] 
#[0 13 237 0 172] 
#[0 13 241 0 172] 
#[0 13 245 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 13 249 0 180 13 249 0 181 13 249 0 182 13 249 0 183 13 249 0 184 13 249 0 185 13 249 0 186 13 249 0 187 13 249 0 188 13 249 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 13 249 1 38 13 249 1 39 13 249 1 40 13 249 1 41 13 249 1 42 13 249 1 43 13 249 1 44 13 249 1 45 13 249 1 46 13 249 1 48 13 249 1 50 13 249 1 52 13 249 1 54 13 249 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 13 249 1 141 13 249 1 143] 
#[1 6 54 0 3 6 54 0 4 6 54 0 5 6 54 0 7 6 54 0 11 6 54 0 22 6 54 0 23 6 54 0 28 6 54 0 29 6 54 0 30 6 54 0 31 6 54 0 32 6 54 0 33 6 54 0 34 6 54 0 35 6 54 0 36 6 54 0 37 6 54 0 38 6 54 0 39 6 54 0 40 6 54 0 41 6 54 0 43 6 54 0 45 6 54 0 55 6 54 0 56 6 54 0 58 6 54 0 59 6 54 0 64 6 54 0 67 6 54 0 73 6 54 0 76 6 54 0 77 6 54 0 84 6 54 0 86 6 54 0 88 6 54 0 89 6 54 0 91 6 54 0 92 6 54 0 99 6 54 0 100 6 54 0 102 6 54 0 105 6 54 0 106 6 54 0 107 6 54 0 108 6 54 0 112 6 54 0 115 6 54 0 116 6 54 0 123 6 54 0 126 6 54 0 131 6 54 0 132 6 54 0 133 6 54 0 134 6 54 0 138 6 54 0 140 6 54 0 142 6 54 0 143 6 54 0 147 6 54 0 150 6 54 0 167 6 54 0 168 6 54 0 171 2 95 0 172 6 54 0 173 6 54 1 144] 
#[1 6 58 0 3 6 58 0 4 6 58 0 5 6 58 0 7 6 58 0 11 6 58 0 13 6 58 0 22 6 58 0 23 6 58 0 28 6 58 0 29 6 58 0 30 6 58 0 31 6 58 0 32 6 58 0 33 6 58 0 34 6 58 0 35 6 58 0 36 6 58 0 37 6 58 0 38 6 58 0 39 6 58 0 40 6 58 0 41 6 58 0 43 6 58 0 45 6 58 0 55 6 58 0 56 6 58 0 58 6 58 0 59 6 58 0 64 6 58 0 67 6 58 0 73 6 58 0 76 6 58 0 77 6 58 0 82 6 58 0 84 6 58 0 86 6 58 0 88 6 58 0 89 6 58 0 91 6 58 0 92 6 58 0 99 6 58 0 100 6 58 0 102 6 58 0 105 6 58 0 106 6 58 0 107 6 58 0 108 6 58 0 112 6 58 0 115 6 58 0 116 6 58 0 121 6 58 0 123 6 58 0 126 6 58 0 131 6 58 0 132 6 58 0 133 6 58 0 134 6 58 0 138 6 58 0 140 6 58 0 142 6 58 0 143 6 58 0 147 6 58 0 150 6 58 0 151 6 58 0 162 6 58 0 167 6 58 0 168 6 58 0 171 2 99 0 172 6 58 0 173 6 58 1 144] 
#[1 6 62 0 7 6 66 0 11 6 66 0 55 2 103 0 172 6 66 0 173 6 66 1 144] 
#[0 13 253 0 172] 
#[1 6 70 0 3 6 70 0 4 14 1 0 5 6 70 0 7 6 70 0 11 6 70 0 22 6 70 0 23 6 70 0 28 6 70 0 29 6 70 0 30 6 70 0 31 6 70 0 32 6 70 0 33 6 70 0 34 6 70 0 35 6 70 0 36 6 70 0 37 6 70 0 38 6 70 0 39 6 70 0 40 6 70 0 41 6 70 0 43 6 70 0 45 6 70 0 55 6 70 0 56 6 70 0 58 6 70 0 59 6 70 0 64 6 70 0 67 6 70 0 73 6 70 0 76 6 70 0 77 6 70 0 84 6 70 0 86 6 70 0 88 6 70 0 89 6 70 0 91 6 70 0 92 6 70 0 99 6 70 0 100 6 70 0 102 6 70 0 105 6 70 0 106 6 70 0 107 6 70 0 108 6 70 0 112 6 70 0 115 6 70 0 116 6 70 0 123 6 70 0 126 6 70 0 131 6 70 0 132 6 70 0 133 6 70 0 134 6 70 0 138 6 70 0 140 6 70 0 142 6 70 0 143 6 70 0 147 6 70 0 150 6 70 0 167 6 70 0 168 6 70 0 171 2 107 0 172 6 70 0 173 6 70 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 14 9 0 180 14 9 0 181 14 9 0 182 14 9 0 183 14 9 0 184 14 9 0 185 14 9 0 186 14 9 0 187 14 9 0 188 14 9 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 14 9 1 38 14 9 1 39 14 9 1 40 14 9 1 41 14 9 1 42 14 9 1 43 14 9 1 44 14 9 1 45 14 9 1 46 14 9 1 48 14 9 1 50 14 9 1 52 14 9 1 54 14 9 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 14 9 1 141 14 9 1 143] 
#[1 4 81 0 7 6 74 0 11 6 74 0 22 6 74 0 23 6 74 0 28 6 74 0 29 6 74 0 30 6 74 0 31 6 74 0 32 6 74 0 33 6 74 0 34 6 74 0 35 6 74 0 36 6 74 0 37 6 74 0 38 6 74 0 39 6 74 0 40 6 74 0 41 6 74 0 43 6 74 0 45 6 74 0 55 6 74 0 56 6 74 0 58 6 74 0 59 6 74 0 64 6 74 0 67 6 74 0 73 6 74 0 76 6 74 0 77 6 74 0 84 6 74 0 86 6 74 0 88 6 74 0 89 6 74 0 91 6 74 0 92 6 74 0 100 6 74 0 102 6 74 0 105 6 74 0 106 6 74 0 107 6 74 0 108 6 74 0 112 6 74 0 115 6 74 0 116 6 74 0 123 6 74 0 126 6 74 0 131 6 74 0 132 6 74 0 133 6 74 0 134 6 74 0 138 6 74 0 140 6 74 0 142 6 74 0 143 6 74 0 147 6 74 0 150 6 74 0 167 6 74 0 168 6 74 0 171 2 111 0 172 6 74 0 173 4 89 1 35 4 93 1 36 6 74 1 144] 
#[0 6 78 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 38 0 22 4 38 0 23 4 38 0 43 4 38 0 45 4 38 0 55 4 38 0 56 4 38 0 58 4 38 0 59 4 38 0 64 4 38 0 67 4 38 0 77 4 38 0 84 4 38 0 88 4 38 0 89 4 38 0 99 4 38 0 107 4 38 0 115 4 38 0 116 4 38 0 123 4 38 0 138 4 38 0 143 4 38 0 150 4 38 0 167 4 38 0 168 4 38 0 171 4 38 0 173 14 13 0 250] 
#[1 8 129 0 3 14 17 0 172 14 21 0 253] 
#[1 4 114 0 22 4 114 0 23 4 114 0 43 4 114 0 45 4 114 0 55 4 114 0 56 4 114 0 58 4 114 0 59 4 114 0 64 4 114 0 67 4 114 0 77 4 114 0 84 4 114 0 88 4 114 0 89 4 114 0 99 4 114 0 107 4 114 0 115 4 114 0 116 4 114 0 123 4 114 0 138 4 114 0 143 4 114 0 150 4 114 0 167 4 114 0 168 4 114 0 171 4 114 0 173 14 25 0 245] 
#[0 14 29 0 172] 
#[0 14 33 0 172] 
#[0 14 37 0 172] 
#[0 14 41 0 172] 
#[0 6 82 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 86 0 3 6 86 0 4 6 86 0 5 6 86 0 7 6 86 0 11 6 86 0 13 6 86 0 22 6 86 0 23 6 86 0 28 6 86 0 29 6 86 0 30 6 86 0 31 6 86 0 32 6 86 0 33 6 86 0 34 6 86 0 35 6 86 0 36 6 86 0 37 6 86 0 38 6 86 0 39 6 86 0 40 6 86 0 41 6 86 0 43 6 86 0 45 6 86 0 55 6 86 0 56 6 86 0 58 6 86 0 59 6 86 0 64 6 86 0 67 6 86 0 73 6 86 0 76 6 86 0 77 6 86 0 82 6 86 0 84 6 86 0 86 6 86 0 88 6 86 0 89 6 86 0 91 6 86 0 92 6 86 0 99 6 86 0 100 6 86 0 102 6 86 0 105 6 86 0 106 6 86 0 107 6 86 0 108 6 86 0 112 6 86 0 115 6 86 0 116 6 86 0 121 6 86 0 123 6 86 0 126 6 86 0 131 6 86 0 132 6 86 0 133 6 86 0 134 6 86 0 138 6 86 0 140 6 86 0 142 6 86 0 143 6 86 0 147 6 86 0 150 6 86 0 151 6 86 0 162 6 86 0 167 6 86 0 168 6 86 0 171 2 115 0 172 6 86 0 173 6 86 1 144] 
#[1 6 90 0 3 6 90 0 4 6 90 0 5 6 90 0 7 6 90 0 11 6 90 0 13 6 90 0 22 6 90 0 23 6 90 0 28 6 90 0 29 6 90 0 30 6 90 0 31 6 90 0 32 6 90 0 33 6 90 0 34 6 90 0 35 6 90 0 36 6 90 0 37 6 90 0 38 6 90 0 39 6 90 0 40 6 90 0 41 6 90 0 43 6 90 0 45 6 90 0 55 6 90 0 56 6 90 0 58 6 90 0 59 6 90 0 64 6 90 0 67 6 90 0 73 6 90 0 76 6 90 0 77 6 90 0 82 6 90 0 84 6 90 0 86 6 90 0 88 6 90 0 89 6 90 0 91 6 90 0 92 6 90 0 99 6 90 0 100 6 90 0 102 6 90 0 105 6 90 0 106 6 90 0 107 6 90 0 108 6 90 0 112 6 90 0 115 6 90 0 116 6 90 0 121 6 90 0 123 6 90 0 126 6 90 0 131 6 90 0 132 6 90 0 133 6 90 0 134 6 90 0 138 6 90 0 140 6 90 0 142 6 90 0 143 6 90 0 147 6 90 0 150 6 90 0 151 6 90 0 162 6 90 0 167 6 90 0 168 6 90 0 171 2 119 0 172 6 90 0 173 6 90 1 144] 
#[0 6 94 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 6 98 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 14 49 0 180 14 49 0 181 14 49 0 182 14 49 0 183 14 49 0 184 14 49 0 185 14 49 0 186 14 49 0 187 14 49 0 188 14 49 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 14 45 0 236 14 49 1 38 14 49 1 39 14 49 1 40 14 49 1 41 14 49 1 42 14 49 1 43 14 49 1 44 14 49 1 45 14 49 1 46 14 49 1 48 14 49 1 50 14 49 1 52 14 49 1 54 14 49 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 14 49 1 141 14 49 1 143] 
#[1 6 102 0 1 6 102 0 3 6 102 0 4 6 102 0 6 6 102 0 7 6 102 0 8 6 102 0 9 6 102 0 11 6 102 0 13 6 102 0 22 6 102 0 23 6 102 0 25 6 102 0 43 6 102 0 45 6 102 0 54 6 102 0 55 6 102 0 56 6 102 0 58 6 102 0 59 6 102 0 64 6 102 0 66 6 102 0 67 6 102 0 77 6 102 0 79 6 102 0 81 6 102 0 84 6 102 0 88 6 102 0 89 6 102 0 107 6 102 0 115 6 102 0 116 6 102 0 123 6 102 0 124 6 102 0 129 6 102 0 138 6 102 0 143 6 102 0 150 6 102 0 155 6 102 0 160 6 102 0 161 6 102 0 162 6 102 0 163 6 102 0 164 6 102 0 165 6 102 0 166 6 102 0 167 6 102 0 168 6 102 0 170 6 102 0 171 2 123 0 172 6 102 0 173 6 102 1 144] 
#[1 6 106 0 1 6 106 0 3 6 106 0 4 6 106 0 6 6 106 0 7 6 106 0 8 6 106 0 9 6 106 0 11 6 106 0 13 6 106 0 22 6 106 0 23 6 106 0 25 6 106 0 43 6 106 0 45 6 106 0 54 6 106 0 55 6 106 0 56 6 106 0 58 6 106 0 59 6 106 0 64 6 106 0 66 6 106 0 67 6 106 0 77 6 106 0 79 6 106 0 81 6 106 0 84 6 106 0 88 6 106 0 89 6 106 0 107 6 106 0 115 6 106 0 116 6 106 0 123 6 106 0 124 6 106 0 129 6 106 0 138 6 106 0 143 6 106 0 150 6 106 0 155 6 106 0 160 6 106 0 161 6 106 0 162 6 106 0 163 6 106 0 164 6 106 0 165 6 106 0 166 6 106 0 167 6 106 0 168 6 106 0 170 6 106 0 171 2 127 0 172 6 106 0 173 6 106 1 144] 
#[1 14 61 0 7 14 65 0 13] 
#[1 6 225 0 12 14 69 0 18] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 14 73 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 14 81 0 180 14 81 0 181 14 81 0 182 14 81 0 183 14 81 0 184 14 81 0 185 14 81 0 186 14 81 0 187 14 81 0 188 14 81 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 14 77 0 236 14 81 1 38 14 81 1 39 14 81 1 40 14 81 1 41 14 81 1 42 14 81 1 43 14 81 1 44 14 81 1 45 14 81 1 46 14 81 1 48 14 81 1 50 14 81 1 52 14 81 1 54 14 81 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 14 81 1 141 14 81 1 143] 
#[1 6 110 0 1 6 110 0 3 6 110 0 4 6 110 0 6 6 110 0 7 6 110 0 8 6 110 0 9 6 110 0 11 6 110 0 13 6 110 0 22 6 110 0 23 6 110 0 25 6 110 0 43 6 110 0 45 6 110 0 54 6 110 0 55 6 110 0 56 6 110 0 58 6 110 0 59 6 110 0 64 6 110 0 66 6 110 0 67 6 110 0 77 6 110 0 79 6 110 0 81 6 110 0 84 6 110 0 88 6 110 0 89 6 110 0 107 6 110 0 115 6 110 0 116 6 110 0 123 6 110 0 124 6 110 0 129 6 110 0 138 6 110 0 143 6 110 0 150 6 110 0 155 6 110 0 160 6 110 0 161 6 110 0 162 6 110 0 163 6 110 0 164 6 110 0 165 6 110 0 166 6 110 0 167 6 110 0 168 6 110 0 170 6 110 0 171 2 131 0 172 6 110 0 173 6 110 1 144] 
#[1 6 114 0 1 6 114 0 3 6 114 0 4 6 114 0 6 6 114 0 7 6 114 0 8 6 114 0 9 6 114 0 11 6 114 0 13 6 114 0 22 6 114 0 23 6 114 0 25 6 114 0 43 6 114 0 45 6 114 0 54 6 114 0 55 6 114 0 56 6 114 0 58 6 114 0 59 6 114 0 64 6 114 0 66 6 114 0 67 6 114 0 77 6 114 0 79 6 114 0 81 6 114 0 84 6 114 0 88 6 114 0 89 6 114 0 107 6 114 0 115 6 114 0 116 6 114 0 123 6 114 0 124 6 114 0 129 6 114 0 138 6 114 0 143 6 114 0 150 6 114 0 155 6 114 0 160 6 114 0 161 6 114 0 162 6 114 0 163 6 114 0 164 6 114 0 165 6 114 0 166 6 114 0 167 6 114 0 168 6 114 0 170 6 114 0 171 2 135 0 172 6 114 0 173 6 114 1 144] 
#[1 6 118 0 4 11 233 0 7 6 118 0 11 11 237 0 13 6 118 0 55 2 139 0 172 6 118 0 173 11 245 1 136 6 118 1 144] 
#[1 0 29 0 1 4 217 0 3 6 122 0 4 4 221 0 6 6 122 0 7 4 225 0 8 0 33 0 9 6 122 0 11 6 122 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 143 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 147 0 172 6 122 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 14 97 1 132 9 53 1 141 9 53 1 143 6 122 1 144] 
#[1 0 29 0 1 4 217 0 3 6 126 0 4 4 221 0 6 6 126 0 7 4 225 0 8 0 33 0 9 6 126 0 11 6 126 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 151 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 155 0 172 6 126 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 14 105 1 132 9 53 1 141 9 53 1 143 6 126 1 144] 
#[1 14 109 0 7 14 113 0 13] 
#[0 6 130 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[0 6 134 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 14 117 0 4] 
#[0 6 138 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 14 121 0 99 3 105 0 173] 
#[0 6 142 0 99 0 173] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 61 0 173 6 5 0 191 1 17 0 194 6 5 0 195 6 5 0 196 6 5 0 197 14 125 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 201 1 124 2 105 1 125 6 13 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 14 129 0 172] 
#[0 14 133 0 172] 
#[1 0 162 0 3 4 53 0 5 14 137 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 14 141 1 11] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 14 149 1 11] 
#[1 8 33 0 3 6 146 0 173 14 153 0 230] 
#[0 6 150 0 173] 
#[1 3 221 0 173 3 229 0 207 14 157 0 213] 
#[0 6 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 14 161 0 253] 
#[1 8 129 0 3 14 165 0 253] 
#[1 8 129 0 3 14 169 0 253] 
#[0 5 78 0 173] 
#[1 14 173 0 172 4 170 0 173 14 173 1 13] 
#[1 3 221 0 173 3 229 0 207 14 177 0 213] 
#[1 3 221 0 173 3 229 0 207 14 181 0 213] 
#[0 14 185 0 99] 
#[1 14 189 0 26 14 193 0 88 14 197 0 143] 
#[0 14 201 0 122] 
#[1 6 62 0 7 6 62 0 11 6 62 0 22 6 62 0 23 6 62 0 28 6 62 0 29 6 62 0 30 6 62 0 31 6 62 0 32 6 62 0 33 6 62 0 34 6 62 0 35 6 62 0 36 6 62 0 37 6 62 0 38 6 62 0 39 6 62 0 40 6 62 0 41 6 62 0 43 6 62 0 45 6 62 0 55 6 62 0 56 6 62 0 58 6 62 0 59 6 62 0 64 6 62 0 67 6 62 0 73 6 62 0 76 6 62 0 77 6 62 0 84 6 62 0 86 6 62 0 88 6 62 0 89 6 62 0 91 6 62 0 92 6 62 0 100 6 62 0 102 6 62 0 105 6 62 0 106 6 62 0 107 6 62 0 108 6 62 0 112 6 62 0 115 6 62 0 116 6 62 0 123 6 62 0 126 6 62 0 131 6 62 0 132 6 62 0 133 6 62 0 134 6 62 0 138 6 62 0 140 6 62 0 142 6 62 0 143 6 62 0 147 6 62 0 150 6 62 0 167 6 62 0 168 6 62 0 171 2 159 0 172 6 62 0 173 6 62 1 144] 
#[0 14 205 0 172] 
#[0 14 209 0 172] 
#[1 8 129 0 3 14 213 0 172 14 217 0 253] 
#[0 14 221 0 172] 
#[0 14 225 0 172] 
#[0 14 229 0 172] 
#[1 8 129 0 3 14 233 0 172 4 170 0 173 14 237 0 253 14 241 1 13] 
#[0 14 245 0 172] 
#[0 14 249 0 172] 
#[0 14 253 0 172] 
#[1 8 129 0 3 15 1 0 172 15 5 0 253] 
#[0 15 9 0 172] 
#[0 15 13 0 172] 
#[0 15 17 0 172] 
#[1 8 129 0 3 15 21 0 172 4 170 0 173 15 25 0 253 15 29 1 13] 
#[0 6 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 0 109 0 73 2 201 0 76 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 2 205 0 91 0 137 0 92 0 145 0 100 0 149 0 102 3 33 0 105 2 209 0 106 1 17 0 107 3 33 0 108 2 213 0 112 1 17 0 115 1 17 0 116 1 17 0 123 2 225 0 126 3 33 0 131 2 229 0 132 3 33 0 133 0 209 0 134 1 17 0 138 2 237 0 140 2 241 0 142 1 17 0 143 0 237 0 147 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 173 0 200 7 173 0 201 7 173 0 203 7 173 0 204 7 173 0 208 3 21 0 209 7 173 0 210 7 173 0 211 3 33 0 223 7 173 0 242 7 173 0 243 7 173 0 247 7 173 0 248 7 173 1 5 7 173 1 6 7 173 1 7 3 53 1 8 7 173 1 9 7 173 1 12 7 173 1 14 7 173 1 15 7 173 1 16 7 173 1 17 7 173 1 18 7 173 1 19 7 173 1 20 7 173 1 21 7 173 1 22 7 173 1 23 1 125 1 25 7 173 1 26 7 173 1 27 7 173 1 28 7 173 1 29 7 173 1 30 7 173 1 34 7 173 1 37 6 174 1 144] 
#[0 6 178 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 10 1 0 2 15 33 0 4 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 6 182 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 37 0 46 15 41 0 47] 
#[1 15 45 0 8 9 249 0 159] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 49 0 180 15 49 0 181 15 49 0 182 15 49 0 183 15 49 0 184 15 49 0 185 15 49 0 186 15 49 0 187 15 49 0 188 15 49 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 49 1 38 15 49 1 39 15 49 1 40 15 49 1 41 15 49 1 42 15 49 1 43 15 49 1 44 15 49 1 45 15 49 1 46 15 49 1 48 15 49 1 50 15 49 1 52 15 49 1 54 15 49 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 49 1 141 15 49 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 53 0 180 15 53 0 181 15 53 0 182 15 53 0 183 15 53 0 184 15 53 0 185 15 53 0 186 15 53 0 187 15 53 0 188 15 53 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 53 1 38 15 53 1 39 15 53 1 40 15 53 1 41 15 53 1 42 15 53 1 43 15 53 1 44 15 53 1 45 15 53 1 46 15 53 1 48 15 53 1 50 15 53 1 52 15 53 1 54 15 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 53 1 141 15 53 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 57 0 180 15 57 0 181 15 57 0 182 15 57 0 183 15 57 0 184 15 57 0 185 15 57 0 186 15 57 0 187 15 57 0 188 15 57 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 57 1 38 15 57 1 39 15 57 1 40 15 57 1 41 15 57 1 42 15 57 1 43 15 57 1 44 15 57 1 45 15 57 1 46 15 57 1 48 15 57 1 50 15 57 1 52 15 57 1 54 15 57 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 57 1 141 15 57 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 61 0 180 15 61 0 181 15 61 0 182 15 61 0 183 15 61 0 184 15 61 0 185 15 61 0 186 15 61 0 187 15 61 0 188 15 61 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 61 1 38 15 61 1 39 15 61 1 40 15 61 1 41 15 61 1 42 15 61 1 43 15 61 1 44 15 61 1 45 15 61 1 46 15 61 1 48 15 61 1 50 15 61 1 52 15 61 1 54 15 61 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 61 1 141 15 61 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 65 0 180 15 65 0 181 15 65 0 182 15 65 0 183 15 65 0 184 15 65 0 185 15 65 0 186 15 65 0 187 15 65 0 188 15 65 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 65 1 38 15 65 1 39 15 65 1 40 15 65 1 41 15 65 1 42 15 65 1 43 15 65 1 44 15 65 1 45 15 65 1 46 15 65 1 48 15 65 1 50 15 65 1 52 15 65 1 54 15 65 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 65 1 141 15 65 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 69 0 180 15 69 0 181 15 69 0 182 15 69 0 183 15 69 0 184 15 69 0 185 15 69 0 186 15 69 0 187 15 69 0 188 15 69 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 69 1 38 15 69 1 39 15 69 1 40 15 69 1 41 15 69 1 42 15 69 1 43 15 69 1 44 15 69 1 45 15 69 1 46 15 69 1 48 15 69 1 50 15 69 1 52 15 69 1 54 15 69 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 69 1 141 15 69 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 73 0 180 15 73 0 181 15 73 0 182 15 73 0 183 15 73 0 184 15 73 0 185 15 73 0 186 15 73 0 187 15 73 0 188 15 73 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 73 1 38 15 73 1 39 15 73 1 40 15 73 1 41 15 73 1 42 15 73 1 43 15 73 1 44 15 73 1 45 15 73 1 46 15 73 1 48 15 73 1 50 15 73 1 52 15 73 1 54 15 73 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 73 1 141 15 73 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 77 0 180 15 77 0 181 15 77 0 182 15 77 0 183 15 77 0 184 15 77 0 185 15 77 0 186 15 77 0 187 15 77 0 188 15 77 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 77 1 38 15 77 1 39 15 77 1 40 15 77 1 41 15 77 1 42 15 77 1 43 15 77 1 44 15 77 1 45 15 77 1 46 15 77 1 48 15 77 1 50 15 77 1 52 15 77 1 54 15 77 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 77 1 141 15 77 1 143] 
#[0 15 81 0 113] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 85 0 180 15 85 0 181 15 85 0 182 15 85 0 183 15 85 0 184 15 85 0 185 15 85 0 186 15 85 0 187 15 85 0 188 15 85 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 85 1 38 15 85 1 39 15 85 1 40 15 85 1 41 15 85 1 42 15 85 1 43 15 85 1 44 15 85 1 45 15 85 1 46 15 85 1 48 15 85 1 50 15 85 1 52 15 85 1 54 15 85 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 85 1 141 15 85 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 89 0 172 15 93 0 180 15 93 0 181 15 93 0 182 15 93 0 183 15 93 0 184 15 93 0 185 15 93 0 186 15 93 0 187 15 93 0 188 15 93 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 93 1 38 15 93 1 39 15 93 1 40 15 93 1 41 15 93 1 42 15 93 1 43 15 93 1 44 15 93 1 45 15 93 1 46 15 93 1 48 15 93 1 50 15 93 1 52 15 93 1 54 15 93 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 93 1 141 15 93 1 143] 
#[0 15 97 0 7] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 101 0 172 15 105 0 180 15 105 0 181 15 105 0 182 15 105 0 183 15 105 0 184 15 105 0 185 15 105 0 186 15 105 0 187 15 105 0 188 15 105 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 105 1 38 15 105 1 39 15 105 1 40 15 105 1 41 15 105 1 42 15 105 1 43 15 105 1 44 15 105 1 45 15 105 1 46 15 105 1 48 15 105 1 50 15 105 1 52 15 105 1 54 15 105 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 105 1 141 15 105 1 143] 
#[0 15 109 0 7] 
#[0 15 133 0 23 0 26 0 45 0 58 0 61 1 59] 
#[1 4 218 0 11 4 218 0 13 4 218 0 55 2 163 0 172 4 218 0 173 15 141 1 66 4 218 1 144] 
#[1 6 186 0 11 13 13 0 13 6 186 0 55 6 186 0 172 6 186 0 173 13 17 1 65 6 186 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 4 218 0 11 4 218 0 13 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 4 218 0 55 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 4 218 0 172 4 218 0 173 10 85 1 47 10 89 1 49 10 93 1 51 15 145 1 66 4 218 1 144] 
#[1 6 190 0 11 13 13 0 13 6 190 0 55 6 190 0 172 6 190 0 173 13 17 1 65 6 190 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 149 0 172 15 153 0 180 15 153 0 181 15 153 0 182 15 153 0 183 15 153 0 184 15 153 0 185 15 153 0 186 15 153 0 187 15 153 0 188 15 153 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 153 1 38 15 153 1 39 15 153 1 40 15 153 1 41 15 153 1 42 15 153 1 43 15 153 1 44 15 153 1 45 15 153 1 46 15 153 1 48 15 153 1 50 15 153 1 52 15 153 1 54 15 153 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 153 1 141 15 153 1 143] 
#[0 6 194 0 11 0 13 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 4 218 0 11 4 218 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 227 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 4 218 0 172 4 218 0 173 15 157 0 180 15 157 0 181 15 157 0 182 15 157 0 183 15 157 0 184 15 157 0 185 15 157 0 186 15 157 0 187 15 157 0 188 15 157 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 157 1 38 15 157 1 39 15 157 1 40 15 157 1 41 15 157 1 42 15 157 1 43 15 157 1 44 15 157 1 45 15 157 1 46 15 157 1 48 15 157 1 50 15 157 1 52 15 157 1 54 15 157 1 55 5 113 1 56 5 113 1 57 5 113 1 58 15 161 1 66 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 157 1 141 15 157 1 143 4 218 1 144] 
#[1 4 218 0 11 4 218 0 13 4 218 0 55 2 167 0 172 4 218 0 173 15 169 1 66 4 218 1 144] 
#[1 6 198 0 11 13 13 0 13 6 198 0 55 6 198 0 172 6 198 0 173 13 17 1 65 6 198 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 173 0 180 15 173 0 181 15 173 0 182 15 173 0 183 15 173 0 184 15 173 0 185 15 173 0 186 15 173 0 187 15 173 0 188 15 173 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 173 1 38 15 173 1 39 15 173 1 40 15 173 1 41 15 173 1 42 15 173 1 43 15 173 1 44 15 173 1 45 15 173 1 46 15 173 1 48 15 173 1 50 15 173 1 52 15 173 1 54 15 173 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 173 1 141 15 173 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 177 0 180 15 177 0 181 15 177 0 182 15 177 0 183 15 177 0 184 15 177 0 185 15 177 0 186 15 177 0 187 15 177 0 188 15 177 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 177 1 38 15 177 1 39 15 177 1 40 15 177 1 41 15 177 1 42 15 177 1 43 15 177 1 44 15 177 1 45 15 177 1 46 15 177 1 48 15 177 1 50 15 177 1 52 15 177 1 54 15 177 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 177 1 141 15 177 1 143] 
#[1 4 53 0 5 2 171 0 7 2 171 0 11 2 171 0 22 2 171 0 23 2 171 0 28 2 171 0 29 2 171 0 30 2 171 0 31 2 171 0 32 2 171 0 33 2 171 0 34 2 171 0 35 2 171 0 36 2 171 0 37 2 171 0 38 2 171 0 39 2 171 0 40 2 171 0 41 2 171 0 43 2 171 0 45 2 171 0 55 2 171 0 56 2 171 0 58 2 171 0 59 2 171 0 64 2 171 0 67 2 171 0 73 2 171 0 76 2 171 0 77 2 171 0 84 2 171 0 86 2 171 0 88 2 171 0 89 2 171 0 91 2 171 0 92 2 171 0 100 2 171 0 102 2 171 0 105 2 171 0 106 2 171 0 107 2 171 0 108 2 171 0 112 2 171 0 115 2 171 0 116 2 171 0 123 2 171 0 126 2 171 0 131 2 171 0 132 2 171 0 133 2 171 0 134 2 171 0 138 2 171 0 140 2 171 0 142 2 171 0 143 2 171 0 147 2 171 0 150 2 171 0 167 2 171 0 168 2 171 0 171 2 175 0 172 2 171 0 173 15 181 0 228 15 181 0 229 15 181 0 233 2 171 1 144] 
#[0 6 206 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 210 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 185 0 172 15 189 0 180 15 189 0 181 15 189 0 182 15 189 0 183 15 189 0 184 15 189 0 185 15 189 0 186 15 189 0 187 15 189 0 188 15 189 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 189 1 38 15 189 1 39 15 189 1 40 15 189 1 41 15 189 1 42 15 189 1 43 15 189 1 44 15 189 1 45 15 189 1 46 15 189 1 48 15 189 1 50 15 189 1 52 15 189 1 54 15 189 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 189 1 141 15 189 1 143] 
#[0 6 214 0 4 0 7] 
#[1 15 193 0 4 13 53 0 7 13 57 0 231] 
#[0 6 218 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 6 25 0 68 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 29 0 191 1 17 0 194 6 29 0 195 6 29 0 196 6 29 0 197 15 197 1 24] 
#[0 6 222 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 226 0 11 6 226 0 55 2 179 0 172 6 226 0 173 6 226 1 144] 
#[1 15 201 0 121 3 213 0 162 15 205 0 182] 
#[0 6 230 0 11 0 55 0 172 0 173 1 144] 
#[0 15 209 0 172] 
#[1 15 213 0 121 3 213 0 162 15 217 0 182] 
#[0 15 221 0 172] 
#[1 8 89 0 11 8 93 0 172 8 97 0 173 15 225 0 207 8 105 0 214 8 109 0 216 8 113 0 217] 
#[1 6 234 0 55 6 234 0 82 6 234 0 96 6 234 0 98 6 234 0 99 6 234 0 121 6 234 0 151 6 234 0 162 6 61 0 173] 
#[0 6 238 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 67 0 73 0 75 0 77 0 84 0 86 0 88 0 89 0 92 0 93 0 100 0 102 0 103 0 105 0 107 0 108 0 109 0 110 0 111 0 115 0 116 0 123 0 125 0 126 0 131 0 133 0 134 0 135 0 136 0 137 0 138 0 140 0 143 0 147 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 15 229 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 15 229 0 201 15 229 0 203 15 229 0 212 1 49 0 223 15 229 0 234 1 57 0 235 15 229 0 236 15 229 0 237 15 229 0 238 15 229 0 239 15 229 0 240 15 229 0 241 15 229 0 242 15 229 0 243 15 229 0 247 15 229 0 248 15 229 1 18 15 229 1 19 15 229 1 20 15 229 1 21 15 229 1 22 15 229 1 23 1 125 1 25 15 229 1 26 15 229 1 27 15 229 1 28 15 229 1 29 15 229 1 30 15 229 1 34 15 229 1 37 1 157 1 56 1 157 1 57 1 157 1 58 15 229 1 62 15 229 1 63 15 229 1 64 15 229 1 67 15 229 1 68 15 229 1 69 15 229 1 70 15 229 1 71 15 229 1 72 15 229 1 73 15 229 1 74 15 229 1 75 15 229 1 76 15 229 1 77 15 229 1 78 15 229 1 79 15 229 1 80 15 229 1 81 15 229 1 82 15 229 1 83 15 229 1 84 15 229 1 85 15 229 1 90 15 229 1 91 2 9 1 92 15 229 1 97 15 229 1 100 15 229 1 101 15 229 1 102 15 229 1 103 15 229 1 104 15 229 1 109 15 229 1 110 15 229 1 111 15 229 1 112 15 229 1 113 15 229 1 114 15 229 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 15 229 1 129 2 117 1 130 2 121 1 131 15 229 1 139 15 229 1 140 15 229 1 142] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 233 0 180 15 233 0 181 15 233 0 182 15 233 0 183 15 233 0 184 15 233 0 185 15 233 0 186 15 233 0 187 15 233 0 188 15 233 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 233 1 38 15 233 1 39 15 233 1 40 15 233 1 41 15 233 1 42 15 233 1 43 15 233 1 44 15 233 1 45 15 233 1 46 15 233 1 48 15 233 1 50 15 233 1 52 15 233 1 54 15 233 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 233 1 141 15 233 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 15 237 0 180 15 237 0 181 15 237 0 182 15 237 0 183 15 237 0 184 15 237 0 185 15 237 0 186 15 237 0 187 15 237 0 188 15 237 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 15 237 1 38 15 237 1 39 15 237 1 40 15 237 1 41 15 237 1 42 15 237 1 43 15 237 1 44 15 237 1 45 15 237 1 46 15 237 1 48 15 237 1 50 15 237 1 52 15 237 1 54 15 237 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 15 237 1 141 15 237 1 143] 
#[1 15 241 0 148 15 245 0 152] 
#[0 15 249 0 172] 
#[1 6 242 0 22 6 242 0 23 6 242 0 43 6 242 0 45 6 242 0 55 6 242 0 56 6 242 0 58 6 242 0 59 6 242 0 64 6 242 0 67 6 242 0 77 6 242 0 84 6 242 0 88 6 242 0 89 6 242 0 99 6 242 0 107 6 242 0 115 6 242 0 116 6 242 0 123 6 242 0 138 6 242 0 143 6 242 0 150 6 242 0 167 6 242 0 168 6 242 0 171 15 253 0 172 6 242 0 173] 
#[0 6 246 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 9 25 0 79 16 9 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 16 1 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 5 0 191 1 17 0 194 16 5 0 195 16 5 0 196 16 5 0 197 16 9 0 252] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 13 0 191 1 17 0 194 16 13 0 195 16 13 0 196 16 13 0 197] 
#[0 6 250 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 16 17 0 228 16 17 0 229 16 17 0 233 16 17 1 1 16 17 1 2] 
#[0 6 254 0 4 0 7 0 172] 
#[0 7 2 0 4 0 7 0 172] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 16 29 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 16 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 37 0 191 1 17 0 194 16 37 0 195 16 37 0 196 16 37 0 197] 
#[1 16 41 0 4 16 45 0 7 16 49 0 172 16 53 0 254] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 16 57 0 182 16 57 0 191 1 17 0 194 16 57 0 195 16 57 0 196 16 57 0 197 16 57 1 43 16 57 1 105] 
#[0 7 10 0 7 0 11 0 55 0 172 0 173 1 144] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 16 61 0 172 16 65 0 182 16 65 0 191 1 17 0 194 16 65 0 195 16 65 0 196 16 65 0 197 16 65 1 43 16 65 1 105] 
#[1 0 29 0 1 0 33 0 9 7 14 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 2 187 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 16 69 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 2 191 0 172 7 14 0 173 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 69 0 201 16 69 0 203 16 69 0 212 16 73 0 220 1 49 0 223 16 69 0 234 1 57 0 235 16 69 0 236 16 69 0 237 16 69 0 238 16 69 0 239 16 69 0 240 16 69 0 241 16 69 0 242 16 69 0 243 16 69 0 247 16 69 0 248 16 69 1 18 16 69 1 19 16 69 1 20 16 69 1 21 16 69 1 22 16 69 1 23 1 125 1 25 16 69 1 26 16 69 1 27 16 69 1 28 16 69 1 29 16 69 1 30 16 69 1 34 16 69 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 69 1 62 16 69 1 63 16 69 1 64 16 69 1 67 16 69 1 68 16 69 1 69 16 69 1 70 16 69 1 71 16 69 1 72 16 69 1 73 16 69 1 74 16 69 1 75 16 69 1 76 16 69 1 77 16 69 1 78 16 69 1 79 16 69 1 80 16 69 1 81 16 69 1 82 16 69 1 83 16 69 1 84 16 69 1 85 16 69 1 90 16 69 1 91 2 9 1 92 16 69 1 97 16 69 1 100 16 69 1 101 16 69 1 102 16 69 1 103 16 69 1 104 16 69 1 109 16 69 1 110 16 69 1 111 16 69 1 112 16 69 1 113 16 69 1 114 16 69 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 69 1 129 2 117 1 130 2 121 1 131 16 69 1 139 16 69 1 140 16 69 1 142 7 14 1 144] 
#[1 7 18 0 96 7 18 0 98 7 18 0 99 7 18 0 162 16 77 1 87] 
#[1 7 22 0 11 7 22 0 55 2 195 0 172 7 22 0 173 7 22 1 144] 
#[0 7 26 0 11 0 55 0 172 0 173 1 144] 
#[1 7 30 0 11 7 30 0 55 2 199 0 172 7 30 0 173 7 30 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 89 0 180 16 89 0 181 16 89 0 182 16 89 0 183 16 89 0 184 16 89 0 185 16 89 0 186 16 89 0 187 16 89 0 188 16 89 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 89 1 38 16 89 1 39 16 89 1 40 16 89 1 41 16 89 1 42 16 89 1 43 16 89 1 44 16 89 1 45 16 89 1 46 16 89 1 48 16 89 1 50 16 89 1 52 16 89 1 54 16 89 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 89 1 141 16 89 1 143] 
#[0 16 93 0 55] 
#[1 7 34 0 82 7 34 0 99 7 34 0 162 6 61 0 173 16 97 1 99] 
#[0 16 101 0 172] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 77 0 162 0 84 0 162 0 88 0 162 0 89 0 162 0 99 0 162 0 107 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 138 0 162 0 143 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 16 105 0 228 16 105 0 229 16 105 0 233] 
#[0 7 38 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 7 42 0 11 0 55 0 172 0 173 1 144] 
#[0 16 109 0 151] 
#[0 16 113 0 153] 
#[0 16 117 0 99] 
#[1 7 46 0 11 7 46 0 22 7 46 0 23 7 46 0 28 7 46 0 29 7 46 0 30 7 46 0 31 7 46 0 32 7 46 0 33 7 46 0 34 7 46 0 35 7 46 0 36 7 46 0 37 7 46 0 38 7 46 0 39 7 46 0 40 7 46 0 41 7 46 0 43 7 46 0 45 7 46 0 55 7 46 0 56 7 46 0 58 7 46 0 59 7 46 0 64 7 46 0 67 7 46 0 73 7 46 0 76 7 46 0 77 7 46 0 84 7 46 0 86 7 46 0 88 7 46 0 89 7 46 0 91 7 46 0 92 7 46 0 100 7 46 0 102 7 46 0 105 7 46 0 106 7 46 0 107 7 46 0 108 7 46 0 112 7 46 0 115 7 46 0 116 7 46 0 123 7 46 0 126 7 46 0 131 7 46 0 132 7 46 0 133 7 46 0 134 7 46 0 138 7 46 0 140 7 46 0 142 7 46 0 143 7 46 0 147 7 46 0 150 7 46 0 167 7 46 0 168 7 46 0 171 2 207 0 172 7 46 0 173 7 46 1 144] 
#[1 5 149 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 5 153 0 56 1 17 0 58 1 17 0 59 5 157 0 64 1 17 0 67 1 17 0 77 16 121 0 78 16 121 0 80 5 169 0 84 16 121 0 87 1 17 0 88 5 177 0 89 16 121 0 90 16 121 0 94 1 17 0 107 16 121 0 114 1 17 0 115 1 17 0 116 16 121 0 118 16 121 0 119 16 121 0 120 1 17 0 123 1 17 0 138 16 121 0 139 1 17 0 143 5 209 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 213 0 191 1 17 0 194 5 213 0 195 5 213 0 196 5 213 0 197 16 121 0 221 5 221 0 222 16 121 0 224 5 229 0 225 5 233 0 226 16 121 0 227] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 125 0 172 16 129 0 180 16 129 0 181 16 129 0 182 16 129 0 183 16 129 0 184 16 129 0 185 16 129 0 186 16 129 0 187 16 129 0 188 16 129 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 129 1 38 16 129 1 39 16 129 1 40 16 129 1 41 16 129 1 42 16 129 1 43 16 129 1 44 16 129 1 45 16 129 1 46 16 129 1 48 16 129 1 50 16 129 1 52 16 129 1 54 16 129 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 129 1 141 16 129 1 143] 
#[0 16 133 0 5] 
#[1 7 50 0 7 7 50 0 11 7 50 0 22 7 50 0 23 7 50 0 28 7 50 0 29 7 50 0 30 7 50 0 31 7 50 0 32 7 50 0 33 7 50 0 34 7 50 0 35 7 50 0 36 7 50 0 37 7 50 0 38 7 50 0 39 7 50 0 40 7 50 0 41 7 50 0 43 7 50 0 45 7 50 0 55 7 50 0 56 7 50 0 58 7 50 0 59 7 50 0 64 7 50 0 67 7 50 0 73 7 50 0 76 7 50 0 77 7 50 0 84 7 50 0 86 7 50 0 88 7 50 0 89 7 50 0 91 7 50 0 92 7 50 0 100 7 50 0 102 7 50 0 105 7 50 0 106 7 50 0 107 7 50 0 108 7 50 0 112 7 50 0 115 7 50 0 116 7 50 0 123 7 50 0 126 7 50 0 131 7 50 0 132 7 50 0 133 7 50 0 134 7 50 0 138 7 50 0 140 7 50 0 142 7 50 0 143 7 50 0 147 7 50 0 150 7 50 0 167 7 50 0 168 7 50 0 171 2 211 0 172 7 50 0 173 7 50 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 137 0 177 10 249 0 249] 
#[1 8 129 0 3 16 141 0 253] 
#[0 7 54 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 67 0 6 0 77 0 6 0 84 0 6 0 88 0 6 0 89 0 6 0 99 0 6 0 107 0 6 0 115 0 6 0 116 0 6 0 123 0 6 0 138 0 6 0 143 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 145 0 177 11 89 0 244] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 149 0 180 16 149 0 181 16 149 0 182 16 149 0 183 16 149 0 184 16 149 0 185 16 149 0 186 16 149 0 187 16 149 0 188 16 149 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 149 1 38 16 149 1 39 16 149 1 40 16 149 1 41 16 149 1 42 16 149 1 43 16 149 1 44 16 149 1 45 16 149 1 46 16 149 1 48 16 149 1 50 16 149 1 52 16 149 1 54 16 149 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 149 1 141 16 149 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 153 0 180 16 153 0 181 16 153 0 182 16 153 0 183 16 153 0 184 16 153 0 185 16 153 0 186 16 153 0 187 16 153 0 188 16 153 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 153 1 38 16 153 1 39 16 153 1 40 16 153 1 41 16 153 1 42 16 153 1 43 16 153 1 44 16 153 1 45 16 153 1 46 16 153 1 48 16 153 1 50 16 153 1 52 16 153 1 54 16 153 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 153 1 141 16 153 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 157 0 180 16 157 0 181 16 157 0 182 16 157 0 183 16 157 0 184 16 157 0 185 16 157 0 186 16 157 0 187 16 157 0 188 16 157 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 157 1 38 16 157 1 39 16 157 1 40 16 157 1 41 16 157 1 42 16 157 1 43 16 157 1 44 16 157 1 45 16 157 1 46 16 157 1 48 16 157 1 50 16 157 1 52 16 157 1 54 16 157 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 157 1 141 16 157 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 161 0 180 16 161 0 181 16 161 0 182 16 161 0 183 16 161 0 184 16 161 0 185 16 161 0 186 16 161 0 187 16 161 0 188 16 161 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 161 1 38 16 161 1 39 16 161 1 40 16 161 1 41 16 161 1 42 16 161 1 43 16 161 1 44 16 161 1 45 16 161 1 46 16 161 1 48 16 161 1 50 16 161 1 52 16 161 1 54 16 161 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 161 1 141 16 161 1 143] 
#[0 7 58 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 62 0 3 7 62 0 4 7 62 0 5 7 62 0 7 7 62 0 11 7 62 0 13 7 62 0 22 7 62 0 23 7 62 0 28 7 62 0 29 7 62 0 30 7 62 0 31 7 62 0 32 7 62 0 33 7 62 0 34 7 62 0 35 7 62 0 36 7 62 0 37 7 62 0 38 7 62 0 39 7 62 0 40 7 62 0 41 7 62 0 43 7 62 0 45 7 62 0 55 7 62 0 56 7 62 0 58 7 62 0 59 7 62 0 64 7 62 0 67 7 62 0 73 7 62 0 76 7 62 0 77 7 62 0 82 7 62 0 84 7 62 0 86 7 62 0 88 7 62 0 89 7 62 0 91 7 62 0 92 7 62 0 99 7 62 0 100 7 62 0 102 7 62 0 105 7 62 0 106 7 62 0 107 7 62 0 108 7 62 0 112 7 62 0 115 7 62 0 116 7 62 0 121 7 62 0 123 7 62 0 126 7 62 0 131 7 62 0 132 7 62 0 133 7 62 0 134 7 62 0 138 7 62 0 140 7 62 0 142 7 62 0 143 7 62 0 147 7 62 0 150 7 62 0 151 7 62 0 162 7 62 0 167 7 62 0 168 7 62 0 171 2 215 0 172 7 62 0 173 7 62 1 144] 
#[0 7 66 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 70 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 7 74 0 1 7 74 0 3 7 74 0 4 7 74 0 6 7 74 0 7 7 74 0 8 7 74 0 9 7 74 0 11 7 74 0 13 7 74 0 22 7 74 0 23 7 74 0 25 7 74 0 43 7 74 0 45 7 74 0 54 7 74 0 55 7 74 0 56 7 74 0 58 7 74 0 59 7 74 0 64 7 74 0 66 7 74 0 67 7 74 0 77 7 74 0 79 7 74 0 81 7 74 0 84 7 74 0 88 7 74 0 89 7 74 0 107 7 74 0 115 7 74 0 116 7 74 0 123 7 74 0 124 7 74 0 129 7 74 0 138 7 74 0 143 7 74 0 150 7 74 0 155 7 74 0 160 7 74 0 161 7 74 0 162 7 74 0 163 7 74 0 164 7 74 0 165 7 74 0 166 7 74 0 167 7 74 0 168 7 74 0 170 7 74 0 171 2 219 0 172 7 74 0 173 7 74 1 144] 
#[1 7 78 0 1 7 78 0 3 7 78 0 4 7 78 0 6 7 78 0 7 7 78 0 8 7 78 0 9 7 78 0 11 7 78 0 13 7 78 0 22 7 78 0 23 7 78 0 25 7 78 0 43 7 78 0 45 7 78 0 54 7 78 0 55 7 78 0 56 7 78 0 58 7 78 0 59 7 78 0 64 7 78 0 66 7 78 0 67 7 78 0 77 7 78 0 79 7 78 0 81 7 78 0 84 7 78 0 88 7 78 0 89 7 78 0 107 7 78 0 115 7 78 0 116 7 78 0 123 7 78 0 124 7 78 0 129 7 78 0 138 7 78 0 143 7 78 0 150 7 78 0 155 7 78 0 160 7 78 0 161 7 78 0 162 7 78 0 163 7 78 0 164 7 78 0 165 7 78 0 166 7 78 0 167 7 78 0 168 7 78 0 170 7 78 0 171 2 223 0 172 7 78 0 173 7 78 1 144] 
#[0 16 173 0 172] 
#[0 16 177 0 172] 
#[0 7 82 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 86 0 3 7 86 0 4 7 86 0 5 7 86 0 7 7 86 0 11 7 86 0 13 7 86 0 22 7 86 0 23 7 86 0 28 7 86 0 29 7 86 0 30 7 86 0 31 7 86 0 32 7 86 0 33 7 86 0 34 7 86 0 35 7 86 0 36 7 86 0 37 7 86 0 38 7 86 0 39 7 86 0 40 7 86 0 41 7 86 0 43 7 86 0 45 7 86 0 55 7 86 0 56 7 86 0 58 7 86 0 59 7 86 0 64 7 86 0 67 7 86 0 73 7 86 0 76 7 86 0 77 7 86 0 82 7 86 0 84 7 86 0 86 7 86 0 88 7 86 0 89 7 86 0 91 7 86 0 92 7 86 0 99 7 86 0 100 7 86 0 102 7 86 0 105 7 86 0 106 7 86 0 107 7 86 0 108 7 86 0 112 7 86 0 115 7 86 0 116 7 86 0 121 7 86 0 123 7 86 0 126 7 86 0 131 7 86 0 132 7 86 0 133 7 86 0 134 7 86 0 138 7 86 0 140 7 86 0 142 7 86 0 143 7 86 0 147 7 86 0 150 7 86 0 151 7 86 0 162 7 86 0 167 7 86 0 168 7 86 0 171 2 227 0 172 7 86 0 173 7 86 1 144] 
#[0 7 90 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 94 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 7 98 0 4 4 221 0 6 7 98 0 7 4 225 0 8 0 33 0 9 7 98 0 11 7 98 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 231 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 7 98 0 172 7 98 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 181 1 132 9 53 1 141 9 53 1 143 7 98 1 144] 
#[0 7 102 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 7 106 0 4 4 221 0 6 7 106 0 7 4 225 0 8 0 33 0 9 7 106 0 11 7 106 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 235 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 7 106 0 172 7 106 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 185 1 132 9 53 1 141 9 53 1 143 7 106 1 144] 
#[0 7 110 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 7 114 0 4 4 221 0 6 7 114 0 7 4 225 0 8 0 33 0 9 7 114 0 11 7 114 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 239 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 243 0 172 7 114 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 193 1 132 9 53 1 141 9 53 1 143 7 114 1 144] 
#[1 0 29 0 1 4 217 0 3 7 118 0 4 4 221 0 6 7 118 0 7 4 225 0 8 0 33 0 9 7 118 0 11 7 118 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 247 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 2 251 0 172 7 118 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 201 1 132 9 53 1 141 9 53 1 143 7 118 1 144] 
#[0 7 122 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 130 0 99 0 173] 
#[0 16 205 0 117] 
#[0 16 209 0 117] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 16 213 1 11] 
#[1 3 221 0 173 3 229 0 207 16 217 0 213] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 16 221 0 172 16 225 0 180 16 225 0 181 16 225 0 182 16 225 0 183 16 225 0 184 16 225 0 185 16 225 0 186 16 225 0 187 16 225 0 188 16 225 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 16 225 1 38 16 225 1 39 16 225 1 40 16 225 1 41 16 225 1 42 16 225 1 43 16 225 1 44 16 225 1 45 16 225 1 46 16 225 1 48 16 225 1 50 16 225 1 52 16 225 1 54 16 225 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 16 225 1 141 16 225 1 143] 
#[1 3 221 0 173 3 229 0 207 16 229 0 213] 
#[0 7 134 0 173] 
#[0 16 233 0 99] 
#[1 0 162 0 3 4 53 0 5 8 37 0 172 2 255 0 173 3 229 0 207 16 237 0 213 16 241 0 228 16 241 0 229 16 241 0 233] 
#[1 3 221 0 173 3 229 0 207 16 245 0 213] 
#[1 3 221 0 173 3 229 0 207 16 249 0 213] 
#[1 3 221 0 173 3 229 0 207 16 253 0 213] 
#[0 17 1 0 99] 
#[0 17 5 0 99] 
#[0 17 9 0 172] 
#[0 7 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 13 0 191 1 17 0 194 17 13 0 195 17 13 0 196 17 13 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 17 0 191 1 17 0 194 17 17 0 195 17 17 0 196 17 17 0 197] 
#[1 8 129 0 3 17 21 0 253] 
#[1 0 162 0 3 4 53 0 5 17 25 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 17 29 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 33 0 191 1 17 0 194 17 33 0 195 17 33 0 196 17 33 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 37 0 191 1 17 0 194 17 37 0 195 17 37 0 196 17 37 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 41 0 191 1 17 0 194 17 41 0 195 17 41 0 196 17 41 0 197] 
#[1 8 129 0 3 17 49 0 172 2 47 0 173 17 45 0 253 17 49 1 13] 
#[1 17 53 0 172 4 170 0 173 17 53 1 13] 
#[1 3 221 0 173 3 229 0 207 17 57 0 213] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 61 0 191 1 17 0 194 17 61 0 195 17 61 0 196 17 61 0 197] 
#[1 17 65 0 107 17 69 0 116 17 73 0 138] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 77 0 191 1 17 0 194 17 77 0 195 17 77 0 196 17 77 0 197] 
#[1 8 129 0 3 17 81 0 253] 
#[1 0 162 0 3 4 53 0 5 17 85 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 17 89 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 93 0 191 1 17 0 194 17 93 0 195 17 93 0 196 17 93 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 97 0 191 1 17 0 194 17 97 0 195 17 97 0 196 17 97 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 101 0 191 1 17 0 194 17 101 0 195 17 101 0 196 17 101 0 197] 
#[1 8 129 0 3 17 109 0 172 2 47 0 173 17 105 0 253 17 109 1 13] 
#[1 17 113 0 172 4 170 0 173 17 113 1 13] 
#[1 3 221 0 173 3 229 0 207 17 117 0 213] 
#[0 7 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 17 121 0 172] 
#[0 17 125 0 172] 
#[1 7 221 0 159 17 129 0 190] 
#[1 7 158 0 3 7 158 0 4 7 158 0 5 7 158 0 7 7 158 0 11 7 158 0 13 7 158 0 22 7 158 0 23 7 158 0 28 7 158 0 29 7 158 0 30 7 158 0 31 7 158 0 32 7 158 0 33 7 158 0 34 7 158 0 35 7 158 0 36 7 158 0 37 7 158 0 38 7 158 0 39 7 158 0 40 7 158 0 41 7 158 0 43 7 158 0 45 7 158 0 55 7 158 0 56 7 158 0 58 7 158 0 59 7 158 0 64 7 158 0 67 7 158 0 73 7 158 0 76 7 158 0 77 7 158 0 82 7 158 0 84 7 158 0 86 7 158 0 88 7 158 0 89 7 158 0 91 7 158 0 92 7 158 0 99 7 158 0 100 7 158 0 102 7 158 0 105 7 158 0 106 7 158 0 107 7 158 0 108 7 158 0 112 7 158 0 115 7 158 0 116 7 158 0 121 7 158 0 123 7 158 0 126 7 158 0 131 7 158 0 132 7 158 0 133 7 158 0 134 7 158 0 138 7 158 0 140 7 158 0 142 7 158 0 143 7 158 0 147 7 158 0 150 7 158 0 151 7 158 0 162 7 158 0 167 7 158 0 168 7 158 0 171 3 3 0 172 7 158 0 173 7 158 1 144] 
#[1 7 162 0 3 7 162 0 4 7 162 0 5 7 162 0 7 7 162 0 11 7 162 0 13 7 162 0 22 7 162 0 23 7 162 0 28 7 162 0 29 7 162 0 30 7 162 0 31 7 162 0 32 7 162 0 33 7 162 0 34 7 162 0 35 7 162 0 36 7 162 0 37 7 162 0 38 7 162 0 39 7 162 0 40 7 162 0 41 7 162 0 43 7 162 0 45 7 162 0 55 7 162 0 56 7 162 0 58 7 162 0 59 7 162 0 64 7 162 0 67 7 162 0 73 7 162 0 76 7 162 0 77 7 162 0 82 7 162 0 84 7 162 0 86 7 162 0 88 7 162 0 89 7 162 0 91 7 162 0 92 7 162 0 99 7 162 0 100 7 162 0 102 7 162 0 105 7 162 0 106 7 162 0 107 7 162 0 108 7 162 0 112 7 162 0 115 7 162 0 116 7 162 0 121 7 162 0 123 7 162 0 126 7 162 0 131 7 162 0 132 7 162 0 133 7 162 0 134 7 162 0 138 7 162 0 140 7 162 0 142 7 162 0 143 7 162 0 147 7 162 0 150 7 162 0 151 7 162 0 162 7 162 0 167 7 162 0 168 7 162 0 171 3 7 0 172 7 162 0 173 7 162 1 144] 
#[1 7 166 0 3 7 166 0 4 7 166 0 5 7 166 0 7 7 166 0 11 7 166 0 13 7 166 0 22 7 166 0 23 7 166 0 28 7 166 0 29 7 166 0 30 7 166 0 31 7 166 0 32 7 166 0 33 7 166 0 34 7 166 0 35 7 166 0 36 7 166 0 37 7 166 0 38 7 166 0 39 7 166 0 40 7 166 0 41 7 166 0 43 7 166 0 45 7 166 0 55 7 166 0 56 7 166 0 58 7 166 0 59 7 166 0 64 7 166 0 67 7 166 0 73 7 166 0 76 7 166 0 77 7 166 0 82 7 166 0 84 7 166 0 86 7 166 0 88 7 166 0 89 7 166 0 91 7 166 0 92 7 166 0 99 7 166 0 100 7 166 0 102 7 166 0 105 7 166 0 106 7 166 0 107 7 166 0 108 7 166 0 112 7 166 0 115 7 166 0 116 7 166 0 121 7 166 0 123 7 166 0 126 7 166 0 131 7 166 0 132 7 166 0 133 7 166 0 134 7 166 0 138 7 166 0 140 7 166 0 142 7 166 0 143 7 166 0 147 7 166 0 150 7 166 0 151 7 166 0 162 7 166 0 167 7 166 0 168 7 166 0 171 3 11 0 172 7 166 0 173 7 166 1 144] 
#[1 7 170 0 3 7 170 0 4 7 170 0 5 7 170 0 7 7 170 0 11 7 170 0 13 7 170 0 22 7 170 0 23 7 170 0 28 7 170 0 29 7 170 0 30 7 170 0 31 7 170 0 32 7 170 0 33 7 170 0 34 7 170 0 35 7 170 0 36 7 170 0 37 7 170 0 38 7 170 0 39 7 170 0 40 7 170 0 41 7 170 0 43 7 170 0 45 7 170 0 55 7 170 0 56 7 170 0 58 7 170 0 59 7 170 0 64 7 170 0 67 7 170 0 73 7 170 0 76 7 170 0 77 7 170 0 82 7 170 0 84 7 170 0 86 7 170 0 88 7 170 0 89 7 170 0 91 7 170 0 92 7 170 0 99 7 170 0 100 7 170 0 102 7 170 0 105 7 170 0 106 7 170 0 107 7 170 0 108 7 170 0 112 7 170 0 115 7 170 0 116 7 170 0 121 7 170 0 123 7 170 0 126 7 170 0 131 7 170 0 132 7 170 0 133 7 170 0 134 7 170 0 138 7 170 0 140 7 170 0 142 7 170 0 143 7 170 0 147 7 170 0 150 7 170 0 151 7 170 0 162 7 170 0 167 7 170 0 168 7 170 0 171 3 15 0 172 7 170 0 173 7 170 1 144] 
#[1 7 174 0 3 7 174 0 4 7 174 0 5 7 174 0 7 7 174 0 11 7 174 0 13 7 174 0 22 7 174 0 23 7 174 0 28 7 174 0 29 7 174 0 30 7 174 0 31 7 174 0 32 7 174 0 33 7 174 0 34 7 174 0 35 7 174 0 36 7 174 0 37 7 174 0 38 7 174 0 39 7 174 0 40 7 174 0 41 7 174 0 43 7 174 0 45 7 174 0 55 7 174 0 56 7 174 0 58 7 174 0 59 7 174 0 64 7 174 0 67 7 174 0 73 7 174 0 76 7 174 0 77 7 174 0 82 7 174 0 84 7 174 0 86 7 174 0 88 7 174 0 89 7 174 0 91 7 174 0 92 7 174 0 99 7 174 0 100 7 174 0 102 7 174 0 105 7 174 0 106 7 174 0 107 7 174 0 108 7 174 0 112 7 174 0 115 7 174 0 116 7 174 0 121 7 174 0 123 7 174 0 126 7 174 0 131 7 174 0 132 7 174 0 133 7 174 0 134 7 174 0 138 7 174 0 140 7 174 0 142 7 174 0 143 7 174 0 147 7 174 0 150 7 174 0 151 7 174 0 162 7 174 0 167 7 174 0 168 7 174 0 171 3 19 0 172 7 174 0 173 7 174 1 144] 
#[1 7 178 0 3 7 178 0 4 7 178 0 5 7 178 0 7 7 178 0 11 7 178 0 13 7 178 0 22 7 178 0 23 7 178 0 28 7 178 0 29 7 178 0 30 7 178 0 31 7 178 0 32 7 178 0 33 7 178 0 34 7 178 0 35 7 178 0 36 7 178 0 37 7 178 0 38 7 178 0 39 7 178 0 40 7 178 0 41 7 178 0 43 7 178 0 45 7 178 0 55 7 178 0 56 7 178 0 58 7 178 0 59 7 178 0 64 7 178 0 67 7 178 0 73 7 178 0 76 7 178 0 77 7 178 0 82 7 178 0 84 7 178 0 86 7 178 0 88 7 178 0 89 7 178 0 91 7 178 0 92 7 178 0 99 7 178 0 100 7 178 0 102 7 178 0 105 7 178 0 106 7 178 0 107 7 178 0 108 7 178 0 112 7 178 0 115 7 178 0 116 7 178 0 121 7 178 0 123 7 178 0 126 7 178 0 131 7 178 0 132 7 178 0 133 7 178 0 134 7 178 0 138 7 178 0 140 7 178 0 142 7 178 0 143 7 178 0 147 7 178 0 150 7 178 0 151 7 178 0 162 7 178 0 167 7 178 0 168 7 178 0 171 3 23 0 172 7 178 0 173 7 178 1 144] 
#[1 7 182 0 3 7 182 0 4 7 182 0 5 7 182 0 7 7 182 0 11 7 182 0 13 7 182 0 22 7 182 0 23 7 182 0 28 7 182 0 29 7 182 0 30 7 182 0 31 7 182 0 32 7 182 0 33 7 182 0 34 7 182 0 35 7 182 0 36 7 182 0 37 7 182 0 38 7 182 0 39 7 182 0 40 7 182 0 41 7 182 0 43 7 182 0 45 7 182 0 55 7 182 0 56 7 182 0 58 7 182 0 59 7 182 0 64 7 182 0 67 7 182 0 73 7 182 0 76 7 182 0 77 7 182 0 82 7 182 0 84 7 182 0 86 7 182 0 88 7 182 0 89 7 182 0 91 7 182 0 92 7 182 0 99 7 182 0 100 7 182 0 102 7 182 0 105 7 182 0 106 7 182 0 107 7 182 0 108 7 182 0 112 7 182 0 115 7 182 0 116 7 182 0 121 7 182 0 123 7 182 0 126 7 182 0 131 7 182 0 132 7 182 0 133 7 182 0 134 7 182 0 138 7 182 0 140 7 182 0 142 7 182 0 143 7 182 0 147 7 182 0 150 7 182 0 151 7 182 0 162 7 182 0 167 7 182 0 168 7 182 0 171 3 27 0 172 7 182 0 173 7 182 1 144] 
#[1 7 186 0 3 7 186 0 4 7 186 0 5 7 186 0 7 7 186 0 11 7 186 0 13 7 186 0 22 7 186 0 23 7 186 0 28 7 186 0 29 7 186 0 30 7 186 0 31 7 186 0 32 7 186 0 33 7 186 0 34 7 186 0 35 7 186 0 36 7 186 0 37 7 186 0 38 7 186 0 39 7 186 0 40 7 186 0 41 7 186 0 43 7 186 0 45 7 186 0 55 7 186 0 56 7 186 0 58 7 186 0 59 7 186 0 64 7 186 0 67 7 186 0 73 7 186 0 76 7 186 0 77 7 186 0 82 7 186 0 84 7 186 0 86 7 186 0 88 7 186 0 89 7 186 0 91 7 186 0 92 7 186 0 99 7 186 0 100 7 186 0 102 7 186 0 105 7 186 0 106 7 186 0 107 7 186 0 108 7 186 0 112 7 186 0 115 7 186 0 116 7 186 0 121 7 186 0 123 7 186 0 126 7 186 0 131 7 186 0 132 7 186 0 133 7 186 0 134 7 186 0 138 7 186 0 140 7 186 0 142 7 186 0 143 7 186 0 147 7 186 0 150 7 186 0 151 7 186 0 162 7 186 0 167 7 186 0 168 7 186 0 171 3 31 0 172 7 186 0 173 7 186 1 144] 
#[0 17 133 0 172] 
#[0 17 137 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 141 0 180 17 141 0 181 17 141 0 182 17 141 0 183 17 141 0 184 17 141 0 185 17 141 0 186 17 141 0 187 17 141 0 188 17 141 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 141 1 38 17 141 1 39 17 141 1 40 17 141 1 41 17 141 1 42 17 141 1 43 17 141 1 44 17 141 1 45 17 141 1 46 17 141 1 48 17 141 1 50 17 141 1 52 17 141 1 54 17 141 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 141 1 141 17 141 1 143] 
#[1 7 190 0 11 7 190 0 55 3 35 0 172 7 190 0 173 7 190 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 145 0 172 17 149 0 180 17 149 0 181 17 149 0 182 17 149 0 183 17 149 0 184 17 149 0 185 17 149 0 186 17 149 0 187 17 149 0 188 17 149 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 149 1 38 17 149 1 39 17 149 1 40 17 149 1 41 17 149 1 42 17 149 1 43 17 149 1 44 17 149 1 45 17 149 1 46 17 149 1 48 17 149 1 50 17 149 1 52 17 149 1 54 17 149 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 149 1 141 17 149 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 153 0 180 17 153 0 181 17 153 0 182 17 153 0 183 17 153 0 184 17 153 0 185 17 153 0 186 17 153 0 187 17 153 0 188 17 153 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 153 1 38 17 153 1 39 17 153 1 40 17 153 1 41 17 153 1 42 17 153 1 43 17 153 1 44 17 153 1 45 17 153 1 46 17 153 1 48 17 153 1 50 17 153 1 52 17 153 1 54 17 153 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 153 1 141 17 153 1 143] 
#[1 7 194 0 11 7 194 0 55 3 39 0 172 7 194 0 173 7 194 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 157 0 172 17 161 0 180 17 161 0 181 17 161 0 182 17 161 0 183 17 161 0 184 17 161 0 185 17 161 0 186 17 161 0 187 17 161 0 188 17 161 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 161 1 38 17 161 1 39 17 161 1 40 17 161 1 41 17 161 1 42 17 161 1 43 17 161 1 44 17 161 1 45 17 161 1 46 17 161 1 48 17 161 1 50 17 161 1 52 17 161 1 54 17 161 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 161 1 141 17 161 1 143] 
#[0 7 198 0 172] 
#[0 7 202 0 172] 
#[0 7 206 0 172] 
#[0 7 210 0 172] 
#[0 7 214 0 172] 
#[0 17 165 0 172] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 4 218 0 11 4 218 0 13 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 4 218 0 55 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 4 218 0 172 4 218 0 173 10 85 1 47 10 89 1 49 10 93 1 51 17 169 1 66 4 218 1 144] 
#[1 7 218 0 11 13 13 0 13 7 218 0 55 7 218 0 172 7 218 0 173 13 17 1 65 7 218 1 144] 
#[1 7 222 0 11 13 13 0 13 7 222 0 55 7 222 0 172 7 222 0 173 13 17 1 65 7 222 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 173 0 180 17 173 0 181 17 173 0 182 17 173 0 183 17 173 0 184 17 173 0 185 17 173 0 186 17 173 0 187 17 173 0 188 17 173 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 173 1 38 17 173 1 39 17 173 1 40 17 173 1 41 17 173 1 42 17 173 1 43 17 173 1 44 17 173 1 45 17 173 1 46 17 173 1 48 17 173 1 50 17 173 1 52 17 173 1 54 17 173 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 173 1 141 17 173 1 143] 
#[1 7 226 0 11 7 226 0 13 7 226 0 55 3 43 0 172 7 226 0 173 7 226 1 144] 
#[1 4 218 0 11 4 218 0 13 4 218 0 55 3 47 0 172 4 218 0 173 17 181 1 66 4 218 1 144] 
#[1 7 230 0 11 13 13 0 13 7 230 0 55 7 230 0 172 7 230 0 173 13 17 1 65 7 230 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 4 218 0 11 4 218 0 13 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 4 218 0 55 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 4 218 0 172 4 218 0 173 10 85 1 47 10 89 1 49 10 93 1 51 17 185 1 66 4 218 1 144] 
#[1 7 234 0 11 13 13 0 13 7 234 0 55 7 234 0 172 7 234 0 173 13 17 1 65 7 234 1 144] 
#[1 7 238 0 11 7 238 0 22 7 238 0 23 7 238 0 28 7 238 0 29 7 238 0 30 7 238 0 31 7 238 0 32 7 238 0 33 7 238 0 34 7 238 0 35 7 238 0 36 7 238 0 37 7 238 0 38 7 238 0 39 7 238 0 40 7 238 0 41 7 238 0 43 7 238 0 45 7 238 0 55 7 238 0 56 7 238 0 58 7 238 0 59 7 238 0 64 7 238 0 67 7 238 0 73 7 238 0 76 7 238 0 77 7 238 0 84 7 238 0 86 7 238 0 88 7 238 0 89 7 238 0 91 7 238 0 92 7 238 0 99 7 238 0 100 7 238 0 102 7 238 0 105 7 238 0 106 7 238 0 107 7 238 0 108 7 238 0 112 7 238 0 115 7 238 0 116 7 238 0 123 7 238 0 126 7 238 0 131 7 238 0 132 7 238 0 133 7 238 0 134 7 238 0 138 7 238 0 140 7 238 0 142 7 238 0 143 7 238 0 147 7 238 0 150 7 238 0 167 7 238 0 168 7 238 0 171 3 51 0 172 7 238 0 173 7 238 1 144] 
#[1 7 242 0 11 7 242 0 22 7 242 0 23 7 242 0 28 7 242 0 29 7 242 0 30 7 242 0 31 7 242 0 32 7 242 0 33 7 242 0 34 7 242 0 35 7 242 0 36 7 242 0 37 7 242 0 38 7 242 0 39 7 242 0 40 7 242 0 41 7 242 0 43 7 242 0 45 7 242 0 55 7 242 0 56 7 242 0 58 7 242 0 59 7 242 0 64 7 242 0 67 7 242 0 73 7 242 0 76 7 242 0 77 7 242 0 84 7 242 0 86 7 242 0 88 7 242 0 89 7 242 0 91 7 242 0 92 7 242 0 99 7 242 0 100 7 242 0 102 7 242 0 105 7 242 0 106 7 242 0 107 7 242 0 108 7 242 0 112 7 242 0 115 7 242 0 116 7 242 0 123 7 242 0 126 7 242 0 131 7 242 0 132 7 242 0 133 7 242 0 134 7 242 0 138 7 242 0 140 7 242 0 142 7 242 0 143 7 242 0 147 7 242 0 150 7 242 0 167 7 242 0 168 7 242 0 171 3 55 0 172 7 242 0 173 7 242 1 144] 
#[0 7 246 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 189 0 180 17 189 0 181 17 189 0 182 17 189 0 183 17 189 0 184 17 189 0 185 17 189 0 186 17 189 0 187 17 189 0 188 17 189 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 189 1 38 17 189 1 39 17 189 1 40 17 189 1 41 17 189 1 42 17 189 1 43 17 189 1 44 17 189 1 45 17 189 1 46 17 189 1 48 17 189 1 50 17 189 1 52 17 189 1 54 17 189 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 189 1 141 17 189 1 143] 
#[1 7 250 0 4 7 250 0 7 7 233 0 172] 
#[0 7 254 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 2 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 6 0 11 0 55 0 172 0 173 1 144] 
#[0 17 193 0 172] 
#[0 17 197 0 121] 
#[0 8 10 0 11 0 55 0 172 0 173 1 144] 
#[0 17 201 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 17 205 0 180 17 205 0 181 17 205 0 182 17 205 0 183 17 205 0 184 17 205 0 185 17 205 0 186 17 205 0 187 17 205 0 188 17 205 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 17 205 1 38 17 205 1 39 17 205 1 40 17 205 1 41 17 205 1 42 17 205 1 43 17 205 1 44 17 205 1 45 17 205 1 46 17 205 1 48 17 205 1 50 17 205 1 52 17 205 1 54 17 205 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 17 205 1 141 17 205 1 143] 
#[1 8 14 0 55 8 14 0 82 8 14 0 96 8 14 0 98 8 14 0 99 8 14 0 121 8 14 0 151 8 14 0 162 6 61 0 173] 
#[0 8 18 0 11 0 172 0 173] 
#[1 8 22 0 11 8 22 0 55 3 59 0 172 8 22 0 173 8 22 1 144] 
#[1 8 26 0 11 8 26 0 55 3 63 0 172 8 26 0 173 8 26 1 144] 
#[0 17 209 0 172] 
#[0 17 213 0 172] 
#[0 17 217 0 100] 
#[0 17 221 0 18] 
#[0 17 225 0 172] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 17 233 0 228 17 233 0 229 17 229 0 230 17 233 0 233 17 233 1 1 17 233 1 2] 
#[0 17 237 0 172] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 17 245 0 228 17 245 0 229 17 241 0 230 17 245 0 233 17 245 1 1 17 245 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 17 249 1 4] 
#[0 17 253 0 18] 
#[0 8 30 0 4 0 7 0 172] 
#[0 8 34 0 4 0 7 0 172] 
#[0 18 1 0 172] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 18 9 0 228 18 9 0 229 18 5 0 230 18 9 0 233 18 9 1 1 18 9 1 2] 
#[0 8 38 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 18 13 0 172] 
#[0 18 17 0 4] 
#[0 8 42 0 4 0 7 0 172] 
#[0 8 46 0 7 0 11 0 55 0 172 0 173 1 144] 
#[1 4 225 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 3 213 0 162 1 17 0 167 1 1 0 168 1 5 0 171 18 21 0 182 18 21 0 191 1 17 0 194 18 21 0 195 18 21 0 196 18 21 0 197 18 21 1 43 18 21 1 105] 
#[0 8 50 0 7 0 11 0 55 0 172 0 173 1 144] 
#[1 7 14 0 11 7 14 0 55 7 14 0 172 7 14 0 173 18 25 0 220 7 14 1 144] 
#[1 18 29 0 11 8 54 0 55 3 67 0 172 8 54 0 173 18 37 0 219 8 54 1 144] 
#[1 18 41 0 96 18 45 0 98 18 49 0 99 3 213 0 162 18 53 0 182 18 57 1 86 18 61 1 88 18 57 1 89] 
#[1 18 69 0 96 18 73 0 97] 
#[1 18 77 0 96 18 81 0 97] 
#[1 8 58 0 11 8 58 0 55 3 71 0 172 8 58 0 173 8 58 1 144] 
#[0 8 62 0 11 0 55 0 172 0 173 1 144] 
#[1 18 85 0 82 18 89 0 99 3 213 0 162 18 93 0 182 18 101 1 94 18 101 1 98] 
#[0 18 105 0 147] 
#[1 18 109 0 5 8 66 0 22 8 66 0 23 8 66 0 43 8 66 0 45 8 66 0 55 8 66 0 56 8 66 0 58 8 66 0 59 8 66 0 64 8 66 0 67 8 66 0 77 8 66 0 84 8 66 0 88 8 66 0 89 8 66 0 99 8 66 0 107 8 66 0 115 8 66 0 116 8 66 0 123 8 66 0 138 8 66 0 143 8 66 0 150 8 66 0 167 8 66 0 168 8 66 0 171 18 113 0 172 8 66 0 173] 
#[0 8 70 0 11 0 55 0 172 0 173 1 144] 
#[0 8 74 0 11 0 55 0 172 0 173 1 144] 
#[0 18 117 0 172] 
#[0 8 78 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 18 121 0 180 18 121 0 181 18 121 0 182 18 121 0 183 18 121 0 184 18 121 0 185 18 121 0 186 18 121 0 187 18 121 0 188 18 121 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 121 1 38 18 121 1 39 18 121 1 40 18 121 1 41 18 121 1 42 18 121 1 43 18 121 1 44 18 121 1 45 18 121 1 46 18 121 1 48 18 121 1 50 18 121 1 52 18 121 1 54 18 121 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 121 1 141 18 121 1 143] 
#[1 8 82 0 3 8 82 0 4 8 82 0 5 8 82 0 7 8 82 0 11 8 82 0 22 8 82 0 23 8 82 0 28 8 82 0 29 8 82 0 30 8 82 0 31 8 82 0 32 8 82 0 33 8 82 0 34 8 82 0 35 8 82 0 36 8 82 0 37 8 82 0 38 8 82 0 39 8 82 0 40 8 82 0 41 8 82 0 43 8 82 0 45 8 82 0 55 8 82 0 56 8 82 0 58 8 82 0 59 8 82 0 64 8 82 0 67 8 82 0 73 8 82 0 76 8 82 0 77 8 82 0 84 8 82 0 86 8 82 0 88 8 82 0 89 8 82 0 91 8 82 0 92 8 82 0 99 8 82 0 100 8 82 0 102 8 82 0 105 8 82 0 106 8 82 0 107 8 82 0 108 8 82 0 112 8 82 0 115 8 82 0 116 8 82 0 123 8 82 0 126 8 82 0 131 8 82 0 132 8 82 0 133 8 82 0 134 8 82 0 138 8 82 0 140 8 82 0 142 8 82 0 143 8 82 0 147 8 82 0 150 8 82 0 167 8 82 0 168 8 82 0 171 3 75 0 172 8 82 0 173 8 82 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 18 125 0 172 18 129 0 180 18 129 0 181 18 129 0 182 18 129 0 183 18 129 0 184 18 129 0 185 18 129 0 186 18 129 0 187 18 129 0 188 18 129 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 129 1 38 18 129 1 39 18 129 1 40 18 129 1 41 18 129 1 42 18 129 1 43 18 129 1 44 18 129 1 45 18 129 1 46 18 129 1 48 18 129 1 50 18 129 1 52 18 129 1 54 18 129 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 129 1 141 18 129 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 18 133 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 133 0 191 1 17 0 194 13 133 0 195 13 133 0 196 13 133 0 197 13 137 0 251] 
#[0 8 86 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 18 137 0 99 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 225 0 191 1 17 0 194 13 225 0 195 13 225 0 196 13 225 0 197 13 229 0 246] 
#[1 8 90 0 11 8 90 0 55 3 79 0 172 8 90 0 173 8 90 1 144] 
#[1 8 94 0 11 8 94 0 55 3 83 0 172 8 94 0 173 8 94 1 144] 
#[1 8 98 0 11 8 98 0 55 3 87 0 172 8 98 0 173 8 98 1 144] 
#[1 8 102 0 11 8 102 0 55 3 91 0 172 8 102 0 173 8 102 1 144] 
#[0 8 106 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 8 110 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 77 0 79 0 81 0 84 0 88 0 89 0 107 0 115 0 116 0 123 0 124 0 129 0 138 0 143 0 150 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 18 141 0 180 18 141 0 181 18 141 0 182 18 141 0 183 18 141 0 184 18 141 0 185 18 141 0 186 18 141 0 187 18 141 0 188 18 141 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 141 1 38 18 141 1 39 18 141 1 40 18 141 1 41 18 141 1 42 18 141 1 43 18 141 1 44 18 141 1 45 18 141 1 46 18 141 1 48 18 141 1 50 18 141 1 52 18 141 1 54 18 141 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 141 1 141 18 141 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 18 149 0 180 18 149 0 181 18 149 0 182 18 149 0 183 18 149 0 184 18 149 0 185 18 149 0 186 18 149 0 187 18 149 0 188 18 149 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 18 145 0 236 18 149 1 38 18 149 1 39 18 149 1 40 18 149 1 41 18 149 1 42 18 149 1 43 18 149 1 44 18 149 1 45 18 149 1 46 18 149 1 48 18 149 1 50 18 149 1 52 18 149 1 54 18 149 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 149 1 141 18 149 1 143] 
#[0 8 114 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[0 8 118 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 8 122 0 4 4 221 0 6 8 122 0 7 4 225 0 8 0 33 0 9 8 122 0 11 8 122 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 95 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 122 0 172 8 122 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 153 1 132 9 53 1 141 9 53 1 143 8 122 1 144] 
#[0 8 126 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 8 130 0 4 4 221 0 6 8 130 0 7 4 225 0 8 0 33 0 9 8 130 0 11 8 130 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 99 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 8 130 0 172 8 130 0 173 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 157 1 132 9 53 1 141 9 53 1 143 8 130 1 144] 
#[0 8 134 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[0 18 161 0 172] 
#[0 18 165 0 172] 
#[1 3 221 0 173 3 229 0 207 18 169 0 213] 
#[0 18 173 0 99] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 18 177 0 180 18 177 0 181 18 177 0 182 18 177 0 183 18 177 0 184 18 177 0 185 18 177 0 186 18 177 0 187 18 177 0 188 18 177 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 18 177 1 38 18 177 1 39 18 177 1 40 18 177 1 41 18 177 1 42 18 177 1 43 18 177 1 44 18 177 1 45 18 177 1 46 18 177 1 48 18 177 1 50 18 177 1 52 18 177 1 54 18 177 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 18 177 1 141 18 177 1 143] 
#[1 3 103 0 3 7 233 0 172 3 103 0 173] 
#[0 18 181 0 99] 
#[0 18 185 0 172] 
#[0 18 189 0 99] 
#[1 8 33 0 3 3 221 0 173 3 229 0 207 18 193 0 213 18 197 0 230] 
#[0 18 201 0 99] 
#[0 18 205 0 99] 
#[0 18 209 0 99] 
#[0 18 213 0 172] 
#[0 18 217 0 172] 
#[0 18 221 0 142] 
#[0 18 225 0 172] 
#[0 18 229 0 172] 
#[1 0 162 0 3 4 53 0 5 18 233 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 18 237 1 11] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 18 241 1 11] 
#[1 3 221 0 173 3 229 0 207 18 245 0 213] 
#[1 8 129 0 3 18 249 0 253] 
#[1 8 129 0 3 18 253 0 253] 
#[1 8 129 0 3 19 1 0 253] 
#[1 19 5 0 172 4 170 0 173 19 5 1 13] 
#[1 3 221 0 173 3 229 0 207 19 9 0 213] 
#[1 3 221 0 173 3 229 0 207 19 13 0 213] 
#[0 19 17 0 99] 
#[1 8 129 0 3 19 21 0 172 19 25 0 253] 
#[0 19 29 0 172] 
#[0 19 33 0 172] 
#[0 19 37 0 172] 
#[1 8 129 0 3 19 41 0 172 4 170 0 173 19 45 0 253 19 49 1 13] 
#[1 0 162 0 3 4 53 0 5 19 53 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 19 57 1 11] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 19 61 1 11] 
#[1 3 221 0 173 3 229 0 207 19 65 0 213] 
#[1 8 129 0 3 19 69 0 253] 
#[1 8 129 0 3 19 73 0 253] 
#[1 8 129 0 3 19 77 0 253] 
#[1 19 81 0 172 4 170 0 173 19 81 1 13] 
#[1 3 221 0 173 3 229 0 207 19 85 0 213] 
#[1 3 221 0 173 3 229 0 207 19 89 0 213] 
#[0 19 93 0 99] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 97 1 132 9 53 1 141 9 53 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 9 25 0 79 9 49 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 9 33 0 129 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 9 53 0 180 9 53 0 181 9 53 0 182 9 53 0 183 9 53 0 184 9 53 0 185 9 53 0 186 9 53 0 187 9 53 0 188 9 53 0 189 9 41 0 191 1 17 0 194 9 41 0 195 9 41 0 196 9 41 0 197 9 45 0 236 9 49 0 252 9 53 1 38 9 53 1 39 9 53 1 40 9 53 1 41 9 53 1 42 9 53 1 43 9 53 1 44 9 53 1 45 9 53 1 46 9 53 1 48 9 53 1 50 9 53 1 52 9 53 1 54 9 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 2 93 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 101 1 132 9 53 1 141 9 53 1 143] 
#[1 19 105 0 8 9 249 0 159] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 19 109 0 180 19 109 0 181 19 109 0 182 19 109 0 183 19 109 0 184 19 109 0 185 19 109 0 186 19 109 0 187 19 109 0 188 19 109 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 109 1 38 19 109 1 39 19 109 1 40 19 109 1 41 19 109 1 42 19 109 1 43 19 109 1 44 19 109 1 45 19 109 1 46 19 109 1 48 19 109 1 50 19 109 1 52 19 109 1 54 19 109 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 109 1 141 19 109 1 143] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 19 113 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[1 8 138 0 11 8 138 0 55 3 107 0 172 8 138 0 173 8 138 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 19 117 0 180 19 117 0 181 19 117 0 182 19 117 0 183 19 117 0 184 19 117 0 185 19 117 0 186 19 117 0 187 19 117 0 188 19 117 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 117 1 38 19 117 1 39 19 117 1 40 19 117 1 41 19 117 1 42 19 117 1 43 19 117 1 44 19 117 1 45 19 117 1 46 19 117 1 48 19 117 1 50 19 117 1 52 19 117 1 54 19 117 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 117 1 141 19 117 1 143] 
#[1 8 142 0 11 8 142 0 55 3 111 0 172 8 142 0 173 8 142 1 144] 
#[1 8 146 0 11 8 146 0 55 3 115 0 172 8 146 0 173 8 146 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 19 121 0 180 19 121 0 181 19 121 0 182 19 121 0 183 19 121 0 184 19 121 0 185 19 121 0 186 19 121 0 187 19 121 0 188 19 121 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 121 1 38 19 121 1 39 19 121 1 40 19 121 1 41 19 121 1 42 19 121 1 43 19 121 1 44 19 121 1 45 19 121 1 46 19 121 1 48 19 121 1 50 19 121 1 52 19 121 1 54 19 121 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 121 1 141 19 121 1 143] 
#[1 8 150 0 11 8 150 0 55 3 119 0 172 8 150 0 173 8 150 1 144] 
#[1 19 125 0 24 19 161 0 50 19 161 0 51 19 161 0 52 19 157 0 62 19 157 0 63 19 161 0 65 19 157 0 67 19 157 1 60 19 161 1 61] 
#[1 8 154 0 11 13 13 0 13 8 154 0 55 8 154 0 172 8 154 0 173 13 17 1 65 8 154 1 144] 
#[1 8 158 0 11 8 158 0 13 8 158 0 55 3 123 0 172 8 158 0 173 8 158 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 4 218 0 11 4 218 0 13 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 4 218 0 55 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 4 218 0 172 4 218 0 173 10 85 1 47 10 89 1 49 10 93 1 51 19 165 1 66 4 218 1 144] 
#[1 8 162 0 11 13 13 0 13 8 162 0 55 8 162 0 172 8 162 0 173 13 17 1 65 8 162 1 144] 
#[1 8 166 0 11 13 13 0 13 8 166 0 55 8 166 0 172 8 166 0 173 13 17 1 65 8 166 1 144] 
#[1 8 170 0 4 8 170 0 7 7 233 0 172] 
#[0 19 169 0 121] 
#[0 8 174 0 11 0 55 0 172 0 173 1 144] 
#[0 19 173 0 121] 
#[1 8 178 0 11 8 178 0 55 3 127 0 172 8 178 0 173 8 178 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 19 177 0 180 19 177 0 181 19 177 0 182 19 177 0 183 19 177 0 184 19 177 0 185 19 177 0 186 19 177 0 187 19 177 0 188 19 177 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 177 1 38 19 177 1 39 19 177 1 40 19 177 1 41 19 177 1 42 19 177 1 43 19 177 1 44 19 177 1 45 19 177 1 46 19 177 1 48 19 177 1 50 19 177 1 52 19 177 1 54 19 177 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 177 1 141 19 177 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 19 181 0 180 19 181 0 181 19 181 0 182 19 181 0 183 19 181 0 184 19 181 0 185 19 181 0 186 19 181 0 187 19 181 0 188 19 181 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 19 181 1 38 19 181 1 39 19 181 1 40 19 181 1 41 19 181 1 42 19 181 1 43 19 181 1 44 19 181 1 45 19 181 1 46 19 181 1 48 19 181 1 50 19 181 1 52 19 181 1 54 19 181 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 19 181 1 141 19 181 1 143] 
#[0 8 182 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 19 185 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 19 189 0 191 1 17 0 194 19 189 0 195 19 189 0 196 19 189 0 197] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 19 193 0 228 19 193 0 229 19 193 0 233 19 193 1 1 19 193 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 19 197 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 19 201 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 19 205 0 191 1 17 0 194 19 205 0 195 19 205 0 196 19 205 0 197] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 19 209 0 228 19 209 0 229 19 209 0 233 19 209 1 1 19 209 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 19 213 1 4] 
#[0 8 186 0 4 0 7 0 172] 
#[0 19 217 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 19 221 0 191 1 17 0 194 19 221 0 195 19 221 0 196 19 221 0 197] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 19 225 0 228 19 225 0 229 19 225 0 233 19 225 1 1 19 225 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 19 229 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 9 25 0 79 11 17 0 81 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 11 1 0 127 11 5 0 129 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 13 0 191 1 17 0 194 11 13 0 195 11 13 0 196 11 13 0 197 11 17 0 252 19 233 1 0] 
#[0 8 190 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 194 0 7 0 11 0 55 0 172 0 173 1 144] 
#[1 18 29 0 11 8 198 0 55 3 131 0 172 8 198 0 173 18 37 0 219 8 198 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 19 241 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 19 237 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 19 241 0 201 19 241 0 203 19 241 0 212 1 49 0 223 19 241 0 234 1 57 0 235 19 241 0 236 19 241 0 237 19 241 0 238 19 241 0 239 19 241 0 240 19 241 0 241 19 241 0 242 19 241 0 243 19 241 0 247 19 241 0 248 19 241 1 18 19 241 1 19 19 241 1 20 19 241 1 21 19 241 1 22 19 241 1 23 1 125 1 25 19 241 1 26 19 241 1 27 19 241 1 28 19 241 1 29 19 241 1 30 19 241 1 34 19 241 1 37 1 157 1 56 1 157 1 57 1 157 1 58 19 241 1 62 19 241 1 63 19 241 1 64 19 241 1 67 19 241 1 68 19 241 1 69 19 241 1 70 19 241 1 71 19 241 1 72 19 241 1 73 19 241 1 74 19 241 1 75 19 241 1 76 19 241 1 77 19 241 1 78 19 241 1 79 19 241 1 80 19 241 1 81 19 241 1 82 19 241 1 83 19 241 1 84 19 241 1 85 19 241 1 90 19 241 1 91 2 9 1 92 19 241 1 97 19 241 1 100 19 241 1 101 19 241 1 102 19 241 1 103 19 241 1 104 19 241 1 109 19 241 1 110 19 241 1 111 19 241 1 112 19 241 1 113 19 241 1 114 19 241 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 19 241 1 129 2 117 1 130 2 121 1 131 19 241 1 139 19 241 1 140 19 241 1 142] 
#[0 19 245 0 11] 
#[0 8 202 0 11 0 55 0 172 0 173 1 144] 
#[1 8 206 0 99 8 206 0 162 3 221 0 173 3 229 0 207 19 249 0 213] 
#[0 19 253 0 172] 
#[0 20 1 0 172] 
#[0 20 5 0 172] 
#[0 8 210 0 96 0 98 0 99 0 162] 
#[1 20 9 0 99 3 213 0 162 20 13 0 182] 
#[0 8 214 0 96 0 98 0 99 0 162] 
#[1 13 189 0 172 20 17 0 218] 
#[1 13 189 0 172 20 21 0 218] 
#[1 13 189 0 172 20 25 0 218] 
#[1 13 189 0 172 20 29 0 218] 
#[0 20 33 0 172] 
#[0 20 37 0 172] 
#[0 20 41 0 172] 
#[0 8 218 0 82 0 99 0 162] 
#[0 8 222 0 82 0 99 0 162] 
#[0 8 226 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 213 0 162 20 45 0 172 20 49 0 182] 
#[0 20 53 0 5] 
#[0 20 57 0 153] 
#[1 8 230 0 3 8 230 0 4 8 230 0 5 8 230 0 7 8 230 0 11 8 230 0 22 8 230 0 23 8 230 0 28 8 230 0 29 8 230 0 30 8 230 0 31 8 230 0 32 8 230 0 33 8 230 0 34 8 230 0 35 8 230 0 36 8 230 0 37 8 230 0 38 8 230 0 39 8 230 0 40 8 230 0 41 8 230 0 43 8 230 0 45 8 230 0 55 8 230 0 56 8 230 0 58 8 230 0 59 8 230 0 64 8 230 0 67 8 230 0 73 8 230 0 76 8 230 0 77 8 230 0 84 8 230 0 86 8 230 0 88 8 230 0 89 8 230 0 91 8 230 0 92 8 230 0 99 8 230 0 100 8 230 0 102 8 230 0 105 8 230 0 106 8 230 0 107 8 230 0 108 8 230 0 112 8 230 0 115 8 230 0 116 8 230 0 123 8 230 0 126 8 230 0 131 8 230 0 132 8 230 0 133 8 230 0 134 8 230 0 138 8 230 0 140 8 230 0 142 8 230 0 143 8 230 0 147 8 230 0 150 8 230 0 167 8 230 0 168 8 230 0 171 3 135 0 172 8 230 0 173 8 230 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 20 61 0 180 20 61 0 181 20 61 0 182 20 61 0 183 20 61 0 184 20 61 0 185 20 61 0 186 20 61 0 187 20 61 0 188 20 61 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 20 61 1 38 20 61 1 39 20 61 1 40 20 61 1 41 20 61 1 42 20 61 1 43 20 61 1 44 20 61 1 45 20 61 1 46 20 61 1 48 20 61 1 50 20 61 1 52 20 61 1 54 20 61 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 20 61 1 141 20 61 1 143] 
#[1 8 234 0 3 8 234 0 4 8 234 0 5 8 234 0 7 8 234 0 11 8 234 0 22 8 234 0 23 8 234 0 28 8 234 0 29 8 234 0 30 8 234 0 31 8 234 0 32 8 234 0 33 8 234 0 34 8 234 0 35 8 234 0 36 8 234 0 37 8 234 0 38 8 234 0 39 8 234 0 40 8 234 0 41 8 234 0 43 8 234 0 45 8 234 0 55 8 234 0 56 8 234 0 58 8 234 0 59 8 234 0 64 8 234 0 67 8 234 0 73 8 234 0 76 8 234 0 77 8 234 0 84 8 234 0 86 8 234 0 88 8 234 0 89 8 234 0 91 8 234 0 92 8 234 0 99 8 234 0 100 8 234 0 102 8 234 0 105 8 234 0 106 8 234 0 107 8 234 0 108 8 234 0 112 8 234 0 115 8 234 0 116 8 234 0 123 8 234 0 126 8 234 0 131 8 234 0 132 8 234 0 133 8 234 0 134 8 234 0 138 8 234 0 140 8 234 0 142 8 234 0 143 8 234 0 147 8 234 0 150 8 234 0 167 8 234 0 168 8 234 0 171 3 139 0 172 8 234 0 173 8 234 1 144] 
#[0 20 65 0 172] 
#[0 20 69 0 172] 
#[1 3 143 0 3 3 143 0 4 3 143 0 5 3 143 0 7 3 143 0 11 3 143 0 13 3 143 0 22 3 143 0 23 3 143 0 28 3 143 0 29 3 143 0 30 3 143 0 31 3 143 0 32 3 143 0 33 3 143 0 34 3 143 0 35 3 143 0 36 3 143 0 37 3 143 0 38 3 143 0 39 3 143 0 40 3 143 0 41 3 143 0 43 3 143 0 45 3 143 0 55 3 143 0 56 3 143 0 58 3 143 0 59 3 143 0 64 3 143 0 67 3 143 0 73 3 143 0 76 3 143 0 77 3 143 0 82 3 143 0 84 3 143 0 86 3 143 0 88 3 143 0 89 3 143 0 91 3 143 0 92 3 143 0 99 3 143 0 100 3 143 0 102 3 143 0 105 3 143 0 106 3 143 0 107 3 143 0 108 3 143 0 112 3 143 0 115 3 143 0 116 3 143 0 121 3 143 0 123 3 143 0 126 3 143 0 131 3 143 0 132 3 143 0 133 3 143 0 134 3 143 0 138 3 143 0 140 3 143 0 142 3 143 0 143 3 143 0 147 3 143 0 150 3 143 0 151 3 143 0 162 3 143 0 167 3 143 0 168 3 143 0 171 3 147 0 172 3 143 0 173 3 143 1 144] 
#[0 8 238 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 242 0 3 8 242 0 4 8 242 0 5 8 242 0 7 8 242 0 11 8 242 0 13 8 242 0 22 8 242 0 23 8 242 0 28 8 242 0 29 8 242 0 30 8 242 0 31 8 242 0 32 8 242 0 33 8 242 0 34 8 242 0 35 8 242 0 36 8 242 0 37 8 242 0 38 8 242 0 39 8 242 0 40 8 242 0 41 8 242 0 43 8 242 0 45 8 242 0 55 8 242 0 56 8 242 0 58 8 242 0 59 8 242 0 64 8 242 0 67 8 242 0 73 8 242 0 76 8 242 0 77 8 242 0 82 8 242 0 84 8 242 0 86 8 242 0 88 8 242 0 89 8 242 0 91 8 242 0 92 8 242 0 99 8 242 0 100 8 242 0 102 8 242 0 105 8 242 0 106 8 242 0 107 8 242 0 108 8 242 0 112 8 242 0 115 8 242 0 116 8 242 0 121 8 242 0 123 8 242 0 126 8 242 0 131 8 242 0 132 8 242 0 133 8 242 0 134 8 242 0 138 8 242 0 140 8 242 0 142 8 242 0 143 8 242 0 147 8 242 0 150 8 242 0 151 8 242 0 162 8 242 0 167 8 242 0 168 8 242 0 171 3 151 0 172 8 242 0 173 8 242 1 144] 
#[0 8 246 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[0 8 250 0 4 0 7 0 11 0 13 0 55 0 172 0 173 1 144] 
#[1 5 1 0 165 20 73 0 187] 
#[1 5 1 0 165 20 77 0 187] 
#[0 20 81 0 99] 
#[0 20 85 0 172] 
#[1 3 155 0 3 7 233 0 172 3 155 0 173] 
#[0 20 89 0 172] 
#[0 20 93 0 106] 
#[0 20 97 0 172] 
#[0 20 101 0 99] 
#[1 3 221 0 173 3 229 0 207 20 105 0 213] 
#[0 20 109 0 172] 
#[0 20 113 0 172] 
#[0 20 117 0 172] 
#[0 20 121 0 142] 
#[0 20 125 0 142] 
#[0 8 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 129 0 117] 
#[0 20 133 0 117] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 20 137 1 11] 
#[1 3 221 0 173 3 229 0 207 20 141 0 213] 
#[1 3 221 0 173 3 229 0 207 20 145 0 213] 
#[0 20 149 0 99] 
#[1 0 162 0 3 4 53 0 5 8 37 0 172 2 255 0 173 3 229 0 207 20 153 0 213 20 157 0 228 20 157 0 229 20 157 0 233] 
#[1 3 221 0 173 3 229 0 207 20 161 0 213] 
#[1 3 221 0 173 3 229 0 207 20 165 0 213] 
#[1 3 221 0 173 3 229 0 207 20 169 0 213] 
#[0 20 173 0 99] 
#[0 20 177 0 99] 
#[0 20 181 0 172] 
#[1 8 129 0 3 20 185 0 253] 
#[1 0 162 0 3 4 53 0 5 20 189 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 20 193 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 197 0 191 1 17 0 194 20 197 0 195 20 197 0 196 20 197 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 201 0 191 1 17 0 194 20 201 0 195 20 201 0 196 20 201 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 205 0 191 1 17 0 194 20 205 0 195 20 205 0 196 20 205 0 197] 
#[1 8 129 0 3 20 213 0 172 2 47 0 173 20 209 0 253 20 213 1 13] 
#[1 20 217 0 172 4 170 0 173 20 217 1 13] 
#[1 3 221 0 173 3 229 0 207 20 221 0 213] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 20 225 1 11] 
#[1 3 221 0 173 3 229 0 207 20 229 0 213] 
#[1 3 221 0 173 3 229 0 207 20 233 0 213] 
#[0 20 237 0 99] 
#[1 0 162 0 3 4 53 0 5 8 37 0 172 2 255 0 173 3 229 0 207 20 241 0 213 20 245 0 228 20 245 0 229 20 245 0 233] 
#[1 3 221 0 173 3 229 0 207 20 249 0 213] 
#[1 3 221 0 173 3 229 0 207 20 253 0 213] 
#[1 3 221 0 173 3 229 0 207 21 1 0 213] 
#[0 21 5 0 99] 
#[0 21 9 0 99] 
#[0 21 13 0 172] 
#[0 9 2 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 6 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 221 0 159 21 17 0 190] 
#[1 21 21 0 55 3 213 0 162 21 25 0 172 3 221 0 173 21 29 0 182 3 229 0 207 21 33 0 213] 
#[0 21 37 0 172] 
#[1 9 10 0 11 9 10 0 55 3 159 0 172 9 10 0 173 9 10 1 144] 
#[1 9 14 0 11 9 14 0 55 3 163 0 172 9 14 0 173 9 14 1 144] 
#[0 21 41 0 172] 
#[0 9 18 0 172] 
#[0 9 22 0 172] 
#[0 9 26 0 172] 
#[0 9 30 0 172] 
#[0 9 34 0 172] 
#[0 9 38 0 172] 
#[0 9 42 0 172] 
#[0 21 45 0 172] 
#[0 21 49 0 172] 
#[1 9 46 0 11 13 13 0 13 9 46 0 55 9 46 0 172 9 46 0 173 13 17 1 65 9 46 1 144] 
#[0 9 50 0 11 0 55 0 172 0 173 1 144] 
#[0 9 54 0 11 0 55 0 172 0 173 1 144] 
#[1 9 58 0 11 9 58 0 55 3 167 0 172 9 58 0 173 9 58 1 144] 
#[1 9 62 0 11 9 62 0 55 3 171 0 172 9 62 0 173 9 62 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 53 0 180 21 53 0 181 21 53 0 182 21 53 0 183 21 53 0 184 21 53 0 185 21 53 0 186 21 53 0 187 21 53 0 188 21 53 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 21 53 1 38 21 53 1 39 21 53 1 40 21 53 1 41 21 53 1 42 21 53 1 43 21 53 1 44 21 53 1 45 21 53 1 46 21 53 1 48 21 53 1 50 21 53 1 52 21 53 1 54 21 53 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 21 53 1 141 21 53 1 143] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 21 61 0 228 21 61 0 229 21 57 0 230 21 61 0 233 21 61 1 1 21 61 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 21 65 1 4] 
#[0 9 66 0 4 0 7 0 172] 
#[0 21 69 0 172] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 21 77 0 228 21 77 0 229 21 73 0 230 21 77 0 233 21 77 1 1 21 77 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 21 81 1 4] 
#[0 9 70 0 4 0 7 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 85 0 180 21 85 0 181 21 85 0 182 21 85 0 183 21 85 0 184 21 85 0 185 21 85 0 186 21 85 0 187 21 85 0 188 21 85 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 21 85 1 38 21 85 1 39 21 85 1 40 21 85 1 41 21 85 1 42 21 85 1 43 21 85 1 44 21 85 1 45 21 85 1 46 21 85 1 48 21 85 1 50 21 85 1 52 21 85 1 54 21 85 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 21 85 1 141 21 85 1 143] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 21 93 0 228 21 93 0 229 21 89 0 230 21 93 0 233 21 93 1 1 21 93 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 21 97 1 4] 
#[0 9 74 0 4 0 7 0 172] 
#[0 9 78 0 4 0 7 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 21 105 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 21 101 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 21 105 0 201 21 105 0 203 21 105 0 212 1 49 0 223 21 105 0 234 1 57 0 235 21 105 0 236 21 105 0 237 21 105 0 238 21 105 0 239 21 105 0 240 21 105 0 241 21 105 0 242 21 105 0 243 21 105 0 247 21 105 0 248 21 105 1 18 21 105 1 19 21 105 1 20 21 105 1 21 21 105 1 22 21 105 1 23 1 125 1 25 21 105 1 26 21 105 1 27 21 105 1 28 21 105 1 29 21 105 1 30 21 105 1 34 21 105 1 37 1 157 1 56 1 157 1 57 1 157 1 58 21 105 1 62 21 105 1 63 21 105 1 64 21 105 1 67 21 105 1 68 21 105 1 69 21 105 1 70 21 105 1 71 21 105 1 72 21 105 1 73 21 105 1 74 21 105 1 75 21 105 1 76 21 105 1 77 21 105 1 78 21 105 1 79 21 105 1 80 21 105 1 81 21 105 1 82 21 105 1 83 21 105 1 84 21 105 1 85 21 105 1 90 21 105 1 91 2 9 1 92 21 105 1 97 21 105 1 100 21 105 1 101 21 105 1 102 21 105 1 103 21 105 1 104 21 105 1 109 21 105 1 110 21 105 1 111 21 105 1 112 21 105 1 113 21 105 1 114 21 105 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 21 105 1 129 2 117 1 130 2 121 1 131 21 105 1 139 21 105 1 140 21 105 1 142] 
#[0 9 82 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 21 113 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 21 109 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 21 113 0 201 21 113 0 203 21 113 0 212 1 49 0 223 21 113 0 234 1 57 0 235 21 113 0 236 21 113 0 237 21 113 0 238 21 113 0 239 21 113 0 240 21 113 0 241 21 113 0 242 21 113 0 243 21 113 0 247 21 113 0 248 21 113 1 18 21 113 1 19 21 113 1 20 21 113 1 21 21 113 1 22 21 113 1 23 1 125 1 25 21 113 1 26 21 113 1 27 21 113 1 28 21 113 1 29 21 113 1 30 21 113 1 34 21 113 1 37 1 157 1 56 1 157 1 57 1 157 1 58 21 113 1 62 21 113 1 63 21 113 1 64 21 113 1 67 21 113 1 68 21 113 1 69 21 113 1 70 21 113 1 71 21 113 1 72 21 113 1 73 21 113 1 74 21 113 1 75 21 113 1 76 21 113 1 77 21 113 1 78 21 113 1 79 21 113 1 80 21 113 1 81 21 113 1 82 21 113 1 83 21 113 1 84 21 113 1 85 21 113 1 90 21 113 1 91 2 9 1 92 21 113 1 97 21 113 1 100 21 113 1 101 21 113 1 102 21 113 1 103 21 113 1 104 21 113 1 109 21 113 1 110 21 113 1 111 21 113 1 112 21 113 1 113 21 113 1 114 21 113 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 21 113 1 129 2 117 1 130 2 121 1 131 21 113 1 139 21 113 1 140 21 113 1 142] 
#[0 9 86 0 99 0 162] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 117 0 180 21 117 0 181 21 117 0 182 21 117 0 183 21 117 0 184 21 117 0 185 21 117 0 186 21 117 0 187 21 117 0 188 21 117 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 21 117 1 38 21 117 1 39 21 117 1 40 21 117 1 41 21 117 1 42 21 117 1 43 21 117 1 44 21 117 1 45 21 117 1 46 21 117 1 48 21 117 1 50 21 117 1 52 21 117 1 54 21 117 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 21 117 1 141 21 117 1 143] 
#[0 21 121 0 111] 
#[1 21 125 0 96 21 129 0 98 21 133 0 99] 
#[0 21 137 0 172] 
#[0 21 141 0 172] 
#[0 9 90 0 11 0 55 0 172 0 173 1 144] 
#[0 9 94 0 11 0 55 0 172 0 173 1 144] 
#[0 9 98 0 11 0 55 0 172 0 173 1 144] 
#[0 9 102 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 21 145 0 96 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 149 0 180 21 149 0 181 21 149 0 182 21 149 0 183 21 149 0 184 21 149 0 185 21 149 0 186 21 149 0 187 21 149 0 188 21 149 0 189 21 153 0 191 1 17 0 194 21 153 0 195 21 153 0 196 21 153 0 197 21 157 1 38 21 157 1 39 21 161 1 40 21 157 1 41 21 157 1 42 21 165 1 43 21 157 1 44 21 157 1 45 21 157 1 46 21 157 1 48 21 157 1 50 21 157 1 52 21 157 1 54 21 157 1 55 5 113 1 56 5 113 1 57 5 113 1 58 21 169 1 93 4 201 1 124 5 121 1 125 21 173 1 126 5 121 1 127 2 117 1 130 5 125 1 131 21 177 1 141 21 177 1 143] 
#[0 21 181 0 137] 
#[1 21 185 0 82 21 189 0 99] 
#[1 3 213 0 162 21 193 0 182] 
#[0 9 106 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 3 213 0 162 21 197 0 172 21 201 0 182] 
#[0 9 110 0 11 0 55 0 172 0 173 1 144] 
#[1 9 114 0 3 9 114 0 4 9 114 0 5 9 114 0 7 9 114 0 11 9 114 0 22 9 114 0 23 9 114 0 28 9 114 0 29 9 114 0 30 9 114 0 31 9 114 0 32 9 114 0 33 9 114 0 34 9 114 0 35 9 114 0 36 9 114 0 37 9 114 0 38 9 114 0 39 9 114 0 40 9 114 0 41 9 114 0 43 9 114 0 45 9 114 0 55 9 114 0 56 9 114 0 58 9 114 0 59 9 114 0 64 9 114 0 67 9 114 0 73 9 114 0 76 9 114 0 77 9 114 0 84 9 114 0 86 9 114 0 88 9 114 0 89 9 114 0 91 9 114 0 92 9 114 0 99 9 114 0 100 9 114 0 102 9 114 0 105 9 114 0 106 9 114 0 107 9 114 0 108 9 114 0 112 9 114 0 115 9 114 0 116 9 114 0 123 9 114 0 126 9 114 0 131 9 114 0 132 9 114 0 133 9 114 0 134 9 114 0 138 9 114 0 140 9 114 0 142 9 114 0 143 9 114 0 147 9 114 0 150 9 114 0 167 9 114 0 168 9 114 0 171 3 175 0 172 9 114 0 173 9 114 1 144] 
#[0 21 205 0 100] 
#[0 21 209 0 147] 
#[1 8 129 0 3 21 213 0 22 21 217 0 172 21 221 0 253] 
#[1 8 129 0 3 21 225 0 22 21 229 0 172 21 233 0 253] 
#[0 21 237 0 172] 
#[0 21 241 0 106] 
#[0 21 245 0 106] 
#[0 9 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 21 249 0 106 21 253 0 132] 
#[0 22 1 0 172] 
#[0 22 5 0 99] 
#[1 22 9 0 106 22 13 0 132] 
#[1 22 17 0 106 22 21 0 132] 
#[0 22 25 0 142] 
#[0 9 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 22 29 0 172] 
#[0 22 33 0 172] 
#[1 3 221 0 173 3 229 0 207 22 37 0 213] 
#[0 22 41 0 99] 
#[0 22 45 0 99] 
#[0 22 49 0 172] 
#[0 22 53 0 99] 
#[1 8 33 0 3 3 221 0 173 3 229 0 207 22 57 0 213 22 61 0 230] 
#[0 22 65 0 99] 
#[0 22 69 0 99] 
#[0 22 73 0 99] 
#[0 22 77 0 172] 
#[0 22 81 0 172] 
#[0 22 85 0 142] 
#[1 0 162 0 3 4 53 0 5 22 89 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 22 93 1 11] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 22 97 1 11] 
#[1 3 221 0 173 3 229 0 207 22 101 0 213] 
#[1 8 129 0 3 22 105 0 253] 
#[1 8 129 0 3 22 109 0 253] 
#[1 8 129 0 3 22 113 0 253] 
#[1 22 117 0 172 4 170 0 173 22 117 1 13] 
#[1 3 221 0 173 3 229 0 207 22 121 0 213] 
#[1 3 221 0 173 3 229 0 207 22 125 0 213] 
#[0 22 129 0 99] 
#[1 3 221 0 173 3 229 0 207 22 133 0 213] 
#[0 22 137 0 99] 
#[0 22 141 0 99] 
#[0 22 145 0 172] 
#[0 22 149 0 99] 
#[1 8 33 0 3 3 221 0 173 3 229 0 207 22 153 0 213 22 157 0 230] 
#[0 22 161 0 99] 
#[0 22 165 0 99] 
#[0 22 169 0 99] 
#[0 22 173 0 172] 
#[0 22 177 0 172] 
#[0 22 181 0 142] 
#[1 22 185 0 8 9 249 0 159] 
#[1 9 130 0 11 9 130 0 55 3 179 0 172 9 130 0 173 9 130 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 22 193 0 55 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 10 77 0 146 10 81 0 154 3 213 0 162 3 221 0 173 22 197 0 182 3 229 0 207 22 201 0 213 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 22 205 0 172] 
#[1 22 209 0 55 3 213 0 162 22 213 0 182] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 22 217 0 180 22 217 0 181 22 217 0 182 22 217 0 183 22 217 0 184 22 217 0 185 22 217 0 186 22 217 0 187 22 217 0 188 22 217 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 22 217 1 38 22 217 1 39 22 217 1 40 22 217 1 41 22 217 1 42 22 217 1 43 22 217 1 44 22 217 1 45 22 217 1 46 22 217 1 48 22 217 1 50 22 217 1 52 22 217 1 54 22 217 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 22 217 1 141 22 217 1 143] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 22 221 0 180 22 221 0 181 22 221 0 182 22 221 0 183 22 221 0 184 22 221 0 185 22 221 0 186 22 221 0 187 22 221 0 188 22 221 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 22 221 1 38 22 221 1 39 22 221 1 40 22 221 1 41 22 221 1 42 22 221 1 43 22 221 1 44 22 221 1 45 22 221 1 46 22 221 1 48 22 221 1 50 22 221 1 52 22 221 1 54 22 221 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 22 221 1 141 22 221 1 143] 
#[1 22 225 0 24 22 229 0 50 22 229 0 51 22 229 0 52 22 229 0 65 22 229 1 61] 
#[0 22 233 0 24] 
#[1 9 134 0 22 9 134 0 23 9 134 0 43 9 134 0 45 9 134 0 55 9 134 0 56 9 134 0 58 9 134 0 59 9 134 0 64 9 134 0 67 9 134 0 77 9 134 0 84 9 134 0 88 9 134 0 89 9 134 0 99 9 134 0 107 9 134 0 115 9 134 0 116 9 134 0 123 9 134 0 138 9 134 0 143 9 134 0 150 9 134 0 167 9 134 0 168 9 134 0 171 7 233 0 172 9 134 0 173] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 22 237 0 228 22 237 0 229 22 237 0 233 22 237 1 1 22 237 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 22 241 1 4] 
#[0 9 138 0 4 0 7 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 22 245 0 191 1 17 0 194 22 245 0 195 22 245 0 196 22 245 0 197] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 22 249 0 228 22 249 0 229 22 249 0 233 22 249 1 1 22 249 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 22 253 1 4] 
#[0 9 142 0 4 0 7 0 172] 
#[1 9 146 0 4 9 146 0 7 3 183 0 172] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 23 1 0 228 23 1 0 229 23 1 0 233 23 1 1 1 23 1 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 23 5 1 4] 
#[0 9 150 0 4 0 7 0 172] 
#[0 23 9 0 172] 
#[0 9 154 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 0 109 0 73 23 13 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 21 101 0 126 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 1 17 0 143 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 23 13 0 201 23 13 0 203 23 13 0 212 1 49 0 223 23 13 0 234 1 57 0 235 23 13 0 236 23 13 0 237 23 13 0 238 23 13 0 239 23 13 0 240 23 13 0 241 23 13 0 242 23 13 0 243 23 13 0 247 23 13 0 248 23 13 1 18 23 13 1 19 23 13 1 20 23 13 1 21 23 13 1 22 23 13 1 23 1 125 1 25 23 13 1 26 23 13 1 27 23 13 1 28 23 13 1 29 23 13 1 30 23 13 1 34 23 13 1 37 1 157 1 56 1 157 1 57 1 157 1 58 23 13 1 62 23 13 1 63 23 13 1 64 23 13 1 67 23 13 1 68 23 13 1 69 23 13 1 70 23 13 1 71 23 13 1 72 23 13 1 73 23 13 1 74 23 13 1 75 23 13 1 76 23 13 1 77 23 13 1 78 23 13 1 79 23 13 1 80 23 13 1 81 23 13 1 82 23 13 1 83 23 13 1 84 23 13 1 85 23 13 1 90 23 13 1 91 2 9 1 92 23 13 1 97 23 13 1 100 23 13 1 101 23 13 1 102 23 13 1 103 23 13 1 104 23 13 1 109 23 13 1 110 23 13 1 111 23 13 1 112 23 13 1 113 23 13 1 114 23 13 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 23 13 1 129 2 117 1 130 2 121 1 131 23 13 1 139 23 13 1 140 23 13 1 142] 
#[0 9 158 0 11 0 55 0 172 0 173 1 144] 
#[0 23 17 0 172] 
#[0 9 162 0 11 0 55 0 172 0 173 1 144] 
#[1 9 166 0 99 9 166 0 162 3 221 0 173 3 229 0 207 23 21 0 213] 
#[0 23 25 0 172] 
#[0 23 29 0 172] 
#[0 23 33 0 111] 
#[0 23 37 0 99] 
#[1 9 170 0 7 9 170 0 11 9 170 0 82 9 170 0 99 9 170 0 162 9 170 0 172 9 170 0 173 23 41 1 96] 
#[1 9 174 0 7 9 174 0 11 9 174 0 82 9 174 0 99 9 174 0 162 3 187 0 172 9 174 0 173] 
#[1 0 150 0 1 0 154 0 3 9 178 0 7 0 150 0 9 9 178 0 11 9 178 0 82 9 178 0 99 9 178 0 162 3 191 0 172 9 178 0 173] 
#[0 7 233 0 172] 
#[1 9 182 0 7 9 182 0 11 9 182 0 82 9 182 0 99 9 182 0 162 3 195 0 172 9 182 0 173] 
#[1 9 186 0 7 9 186 0 11 9 186 0 82 9 186 0 99 9 186 0 162 3 199 0 172 9 186 0 173] 
#[1 9 170 0 7 9 170 0 11 9 170 0 82 9 170 0 99 9 170 0 162 9 170 0 172 9 170 0 173 23 45 1 96] 
#[1 1 242 0 1 1 242 0 3 9 190 0 7 1 242 0 9 9 190 0 11 9 190 0 82 9 190 0 99 9 190 0 162 3 203 0 172 9 190 0 173] 
#[1 9 194 0 7 9 194 0 11 9 194 0 82 9 194 0 99 9 194 0 162 3 207 0 172 9 194 0 173] 
#[0 9 198 0 11 0 55 0 172 0 173 1 144] 
#[0 23 49 0 172] 
#[0 23 53 0 172] 
#[0 9 202 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 3 213 0 162 23 57 0 182] 
#[0 9 206 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[0 9 210 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 214 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 61 0 172] 
#[1 8 129 0 3 23 65 0 22 23 69 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 23 73 0 228 23 73 0 229 23 73 0 233 0 162 1 144] 
#[0 23 77 0 172] 
#[1 8 129 0 3 23 81 0 22 23 85 0 253] 
#[0 9 218 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 89 0 106] 
#[0 9 222 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 226 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 230 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 234 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 23 93 0 106 23 97 0 132] 
#[0 23 101 0 172] 
#[0 9 238 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 242 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 250 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 1 0 165 23 105 0 187] 
#[1 5 1 0 165 23 109 0 187] 
#[0 23 113 0 99] 
#[0 23 117 0 172] 
#[0 23 121 0 172] 
#[0 23 125 0 106] 
#[0 23 129 0 172] 
#[0 23 133 0 99] 
#[1 3 221 0 173 3 229 0 207 23 137 0 213] 
#[0 23 141 0 172] 
#[0 23 145 0 172] 
#[0 23 149 0 172] 
#[0 23 153 0 142] 
#[0 23 157 0 142] 
#[0 10 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 162 0 3 14 145 0 5 6 233 0 24 8 37 0 172 2 43 0 173 12 33 0 228 12 33 0 229 12 33 0 233 12 37 1 10 23 161 1 11] 
#[1 3 221 0 173 3 229 0 207 23 165 0 213] 
#[1 3 221 0 173 3 229 0 207 23 169 0 213] 
#[0 23 173 0 99] 
#[1 0 162 0 3 4 53 0 5 8 37 0 172 2 255 0 173 3 229 0 207 23 177 0 213 23 181 0 228 23 181 0 229 23 181 0 233] 
#[1 3 221 0 173 3 229 0 207 23 185 0 213] 
#[1 3 221 0 173 3 229 0 207 23 189 0 213] 
#[1 3 221 0 173 3 229 0 207 23 193 0 213] 
#[0 23 197 0 99] 
#[0 23 201 0 99] 
#[0 23 205 0 172] 
#[0 23 209 0 99] 
#[0 23 213 0 172] 
#[0 23 217 0 172] 
#[0 23 221 0 106] 
#[0 23 225 0 172] 
#[0 23 229 0 99] 
#[1 3 221 0 173 3 229 0 207 23 233 0 213] 
#[0 23 237 0 172] 
#[0 23 241 0 172] 
#[0 23 245 0 172] 
#[0 23 249 0 142] 
#[0 23 253 0 142] 
#[0 10 6 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 221 0 159 24 1 0 190] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 24 5 0 191 1 17 0 194 24 5 0 195 24 5 0 196 24 5 0 197] 
#[1 10 10 0 11 10 10 0 55 3 211 0 172 10 10 0 173 10 10 1 144] 
#[0 24 13 0 172] 
#[1 24 17 0 55 3 213 0 162 24 21 0 182] 
#[0 24 25 0 55] 
#[1 10 14 0 11 10 14 0 55 3 215 0 172 10 14 0 173 10 14 1 144] 
#[0 24 33 0 172] 
#[1 24 37 0 55 3 213 0 162 3 219 0 172 3 221 0 173 24 45 0 182 3 229 0 207 24 49 0 213 24 53 0 218] 
#[1 10 18 0 11 10 18 0 55 3 223 0 172 10 18 0 173 10 18 1 144] 
#[0 24 61 0 172] 
#[0 24 65 0 172] 
#[0 24 69 0 172] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 24 73 1 4] 
#[0 10 22 0 4 0 7 0 172] 
#[1 8 33 0 3 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 24 81 0 228 24 81 0 229 24 77 0 230 24 81 0 233 24 81 1 1 24 81 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 24 85 1 4] 
#[0 10 26 0 4 0 7 0 172] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 24 89 1 4] 
#[0 10 30 0 4 0 7 0 172] 
#[0 24 93 0 74] 
#[0 10 34 0 11 0 55 0 172 0 173 1 144] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 24 97 0 144 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 10 38 0 99 0 162] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 24 101 0 180 24 101 0 181 24 101 0 182 24 101 0 183 24 101 0 184 24 101 0 185 24 101 0 186 24 101 0 187 24 101 0 188 24 101 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 24 101 1 38 24 101 1 39 24 101 1 40 24 101 1 41 24 101 1 42 24 101 1 43 24 101 1 44 24 101 1 45 24 101 1 46 24 101 1 48 24 101 1 50 24 101 1 52 24 101 1 54 24 101 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 24 101 1 141 24 101 1 143] 
#[0 24 105 0 111] 
#[0 10 42 0 11 0 55 0 172 0 173 1 144] 
#[0 24 109 0 172] 
#[1 24 113 0 7 24 117 0 11 10 46 0 82 10 46 0 99 10 46 0 162 13 189 0 172 3 221 0 173 3 229 0 207 24 121 0 213 24 125 0 218 24 129 1 95] 
#[1 24 113 0 7 24 133 0 11 10 50 0 82 10 50 0 99 10 50 0 162 13 189 0 172 3 221 0 173 3 229 0 207 24 137 0 213 24 141 0 218 24 129 1 95] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 24 145 0 96 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 149 0 180 21 149 0 181 21 149 0 182 21 149 0 183 21 149 0 184 21 149 0 185 21 149 0 186 21 149 0 187 21 149 0 188 21 149 0 189 21 153 0 191 1 17 0 194 21 153 0 195 21 153 0 196 21 153 0 197 21 157 1 38 21 157 1 39 21 161 1 40 21 157 1 41 21 157 1 42 21 165 1 43 21 157 1 44 21 157 1 45 21 157 1 46 21 157 1 48 21 157 1 50 21 157 1 52 21 157 1 54 21 157 1 55 5 113 1 56 5 113 1 57 5 113 1 58 24 149 1 93 4 201 1 124 5 121 1 125 21 173 1 126 5 121 1 127 2 117 1 130 5 125 1 131 21 177 1 141 21 177 1 143] 
#[0 24 153 0 137] 
#[0 10 54 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 77 0 84 0 88 0 89 0 99 0 107 0 115 0 116 0 123 0 138 0 143 0 150 0 167 0 168 0 171 0 173] 
#[1 5 1 0 165 24 157 0 187] 
#[0 24 161 0 172] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 24 165 0 228 24 165 0 229 24 165 0 233 0 162 1 144] 
#[0 10 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 1 0 165 24 169 0 187] 
#[0 24 173 0 172] 
#[0 10 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 70 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 24 177 0 106 24 181 0 132] 
#[1 8 129 0 3 24 185 0 22 24 189 0 172 24 193 0 253] 
#[1 8 129 0 3 24 197 0 22 24 201 0 172 24 205 0 253] 
#[0 24 209 0 172] 
#[0 24 213 0 106] 
#[0 24 217 0 106] 
#[0 10 78 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 24 221 0 106 24 225 0 132] 
#[0 24 229 0 172] 
#[0 24 233 0 99] 
#[1 24 237 0 106 24 241 0 132] 
#[1 24 245 0 106 24 249 0 132] 
#[0 24 253 0 142] 
#[0 10 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 86 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 221 0 173 3 229 0 207 25 1 0 213] 
#[0 25 5 0 99] 
#[0 25 9 0 99] 
#[0 25 13 0 172] 
#[0 25 17 0 99] 
#[1 8 33 0 3 3 221 0 173 3 229 0 207 25 21 0 213 25 25 0 230] 
#[0 25 29 0 99] 
#[0 25 33 0 99] 
#[0 25 37 0 99] 
#[0 25 41 0 172] 
#[0 25 45 0 172] 
#[0 25 49 0 142] 
#[0 25 53 0 172] 
#[0 25 57 0 106] 
#[0 25 61 0 106] 
#[0 10 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 65 0 106 25 69 0 132] 
#[0 25 73 0 172] 
#[0 25 77 0 99] 
#[1 25 81 0 106 25 85 0 132] 
#[1 25 89 0 106 25 93 0 132] 
#[0 25 97 0 142] 
#[0 10 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 101 0 156 9 249 0 159] 
#[0 10 102 0 11 0 55 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 25 105 0 191 1 17 0 194 25 105 0 195 25 105 0 196 25 105 0 197] 
#[0 25 109 0 55] 
#[1 10 106 0 11 10 106 0 55 3 227 0 172 10 106 0 173 10 106 1 144] 
#[0 25 117 0 172] 
#[1 10 110 0 11 10 110 0 55 3 231 0 172 10 110 0 173 10 110 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 25 125 0 191 1 17 0 194 25 125 0 195 25 125 0 196 25 125 0 197] 
#[0 25 129 0 55] 
#[1 3 235 0 11 3 235 0 55 3 239 0 172 3 235 0 173 3 235 1 144] 
#[1 0 29 0 1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 0 33 0 9 10 17 0 10 7 14 0 11 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 10 45 0 46 10 49 0 48 0 69 0 49 10 53 0 53 0 73 0 54 2 187 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 1 17 0 67 10 57 0 70 10 61 0 71 10 65 0 72 0 109 0 73 16 69 0 75 1 17 0 77 1 17 0 84 0 125 0 86 1 17 0 88 1 17 0 89 0 137 0 92 0 141 0 93 0 145 0 100 10 69 0 101 0 149 0 102 0 153 0 103 1 49 0 105 1 17 0 107 1 49 0 108 0 169 0 109 0 173 0 110 0 177 0 111 1 17 0 115 0 185 0 116 0 189 0 123 0 193 0 125 0 197 0 126 10 73 0 128 1 49 0 131 1 49 0 133 0 209 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 140 25 137 0 141 1 17 0 143 10 77 0 146 0 237 0 147 1 17 0 150 0 245 0 152 0 249 0 153 10 81 0 154 0 253 0 167 1 1 0 168 1 5 0 171 2 191 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 69 0 201 16 69 0 203 16 69 0 212 16 73 0 220 1 49 0 223 16 69 0 234 1 57 0 235 16 69 0 236 16 69 0 237 16 69 0 238 16 69 0 239 16 69 0 240 16 69 0 241 16 69 0 242 16 69 0 243 16 69 0 247 16 69 0 248 16 69 1 18 16 69 1 19 16 69 1 20 16 69 1 21 16 69 1 22 16 69 1 23 1 125 1 25 16 69 1 26 16 69 1 27 16 69 1 28 16 69 1 29 16 69 1 30 16 69 1 34 16 69 1 37 10 85 1 47 10 89 1 49 10 93 1 51 1 157 1 56 1 157 1 57 1 157 1 58 16 69 1 62 16 69 1 63 16 69 1 64 16 69 1 67 16 69 1 68 16 69 1 69 16 69 1 70 16 69 1 71 16 69 1 72 16 69 1 73 16 69 1 74 16 69 1 75 16 69 1 76 16 69 1 77 16 69 1 78 16 69 1 79 16 69 1 80 16 69 1 81 16 69 1 82 16 69 1 83 16 69 1 84 16 69 1 85 16 69 1 90 16 69 1 91 2 9 1 92 16 69 1 97 16 69 1 100 16 69 1 101 16 69 1 102 16 69 1 103 16 69 1 104 16 69 1 109 16 69 1 110 16 69 1 111 16 69 1 112 16 69 1 113 16 69 1 114 16 69 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 69 1 129 2 117 1 130 2 121 1 131 16 69 1 139 16 69 1 140 16 69 1 142] 
#[0 25 141 0 172] 
#[1 25 145 0 55 3 213 0 162 25 149 0 182] 
#[0 25 153 0 55] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 25 157 0 115 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 25 161 0 180 25 161 0 181 25 161 0 182 25 161 0 183 25 161 0 184 25 161 0 185 25 161 0 186 25 161 0 187 25 161 0 188 25 161 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 25 161 1 38 25 161 1 39 25 161 1 40 25 161 1 41 25 161 1 42 25 161 1 43 25 161 1 44 25 161 1 45 25 161 1 46 25 161 1 48 25 161 1 50 25 161 1 52 25 161 1 54 25 161 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 25 161 1 141 25 161 1 143] 
#[0 25 165 0 24] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 25 169 0 180 25 169 0 181 25 169 0 182 25 169 0 183 25 169 0 184 25 169 0 185 25 169 0 186 25 169 0 187 25 169 0 188 25 169 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 25 169 1 38 25 169 1 39 25 169 1 40 25 169 1 41 25 169 1 42 25 169 1 43 25 169 1 44 25 169 1 45 25 169 1 46 25 169 1 48 25 169 1 50 25 169 1 52 25 169 1 54 25 169 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 25 169 1 141 25 169 1 143] 
#[0 10 122 0 4 0 7 0 172] 
#[1 2 75 0 4 4 53 0 5 2 75 0 7 2 79 0 172 25 173 0 228 25 173 0 229 25 173 0 233 25 173 1 1 25 173 1 2] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 25 177 1 4] 
#[0 10 126 0 4 0 7 0 172] 
#[0 10 130 0 4 0 7 0 172] 
#[0 25 181 0 172] 
#[1 10 134 0 96 10 134 0 98 10 134 0 99 10 134 0 162 3 221 0 173 3 229 0 207 25 185 0 213] 
#[0 25 189 0 172] 
#[0 10 138 0 11 0 55 0 172 0 173 1 144] 
#[0 25 193 0 111] 
#[0 25 197 0 172] 
#[1 10 142 0 82 10 142 0 99 10 142 0 162 13 189 0 172 3 221 0 173 3 229 0 207 25 201 0 213 25 205 0 218] 
#[0 10 146 0 82 0 99 0 162] 
#[0 25 209 0 173] 
#[0 10 150 0 7 0 11 0 82 0 99 0 162 0 172 0 173] 
#[1 10 154 0 82 10 154 0 99 10 154 0 162 13 189 0 172 3 221 0 173 3 229 0 207 25 213 0 213 25 217 0 218] 
#[0 10 158 0 82 0 99 0 162] 
#[0 25 221 0 173] 
#[1 9 170 0 7 9 170 0 11 9 170 0 82 9 170 0 99 9 170 0 162 9 170 0 172 9 170 0 173 25 225 1 96] 
#[1 9 170 0 7 9 170 0 11 9 170 0 82 9 170 0 99 9 170 0 162 9 170 0 172 9 170 0 173 25 229 1 96] 
#[0 10 162 0 11 0 55 0 172 0 173 1 144] 
#[1 8 129 0 3 25 233 0 172 25 237 0 253] 
#[1 5 1 0 165 25 241 0 187] 
#[0 10 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 25 245 0 172 25 249 0 253] 
#[1 5 1 0 165 25 253 0 187] 
#[0 10 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 1 0 172] 
#[1 8 129 0 3 26 5 0 22 26 9 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 26 13 0 228 26 13 0 229 26 13 0 233 0 162 1 144] 
#[0 26 17 0 172] 
#[1 8 129 0 3 26 21 0 22 26 25 0 253] 
#[0 10 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 29 0 106] 
#[0 10 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 33 0 106 26 37 0 132] 
#[0 26 41 0 172] 
#[0 10 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 210 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 214 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 45 0 99] 
#[0 26 49 0 172] 
#[0 26 53 0 172] 
#[0 26 57 0 106] 
#[0 26 61 0 172] 
#[0 26 65 0 99] 
#[1 3 221 0 173 3 229 0 207 26 69 0 213] 
#[0 26 73 0 172] 
#[0 26 77 0 172] 
#[0 26 81 0 172] 
#[0 26 85 0 142] 
#[0 26 89 0 142] 
#[0 10 218 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 93 0 106] 
#[0 10 222 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 226 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 230 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 234 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 97 0 106 26 101 0 132] 
#[0 26 105 0 172] 
#[0 10 238 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 242 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 250 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 2 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 82 0 84 0 86 0 88 0 89 0 91 0 92 0 99 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 121 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 6 0 11 0 55 0 172 0 173 1 144] 
#[1 11 10 0 11 11 10 0 55 3 243 0 172 11 10 0 173 11 10 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 113 0 191 1 17 0 194 26 113 0 195 26 113 0 196 26 113 0 197] 
#[0 26 117 0 55] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 121 0 191 1 17 0 194 26 121 0 195 26 121 0 196 26 121 0 197] 
#[0 11 14 0 11 0 55 0 172 0 173 1 144] 
#[1 11 18 0 11 11 18 0 55 3 247 0 172 11 18 0 173 11 18 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 129 0 191 1 17 0 194 26 129 0 195 26 129 0 196 26 129 0 197] 
#[0 26 133 0 172] 
#[0 26 137 0 55] 
#[1 11 22 0 11 11 22 0 55 3 251 0 172 11 22 0 173 11 22 1 144] 
#[0 26 145 0 172] 
#[0 11 26 0 11 0 55 0 172 0 173 1 144] 
#[0 26 149 0 172] 
#[1 11 30 0 11 11 30 0 55 3 255 0 172 11 30 0 173 11 30 1 144] 
#[0 26 157 0 172] 
#[1 11 34 0 11 11 34 0 55 4 3 0 172 11 34 0 173 11 34 1 144] 
#[1 7 6 0 4 7 6 0 7 2 183 0 172 16 25 1 3 26 165 1 4] 
#[0 11 38 0 4 0 7 0 172] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 26 169 0 180 26 169 0 181 26 169 0 182 26 169 0 183 26 169 0 184 26 169 0 185 26 169 0 186 26 169 0 187 26 169 0 188 26 169 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 26 169 1 38 26 169 1 39 26 169 1 40 26 169 1 41 26 169 1 42 26 169 1 43 26 169 1 44 26 169 1 45 26 169 1 46 26 169 1 48 26 169 1 50 26 169 1 52 26 169 1 54 26 169 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 26 169 1 141 26 169 1 143] 
#[0 11 42 0 96 0 98 0 99 0 162] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 10 73 0 128 26 173 0 144 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 11 46 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 21 149 0 180 21 149 0 181 21 149 0 182 21 149 0 183 21 149 0 184 21 149 0 185 21 149 0 186 21 149 0 187 21 149 0 188 21 149 0 189 21 153 0 191 1 17 0 194 21 153 0 195 21 153 0 196 21 153 0 197 21 157 1 38 21 157 1 39 21 161 1 40 21 157 1 41 21 157 1 42 21 165 1 43 21 157 1 44 21 157 1 45 21 157 1 46 21 157 1 48 21 157 1 50 21 157 1 52 21 157 1 54 21 157 1 55 5 113 1 56 5 113 1 57 5 113 1 58 26 177 1 93 4 201 1 124 5 121 1 125 21 173 1 126 5 121 1 127 2 117 1 130 5 125 1 131 21 177 1 141 21 177 1 143] 
#[0 11 50 0 82 0 99 0 162] 
#[0 26 181 0 173] 
#[0 11 54 0 82 0 99 0 162] 
#[0 11 58 0 82 0 99 0 162] 
#[0 26 185 0 173] 
#[0 11 62 0 82 0 99 0 162] 
#[1 24 113 0 7 26 189 0 11 11 66 0 82 11 66 0 99 11 66 0 162 13 189 0 172 3 221 0 173 3 229 0 207 26 193 0 213 26 197 0 218 24 129 1 95] 
#[1 24 113 0 7 26 201 0 11 11 70 0 82 11 70 0 99 11 70 0 162 13 189 0 172 3 221 0 173 3 229 0 207 26 205 0 213 26 209 0 218 24 129 1 95] 
#[1 8 129 0 3 26 213 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 26 217 0 228 26 217 0 229 26 217 0 233 0 162 1 144] 
#[1 8 129 0 3 26 221 0 172 26 225 0 253] 
#[1 8 129 0 3 26 229 0 253] 
#[0 11 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 26 233 0 172 26 237 0 253] 
#[1 5 1 0 165 26 241 0 187] 
#[0 26 245 0 172] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 26 249 0 228 26 249 0 229 26 249 0 233 0 162 1 144] 
#[0 11 78 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 1 0 165 26 253 0 187] 
#[0 27 1 0 172] 
#[0 11 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 86 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 5 0 106 27 9 0 132] 
#[0 27 13 0 172] 
#[0 27 17 0 106] 
#[0 27 21 0 106] 
#[0 11 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 25 0 106 27 29 0 132] 
#[0 27 33 0 172] 
#[0 27 37 0 99] 
#[1 27 41 0 106 27 45 0 132] 
#[1 27 49 0 106 27 53 0 132] 
#[0 27 57 0 142] 
#[0 11 102 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 106 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 61 0 106 27 65 0 132] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 69 0 191 1 17 0 194 27 69 0 195 27 69 0 196 27 69 0 197] 
#[0 11 122 0 11 0 55 0 172 0 173 1 144] 
#[1 11 126 0 11 11 126 0 55 4 7 0 172 11 126 0 173 11 126 1 144] 
#[0 11 130 0 11 0 55 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 77 0 191 1 17 0 194 27 77 0 195 27 77 0 196 27 77 0 197] 
#[0 11 134 0 11 0 55 0 172 0 173 1 144] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 27 81 0 180 27 81 0 181 27 81 0 182 27 81 0 183 27 81 0 184 27 81 0 185 27 81 0 186 27 81 0 187 27 81 0 188 27 81 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 27 81 1 38 27 81 1 39 27 81 1 40 27 81 1 41 27 81 1 42 27 81 1 43 27 81 1 44 27 81 1 45 27 81 1 46 27 81 1 48 27 81 1 50 27 81 1 52 27 81 1 54 27 81 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 27 81 1 141 27 81 1 143] 
#[1 11 138 0 11 11 138 0 55 4 11 0 172 11 138 0 173 11 138 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 89 0 191 1 17 0 194 27 89 0 195 27 89 0 196 27 89 0 197] 
#[0 27 93 0 55] 
#[0 27 97 0 18] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 27 101 0 115 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 27 105 0 180 27 105 0 181 27 105 0 182 27 105 0 183 27 105 0 184 27 105 0 185 27 105 0 186 27 105 0 187 27 105 0 188 27 105 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 27 105 1 38 27 105 1 39 27 105 1 40 27 105 1 41 27 105 1 42 27 105 1 43 27 105 1 44 27 105 1 45 27 105 1 46 27 105 1 48 27 105 1 50 27 105 1 52 27 105 1 54 27 105 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 27 105 1 141 27 105 1 143] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 27 109 0 115 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 11 142 0 4 0 7 0 172] 
#[1 4 15 0 11 4 15 0 55 4 19 0 172 4 15 0 173 4 15 1 144] 
#[1 11 146 0 96 11 146 0 98 11 146 0 99 11 146 0 162 3 221 0 173 3 229 0 207 27 113 0 213] 
#[0 11 150 0 7 0 11 0 82 0 99 0 162 0 172 0 173] 
#[0 11 154 0 82 0 99 0 162] 
#[0 11 158 0 82 0 99 0 162] 
#[1 11 162 0 82 11 162 0 99 11 162 0 162 13 189 0 172 3 221 0 173 3 229 0 207 27 117 0 213 27 121 0 218] 
#[0 11 166 0 82 0 99 0 162] 
#[0 27 125 0 173] 
#[1 11 170 0 82 11 170 0 99 11 170 0 162 13 189 0 172 3 221 0 173 3 229 0 207 27 129 0 213 27 133 0 218] 
#[0 11 174 0 82 0 99 0 162] 
#[0 27 137 0 173] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 27 141 0 228 27 141 0 229 27 141 0 233 0 162 1 144] 
#[0 11 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 27 145 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 27 149 0 228 27 149 0 229 27 149 0 233 0 162 1 144] 
#[0 11 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 27 153 0 253] 
#[0 11 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 27 157 0 172 27 161 0 253] 
#[1 5 1 0 165 27 165 0 187] 
#[0 11 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 27 169 0 172 27 173 0 253] 
#[1 5 1 0 165 27 177 0 187] 
#[0 11 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 27 181 0 106] 
#[0 11 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 210 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 214 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 185 0 106 27 189 0 132] 
#[0 27 193 0 172] 
#[0 11 218 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 222 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 226 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 230 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 234 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 238 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 242 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 246 0 11 0 55 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 197 0 191 1 17 0 194 27 197 0 195 27 197 0 196 27 197 0 197] 
#[0 11 250 0 11 0 55 0 172 0 173 1 144] 
#[1 27 201 0 55 3 213 0 162 7 233 0 172 3 221 0 173 27 205 0 182 3 229 0 207 27 209 0 213] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 213 0 191 1 17 0 194 27 213 0 195 27 213 0 196 27 213 0 197] 
#[0 11 254 0 11 0 55 0 172 0 173 1 144] 
#[1 12 2 0 11 12 2 0 55 4 23 0 172 12 2 0 173 12 2 1 144] 
#[0 27 221 0 172] 
#[0 27 225 0 172] 
#[1 12 6 0 11 12 6 0 55 4 27 0 172 12 6 0 173 12 6 1 144] 
#[0 27 233 0 172] 
#[0 12 10 0 96 0 98 0 99 0 162] 
#[0 12 14 0 82 0 99 0 162] 
#[0 27 237 0 173] 
#[0 12 18 0 82 0 99 0 162] 
#[0 12 22 0 82 0 99 0 162] 
#[0 27 241 0 173] 
#[0 12 26 0 82 0 99 0 162] 
#[0 12 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 27 245 0 228 27 245 0 229 27 245 0 233 0 162 1 144] 
#[0 12 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 27 249 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 27 253 0 228 27 253 0 229 27 253 0 233 0 162 1 144] 
#[1 8 129 0 3 28 1 0 172 28 5 0 253] 
#[1 8 129 0 3 28 9 0 253] 
#[0 12 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 28 13 0 172 28 17 0 253] 
#[0 12 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 28 21 0 106 28 25 0 132] 
#[0 12 58 0 11 0 55 0 172 0 173 1 144] 
#[1 12 62 0 11 12 62 0 55 4 31 0 172 12 62 0 173 12 62 1 144] 
#[0 28 33 0 172] 
#[1 28 37 0 55 3 213 0 162 28 41 0 182] 
#[0 12 66 0 11 0 55 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 45 0 191 1 17 0 194 28 45 0 195 28 45 0 196 28 45 0 197] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 28 49 0 180 28 49 0 181 28 49 0 182 28 49 0 183 28 49 0 184 28 49 0 185 28 49 0 186 28 49 0 187 28 49 0 188 28 49 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 49 1 38 28 49 1 39 28 49 1 40 28 49 1 41 28 49 1 42 28 49 1 43 28 49 1 44 28 49 1 45 28 49 1 46 28 49 1 48 28 49 1 50 28 49 1 52 28 49 1 54 28 49 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 28 49 1 141 28 49 1 143] 
#[0 28 53 0 18] 
#[1 10 1 0 2 10 5 0 5 10 9 0 6 10 13 0 8 10 17 0 10 10 21 0 14 10 25 0 16 10 29 0 17 10 33 0 18 10 37 0 19 10 41 0 20 10 45 0 46 10 49 0 48 10 53 0 53 10 57 0 70 10 61 0 71 10 65 0 72 10 69 0 101 28 57 0 115 10 73 0 128 10 77 0 146 10 81 0 154 10 85 1 47 10 89 1 49 10 93 1 51] 
#[0 28 61 0 18] 
#[0 12 70 0 82 0 99 0 162] 
#[0 12 74 0 82 0 99 0 162] 
#[0 12 78 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 28 65 0 228 28 65 0 229 28 65 0 233 0 162 1 144] 
#[0 12 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 28 69 0 253] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 28 73 0 228 28 73 0 229 28 73 0 233 0 162 1 144] 
#[0 12 86 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 129 0 3 28 77 0 253] 
#[0 12 90 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 81 0 191 1 17 0 194 28 81 0 195 28 81 0 196 28 81 0 197] 
#[0 28 85 0 55] 
#[1 12 102 0 11 12 102 0 55 4 35 0 172 12 102 0 173 12 102 1 144] 
#[0 28 93 0 172] 
#[0 12 106 0 11 0 55 0 172 0 173 1 144] 
#[1 12 110 0 11 12 110 0 55 4 39 0 172 12 110 0 173 12 110 1 144] 
#[0 28 97 0 172] 
#[0 28 101 0 172] 
#[0 28 105 0 172] 
#[0 12 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 67 0 162 0 73 0 162 0 76 0 162 0 77 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 89 0 162 0 91 0 162 0 92 0 162 0 100 0 162 0 102 0 162 0 105 0 162 0 106 0 162 0 107 0 162 0 108 0 162 0 112 0 162 0 115 0 162 0 116 0 162 0 123 0 162 0 126 0 162 0 131 0 162 0 132 0 162 0 133 0 162 0 134 0 162 0 138 0 162 0 140 0 162 0 142 0 162 0 143 0 162 0 147 0 162 0 150 0 162 0 167 0 162 0 168 0 162 0 171 2 203 0 172 0 162 0 173 28 109 0 228 28 109 0 229 28 109 0 233 0 162 1 144] 
#[0 12 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 126 0 11 0 55 0 172 0 173 1 144] 
#[1 12 130 0 11 12 130 0 55 4 43 0 172 12 130 0 173 12 130 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 117 0 191 1 17 0 194 28 117 0 195 28 117 0 196 28 117 0 197] 
#[0 28 121 0 55] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 28 125 0 180 28 125 0 181 28 125 0 182 28 125 0 183 28 125 0 184 28 125 0 185 28 125 0 186 28 125 0 187 28 125 0 188 28 125 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 125 1 38 28 125 1 39 28 125 1 40 28 125 1 41 28 125 1 42 28 125 1 43 28 125 1 44 28 125 1 45 28 125 1 46 28 125 1 48 28 125 1 50 28 125 1 52 28 125 1 54 28 125 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 28 125 1 141 28 125 1 143] 
#[0 28 129 0 18] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 28 133 0 180 28 133 0 181 28 133 0 182 28 133 0 183 28 133 0 184 28 133 0 185 28 133 0 186 28 133 0 187 28 133 0 188 28 133 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 133 1 38 28 133 1 39 28 133 1 40 28 133 1 41 28 133 1 42 28 133 1 43 28 133 1 44 28 133 1 45 28 133 1 46 28 133 1 48 28 133 1 50 28 133 1 52 28 133 1 54 28 133 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 28 133 1 141 28 133 1 143] 
#[0 12 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 67 0 73 0 76 0 77 0 84 0 86 0 88 0 89 0 91 0 92 0 100 0 102 0 105 0 106 0 107 0 108 0 112 0 115 0 116 0 123 0 126 0 131 0 132 0 133 0 134 0 138 0 140 0 142 0 143 0 147 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 137 0 191 1 17 0 194 28 137 0 195 28 137 0 196 28 137 0 197] 
#[0 12 138 0 11 0 55 0 172 0 173 1 144] 
#[1 12 142 0 11 12 142 0 55 4 47 0 172 12 142 0 173 12 142 1 144] 
#[1 12 146 0 11 12 146 0 55 4 51 0 172 12 146 0 173 12 146 1 144] 
#[0 28 145 0 172] 
#[1 12 150 0 11 12 150 0 55 4 55 0 172 12 150 0 173 12 150 1 144] 
#[0 12 154 0 11 0 55 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 1 17 0 138 1 17 0 143 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 149 0 191 1 17 0 194 28 149 0 195 28 149 0 196 28 149 0 197] 
#[1 0 29 0 1 4 217 0 3 4 221 0 6 4 225 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 4 229 0 66 1 17 0 67 1 17 0 77 1 17 0 84 1 17 0 88 1 17 0 89 1 17 0 107 1 17 0 115 1 17 0 116 1 17 0 123 4 233 0 124 1 17 0 138 1 17 0 143 1 17 0 150 4 237 0 155 4 241 0 160 4 245 0 161 3 213 0 162 4 249 0 163 4 253 0 164 5 1 0 165 5 5 0 166 1 17 0 167 1 1 0 168 5 9 0 170 1 5 0 171 28 153 0 180 28 153 0 181 28 153 0 182 28 153 0 183 28 153 0 184 28 153 0 185 28 153 0 186 28 153 0 187 28 153 0 188 28 153 0 189 5 53 0 191 1 17 0 194 5 53 0 195 5 53 0 196 5 53 0 197 28 153 1 38 28 153 1 39 28 153 1 40 28 153 1 41 28 153 1 42 28 153 1 43 28 153 1 44 28 153 1 45 28 153 1 46 28 153 1 48 28 153 1 50 28 153 1 52 28 153 1 54 28 153 1 55 5 113 1 56 5 113 1 57 5 113 1 58 4 201 1 124 5 121 1 125 5 117 1 126 5 121 1 127 2 117 1 130 5 125 1 131 28 153 1 141 28 153 1 143] 
#[0 12 158 0 11 0 55 0 172 0 173 1 144] 
#[1 12 162 0 11 12 162 0 55 4 59 0 172 12 162 0 173 12 162 1 144]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument6: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument8: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result timesToken: ((nodes at: 3) at: 1).
	result plusToken: ((nodes at: 3) at: 2).
	result minusToken: ((nodes at: 3) at: 3).
	result divideToken: ((nodes at: 3) at: 4).
	result upArrowToken: ((nodes at: 3) at: 5).
	result _Token: ((nodes at: 3) at: 6).
	result modToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignment2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result setting: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType15: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 1) to: result statements.
	result addNodes: ((nodes at: 2) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addObjects: ((nodes at: 3) at: 1) to: result statements.
	result addNodes: ((nodes at: 3) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock3: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObjects: ((nodes at: 4) at: 1) to: result statements.
	result addNodes: ((nodes at: 4) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 4) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 4) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock4: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObject: (nodes at: 4) to: result statements.
	result addObjects: ((nodes at: 5) at: 1) to: result statements.
	result addNodes: ((nodes at: 5) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 5) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: ((nodes at: 3) at: 1).
	result orToken: ((nodes at: 3) at: 2).
	result xorToken: ((nodes at: 3) at: 3).
	result eqvToken: ((nodes at: 3) at: 4).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase10: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase11: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase12: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase13: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase14: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase15: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase16: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase17: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase18: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase19: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase1: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase20: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase21: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase22: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase23: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase24: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase2: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase3: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase4: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase5: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase6: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase7: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase8: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase9: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result greaterThanToken: ((nodes at: 3) at: 1).
	result lessThanToken: ((nodes at: 3) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 3) at: 3).
	result lessThanEqualToken: ((nodes at: 3) at: 4).
	result greaterThanEqualToken: ((nodes at: 3) at: 5).
	result iSToken: ((nodes at: 3) at: 6).
	result lIKEToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType2: nodes [
	| result |
	result := VBComplexTypeNode new.
	result base: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant1: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant2: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result equalToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstantList1: nodes [
	| result |
	result := VBConstantListNode new.
	result addNode: (nodes at: 1) to: result constants.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result constants.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction10: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction11: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction12: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	result type: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	result type: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction5: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction6: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction7: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	result type: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction8: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction9: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub10: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub11: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub12: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub5: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub6: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub7: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub8: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub9: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefType1: nodes [
	| result |
	result := VBDefTypeNode new.
	result deftype: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result pattern: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result enumTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction10: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction11: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction12: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction13: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction14: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction15: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction16: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result type: ((nodes at: 11) at: 1).
	result _size: ((nodes at: 11) at: 2).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: ((nodes at: 5) at: 1).
	result _size: ((nodes at: 5) at: 2).
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction9: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub10: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub11: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub12: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub13: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub14: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub15: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub16: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub9: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result typeTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result typeTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result typeTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDestinationList1: nodes [
	| result |
	result := VBDestinationListNode new.
	result addNode: (nodes at: 1) to: result labels.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result labels.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result bangToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess2: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoEvents1: nodes [
	| result |
	result := VBDoEventsNode new.
	result doEventsToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result untilToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result untilToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result whileToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result loopToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result whileToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result whileToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result whileToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	result ifMatch: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result ifMatch: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result ifMatch: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	result ifMatch: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEquals1: nodes [
	| result |
	result := VBEqualsNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent3: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent4: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result doToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result fORToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result propertyToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result kind: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result left: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result operator: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result right: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFileDescriptorLiteral1: nodes [
	| result |
	result := VBFileDescriptorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach10: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach11: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach12: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach13: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach14: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach15: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach16: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addNode: (nodes at: 16) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addNode: (nodes at: 12) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach9: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result element: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result element: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext5: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext6: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result element: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext7: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext8: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result element: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNextOneLine1: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result element: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	result addToken: (nodes at: 19) to: result whitespaceTokens.
	result element: (nodes at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext5: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext6: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result element: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext7: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext8: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result element: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSub1: nodes [
	| result |
	result := VBGoSubNode new.
	result gosubToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endLineNumber: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenEmpty1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplements1: nodes [
	| result |
	result := VBImplementsNode new.
	result implementsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result interface: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall2: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result whitespaceToken: (nodes at: 3).
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result whitespaceToken: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral2: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	result andToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInterval1: nodes [
	| result |
	result := VBIntervalNode new.
	result from: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result toToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBLabelNode new.
	result label: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelTag1: nodes [
	| result |
	result := VBLabelTagNode new.
	result name: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause5: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause6: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause7: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause8: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result periodToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess2: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constant: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constant: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants1: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constants: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants2: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constants: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet17: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet18: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet19: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet20: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet21: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet22: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result functionToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet23: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addToken: (nodes at: 16) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet24: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result functionToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result functionToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation2: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result typeName: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation2: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result resumeToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result integerExpression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 3) at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause1: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause2: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result lenToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result equalToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result length: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause3: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause4: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause5: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause6: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause7: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause8: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result lenToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result equalToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result length: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption10: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result explicitToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption11: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result privateToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result moduleToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption12: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result privateToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result moduleToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionValueNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result databaseToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result databaseToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result compare: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption7: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption8: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result compare: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption9: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result explicitToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase1: nodes [
	| result |
	result := VBOptionBaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result baseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase2: nodes [
	| result |
	result := VBOptionBaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result baseToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result type: (nodes at: 8).
	result addTokens: ((nodes at: 9) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 9) at: 2).
	result default: ((nodes at: 9) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result _size: (nodes at: 8).
	result type: (nodes at: 9).
	result addTokens: ((nodes at: 10) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 10) at: 2).
	result default: ((nodes at: 10) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 3) at: 2).
	result default: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 4) at: 2).
	result default: ((nodes at: 4) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList3: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList4: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression2: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression3: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression4: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation2: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause10: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause11: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause12: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addTokens: ((nodes at: 9) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 9) at: 2) to: result values.
	result addTokens: ((nodes at: 9) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause1: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result values.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause2: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause3: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause4: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause5: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause6: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause7: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause8: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause9: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess2: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess3: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess4: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseError1: nodes [
	| result |
	result := VBRaiseErrorNode new.
	result eRRORToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result errorCode: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variable: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variables: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRename1: nodes [
	| result |
	result := VBRenameNode new.
	result nameToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result oldName: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result aSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result newName: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeEmpty1: nodes [
	| result |
	result := VBResumeEmptyNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result nEXTToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReturn1: nodes [
	| result |
	result := VBReturnNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect1: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect2: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: (nodes at: 7) to: result cases.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleType1: nodes [
	| result |
	result := VBSimpleTypeNode new.
	result typeName: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSquareBracketIdentifier1: nodes [
	| result |
	result := VBSquareBracketIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry3: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result _size: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry4: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result _size: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry5: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result _size: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf1: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result iSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf2: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result isNotToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize1: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result sizes.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize2: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result nEWToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing10: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result fixedSize: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBTypedThingNode new.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result fixedSize: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing3: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing4: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing5: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result fixedSize: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing6: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing7: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result fixedSize: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing8: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing9: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable5: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable6: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable7: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable8: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result endLineNumber: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result wendToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 5 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 1).
	self add: ((nodes at: 2) at: 5) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace__Parameter__parameter__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___SetUpAssignation__setting___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____5: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___10: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___11: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___12: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___13: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___14: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___15: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___16: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___3: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___4: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___5: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___6: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___7: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___8: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___9: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____10: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____11: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____12: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____13: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____14: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____15: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____16: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____6: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____7: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____8: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____9: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument______2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Destination__label___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	result classToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader3: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader4: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	result classToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result elements.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result elements.
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result elements.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule3: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result elements.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule4: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addNode: (nodes at: 4) to: result elements.
	result addTokens: ((nodes at: 5) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result elements.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]
