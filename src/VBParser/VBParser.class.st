Class {
	#name : #VBParser,
	#superclass : #VBAbstractParser,
	#category : #'VBParser-ParsingCore'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 10 0 37] 
#[ 0 10 0 41] 
#[ 0 10 2 141] 
#[ 0 10 2 145] 
#[ 0 10 2 149] 
#[ 0 10 2 153] 
#[ 0 10 2 157] 
#[ 0 10 2 161] 
#[ 0 10 2 165] 
#[ 0 10 2 169] 
#[ 0 10 2 173] 
#[ 0 10 2 177] 
#[ 0 10 2 181] 
#[ 0 10 2 185] 
#[ 0 10 2 189] 
#[ 0 10 2 193] 
#[ 0 10 2 197] 
#[ 0 10 0 65] 
#[ 0 10 2 201] 
#[ 0 10 0 77] 
#[ 0 10 0 81] 
#[ 0 10 0 89] 
#[ 0 10 2 205] 
#[ 0 10 0 101] 
#[ 0 10 0 105] 
#[ 0 10 0 109] 
#[ 0 10 0 113] 
#[ 0 10 0 117] 
#[ 0 10 2 209] 
#[ 0 10 0 125] 
#[ 0 10 0 129] 
#[ 0 10 0 133] 
#[ 0 10 0 137] 
#[ 0 10 0 141] 
#[ 0 10 2 213] 
#[ 0 10 0 145] 
#[ 0 10 0 153] 
#[ 0 10 0 157] 
#[ 0 10 0 165] 
#[ 0 10 2 217] 
#[ 0 10 0 169] 
#[ 0 10 0 173] 
#[ 0 10 2 221] 
#[ 0 10 0 189] 
#[ 0 10 2 225] 
#[ 0 10 2 229] 
#[ 0 10 2 233] 
#[ 0 10 0 209] 
#[ 0 10 2 237] 
#[ 0 10 0 213] 
#[ 0 10 0 217] 
#[ 0 10 2 241] 
#[ 0 10 2 245] 
#[ 0 10 2 249] 
#[ 0 10 0 241] 
#[ 0 10 3 105] 
#[ 0 10 2 253] 
#[ 0 10 1 5] 
#[ 0 10 1 9] 
#[ 0 10 3 109] 
#[ 0 10 3 113] 
#[ 0 26 3 177] 
#[ 0 34 3 185] 
#[ 0 50 3 197] 
#[ 0 62 3 205] 
#[ 0 106 0 110] 
#[ 0 114 4 17] 
#[ 0 126 4 33] 
#[ 0 134 0 138] 
#[ 0 162 0 170 0 174 4 65] 
#[ 1 46 1 50] 
#[ 1 158 1 162] 
#[ 1 218 1 222] 
#[ 1 254 2 2] 
#[ 2 6 2 10] 
#[ 2 14 4 117] 
#[ 2 22 2 26] 
#[ 2 98 4 41] 
#[ 0 174 4 157] 
#[ 0 146 4 177] 
#[ 0 62 2 178] 
#[ 2 214 6 65] 
#[ 0 77 2 226] 
#[ 2 226 3 225] 
#[ 1 13 2 226] 
#[ 2 226 6 85] 
#[ 2 246 4 93] 
#[ 2 250 7 77] 
#[ 0 10 0 245] 
#[ 0 10 3 1] 
#[ 3 54 3 58] 
#[ 0 162 0 166 3 98 3 102] 
#[ 0 162 3 98 3 102] 
#[ 0 162 3 98 3 102 7 249] 
#[ 3 106 7 253] 
#[ 3 110 3 114] 
#[ 3 118 3 122] 
#[ 3 130 3 134] 
#[ 3 154 8 5] 
#[ 3 158 8 9] 
#[ 3 170 8 13] 
#[ 1 46 1 50 3 174 3 178] 
#[ 1 46 3 174 3 178] 
#[ 1 254 8 17] 
#[ 2 6 2 10 3 186] 
#[ 2 6 3 186] 
#[ 2 22 2 26 3 190] 
#[ 2 22 3 190] 
#[ 3 198 3 202] 
#[ 0 42 3 206] 
#[ 0 54 3 210] 
#[ 0 78 3 222] 
#[ 0 86 3 230] 
#[ 4 18 5 169] 
#[ 4 30 5 169] 
#[ 4 54 4 93] 
#[ 0 174 4 62] 
#[ 0 174 4 62 8 77] 
#[ 4 66 8 93] 
#[ 0 6 8 137] 
#[ 4 82 8 157] 
#[ 0 26 8 193] 
#[ 0 174 3 102 4 62] 
#[ 0 162 0 174 3 98 3 102 4 62 8 209] 
#[ 4 134 8 93] 
#[ 4 142 7 253] 
#[ 0 38 4 146] 
#[ 4 154 8 93] 
#[ 4 162 7 253] 
#[ 0 62 9 9] 
#[ 4 166 8 93] 
#[ 0 162 9 25] 
#[ 4 194 9 57] 
#[ 0 77 4 194] 
#[ 3 225 4 194] 
#[ 4 194 9 73] 
#[ 0 162 0 166] 
#[ 4 254 5 169] 
#[ 0 77 5 6] 
#[ 3 225 5 6] 
#[ 5 6 10 173] 
#[ 0 174 5 14] 
#[ 0 174 5 14 8 77] 
#[ 5 26 8 93] 
#[ 5 30 10 249] 
#[ 5 34 11 9] 
#[ 3 113 5 42] 
#[ 5 58 11 89] 
#[ 5 66 7 253] 
#[ 5 70 7 253] 
#[ 5 82 11 237] 
#[ 5 86 11 241] 
#[ 0 166 3 102] 
#[ 0 162 3 98 3 102 12 5] 
#[ 5 102 7 253] 
#[ 3 182 4 113] 
#[ 4 194 12 17] 
#[ 5 110 12 33] 
#[ 0 6 3 233] 
#[ 0 174 5 118] 
#[ 4 214 5 122] 
#[ 5 6 13 65] 
#[ 5 6 13 81] 
#[ 0 174 6 6] 
#[ 0 174 6 6 8 77] 
#[ 3 113 6 22] 
#[ 6 30 13 181] 
#[ 6 42 13 197] 
#[ 0 174 6 54] 
#[ 0 174 6 54 8 77] 
#[ 6 78 7 253] 
#[ 6 82 8 93] 
#[ 6 90 7 253] 
#[ 6 98 7 253] 
#[ 6 102 7 253] 
#[ 6 106 6 110 7 253] 
#[ 6 114 14 65] 
#[ 4 93 6 118] 
#[ 6 130 7 253] 
#[ 6 134 7 253] 
#[ 6 146 14 113] 
#[ 6 150 14 117] 
#[ 6 154 14 145] 
#[ 6 158 14 149] 
#[ 6 162 12 33] 
#[ 0 77 6 166] 
#[ 3 225 6 166] 
#[ 6 166 14 153] 
#[ 0 77 6 170] 
#[ 3 225 6 170] 
#[ 6 170 14 161] 
#[ 6 106 7 253] 
#[ 5 6 15 221] 
#[ 5 6 15 249] 
#[ 0 174 8 77] 
#[ 0 174 6 250] 
#[ 0 174 6 250 8 77] 
#[ 7 18 7 253] 
#[ 3 113 7 26] 
#[ 7 54 16 117] 
#[ 0 77 7 62] 
#[ 1 13 7 62] 
#[ 7 70 16 177] 
#[ 7 78 16 181] 
#[ 7 90 7 253] 
#[ 7 94 7 253] 
#[ 7 106 7 253] 
#[ 7 118 16 253] 
#[ 7 122 17 1] 
#[ 7 130 7 253] 
#[ 0 77 7 142] 
#[ 3 225 7 142] 
#[ 0 77 7 150] 
#[ 3 225 7 150] 
#[ 0 77 7 158] 
#[ 3 225 7 158] 
#[ 7 158 17 21] 
#[ 0 77 7 162] 
#[ 3 225 7 162] 
#[ 7 162 17 29] 
#[ 0 174 3 233] 
#[ 7 202 7 253] 
#[ 7 206 7 253] 
#[ 7 210 7 253] 
#[ 7 214 7 253] 
#[ 7 218 8 1] 
#[ 3 158 7 222 8 9] 
#[ 7 226 7 253] 
#[ 7 230 7 253] 
#[ 7 234 7 253] 
#[ 7 238 8 1] 
#[ 3 158 7 242 8 9] 
#[ 7 246 7 253] 
#[ 7 250 7 253] 
#[ 7 253 7 254] 
#[ 7 253 8 2] 
#[ 7 253 8 34] 
#[ 5 6 18 9] 
#[ 7 253 8 50] 
#[ 7 253 8 54] 
#[ 3 113 8 82] 
#[ 7 253 8 90] 
#[ 7 253 8 94] 
#[ 8 122 18 137] 
#[ 7 253 8 126] 
#[ 7 253 8 146] 
#[ 7 253 8 154] 
#[ 7 253 8 158] 
#[ 7 253 8 162] 
#[ 7 253 8 166] 
#[ 0 77 8 186] 
#[ 3 225 8 186] 
#[ 0 77 8 194] 
#[ 3 225 8 194] 
#[ 4 162 5 70] 
#[ 7 253 8 202] 
#[ 7 253 8 206] 
#[ 7 253 8 210] 
#[ 7 253 8 214] 
#[ 7 253 8 222] 
#[ 7 253 8 250] 
#[ 9 14 18 137] 
#[ 7 253 9 42] 
#[ 7 253 9 46] 
#[ 6 110 7 202] 
#[ 6 110 7 202 7 253] 
#[ 7 253 9 54] 
#[ 5 66 6 98] 
#[ 7 253 9 78] 
#[ 7 253 9 82] 
#[ 7 253 9 130] 
#[ 7 253 9 134] 
#[ 7 253 9 186] 
#[ 9 202 23 45] 
#[ 7 253 9 230] 
#[ 3 54 3 58 10 2] 
#[ 0 162 3 98 3 102 7 249 10 6] 
#[ 3 118 3 122 10 10] 
#[ 3 138 10 14] 
#[ 1 254 8 17 10 18] 
#[ 3 198 3 202 10 22] 
#[ 10 86 24 133] 
#[ 10 90 24 153] 
#[ 7 210 24 165] 
#[ 10 94 24 181] 
#[ 3 233 10 134] 
#[ 3 233 10 138] 
#[ 10 190 25 241] 
#[ 10 194 25 249] 
#[ 10 198 10 202] 
#[ 10 198 10 202 26 5] 
#[ 3 233 10 230] 
#[ 3 233 10 242] 
#[ 11 98 26 241] 
#[ 11 106 27 1] 
#[ 0 58 12 249] 
#[ 11 110 27 17] 
#[ 11 118 27 29] 
#[ 11 122 27 37] 
#[ 3 233 11 154] 
#[ 3 233 11 158] 
#[ 11 214 27 205] 
#[ 11 226 27 217] 
#[ 6 78 7 90] 
#[ 6 78 7 90 7 253] 
#[ 3 233 11 250] 
#[ 3 233 12 2] 
#[ 12 90 28 93] 
#[ 12 94 28 105] 
#[ 12 150 28 161] 
#[ 12 190 28 221] 
#[ 7 253 12 198] 
#[ 12 218 28 245] 
#[ 12 230 29 17] 
#[ 7 253 12 234] 
#[ 7 253 12 238] 
#[ 7 253 12 250]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2022-10-11T18:14:59.465677+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.

%left "")""  ;
%nonassoc  ""="" "":="";
%nonassoc  ""New"";
%left "","";
%right "":"";
%left ""eqv"" ;

%left ""xor"";
%left  ""or"";
%left  ""and"";
%nonassoc  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"" ;
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""not"" ;
%right ""^"";
%right  ""~"";
%right ""["" ""("";
%right ""!"" ;


%prefix VB;
%root Program;
%suffix Node;
%start module Statement ModuleStatement BehaviourDefinition;

<lineContinuation>
   :   ( \x20 | \xA0 | \x9) (_) ( \x20 | \xA0 | \x9)* ( \r | \n | \r\n | \x2028 ) ( \x20 | \xA0 | \x9)*
   ;

<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
	
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : (\#) ([^\#\r\n])* (\#)
   ;

<COLOR_LITERAL>
   : \& H [0-9a-fA-F]+ \&?
   ;


<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)* 
	;

<SBIDENTIFIER>
	: (\[) (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|\-|/|$|\s)* (\]) 
	;
<DEFTYPE> 
	: ([a-zA-Z]) (\-) ([a-zA-Z]); 
	
<HASH_NUMBER>
	: ( \#) (<DECIMAL_INTEGER>)
	;
	
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;

<whitespace> : ( \x20 | \xA0 | \x9) + ; 

<eol>
   : (<whitespace>?) ( \r | \n | \r\n | \x2028 | \ ) (<whitespace>?)
   ;

<comment>
   :  (<whitespace>?)(\' | :?  REM  \ ) ( [^\n\r])* 
   ;

###################################################### 
########## Basic module
###################################################### 

module: <eol>* (header 'header' <eol>*)? (ModuleStatement 'element')?  (<eol>* ModuleStatement 'element' )*  <eol>* {{Module}};

###################################################### 
########## Literals
###################################################### 
literal 
	: 
	  FileDescriptorLiteral
	| IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;

FileDescriptorLiteral 	: <HASH_NUMBER> 'token' 			{{FileDescriptorLiteral}};
IntegerLiteral 			: <INTEGER_LITERAL> 'token' ""&""? 	{{IntegerLiteral}};
ColorLiteral			: <COLOR_LITERAL> 'token' 			{{ColorLiteral}} ; 
DateLiteral				: <DATE_LITERAL> 'token' 			{{DateLiteral}};
FloatLiteral			: <FLOATING_POINT_LITERAL> 'token' 	{{FloatLiteral}};
BooleanLiteral			: <BOOLEAN_LITERAL> 'token' 		{{BooleanLiteral}};
StringLiteral			: <STRING_LITERAL> 'token' 			{{StringLiteral}};
Null					: <NULL_LITERAL> 'token' 			{{Null}};




GuidLiteral: 
		""{""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> +
		""-"" 
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""}"" 
		{{GuidLiteral}};


Identifier : 
	 SimpleIdentifier
	| HashIdentifier
	| SquareBracketIdentifier;

KeywordIdentifier : UsableKeywords 'token'  {{SimpleIdentifier}} | SquareBracketIdentifier;


UsableKeywords  :  
  IdentifierWords  
| ""open"" 
| ""type"" 
| ""select"" 
| ""case"" 
| ""else""   
;

IdentifierWords :  
  <IDENTIFIER>     
| ""text"" 
| ""name"" 
| ""version"" 
| ""database"" 
| ""collection"" 
| ""bold"" 
| ""append"" 
| ""Object""  
| ""len"" 
| ""get"" | ""set"" | ""let"" 
| ""date"" 
| ""input"" 
| ""print"" 
| ""write"" 
| ""Error""
| ""Next""
| ""Output""
| ""Alias""
| ""String"" 
| ""Type"" 
| ""To""
| ""Line""
;

HashIdentifier 			: <HASH_IDENTIFIER> 'token' {{HashIdentifier}};
SquareBracketIdentifier : <SBIDENTIFIER> 'token' 	{{SquareBracketIdentifier}};
SimpleIdentifier 		: IdentifierWords 'token'  	{{SimpleIdentifier}};


LabelTag : <IDENTIFIER> 'name' "":""  {{LabelTag}};

###################################################### 
########## Module header and configuration
###################################################### 

header: <whitespace>? ""version"" <whitespace> FloatLiteral  'version'  (""class"")?  {{}};
Option
   :  <whitespace>? ""option"" <whitespace> IntegerLiteral 'value' {{OptionValue}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> ""database"" {{OptionCompareDatabase}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> (""binary""| ""text"" 'compare') {{OptionCompare}}
   |  <whitespace>? ""option"" <whitespace> ""explicit"" {{OptionExplicit}}
   |  <whitespace>? ""option"" <whitespace> ""private"" <whitespace> ""module""{{OptionPrivateModule}}
   | OptionBase
   ;
   
OptionBase : 
	<whitespace>? 
	""option"" <whitespace> 
	""base"" <whitespace> 
	Expression 'value' {{OptionBase}} 
;

SetUpAssignation :  
	(Identifier  'identifier' | MemberAccess 'identifier') <whitespace> ""="" <whitespace> Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" <whitespace> SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* <eol>*""end"" {{Configuration}};

Implements : ""implements"" <whitespace> StateAccessBase 'interface' {{Implements}}; 

DefTypeLabel : 
  ""DefBool"" | ""DefByte"" |""DefCur"" 
| ""DefDate"" | ""DefDec"" | ""DefDbl"" 
| ""DefInt"" | ""DefLng"" | ""DefLnglng"" 
| ""DefLngPtr"" | ""DefObj"" | ""DefSng"" 
| ""DefStr"" | ""DefVar"" 
;

DefType : DefTypeLabel 'deftype' <whitespace> <DEFTYPE> 'pattern' {{DefType}}; 

ModuleStatement :  
  Option  
| Configuration 
| Attribute 
| DeclareExternal 
| VariableDefinition 
| BehaviourDefinition 
| Types 
| Implements 
| DefType
 ;

###################################################### 
########## Body statements
###################################################### 

Statement :  
  StatementAssignment 
| VariableDefinition 
| Attribute 
| OptionBase 
| StatementCalls  
| ControlFlowStatement 
| Types 
| Label 
| Exits 
| Go 
| FileClauses 
| RaiseEvent 
| OtherStatements ;

# A Block is a list of statements. Each entry can be headed with a line number. Lines are splitted by newline 
Block: 
	    <eol>+
		(IntegerLiteral 'lineNumber' <whitespace>)? 
		 Statement 'statement'?
	   (
		 (<eol> | (<whitespace>? "":"" <whitespace>?))+ 
		 (IntegerLiteral 'lineNumber' <whitespace>)? 
		  Statement 'statement' 
	   )*
	   <eol>*
	   {{Block}};
	   
# Oneline blocks can have one or more ""lines"" splitted by "":"" 

OneLineBlock : 
	<whitespace> Statement 'statement'? 
	(<whitespace>? "":"" <whitespace>? Statement 'statement')* 
	{{Block}}
;

BaseType : 
  ""boolean"" 
| ""byte"" 
| ""currency"" 
| ""collection"" 
| ""date"" 
| ""decimal"" 
| ""double"" 
| ""integer"" 
| ""long"" 
| ""longlong""
| ""longptr"" 
| ""object"" 
| ""single"" 
| ""string"" 
| ""variant""
{{BaseType}};

SimpleType : 
	Identifier 'typeName'
	{{SimpleType}}
	;


Visibility: 
  ""private"" 
| ""public"" 
| ""friend"" 
| ""global"" ; 

ComplexType: 
	(SimpleType 'base')?  
	(""."" UsableKeywords 'member')+ 
	{{ComplexType}}
;

Type: 
  BaseType 
| SimpleType 
| ComplexType 
;



TypedThing : 
			 (<whitespace> ""as"" <whitespace> Type 'type')?
			 (<whitespace>? ""*"" <whitespace>? Expression 'fixedSize')?  
			 {{TypedThing}}
;
			 
TypedAndInstantiatedThing :	 
			<whitespace> ""as"" <whitespace>
			""new"" <whitespace> 
			Type 'type'
			{{AsTypeAndNew}}
; 

TypeSize : ""("" 
			Expression 'size'? 
			("",""<whitespace>? Expression 'size')* 
			"")"" 
			{{TypeSize}} 
;

AsType : 
  TypedThing 
| TypedAndInstantiatedThing;



###################################################### 
########## assign statements
###################################################### 

StatementAssignment : Assignment | ExplicitAssignement ;

ExplicitLetSet: ""let"" | ""set""; 

Assignment : 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' | "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};
		
ExplicitAssignement : 
		ExplicitLetSet 'kind' <whitespace> 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' |  "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};

###################################################### 
########## other statements
###################################################### 
 
OtherStatements : 
  Rename 
| Beep 
| DoEvents;

Rename : 
	""name"" <whitespace> 
	Expression 'oldName' <whitespace> 
	""as"" <whitespace> 
	Expression 'newName' 
	{{Rename}} ;
	
Beep : ""beep"" ;
DoEvents : ""DoEvents"" {{DoEvents}} ;

###################################################### 
########## Types
###################################################### 

Types : 
  DefineEnum 
| DefineType 
| Event ;

DefineType : 
      (Visibility 'visibility' <whitespace>)? 
	  ""type"" <whitespace> 
	  Identifier 'name' 
	  ( <eol>* TypeEntry 'field' )* 
	  <eol>* 
	  ""end"" <whitespace>  ""type"" 
	  {{DefineType}} ;
	  
TypeEntry :
	  Identifier 'name'
	  (TypeSize 'size')?
	  AsType 'type' 
	  (<whitespace>?""*""<whitespace>? IntegerLiteral 'size' )? 
	  {{TypeEntry}};
	  
Event  : 
	  (Visibility 'visibility' <whitespace>)?  
	  ""event"" <whitespace> 
	  Identifier 'selector' <whitespace>?
	  ParameterList 'parameters'
	  {{Event}} ;
	  
DefineEnum :  
	  (Visibility 'visibility' <whitespace>)?  
	  ""enum"" <whitespace> 
	  Identifier 'name'  
	  ( <eol>* EnumEntry 'field')* 
	  <eol>*  
	  ""end"" <whitespace> ""enum"" 
	  {{DefineEnum}};
	  
EnumEntry : 
      Identifier 'name'  
	  ( <whitespace> ""="" <whitespace> Expression 'value')? 
	  {{EnumEntry}};

###################################################### 
########## Parameters
###################################################### 

ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:""(""(Parameter 'parameter' ("","" <whitespace> Parameter 'parameter')* )? <whitespace>? "")"" {{ParameterList}};
	
Parameter: 
	(""optional"" <whitespace>)? 
	(ParameterPassingStrategy 'strategy' <whitespace>)? 
	(""paramarray"" <whitespace>)? 
	Identifier 'name' 
	(TypeSize 'size')?
	(AsType 'type')? 
	(<whitespace> ""="" <whitespace> Expression 'default')? 
	{{Parameter}};

###################################################### 
########## External declaration
###################################################### 

DeclareSub: 
			(Visibility 'visibility' <whitespace> )? 
			""declare"" <whitespace> 
			""sub"" <whitespace> 
			Identifier 'selector' <whitespace> 
			""lib"" <whitespace> 
			StringLiteral 'library' <whitespace>?
			(""alias"" <whitespace> StringLiteral 'alias' <whitespace>?)? 
			ParameterList 'parameters' 
			{{ExternalSub}};
			
DeclareFunction: 
		(Visibility 'visibility' <whitespace> )? 
		""declare"" <whitespace> 
		""function"" <whitespace> 
		Identifier 'selector' <whitespace> 
		""lib"" <whitespace> 
		StringLiteral 'library' <whitespace>? 
		(""alias"" <whitespace>  StringLiteral 'alias' <whitespace>? )? 
		ParameterList 'parameters'
		AsType 'type'
		{{ExternalFunction}};
		
		
DeclareExternal : DeclareSub|DeclareFunction; 

###################################################### 
########## Function / Sub Definition 
###################################################### 

Modifier: ""static"" ;

DefineFunction: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""function""  <whitespace>
	Identifier 'selector'<whitespace>?
	ParameterList 'parameters' <whitespace>?
	(AsType 'type' TypeSize 'size'?  )?
	Block 'block' 
	""end""  <whitespace> ""function"" 
   {{FunctionDefinition}};

DefineSub: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""sub""  <whitespace>
	Identifier 'selector'<whitespace>?
	(ParameterList 'parameters')? <whitespace>?
	Block 'block' 
	""end"" <whitespace> ""sub"" 
   {{SubDefinition}};
   

ModulePropertyGet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""get""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	(AsType 'type' TypeSize 'size'?)? 
	Block 'block' 
	""end"" <whitespace> (""property"" | ""function"") 
    {{ModulePropertyGet}}; 
	
	
ModulePropertySet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""set""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	Block 'block'  
	""end"" <whitespace> (""property"" | ""function"")
  {{ModulePropertyGet}}; 
  
ModulePropertyLet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""let""  <whitespace>
	Identifier 'selector' 
	ParameterList 'parameters'
	 Block 'block'  
	 ""end"" <whitespace> (""property"" | ""function"") 
{{ModulePropertyGet}}; 

BehaviourDefinition:  
  DefineFunction 
| DefineSub 
| ModulePropertyGet 
| ModulePropertySet 
| ModulePropertyLet ;

###################################################### 
########## Variable / And Multiple Variables
###################################################### 

ModuleProperty : 
	Visibility 'visibility' <whitespace>
	Variable 'variable' 
	{{ModuleProperty}};
	
ModuleConstant : 
	(Visibility 'visibility' <whitespace>)? 
	""const"" <whitespace> 
	Constant 'constant'
	{{ModuleConstant}};

DefineVariable : 
	""dim"" <whitespace> 
	Variable 'variable' 
	{{DimVariable}};


ReDefineVariable : 
	""redim"" <whitespace> 
	(""preserve"" <whitespace>)? 
	Variable 'variable' 
	{{ReDimVariable}};
	
ReDefineExpression : 
	""redim"" <whitespace>
	(""preserve"" <whitespace>)? 
	Expression 'variable' 
	{{ReDimVariable}};
	
StaticVariable : 
	""static""  <whitespace>  
	Variable 'variable'
	{{StaticVariable}};
	
Variable : 
	(""WithEvents""  <whitespace> )? 
	Identifier 'name'
	(TypeSize 'size')?
	(AsType 'type') ? 
	{{Variable}};
	
Constant :  
	Identifier 'constant'
	(AsType 'type') ? 
	<whitespace> ""=""  <whitespace> 
	Expression 'value' 
	{{Constant}} ;

ModuleProperties : 
	Visibility 'visibility'  <whitespace>
	VariableList 'variables' 
	{{ModuleMultipleProperties}};
	
	
ModuleConstants : 
	(Visibility 'visibility'  <whitespace> )? 
	""const""  <whitespace> 
	ConstantList 'constants' 
	{{ModuleMultipleConstants}};
	
DefineVariables : 
	""dim""  <whitespace>
	VariableList 'variables' 
	{{DimMultipleVariables}};
	
ReDefineVariables : 
	""redim""  <whitespace> 
	(""preserve""  <whitespace>)?  
	VariableList 'variables' 
	{{ReDimMultipleVariables}};
	
StaticVariables : 
	""static"" <whitespace> 
	VariableList 'variables' 
	{{StaticMultipleVariables}};
	
VariableList : Variable 'variable' ( <whitespace>? "",""  <whitespace>?  Variable 'variable' )+ {{VariableList}};
ConstantList : Constant 'constant' ( <whitespace>? "",""  <whitespace>?  Constant 'constant' )+ {{ConstantList}};

VariableDefinition :
  ModuleProperties 
| ModuleProperty 
| ModuleConstant 
| ModuleConstants 
| ConstantList 
| DefineVariable 
| ReDefineVariable 
| ReDefineExpression 
| DefineVariables 
| ReDefineVariables 
| StaticVariable 
| StaticVariables ;

###################################################### 
########## Value Statements
###################################################### 


Expression :   
  ValueClause  
| StateAccess 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval 
| Operation ; 

ParentheseesExpression : 
	""(""  <whitespace>? 
	Expression 'expression'  
	<whitespace>? "")"" 
	{{ParentheseesExpression}};
	
Interval : 
	Expression 'from' <whitespace> 
	""to""  <whitespace> 
	Expression 'to'  
	{{Interval}} ; 


##########
### Ops
##########

Operation : 
  UnaryOperation 
| BinaryOperation ;

####################
### Unary Ops 
####################

UnaryOperation:   
  NegatedOperation
| PositiveOperation 
| NotOperation 
; 

NegatedOperation : 
	""-""
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{NegatedOperation}}
;
	
PositiveOperation : 
	""+"" <whitespace> 
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{PositiveOperation}} 
;

NotOperation : 
	""not"" <whitespace>
	(StateAccessBase 'value' | BooleanLiteral 'value' | ParentheseesExpression 'value' | TypeOf 'value' )
	{{NotOperation}}
;


####################
### Binary Ops 
####################

LeftSide :  
  ValueClause  
| StateAccessBase 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval
| UnaryOperation ;


BinaryOperation : 
  ComparisonOperation  
| ArithmeticOperation 
| BooleanBinaryOperation 
| Equals  
| ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like"" ;

ComparisonOperation : 
		(LeftSide 'left' | ArithmeticOperation 'left') <whitespace>
		ComparisonOperator <whitespace> 
		(LeftSide 'right' | ArithmeticOperation 'right') 
		{{ComparisonOperation}};
		
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";

ArithmeticOperation : 
		LeftSide 'left' <whitespace>
		ArithmeticOperator <whitespace>
		Expression 'right' {{ArithmeticOperation}};


BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";

BooleanBinaryOperation : 
		(ComparisonOperation 'left' | Equals 'left' | LeftSide 'left'  ) <whitespace>
		BooleanOperator   <whitespace>
		Expression 'right' 
		{{ArithmeticOperation}};


ConcatenationOperation : 
		LeftSide 'left' <whitespace>
		""&"" <whitespace>
		Expression 'right' 
		{{ConcatenationOperation}}; 

Equals : 
	(Identifier 'left' | MemberAccess 'left' | Expression 'left') <whitespace>
	""="" 'operator' <whitespace>
	Expression 'right' 
	{{Equals}}; 


####################
### Value Clause 
####################

ValueClause: 
  AddressOfClause 
| NewClause ;

AddressOfClause : 
		""AddressOf"" <whitespace>
		Identifier 'name'  
		{{AddressOfClause}}; 
		
NewClause : 
		""New"" <whitespace>
		Type 'typeName' 
		{{NewClause}};

OpenMode :  
  ""Append"" 
| ""Binary"" 
| ""Input"" 
| ""Output"" 
| ""Random"" ;


OpenAccess : 
  ""Read"" 
| ""Write"" 
| ""Read Write"" ;

Lock :  
  ""Shared"" 
| ""Lock Read"" 
| ""Lock Write"" 
| ""Lock Read Write"";


FileClauses : 
  OpenFileClause 
| PrintFileClause 
| LineInputClause ;

OpenFileClause : 
		""Open"" <whitespace>
		Expression 'filepath' <whitespace>
		""For"" <whitespace>
		OpenMode 'mode' <whitespace>
		(OpenAccess 'access' <whitespace>)? 
		(Lock 'lock' <whitespace>)? 
		""As"" <whitespace>
		Expression 'fileDescriptor' 
		(<whitespace> ""len"" <whitespace> ""="" <whitespace> Expression'length')? 
		{{OpenClause}};
		
		
PrintFileClause : 
		""Print"" <whitespace>
		Identifier 'fileNumber' <whitespace>?
		"","" <whitespace>? 
		(Expression 'value' <whitespace>?)? 
		("";"" <whitespace>? Expression 'value')*  
		{{PrintIntoFileClause}};
		
LineInputClause : 
		""Line"" <whitespace>
		""Input"" <whitespace>
		(Identifier 'fileNumber' | FileDescriptorLiteral  'fileNumber') <whitespace>?  
		"",""  <whitespace>?
		(Expression 'value') 
		{{LineInputClause}};


###################################################### 
########## Control flow statements
###################################################### 

ControlFlowStatement : 
  Exits
| Loops 
| If  
| On 
| Resume 
| To 
| With 
| RaiseError 
| Select ; 

####################
#### Loops
####################


Loops : 
  DoLoop 
| WhileWend 
| ForLoop ;

####################
########## Do
####################

DoLoop : 
  InfinityLoop 
| WhileTrue 
| UntilTrue 
| DoWhileTrue 
| DoUntilTrue; 


InfinityLoop : 
	""do""  
		(Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{InfinityLoop}} ;

WhileTrue :  
	""do"" <whitespace>
	""while"" <whitespace>
	Expression 'condition' 
	( Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{WhileTrue}}; 
	
	
UntilTrue : 
	""do"" <whitespace>
	""until"" <whitespace>
	Expression 'condition'
		Block 'body'
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""loop"" 
   {{UntilTrue}}; 

DoWhileTrue :  
	""do"" 
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)?  
	""loop"" <whitespace> 
	""while"" <whitespace> 
	Expression 'condition' 
    {{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" 
	 Block 'body' 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop"" <whitespace> 
	""until"" <whitespace>
	Expression 'condition'
    {{DoUntilTrue}}; 


####################
########## WhileWend
####################

WhileWend: 
	""while"" <whitespace> 
	Expression 'condition'
	( Block 'body')?   
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""wend"" 
	{{WhileWend}}; 

####################
########## For 
####################

ForLoop : 
  ForEach 
| ForNext 
| ForNextOneLine 
| ForStepNext;

ForEach :  
	""for"" <whitespace> 
	""each"" <whitespace> 
	Identifier 'element' <whitespace> 
	""in"" <whitespace> 
	Expression 'group' <whitespace>?
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForEach}} ;

ForNext :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'   
	( Block 'body')? 
	 (IntegerLiteral 'endLineNumber' <whitespace>) ? 
	 ""next"" 
	 (<whitespace> Identifier 'element')? 
    {{ForNext}} ;

ForNextOneLine :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace> 
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'
		( OneLineBlock 'body')? 
	""next""
   {{ForNext}} ;

ForStepNext:   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace>
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit' <whitespace> 
	""step"" <whitespace> 
	Expression 'step'   
		( Block 'body')?  
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForStepNext}} ;

####################
########## If
####################

If : 
  IfThenElseOneLine 
| IfThenEmpty
| IfThenElse ; 

IfThenEmpty : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then:"") <eol> 
{{IfThenElse}};


IfThenElseOneLine : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then""|""then:"") 
	OneLineBlock 'ifTrue' 
	(<whitespace> (""else""|""else:"") OneLineBlock 'ifFalse' )?
{{IfThenElse}};

IfThenElse : 
	""if"" <whitespace> 
	Expression  'condition' 
	<whitespace> 
	""then""
	(Block 'ifTrue')  
	(ElseIf 'elseif')* 
	(Else 'else')?
    (IntegerLiteral 'endLineNumber'<whitespace>)? 
	""end"" <whitespace> ""if""
	{{IfThenElse}};
	
Else: 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""else"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}};
	
ElseIf: 
    (IntegerLiteral 'endLineNumber' <whitespace>)? 
	""elseif"" <whitespace> 
	Expression  'condition' <whitespace>
	""then"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}}; 



####################
###### Error 
####################

RaiseError : 
  ""Error"" <whitespace> Expression 'errorCode'  
  {{RaiseError}} ;
	
##########################
###### Label / LabelSub
##########################

	To : Label ;
	Label : LabelTag 'label' {{Label}}; 	
	
	
####################
###### Select Case 
####################
CaseCondition : 
  ExpressionCalls
| NegatedOperation 
| Interval
| Identifier 
| MemberAccess 
| literal;

Case : 
	(IntegerLiteral 'lineNumber' <whitespace>)? 
	""case"" <whitespace>
	(CaseCondition 'expression' | ""else"")
	("","" <whitespace> (CaseCondition 'expression'))*
	"":""?
	(Block 'body' | (OneLineBlock 'body' <eol>))?
	{{Case}};
	
Select : 
	""select"" <whitespace> 
	""case"" <whitespace>
	Expression 'expression' 
	<eol>+ (Case 'case' <eol>+?)* 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""end"" <whitespace> ""select"" 
	{{Select}};

####################
###### Resume
####################

Resume: 
  ResumeLabel 
| ResumeNext 
| ResumeEmpty ;
	
ResumeLabel : 
	""resume"" <whitespace> 
	DestinationList 'destination' 
	{{ResumeLabel}} ; 
	
ResumeNext : 
	""resume"" <whitespace> 
	""next"" 
	{{ResumeNext}} ; 
	
ResumeEmpty : ""resume"" {{ResumeEmpty}}; 

####################
###### GoTo / GoSub 
####################

Go : 
  GoToStatement 
| GoSub ;


Destination : 
  Identifier 
| IntegerLiteral 
| NegatedOperation ;

 
DestinationList :  
	Destination 'label' 
	(<whitespace>?"","" <whitespace>?Destination 'label')*
	{{DestinationList}};

GoToStatement : 
	""goto"" <whitespace> 
	DestinationList 'destination'   
	{{GoToStatement}};
	
GoSub :  
	""gosub"" <whitespace> 
	DestinationList 'destination'  
	{{GoSub}} ;

####################
########## On 
####################

On : 
  OnErrorGoTo 
| OnErrorResumeNext 
| OnExpressionGo; 

OnErrorGoTo : 
	""on"" <whitespace>
	""error"" <whitespace>
	GoToStatement 'to' 
	{{OnErrorGoTo}};
	
OnErrorResumeNext : 
	""on""  <whitespace>
	""error"" <whitespace>
	""resume""  <whitespace>
	""next""
	{{OnErrorResumeNext}} ;
	
OnExpressionGo : 
	""on"" <whitespace>
	Expression 'integerExpression' <whitespace>
	Go 'to' 
	{{OnExpressionGo}} ;

####################
########## Error
####################

Error: 
	""error"" <whitespace>
	Expression 'errorCode' 
	{{Error}} ;

####################
########## With
####################

With : 
	""with"" <whitespace>
	Expression 'with' 
	Block 'block' 
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""end"" <whitespace> ""with"" 
	{{With}} ;

####################
########## Exits
####################

Exits : 
  ExitFunction 
| ExitSub 
| ExitProperty 
| ExitDo 
| ExitFor 
| Return; 

ExitFunction : 
	""exit"" <whitespace>
	""function"" 
	{{Exits}} ;
	
ExitSub : 
	""exit"" <whitespace>
	""sub"" 
	{{Exits}} ; 
ExitDo : 
	""exit"" <whitespace>
	""do"" 
	{{Exits}} ; 
	
ExitFor : 
	""exit"" <whitespace>
	""for"" 
	{{Exits}} ;
	
ExitProperty : 
	""exit"" <whitespace> 
	""property"" 
	{{Exits}} ;
	
Return : 
	""return"" 
	{{Return}} ;

########################################
### Calls and accesses 
########################################

StateAccessBase :
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess; 

############################################################
### Normal accesses.  object.value dic!key
############################################################

DictionaryAccess : 
	(StateAccessBase 'receiver')?
	""!"" 
	KeywordIdentifier 'member' 
	{{DictionaryAccess}} ;

MemberAccess : 
	(StateAccessBase 'receiver')?
	"".""  
	KeywordIdentifier 'member' 
	{{MemberAccess}};


StateAccess : 
	DictionaryAccess 
  | MemberAccess;
  
  
############################################################
### ImplicitParenthesesLessCall.   selector arg1, arg2, , , arg
############################################################

ImplicitCallExpression : 
  MemberAccess
| Identifier
;


ImplicitParenthesesLessCall :  
		ImplicitCallExpression 'selector'  <whitespace> 
		ArgumentList 'arguments' 
		{{ImplicitParenthesesLessCall}} 
		
|       ImplicitCallExpression 'selector'
		{{ImplicitParenthesesLessCall}} 
 
;

############################################################
### ImplicitCalls.   selector(arg1, arg2, , , arg). 
############################################################
ProcedureCallOrArrayExpression : 
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess
;

ProcedureCallOrArrayAccess :  
		ProcedureCallOrArrayExpression 'selector'
		""(""<whitespace>?
		  ArgumentList 'arguments'
		 <whitespace>?"")""
		{{ProcedureCallOrArrayAccess}} 

;

############################################################
### Argument and argument list. 
### Expression, expression, assignment 
############################################################

Argument : 
        (ParameterPassingStrategy 'strategy' <whitespace>)?  
		(""paramarray"" <whitespace>)?  
		(Expression 'value' | Assignment 'value') 
		{{Argument}};
		
		
ArgumentList : 
		(<whitespace>? Argument 'argument' ? ("","" | "";"" )  <whitespace>?)* 
		Argument 'argument'? 
		(<whitespace>?("","" | "";"" ) <whitespace>? Argument 'argument' ? )*
		{{ArgumentList}};


ExplicitCallSelectorTypes :
  Identifier 
| MemberAccess  
| ProcedureCallOrArrayAccess;


############################################################
### ExplicitCall.  Call selector(arg1, arg2, , , arg). 
############################################################

ExplicitCall : 
		""Call"" <whitespace>
		 ExplicitCallSelectorTypes 'selector'  
		{{ExplicitCall}} ;
		
RaiseEvent : 
		""RaiseEvent"" <whitespace>
		(Identifier 'selector' | ProcedureCallOrArrayAccess 'selector' )
		{{RaiseEvent}};

TypeOf : 
		""TypeOf"" <whitespace>
		Argument 'argument' <whitespace>
		(""Is"" | ""IsNot"") <whitespace>
		Argument 'type'  
		{{TypeOf}};

StatementCalls :  
  ImplicitParenthesesLessCall 
| ExplicitCall ;

ExpressionCalls : 
  ProcedureCallOrArrayAccess 
| TypeOf ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(177 0 #reduceActionFor_eol__1: 2057217 false ) 
	#(179 0 #reduceActionFor__eol___ModuleStatement__element____1: 2121729 false ) 
	#(194 1 #liftFirstValue: 3470357 false ) 
	#(194 1 #liftFirstValue: 3470344 false ) 
	#(241 1 #reduceActionForDoEvents1: 8701953 false ) 
	#(194 1 #liftFirstValue: 3470354 false ) 
	#(194 1 #liftFirstValue: 3470351 false ) 
	#(194 1 #liftFirstValue: 3470361 false ) 
	#(194 1 #liftFirstValue: 3470355 false ) 
	#(194 1 #liftFirstValue: 3470345 false ) 
	#(194 1 #liftFirstValue: 3470356 false ) 
	#(194 1 #liftFirstValue: 3470352 false ) 
	#(194 1 #liftFirstValue: 3470358 false ) 
	#(194 1 #liftFirstValue: 3470360 false ) 
	#(194 1 #liftFirstValue: 3470359 false ) 
	#(194 1 #liftFirstValue: 3470353 false ) 
	#(240 1 #liftFirstValue: 8685569 false ) 
	#(194 1 #liftFirstValue: 3470343 false ) 
	#(194 1 #liftFirstValue: 3470342 false ) 
	#(194 1 #liftFirstValue: 3470341 false ) 
	#(194 1 #liftFirstValue: 3470350 false ) 
	#(223 1 #liftFirstValue: 7038979 false ) 
	#(194 1 #liftFirstValue: 3470347 false ) 
	#(223 1 #liftFirstValue: 7038980 false ) 
	#(194 1 #liftFirstValue: 3470346 false ) 
	#(194 1 #liftFirstValue: 3470349 false ) 
	#(235 1 #liftFirstValue: 7913473 false ) 
	#(194 1 #liftFirstValue: 3470339 false ) 
	#(223 1 #liftFirstValue: 7038977 false ) 
	#(223 1 #liftFirstValue: 7038978 false ) 
	#(359 1 #reduceActionForResumeEmpty1: 24298497 false ) 
	#(379 1 #reduceActionForReturn1: 26081281 false ) 
	#(194 1 #liftFirstValue: 3470348 false ) 
	#(235 1 #liftFirstValue: 7913474 false ) 
	#(194 1 #liftFirstValue: 3470338 false ) 
	#(194 1 #liftFirstValue: 3470340 false ) 
	#(194 1 #liftFirstValue: 3470337 false ) 
	#(196 1 #reduceActionForSquareBracketIdentifier1: 3841025 false ) 
	#(195 1 #reduceActionForHashIdentifier1: 3773441 false ) 
	#(380 1 #liftFirstValue: 26227715 false ) 
	#(386 1 #liftFirstValue: 27437059 false ) 
	#(384 1 #liftFirstValue: 26961922 false ) 
	#(228 0 #reduceActionForTypedThing1: 7252993 false ) 
	#(197 1 #reduceActionForSimpleIdentifier1: 3921921 false ) 
	#(191 1 #liftFirstValue: 3192834 false ) 
	#(191 1 #liftFirstValue: 3192835 false ) 
	#(191 1 #liftFirstValue: 3192833 false ) 
	#(348 1 #reduceActionForLabel1: 23354369 false ) 
	#(212 1 #liftFirstValue: 5968900 false ) 
	#(212 1 #liftFirstValue: 5968899 false ) 
	#(212 1 #liftFirstValue: 5968897 false ) 
	#(234 1 #liftFirstValue: 7854081 false ) 
	#(234 1 #liftFirstValue: 7854082 false ) 
	#(212 1 #liftFirstValue: 5968909 false ) 
	#(238 1 #liftFirstValue: 8504321 false ) 
	#(238 1 #liftFirstValue: 8504322 false ) 
	#(238 1 #liftFirstValue: 8504323 false ) 
	#(212 1 #liftFirstValue: 5968903 false ) 
	#(242 1 #liftFirstValue: 8873986 false ) 
	#(242 1 #liftFirstValue: 8873987 false ) 
	#(242 1 #liftFirstValue: 8873985 false ) 
	#(293 1 #liftFirstValue: 15026178 false ) 
	#(293 1 #liftFirstValue: 15026179 false ) 
	#(293 1 #liftFirstValue: 15026182 false ) 
	#(293 1 #liftFirstValue: 15026183 false ) 
	#(293 1 #liftFirstValue: 15026184 false ) 
	#(293 1 #liftFirstValue: 15026187 false ) 
	#(293 1 #liftFirstValue: 15026177 false ) 
	#(293 1 #liftFirstValue: 15026180 false ) 
	#(293 1 #liftFirstValue: 15026185 false ) 
	#(293 1 #liftFirstValue: 15026186 false ) 
	#(293 1 #liftFirstValue: 15026188 false ) 
	#(293 1 #liftFirstValue: 15026181 false ) 
	#(212 1 #liftFirstValue: 5968898 false ) 
	#(380 1 #liftFirstValue: 26227714 false ) 
	#(386 1 #liftFirstValue: 27437058 false ) 
	#(312 1 #liftFirstValue: 17909761 false ) 
	#(312 1 #liftFirstValue: 17909762 false ) 
	#(212 1 #liftFirstValue: 5968907 false ) 
	#(318 1 #liftFirstValue: 18336769 false ) 
	#(318 1 #liftFirstValue: 18336770 false ) 
	#(318 1 #liftFirstValue: 18336771 false ) 
	#(212 1 #liftFirstValue: 5968902 false ) 
	#(324 1 #liftFirstValue: 19361794 false ) 
	#(325 1 #liftFirstValue: 19525633 false ) 
	#(326 1 #liftFirstValue: 19630081 false ) 
	#(326 1 #liftFirstValue: 19630082 false ) 
	#(326 1 #liftFirstValue: 19630083 false ) 
	#(326 1 #liftFirstValue: 19630084 false ) 
	#(326 1 #liftFirstValue: 19630085 false ) 
	#(325 1 #liftFirstValue: 19525634 false ) 
	#(325 1 #liftFirstValue: 19525635 false ) 
	#(333 1 #liftFirstValue: 20857857 false ) 
	#(333 1 #liftFirstValue: 20857858 false ) 
	#(333 1 #liftFirstValue: 20857859 false ) 
	#(333 1 #liftFirstValue: 20857860 false ) 
	#(324 1 #liftFirstValue: 19361795 false ) 
	#(338 1 #liftFirstValue: 22211586 false ) 
	#(338 1 #liftFirstValue: 22211585 false ) 
	#(338 1 #liftFirstValue: 22211587 false ) 
	#(324 1 #liftFirstValue: 19361800 false ) 
	#(324 1 #liftFirstValue: 19361798 false ) 
	#(212 1 #liftFirstValue: 5968904 false ) 
	#(347 1 #liftFirstValue: 23340033 false ) 
	#(324 1 #liftFirstValue: 19361801 false ) 
	#(324 1 #liftFirstValue: 19361797 false ) 
	#(356 1 #liftFirstValue: 24076289 false ) 
	#(356 1 #liftFirstValue: 24076290 false ) 
	#(356 1 #liftFirstValue: 24076291 false ) 
	#(212 1 #liftFirstValue: 5968906 false ) 
	#(360 1 #liftFirstValue: 24407041 false ) 
	#(360 1 #liftFirstValue: 24407042 false ) 
	#(324 1 #liftFirstValue: 19361796 false ) 
	#(367 1 #liftFirstValue: 24876033 false ) 
	#(367 1 #liftFirstValue: 24876034 false ) 
	#(367 1 #liftFirstValue: 24876035 false ) 
	#(324 1 #liftFirstValue: 19361799 false ) 
	#(324 1 #liftFirstValue: 19361793 false ) 
	#(212 1 #liftFirstValue: 5968905 false ) 
	#(373 1 #liftFirstValue: 25693185 false ) 
	#(373 1 #liftFirstValue: 25693186 false ) 
	#(373 1 #liftFirstValue: 25693188 false ) 
	#(373 1 #liftFirstValue: 25693189 false ) 
	#(373 1 #liftFirstValue: 25693187 false ) 
	#(373 1 #liftFirstValue: 25693190 false ) 
	#(383 1 #liftFirstValue: 26711041 false ) 
	#(383 1 #liftFirstValue: 26711042 false ) 
	#(384 1 #liftFirstValue: 26961921 false ) 
	#(380 1 #liftFirstValue: 26227713 false ) 
	#(386 1 #liftFirstValue: 27437057 false ) 
	#(385 1 #reduceActionForImplicitParenthesesLessCall2: 27021314 false ) 
	#(398 1 #liftFirstValue: 28968961 false ) 
	#(380 1 #liftFirstValue: 26227716 false ) 
	#(386 1 #liftFirstValue: 27437060 false ) 
	#(398 1 #liftFirstValue: 28968962 false ) 
	#(212 1 #liftFirstValue: 5968908 false ) 
	#(212 1 #liftFirstValue: 5968901 false ) 
	#(209 1 #liftFirstValue: 5386241 false ) 
	#(209 1 #liftFirstValue: 5386242 false ) 
	#(209 1 #liftFirstValue: 5386243 false ) 
	#(209 1 #liftFirstValue: 5386244 false ) 
	#(209 1 #liftFirstValue: 5386246 false ) 
	#(209 1 #liftFirstValue: 5386245 false ) 
	#(209 1 #liftFirstValue: 5386247 false ) 
	#(209 1 #liftFirstValue: 5386248 false ) 
	#(209 1 #liftFirstValue: 5386250 false ) 
	#(209 1 #liftFirstValue: 5386249 false ) 
	#(209 1 #liftFirstValue: 5386251 false ) 
	#(209 1 #liftFirstValue: 5386252 false ) 
	#(209 1 #liftFirstValue: 5386253 false ) 
	#(209 1 #liftFirstValue: 5386254 false ) 
	#(264 1 #liftFirstValue: 11455489 false ) 
	#(211 1 #liftFirstValue: 5659649 false ) 
	#(200 1 #liftFirstValue: 4296717 false ) 
	#(211 1 #liftFirstValue: 5659651 false ) 
	#(211 1 #liftFirstValue: 5659650 false ) 
	#(211 1 #liftFirstValue: 5659656 false ) 
	#(211 1 #liftFirstValue: 5659657 false ) 
	#(211 1 #liftFirstValue: 5659655 false ) 
	#(263 1 #liftFirstValue: 11251713 false ) 
	#(263 1 #liftFirstValue: 11251714 false ) 
	#(211 1 #liftFirstValue: 5659652 false ) 
	#(273 1 #liftFirstValue: 12998657 false ) 
	#(273 1 #liftFirstValue: 12998658 false ) 
	#(273 1 #liftFirstValue: 12998659 false ) 
	#(273 1 #liftFirstValue: 12998660 false ) 
	#(273 1 #liftFirstValue: 12998661 false ) 
	#(211 1 #liftFirstValue: 5659654 false ) 
	#(211 1 #liftFirstValue: 5659653 false ) 
	#(177 2 #reduceActionFor_eol__2: 2057218 false ) 
	#(193 1 #liftFirstValue: 3371010 false ) 
	#(193 1 #liftFirstValue: 3371011 false ) 
	#(193 1 #liftFirstValue: 3371013 false ) 
	#(193 1 #liftFirstValue: 3371014 false ) 
	#(193 1 #liftFirstValue: 3371012 false ) 
	#(381 2 #reduceActionForDictionaryAccess1: 26490881 false ) 
	#(192 1 #reduceActionForSimpleIdentifier1: 3274753 false ) 
	#(193 1 #liftFirstValue: 3371009 false ) 
	#(192 1 #liftFirstValue: 3274754 false ) 
	#(382 2 #reduceActionForMemberAccess1: 26604545 false ) 
	#(327 2 #reduceActionForInfinityLoop1: 19717121 false ) 
	#(182 1 #reduceActionForIntegerLiteral1: 2563073 false ) 
	#(207 1 #reduceActionFor_eol__1: 5229569 false ) 
	#(215 0 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: 6398977 false ) 
	#(198 2 #reduceActionForLabelTag1: 3994625 false ) 
	#(233 1 #liftFirstValue: 7651329 false ) 
	#(233 1 #liftFirstValue: 7651330 false ) 
	#(292 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14946305 false ) 
	#(290 2 #reduceActionForConstantList1: 14910465 false ) 
	#(391 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 28129281 false ) 
	#(176 3 #reduceActionFormodule1: 2049025 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element____2: 2121730 false ) 
	#(313 3 #reduceActionForAddressOfClause1: 17958913 false ) 
	#(394 1 #liftFirstValue: 28315649 false ) 
	#(394 1 #liftFirstValue: 28315650 false ) 
	#(394 1 #liftFirstValue: 28315651 false ) 
	#(395 3 #reduceActionForExplicitCall1: 28592129 false ) 
	#(184 1 #reduceActionForDateLiteral1: 2702337 false ) 
	#(183 1 #reduceActionForColorLiteral1: 2636801 false ) 
	#(185 1 #reduceActionForFloatLiteral1: 2763777 false ) 
	#(186 1 #reduceActionForBooleanLiteral1: 2834433 false ) 
	#(187 1 #reduceActionForStringLiteral1: 2903041 false ) 
	#(188 1 #reduceActionForNull1: 2969601 false ) 
	#(181 1 #reduceActionForFileDescriptorLiteral1: 2484225 false ) 
	#(302 1 #liftFirstValue: 16537605 false ) 
	#(294 1 #liftFirstValue: 15428613 false ) 
	#(180 1 #liftFirstValue: 2316289 false ) 
	#(180 1 #liftFirstValue: 2316290 false ) 
	#(180 1 #liftFirstValue: 2316291 false ) 
	#(180 1 #liftFirstValue: 2316292 false ) 
	#(180 1 #liftFirstValue: 2316293 false ) 
	#(180 1 #liftFirstValue: 2316294 false ) 
	#(180 1 #liftFirstValue: 2316295 false ) 
	#(180 1 #liftFirstValue: 2316296 false ) 
	#(180 1 #liftFirstValue: 2316297 false ) 
	#(302 1 #liftFirstValue: 16537604 false ) 
	#(294 1 #liftFirstValue: 15428612 false ) 
	#(346 3 #reduceActionForRaiseError1: 23173121 false ) 
	#(302 1 #liftFirstValue: 16537606 false ) 
	#(294 1 #liftFirstValue: 15428614 false ) 
	#(302 1 #liftFirstValue: 16537607 false ) 
	#(294 1 #liftFirstValue: 15428615 false ) 
	#(294 1 #liftFirstValue: 15428616 false ) 
	#(302 1 #liftFirstValue: 16537608 false ) 
	#(297 1 #liftFirstValue: 15844353 false ) 
	#(298 1 #liftFirstValue: 15956993 false ) 
	#(298 1 #liftFirstValue: 15956994 false ) 
	#(298 1 #liftFirstValue: 15956995 false ) 
	#(297 1 #liftFirstValue: 15844354 false ) 
	#(303 1 #liftFirstValue: 16692225 false ) 
	#(303 1 #liftFirstValue: 16692226 false ) 
	#(303 1 #liftFirstValue: 16692227 false ) 
	#(303 1 #liftFirstValue: 16692229 false ) 
	#(303 1 #liftFirstValue: 16692228 false ) 
	#(294 1 #liftFirstValue: 15428609 false ) 
	#(302 1 #liftFirstValue: 16537601 false ) 
	#(302 1 #liftFirstValue: 16537602 false ) 
	#(294 1 #liftFirstValue: 15428610 false ) 
	#(399 1 #liftFirstValue: 29038593 false ) 
	#(399 1 #liftFirstValue: 29038594 false ) 
	#(302 1 #liftFirstValue: 16537603 false ) 
	#(294 1 #liftFirstValue: 15428611 false ) 
	#(221 1 #liftFirstValue: 6762508 false ) 
	#(221 1 #liftFirstValue: 6762510 false ) 
	#(221 1 #liftFirstValue: 6762497 false ) 
	#(221 1 #liftFirstValue: 6762498 false ) 
	#(221 1 #liftFirstValue: 6762500 false ) 
	#(221 1 #liftFirstValue: 6762499 false ) 
	#(221 1 #liftFirstValue: 6762501 false ) 
	#(221 1 #liftFirstValue: 6762502 false ) 
	#(221 1 #liftFirstValue: 6762503 false ) 
	#(221 1 #liftFirstValue: 6762504 false ) 
	#(221 1 #liftFirstValue: 6762505 false ) 
	#(221 1 #liftFirstValue: 6762506 false ) 
	#(221 1 #liftFirstValue: 6762507 false ) 
	#(221 1 #liftFirstValue: 6762509 false ) 
	#(221 1 #reduceActionForBaseType15: 6762511 false ) 
	#(222 1 #reduceActionForSimpleType1: 6979585 false ) 
	#(227 1 #liftFirstValue: 7198721 false ) 
	#(227 1 #liftFirstValue: 7198722 false ) 
	#(227 1 #liftFirstValue: 7198723 false ) 
	#(226 1 #reduceActionFor_____UsableKeywords__member___1: 7145473 false ) 
	#(224 1 #reduceActionForComplexType1: 7105537 false ) 
	#(314 3 #reduceActionForNewClause1: 18056193 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28698625 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28698626 false ) 
	#(245 0 #reduceActionFor__eol___ModuleStatement__element____1: 9035777 false ) 
	#(203 3 #reduceActionForAttribute1: 5075969 false ) 
	#(275 3 #reduceActionForModuleConstant1: 13385729 false ) 
	#(283 3 #reduceActionForModuleConstants1: 14306305 false ) 
	#(280 1 #reduceActionForVariable1: 13928449 false ) 
	#(276 3 #reduceActionForDefineVariable1: 13514753 false ) 
	#(284 3 #reduceActionForDefineVariables1: 14455809 false ) 
	#(182 2 #reduceActionForIntegerLiteral2: 2563074 false ) 
	#(207 2 #reduceActionFor_eol__2: 5229570 false ) 
	#(327 3 #reduceActionForInfinityLoop3: 19717123 false ) 
	#(250 0 #reduceActionFor__eol___ModuleStatement__element____1: 9578497 false ) 
	#(377 3 #reduceActionForExitFor1: 25957377 false ) 
	#(376 3 #reduceActionForExitDo1: 25902081 false ) 
	#(374 3 #reduceActionForExitFunction1: 25780225 false ) 
	#(378 3 #reduceActionForExitProperty1: 26013697 false ) 
	#(375 3 #reduceActionForExitSub1: 25846785 false ) 
	#(361 1 #liftFirstValue: 24442882 false ) 
	#(361 1 #liftFirstValue: 24442881 false ) 
	#(361 1 #liftFirstValue: 24442883 false ) 
	#(364 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 24559617 false ) 
	#(366 3 #reduceActionForGoSub1: 24734721 false ) 
	#(365 3 #reduceActionForGoToStatement1: 24637441 false ) 
	#(277 3 #reduceActionForReDefineVariable1: 13597697 false ) 
	#(285 3 #reduceActionForReDefineVariables1: 14554113 false ) 
	#(278 3 #reduceActionForReDefineVariable1: 13716481 false ) 
	#(358 3 #reduceActionForResumeNext1: 24228865 false ) 
	#(357 3 #reduceActionForResumeLabel1: 24133633 false ) 
	#(279 3 #reduceActionForStaticVariable1: 13838337 false ) 
	#(286 3 #reduceActionForStaticVariables1: 14691329 false ) 
	#(228 2 #reduceActionForTypedThing2: 7252994 false ) 
	#(274 3 #reduceActionForModuleProperty1: 13282305 false ) 
	#(282 3 #reduceActionForModuleProperties1: 14182401 false ) 
	#(291 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14946305 false ) 
	#(292 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14946306 false ) 
	#(381 3 #reduceActionForDictionaryAccess2: 26490882 false ) 
	#(382 3 #reduceActionForMemberAccess2: 26604546 false ) 
	#(385 3 #reduceActionForImplicitParenthesesLessCall1: 27021313 false ) 
	#(393 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 28225537 false ) 
	#(206 0 #reduceActionFor__eol___ModuleStatement__element____1: 5227521 false ) 
	#(208 3 #reduceActionForImplements1: 5299201 false ) 
	#(200 3 #reduceActionForOption9: 4296713 false ) 
	#(200 3 #reduceActionForOption1: 4296705 false ) 
	#(269 0 #nil 11984897 false ) 
	#(210 3 #reduceActionForDefType1: 5576705 false ) 
	#(199 3 #reduceActionForheader1: 4206593 false ) 
	#(178 2 #reduceActionFor__eol___ModuleStatement__element___1: 2121729 false ) 
	#(176 4 #reduceActionFormodule2: 2049026 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 16037890 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 16037891 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 16037889 false ) 
	#(190 1 #reduceActionFor_HEX_INTEGER___1: 3044353 false ) 
	#(225 2 #reduceActionFor_____UsableKeywords__member__1: 7145473 false ) 
	#(224 2 #reduceActionForComplexType2: 7105538 false ) 
	#(226 2 #reduceActionFor_____UsableKeywords__member___2: 7145474 false ) 
	#(322 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 18915329 false ) 
	#(232 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 7582721 false ) 
	#(280 2 #reduceActionForVariable3: 13928451 false ) 
	#(280 2 #reduceActionForVariable2: 13928450 false ) 
	#(289 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14831617 false ) 
	#(287 2 #reduceActionForVariableList1: 14795777 false ) 
	#(327 4 #reduceActionForInfinityLoop2: 19717122 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____2: 6404098 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____1: 6404097 false ) 
	#(213 3 #reduceActionForBlock1: 6299649 false ) 
	#(215 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: 6398978 false ) 
	#(217 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 6404097 false ) 
	#(247 4 #reduceActionForEvent1: 9293825 false ) 
	#(362 2 #reduceActionForDestinationList1: 24515585 false ) 
	#(332 4 #reduceActionForWhileWend1: 20637697 false ) 
	#(228 3 #reduceActionForTypedThing3: 7252995 false ) 
	#(228 3 #reduceActionForTypedThing4: 7252996 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14946306 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14946307 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___1: 28129281 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___3: 28129283 false ) 
	#(252 1 #reduceActionForParameterPassingStrategy2: 9931778 false ) 
	#(252 1 #liftFirstValue: 9931777 false ) 
	#(388 1 #reduceActionForArgument2: 27932674 false ) 
	#(388 1 #reduceActionForArgument2: 27932673 false ) 
	#(391 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace____2: 28129282 false ) 
	#(389 2 #reduceActionForArgumentList1: 28110849 false ) 
	#(387 4 #reduceActionForProcedureCallOrArrayAccess1: 27546625 false ) 
	#(267 0 #reduceActionFor_AsType__type__TypeSize__size______1: 11684865 false ) 
	#(269 1 #liftFirstValue: 11984898 false ) 
	#(200 4 #reduceActionForOption10: 4296714 false ) 
	#(200 4 #reduceActionForOption2: 4296706 false ) 
	#(199 4 #reduceActionForheader2: 4206594 false ) 
	#(199 4 #reduceActionForheader3: 4206595 false ) 
	#(176 5 #reduceActionFormodule3: 2049027 false ) 
	#(295 3 #reduceActionForParentheseesExpression1: 15578113 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16166914 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16166915 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16166913 false ) 
	#(301 3 #reduceActionForNotOperation2: 16312322 false ) 
	#(301 3 #reduceActionForNotOperation2: 16312323 false ) 
	#(301 3 #reduceActionForNotOperation2: 16312321 false ) 
	#(301 3 #reduceActionForNotOperation2: 16312324 false ) 
	#(190 2 #reduceActionFor_eol__2: 3044354 false ) 
	#(306 1 #reduceActionForArithmeticOperator1: 17107969 false ) 
	#(306 1 #reduceActionForArithmeticOperator2: 17107970 false ) 
	#(306 1 #reduceActionForArithmeticOperator3: 17107971 false ) 
	#(306 1 #reduceActionForArithmeticOperator4: 17107972 false ) 
	#(304 1 #reduceActionForArithmeticOperator2: 16826370 false ) 
	#(304 1 #reduceActionForArithmeticOperator4: 16826372 false ) 
	#(304 1 #reduceActionForArithmeticOperator3: 16826371 false ) 
	#(304 1 #reduceActionForArithmeticOperator1: 16826369 false ) 
	#(304 1 #reduceActionForComparisonOperator5: 16826373 false ) 
	#(304 1 #reduceActionForComparisonOperator6: 16826374 false ) 
	#(304 1 #reduceActionForComparisonOperator7: 16826375 false ) 
	#(306 1 #reduceActionForComparisonOperator7: 17107975 false ) 
	#(306 1 #reduceActionForComparisonOperator6: 17107974 false ) 
	#(306 1 #reduceActionForComparisonOperator5: 17107973 false ) 
	#(308 1 #reduceActionForBooleanOperator1: 17313793 false ) 
	#(308 1 #reduceActionForBooleanOperator4: 17313796 false ) 
	#(308 1 #reduceActionForBooleanOperator2: 17313794 false ) 
	#(308 1 #reduceActionForBooleanOperator3: 17313795 false ) 
	#(320 5 #reduceActionForPrintFileClause1: 18767873 false ) 
	#(245 2 #reduceActionFor__eol___ModuleStatement__element____2: 9035778 false ) 
	#(280 3 #reduceActionForVariable5: 13928453 false ) 
	#(280 3 #reduceActionForVariable4: 13928452 false ) 
	#(288 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14831617 false ) 
	#(289 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14831618 false ) 
	#(213 4 #reduceActionForBlock2: 6299650 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____3: 6404099 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____4: 6404100 false ) 
	#(214 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: 6398977 false ) 
	#(217 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6404098 false ) 
	#(327 5 #reduceActionForInfinityLoop4: 19717124 false ) 
	#(250 2 #reduceActionFor__eol___ModuleStatement__element____2: 9578498 false ) 
	#(253 2 #reduceActionForParameterList1: 10009601 false ) 
	#(258 0 #nil 10307585 false ) 
	#(255 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 10050561 false ) 
	#(247 5 #reduceActionForEvent2: 9293826 false ) 
	#(364 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 24559618 false ) 
	#(368 5 #reduceActionForOnErrorGoTo1: 24939521 false ) 
	#(370 5 #reduceActionForOnExpressionGo1: 25163777 false ) 
	#(201 5 #reduceActionForOptionBase1: 4804609 false ) 
	#(277 5 #reduceActionForReDefineVariable2: 13597698 false ) 
	#(285 5 #reduceActionForReDefineVariables2: 14554114 false ) 
	#(278 5 #reduceActionForReDefineVariable2: 13716482 false ) 
	#(332 5 #reduceActionForWhileWend3: 20637699 false ) 
	#(228 4 #reduceActionForTypedThing5: 7252997 false ) 
	#(236 5 #reduceActionForAssignment2: 7947266 false ) 
	#(281 5 #reduceActionForConstant1: 14052353 false ) 
	#(236 5 #reduceActionForAssignment2: 7947265 false ) 
	#(228 4 #reduceActionForTypedThing6: 7252998 false ) 
	#(275 5 #reduceActionForModuleConstant2: 13385730 false ) 
	#(283 5 #reduceActionForModuleConstants2: 14306306 false ) 
	#(291 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14946308 false ) 
	#(236 5 #reduceActionForAssignment2: 7947268 false ) 
	#(236 5 #reduceActionForAssignment2: 7947267 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___2: 28129282 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___4: 28129284 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___9: 28129289 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___11: 28129291 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___5: 28129285 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___7: 28129287 false ) 
	#(389 3 #reduceActionForArgumentList2: 28110850 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____1: 28225537 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____5: 28225541 false ) 
	#(393 2 #reduceActionFor__whitespace________________whitespace___Argument__argument______2: 28225538 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess3: 27546627 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess2: 27546626 false ) 
	#(206 2 #reduceActionFor___eol___SetUpAssignation__setting___2: 5227522 false ) 
	#(266 1 #reduceActionFor_AsType__type__TypeSize__size_____1: 11684865 false ) 
	#(267 1 #reduceActionFor_AsType__type__TypeSize__size______2: 11684866 false ) 
	#(200 5 #reduceActionForOption5: 4296709 false ) 
	#(200 5 #reduceActionForOption3: 4296707 false ) 
	#(200 5 #reduceActionForOption6: 4296710 false ) 
	#(200 5 #reduceActionForOption11: 4296715 false ) 
	#(199 5 #reduceActionForheader4: 4206596 false ) 
	#(176 6 #reduceActionFormodule4: 2049028 false ) 
	#(295 4 #reduceActionForParentheseesExpression3: 15578115 false ) 
	#(295 4 #reduceActionForParentheseesExpression2: 15578114 false ) 
	#(320 6 #reduceActionForPrintFileClause4: 18767876 false ) 
	#(320 6 #reduceActionForPrintFileClause2: 18767874 false ) 
	#(322 2 #reduceActionFor______whitespace___Expression__value___2: 18915330 false ) 
	#(320 6 #reduceActionForPrintFileClause7: 18767879 false ) 
	#(244 2 #reduceActionFor__eol___ModuleStatement__element___1: 9035777 false ) 
	#(280 4 #reduceActionForVariable7: 13928455 false ) 
	#(280 4 #reduceActionForVariable6: 13928454 false ) 
	#(230 3 #reduceActionForTypeSize1: 7539713 false ) 
	#(232 2 #reduceActionFor______whitespace___Expression__value___2: 7582722 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14831618 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14831619 false ) 
	#(330 6 #reduceActionForDoWhileTrue1: 20200449 false ) 
	#(328 6 #reduceActionForWhileTrue1: 19843073 false ) 
	#(213 5 #reduceActionForBlock3: 6299651 false ) 
	#(216 3 #reduceActionFor__eol______whitespace________whitespace____5: 6404101 false ) 
	#(251 1 #reduceActionForEnumEntry1: 9675777 false ) 
	#(249 2 #reduceActionFor__eol___ModuleStatement__element___1: 9578497 false ) 
	#(253 3 #reduceActionForParameterList2: 10009602 false ) 
	#(257 1 #liftFirstValue: 10307585 false ) 
	#(258 1 #liftFirstValue: 10307586 false ) 
	#(260 0 #reduceActionFor__whitespace_______whitespace__Expression__default___1: 10327041 false ) 
	#(363 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 24559617 false ) 
	#(220 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 6688769 false ) 
	#(343 0 #reduceActionFor_eol__1: 22690817 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine1: 22382593 false ) 
	#(339 6 #reduceActionForIfThenEmpty1: 22270977 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine4: 22382596 false ) 
	#(355 0 #reduceActionFor__eol___ModuleStatement__element____1: 23898113 false ) 
	#(332 6 #reduceActionForWhileWend2: 20637698 false ) 
	#(201 6 #reduceActionForOptionBase2: 4804610 false ) 
	#(281 6 #reduceActionForConstant2: 14052354 false ) 
	#(247 6 #reduceActionForEvent3: 9293827 false ) 
	#(388 3 #reduceActionForArgument4: 27932676 false ) 
	#(388 3 #reduceActionForArgument4: 27932675 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___10: 28129290 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___12: 28129292 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___13: 28129293 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___15: 28129295 false ) 
	#(388 3 #reduceActionForArgument6: 27932678 false ) 
	#(388 3 #reduceActionForArgument6: 27932677 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___6: 28129286 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___8: 28129288 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____3: 28225539 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____2: 28225538 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____7: 28225543 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____6: 28225542 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____9: 28225545 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____13: 28225549 false ) 
	#(387 6 #reduceActionForProcedureCallOrArrayAccess4: 27546628 false ) 
	#(204 6 #reduceActionForConfiguration1: 5166081 false ) 
	#(205 2 #reduceActionFor__eol___ModuleStatement__element___1: 5227521 false ) 
	#(266 2 #reduceActionFor_____UsableKeywords__member__1: 11684866 false ) 
	#(200 6 #reduceActionForOption7: 4296711 false ) 
	#(200 6 #reduceActionForOption4: 4296708 false ) 
	#(200 6 #reduceActionForOption8: 4296712 false ) 
	#(200 6 #reduceActionForOption12: 4296716 false ) 
	#(295 5 #reduceActionForParentheseesExpression4: 15578116 false ) 
	#(311 5 #reduceActionForEquals1: 17691649 false ) 
	#(311 5 #reduceActionForEquals1: 17691651 false ) 
	#(296 5 #reduceActionForInterval1: 15706113 false ) 
	#(310 5 #reduceActionForConcatenationOperation1: 17558529 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16901121 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16901122 false ) 
	#(307 5 #reduceActionForArithmeticOperation1: 17174529 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17363971 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17363969 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16901123 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16901124 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17363970 false ) 
	#(311 5 #reduceActionForEquals1: 17691650 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18989061 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18989057 false ) 
	#(315 1 #liftFirstValue: 18128897 false ) 
	#(315 1 #liftFirstValue: 18128898 false ) 
	#(315 1 #liftFirstValue: 18128899 false ) 
	#(315 1 #liftFirstValue: 18128900 false ) 
	#(315 1 #liftFirstValue: 18128901 false ) 
	#(320 7 #reduceActionForPrintFileClause5: 18767877 false ) 
	#(320 7 #reduceActionForPrintFileClause3: 18767875 false ) 
	#(321 2 #reduceActionFor______whitespace___Expression__value__1: 18915329 false ) 
	#(320 7 #reduceActionForPrintFileClause10: 18767882 false ) 
	#(320 7 #reduceActionForPrintFileClause8: 18767880 false ) 
	#(246 2 #reduceActionForTypeEntry1: 9135105 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4922369 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4922370 false ) 
	#(280 5 #reduceActionForVariable8: 13928456 false ) 
	#(231 2 #reduceActionFor______whitespace___Expression__value__1: 7582721 false ) 
	#(230 4 #reduceActionForTypeSize2: 7539714 false ) 
	#(288 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14831620 false ) 
	#(329 7 #reduceActionForUntilTrue1: 20026369 false ) 
	#(328 7 #reduceActionForWhileTrue3: 19843075 false ) 
	#(213 6 #reduceActionForBlock4: 6299652 false ) 
	#(214 4 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: 6398978 false ) 
	#(331 7 #reduceActionForDoUntilTrue1: 20388865 false ) 
	#(330 7 #reduceActionForDoWhileTrue3: 20200451 false ) 
	#(260 1 #reduceActionFor_AsType__type__TypeSize__size______2: 10327042 false ) 
	#(256 3 #reduceActionForParameter1: 10136577 false ) 
	#(253 4 #reduceActionForParameterList3: 10009603 false ) 
	#(255 2 #reduceActionFor______whitespace___Expression__value___2: 10050562 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 24559618 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 24559619 false ) 
	#(218 2 #reduceActionForOneLineBlock1: 6632449 false ) 
	#(239 7 #reduceActionForRename1: 8555521 false ) 
	#(369 7 #reduceActionForOnErrorResumeNext1: 25038849 false ) 
	#(332 7 #reduceActionForWhileWend4: 20637700 false ) 
	#(372 7 #reduceActionForWith1: 25474049 false ) 
	#(229 6 #reduceActionForTypedAndInstantiatedThing1: 7410689 false ) 
	#(228 6 #reduceActionForTypedThing7: 7252999 false ) 
	#(247 7 #reduceActionForEvent4: 9293828 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8129538 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8129537 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8129540 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8129539 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___14: 28129294 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___16: 28129296 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____4: 28225540 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____8: 28225544 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____11: 28225547 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____10: 28225546 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____15: 28225551 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____14: 28225550 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18989062 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18989063 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18989058 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18989059 false ) 
	#(320 8 #reduceActionForPrintFileClause6: 18767878 false ) 
	#(321 3 #reduceActionFor______whitespace___Expression__value__2: 18915330 false ) 
	#(320 8 #reduceActionForPrintFileClause11: 18767883 false ) 
	#(320 8 #reduceActionForPrintFileClause9: 18767881 false ) 
	#(243 8 #reduceActionForDefineType1: 8923137 false ) 
	#(246 3 #reduceActionForTypeEntry6: 9135110 false ) 
	#(231 3 #reduceActionFor______whitespace___Expression__value__2: 7582722 false ) 
	#(328 8 #reduceActionForWhileTrue2: 19843074 false ) 
	#(330 8 #reduceActionForDoWhileTrue2: 20200450 false ) 
	#(248 8 #reduceActionForDefineEnum1: 9465857 false ) 
	#(256 4 #reduceActionForParameter2: 10136578 false ) 
	#(253 5 #reduceActionForParameterList4: 10009604 false ) 
	#(363 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 24559620 false ) 
	#(218 3 #reduceActionForOneLineBlock2: 6632450 false ) 
	#(220 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6688770 false ) 
	#(344 1 #reduceActionForElse1: 22824961 false ) 
	#(343 2 #reduceActionFor_eol__2: 22690818 false ) 
	#(342 1 #liftFirstValue: 22690817 false ) 
	#(354 1 #reduceActionFor_Case__case___eol____1: 23898113 false ) 
	#(355 2 #reduceActionFor_Case__case___eol_____2: 23898114 false ) 
	#(228 7 #reduceActionForTypedThing8: 7253000 false ) 
	#(228 7 #reduceActionForTypedThing9: 7253001 false ) 
	#(388 5 #reduceActionForArgument8: 27932680 false ) 
	#(388 5 #reduceActionForArgument8: 27932679 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____12: 28225548 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____16: 28225552 false ) 
	#(268 8 #reduceActionForDefineSub1: 11800577 false ) 
	#(397 7 #reduceActionForTypeOf1: 28829697 false ) 
	#(397 7 #reduceActionForTypeOf2: 28829698 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18989064 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18989060 false ) 
	#(317 1 #liftFirstValue: 18259972 false ) 
	#(317 1 #liftFirstValue: 18259970 false ) 
	#(317 1 #liftFirstValue: 18259971 false ) 
	#(316 1 #liftFirstValue: 18205699 false ) 
	#(316 1 #liftFirstValue: 18205697 false ) 
	#(317 1 #liftFirstValue: 18259969 false ) 
	#(316 1 #liftFirstValue: 18205698 false ) 
	#(320 9 #reduceActionForPrintFileClause12: 18767884 false ) 
	#(246 4 #reduceActionForTypeEntry2: 9135106 false ) 
	#(329 9 #reduceActionForUntilTrue2: 20026370 false ) 
	#(328 9 #reduceActionForWhileTrue4: 19843076 false ) 
	#(331 9 #reduceActionForDoUntilTrue2: 20388866 false ) 
	#(330 9 #reduceActionForDoWhileTrue4: 20200452 false ) 
	#(256 5 #reduceActionForParameter9: 10136585 false ) 
	#(256 5 #reduceActionForParameter3: 10136579 false ) 
	#(256 5 #reduceActionForParameter5: 10136581 false ) 
	#(254 3 #reduceActionFor______whitespace__Parameter__parameter__1: 10050561 false ) 
	#(219 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 6688769 false ) 
	#(344 2 #reduceActionForElse2: 22824962 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine2: 22382594 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine3: 22382595 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine5: 22382597 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine6: 22382598 false ) 
	#(354 2 #reduceActionFor_Case__case___eol____2: 23898114 false ) 
	#(372 9 #reduceActionForWith2: 25474050 false ) 
	#(228 8 #reduceActionForTypedThing10: 7253002 false ) 
	#(265 9 #reduceActionForDefineFunction1: 11478017 false ) 
	#(268 9 #reduceActionForDefineSub3: 11800579 false ) 
	#(268 9 #reduceActionForDefineSub2: 11800578 false ) 
	#(334 10 #reduceActionForForEach1: 20926465 false ) 
	#(246 5 #reduceActionForTypeEntry7: 9135111 false ) 
	#(246 5 #reduceActionForTypeEntry3: 9135107 false ) 
	#(246 5 #reduceActionForTypeEntry4: 9135108 false ) 
	#(251 5 #reduceActionForEnumEntry2: 9675778 false ) 
	#(256 6 #reduceActionForParameter10: 10136586 false ) 
	#(256 6 #reduceActionForParameter4: 10136580 false ) 
	#(259 4 #reduceActionFor__whitespace_______whitespace__Expression__default__1: 10327041 false ) 
	#(256 6 #reduceActionForParameter6: 10136582 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 6688770 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 6688771 false ) 
	#(341 10 #reduceActionForIfThenElse1: 22584321 false ) 
	#(344 3 #reduceActionForElse3: 22824963 false ) 
	#(352 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 23689217 false ) 
	#(349 1 #liftFirstValue: 23460870 false ) 
	#(349 1 #liftFirstValue: 23460868 false ) 
	#(349 1 #liftFirstValue: 23460867 false ) 
	#(349 1 #liftFirstValue: 23460866 false ) 
	#(349 1 #liftFirstValue: 23460869 false ) 
	#(349 1 #liftFirstValue: 23460865 false ) 
	#(353 10 #reduceActionForSelect1: 23806977 false ) 
	#(243 10 #reduceActionForDefineType2: 8923138 false ) 
	#(248 10 #reduceActionForDefineEnum2: 9465858 false ) 
	#(261 10 #reduceActionForDeclareSub1: 10549249 false ) 
	#(265 10 #reduceActionForDefineFunction3: 11478019 false ) 
	#(265 10 #reduceActionForDefineFunction2: 11478018 false ) 
	#(270 10 #reduceActionForModulePropertyGet2: 12070914 false ) 
	#(270 10 #reduceActionForModulePropertyGet1: 12070913 false ) 
	#(272 10 #reduceActionForModulePropertyLet2: 12702722 false ) 
	#(272 10 #reduceActionForModulePropertyLet1: 12702721 false ) 
	#(271 10 #reduceActionForModulePropertySet2: 12406786 false ) 
	#(271 10 #reduceActionForModulePropertySet1: 12406785 false ) 
	#(268 10 #reduceActionForDefineSub4: 11800580 false ) 
	#(268 10 #reduceActionForDefineSub9: 11800585 false ) 
	#(268 10 #reduceActionForDefineSub5: 11800581 false ) 
	#(334 11 #reduceActionForForEach9: 20926473 false ) 
	#(334 11 #reduceActionForForEach5: 20926469 false ) 
	#(319 11 #reduceActionForOpenFileClause1: 18411521 false ) 
	#(246 6 #reduceActionForTypeEntry8: 9135112 false ) 
	#(246 6 #reduceActionForTypeEntry9: 9135113 false ) 
	#(246 6 #reduceActionForTypeEntry5: 9135109 false ) 
	#(256 7 #reduceActionForParameter11: 10136587 false ) 
	#(256 7 #reduceActionForParameter13: 10136589 false ) 
	#(256 7 #reduceActionForParameter7: 10136583 false ) 
	#(219 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 6688772 false ) 
	#(344 4 #reduceActionForElse4: 22824964 false ) 
	#(341 11 #reduceActionForIfThenElse3: 22584323 false ) 
	#(350 4 #reduceActionForCase7: 23571463 false ) 
	#(350 4 #reduceActionForCase1: 23571457 false ) 
	#(262 11 #reduceActionForDeclareFunction1: 10887169 false ) 
	#(261 11 #reduceActionForDeclareSub4: 10549252 false ) 
	#(265 11 #reduceActionForDefineFunction4: 11478020 false ) 
	#(270 11 #reduceActionForModulePropertyGet4: 12070916 false ) 
	#(270 11 #reduceActionForModulePropertyGet3: 12070915 false ) 
	#(265 11 #reduceActionForDefineFunction9: 11478025 false ) 
	#(268 11 #reduceActionForDefineSub11: 11800587 false ) 
	#(268 11 #reduceActionForDefineSub10: 11800586 false ) 
	#(265 11 #reduceActionForDefineFunction5: 11478021 false ) 
	#(268 11 #reduceActionForDefineSub7: 11800583 false ) 
	#(268 11 #reduceActionForDefineSub6: 11800582 false ) 
	#(334 12 #reduceActionForForEach2: 20926466 false ) 
	#(334 12 #reduceActionForForEach13: 20926477 false ) 
	#(334 12 #reduceActionForForEach3: 20926467 false ) 
	#(336 12 #reduceActionForForNextOneLine1: 21533697 false ) 
	#(335 12 #reduceActionForForNextOneLine1: 21213185 false ) 
	#(246 7 #reduceActionForTypeEntry10: 9135114 false ) 
	#(256 8 #reduceActionForParameter12: 10136588 false ) 
	#(256 8 #reduceActionForParameter14: 10136590 false ) 
	#(256 8 #reduceActionForParameter8: 10136584 false ) 
	#(345 5 #reduceActionForElseIf1: 22934529 false ) 
	#(341 12 #reduceActionForIfThenElse2: 22584322 false ) 
	#(350 5 #reduceActionForCase10: 23571466 false ) 
	#(350 5 #reduceActionForCase8: 23571464 false ) 
	#(352 2 #reduceActionFor______whitespace___Expression__value___2: 23689218 false ) 
	#(350 5 #reduceActionForCase4: 23571460 false ) 
	#(350 5 #reduceActionForCase2: 23571458 false ) 
	#(353 12 #reduceActionForSelect2: 23806978 false ) 
	#(262 12 #reduceActionForDeclareFunction4: 10887172 false ) 
	#(270 12 #reduceActionForModulePropertyGet6: 12070918 false ) 
	#(270 12 #reduceActionForModulePropertyGet5: 12070917 false ) 
	#(261 12 #reduceActionForDeclareSub7: 10549255 false ) 
	#(265 12 #reduceActionForDefineFunction11: 11478027 false ) 
	#(265 12 #reduceActionForDefineFunction10: 11478026 false ) 
	#(270 12 #reduceActionForModulePropertyGet14: 12070926 false ) 
	#(270 12 #reduceActionForModulePropertyGet13: 12070925 false ) 
	#(272 12 #reduceActionForModulePropertyLet6: 12702726 false ) 
	#(272 12 #reduceActionForModulePropertyLet5: 12702725 false ) 
	#(271 12 #reduceActionForModulePropertySet6: 12406790 false ) 
	#(271 12 #reduceActionForModulePropertySet5: 12406789 false ) 
	#(268 12 #reduceActionForDefineSub12: 11800588 false ) 
	#(268 12 #reduceActionForDefineSub13: 11800589 false ) 
	#(265 12 #reduceActionForDefineFunction7: 11478023 false ) 
	#(265 12 #reduceActionForDefineFunction6: 11478022 false ) 
	#(270 12 #reduceActionForModulePropertyGet8: 12070920 false ) 
	#(270 12 #reduceActionForModulePropertyGet7: 12070919 false ) 
	#(272 12 #reduceActionForModulePropertyLet4: 12702724 false ) 
	#(272 12 #reduceActionForModulePropertyLet3: 12702723 false ) 
	#(271 12 #reduceActionForModulePropertySet4: 12406788 false ) 
	#(271 12 #reduceActionForModulePropertySet3: 12406787 false ) 
	#(268 12 #reduceActionForDefineSub8: 11800584 false ) 
	#(189 11 #reduceActionForGuidLiteral1: 3021825 false ) 
	#(334 13 #reduceActionForForEach10: 20926474 false ) 
	#(334 13 #reduceActionForForEach11: 20926475 false ) 
	#(334 13 #reduceActionForForEach6: 20926470 false ) 
	#(334 13 #reduceActionForForEach7: 20926471 false ) 
	#(335 13 #reduceActionForForNext5: 21213189 false ) 
	#(336 13 #reduceActionForForNext5: 21533698 false ) 
	#(319 13 #reduceActionForOpenFileClause5: 18411525 false ) 
	#(319 13 #reduceActionForOpenFileClause3: 18411523 false ) 
	#(256 9 #reduceActionForParameter15: 10136591 false ) 
	#(345 6 #reduceActionForElseIf2: 22934530 false ) 
	#(341 13 #reduceActionForIfThenElse4: 22584324 false ) 
	#(350 6 #reduceActionForCase11: 23571467 false ) 
	#(350 6 #reduceActionForCase9: 23571465 false ) 
	#(350 6 #reduceActionForCase5: 23571461 false ) 
	#(350 6 #reduceActionForCase3: 23571459 false ) 
	#(350 6 #reduceActionForCase19: 23571475 false ) 
	#(350 6 #reduceActionForCase13: 23571469 false ) 
	#(261 13 #reduceActionForDeclareSub2: 10549250 false ) 
	#(262 13 #reduceActionForDeclareFunction7: 10887175 false ) 
	#(261 13 #reduceActionForDeclareSub10: 10549258 false ) 
	#(265 13 #reduceActionForDefineFunction12: 11478028 false ) 
	#(270 13 #reduceActionForModulePropertyGet16: 12070928 false ) 
	#(270 13 #reduceActionForModulePropertyGet15: 12070927 false ) 
	#(265 13 #reduceActionForDefineFunction13: 11478029 false ) 
	#(268 13 #reduceActionForDefineSub15: 11800591 false ) 
	#(268 13 #reduceActionForDefineSub14: 11800590 false ) 
	#(265 13 #reduceActionForDefineFunction8: 11478024 false ) 
	#(270 13 #reduceActionForModulePropertyGet10: 12070922 false ) 
	#(270 13 #reduceActionForModulePropertyGet9: 12070921 false ) 
	#(334 14 #reduceActionForForEach14: 20926478 false ) 
	#(334 14 #reduceActionForForEach15: 20926479 false ) 
	#(334 14 #reduceActionForForEach4: 20926468 false ) 
	#(335 14 #reduceActionForForNext2: 21213186 false ) 
	#(335 14 #reduceActionForForNext3: 21213187 false ) 
	#(256 10 #reduceActionForParameter16: 10136592 false ) 
	#(345 7 #reduceActionForElseIf3: 22934531 false ) 
	#(351 3 #reduceActionFor______whitespace__Parameter__parameter__1: 23689217 false ) 
	#(350 7 #reduceActionForCase12: 23571468 false ) 
	#(350 7 #reduceActionForCase6: 23571462 false ) 
	#(350 7 #reduceActionForCase22: 23571478 false ) 
	#(350 7 #reduceActionForCase20: 23571476 false ) 
	#(350 7 #reduceActionForCase16: 23571472 false ) 
	#(350 7 #reduceActionForCase14: 23571470 false ) 
	#(262 14 #reduceActionForDeclareFunction2: 10887170 false ) 
	#(261 14 #reduceActionForDeclareSub3: 10549251 false ) 
	#(261 14 #reduceActionForDeclareSub5: 10549253 false ) 
	#(262 14 #reduceActionForDeclareFunction10: 10887178 false ) 
	#(270 14 #reduceActionForModulePropertyGet18: 12070930 false ) 
	#(270 14 #reduceActionForModulePropertyGet17: 12070929 false ) 
	#(265 14 #reduceActionForDefineFunction15: 11478031 false ) 
	#(265 14 #reduceActionForDefineFunction14: 11478030 false ) 
	#(270 14 #reduceActionForModulePropertyGet20: 12070932 false ) 
	#(270 14 #reduceActionForModulePropertyGet19: 12070931 false ) 
	#(272 14 #reduceActionForModulePropertyLet8: 12702728 false ) 
	#(272 14 #reduceActionForModulePropertyLet7: 12702727 false ) 
	#(271 14 #reduceActionForModulePropertySet8: 12406792 false ) 
	#(271 14 #reduceActionForModulePropertySet7: 12406791 false ) 
	#(268 14 #reduceActionForDefineSub16: 11800592 false ) 
	#(270 14 #reduceActionForModulePropertyGet12: 12070924 false ) 
	#(270 14 #reduceActionForModulePropertyGet11: 12070923 false ) 
	#(334 15 #reduceActionForForEach12: 20926476 false ) 
	#(334 15 #reduceActionForForEach8: 20926472 false ) 
	#(335 15 #reduceActionForForNext6: 21213190 false ) 
	#(335 15 #reduceActionForForNext7: 21213191 false ) 
	#(319 15 #reduceActionForOpenFileClause7: 18411527 false ) 
	#(345 8 #reduceActionForElseIf4: 22934532 false ) 
	#(350 8 #reduceActionForCase23: 23571479 false ) 
	#(350 8 #reduceActionForCase21: 23571477 false ) 
	#(350 8 #reduceActionForCase17: 23571473 false ) 
	#(350 8 #reduceActionForCase15: 23571471 false ) 
	#(262 15 #reduceActionForDeclareFunction3: 10887171 false ) 
	#(262 15 #reduceActionForDeclareFunction5: 10887173 false ) 
	#(261 15 #reduceActionForDeclareSub6: 10549254 false ) 
	#(261 15 #reduceActionForDeclareSub8: 10549256 false ) 
	#(265 15 #reduceActionForDefineFunction16: 11478032 false ) 
	#(270 15 #reduceActionForModulePropertyGet22: 12070934 false ) 
	#(270 15 #reduceActionForModulePropertyGet21: 12070933 false ) 
	#(334 16 #reduceActionForForEach16: 20926480 false ) 
	#(337 16 #reduceActionForForStepNext1: 21771265 false ) 
	#(335 16 #reduceActionForForNext4: 21213188 false ) 
	#(350 9 #reduceActionForCase24: 23571480 false ) 
	#(350 9 #reduceActionForCase18: 23571474 false ) 
	#(262 16 #reduceActionForDeclareFunction6: 10887174 false ) 
	#(262 16 #reduceActionForDeclareFunction8: 10887176 false ) 
	#(261 16 #reduceActionForDeclareSub9: 10549257 false ) 
	#(261 16 #reduceActionForDeclareSub11: 10549259 false ) 
	#(270 16 #reduceActionForModulePropertyGet24: 12070936 false ) 
	#(270 16 #reduceActionForModulePropertyGet23: 12070935 false ) 
	#(337 17 #reduceActionForForStepNext5: 21771269 false ) 
	#(335 17 #reduceActionForForNext8: 21213192 false ) 
	#(319 17 #reduceActionForOpenFileClause2: 18411522 false ) 
	#(262 17 #reduceActionForDeclareFunction9: 10887177 false ) 
	#(262 17 #reduceActionForDeclareFunction11: 10887179 false ) 
	#(261 17 #reduceActionForDeclareSub12: 10549260 false ) 
	#(337 18 #reduceActionForForStepNext2: 21771266 false ) 
	#(337 18 #reduceActionForForStepNext3: 21771267 false ) 
	#(262 18 #reduceActionForDeclareFunction12: 10887180 false ) 
	#(337 19 #reduceActionForForStepNext6: 21771270 false ) 
	#(337 19 #reduceActionForForStepNext7: 21771271 false ) 
	#(319 19 #reduceActionForOpenFileClause6: 18411526 false ) 
	#(319 19 #reduceActionForOpenFileClause4: 18411524 false ) 
	#(337 20 #reduceActionForForStepNext4: 21771268 false ) 
	#(337 21 #reduceActionForForStepNext8: 21771272 false ) 
	#(319 21 #reduceActionForOpenFileClause8: 18411528 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateForBehaviourDefinition [
	^ 4
]

{ #category : #generated }
VBParser class >> startingStateForModuleStatement [
	^ 3
]

{ #category : #generated }
VBParser class >> startingStateForStatement [
	^ 2
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<<"' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '"ALIAS"' '"APPEND"' '"AS"' '"AddressOf"' '"BINARY"' '"Call"' '"DefBool"' '"DefByte"' '"DefCur"' '"DefDate"' '"DefDbl"' '"DefDec"' '"DefInt"' '"DefLng"' '"DefLngPtr"' '"DefLnglng"' '"DefObj"' '"DefSng"' '"DefStr"' '"DefVar"' '"DoEvents"' '"ERROR"' '"FOR"' '"INPUT"' '"IS"' '"IsNot"' '"LIKE"' '"Line"' '"Lock Read Write"' '"Lock Read"' '"Lock Write"' '"Mod"' '"NEW"' '"NEXT"' '"OBJECT"' '"OPEN"' '"Output"' '"PRINT"' '"RaiseEvent"' '"Random"' '"Read Write"' '"Read"' '"STRING"' '"Shared"' '"TO"' '"TYPE"' '"TypeOf"' '"WRITE"' '"WithEvents"' '"["' '"\"' '"^"' '"and"' '"attribute"' '"base"' '"beep"' '"begin"' '"bold"' '"boolean"' '"byref"' '"byte"' '"byval"' '"case"' '"class"' '"collection"' '"compare"' '"const"' '"currency"' '"database"' '"date"' '"decimal"' '"declare"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"else:"' '"elseif"' '"end"' '"enum"' '"eqv"' '"event"' '"exit"' '"explicit"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"implements"' '"in"' '"integer"' '"len"' '"let"' '"lib"' '"long"' '"longlong"' '"longptr"' '"loop"' '"module"' '"name"' '"not"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"select"' '"set"' '"single"' '"static"' '"step"' '"sub"' '"text"' '"then"' '"then:"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<SBIDENTIFIER>' '<DEFTYPE>' '<HASH_NUMBER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '<eol>*' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' 'literal' 'FileDescriptorLiteral' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' 'Identifier' 'KeywordIdentifier' 'UsableKeywords' 'IdentifierWords' 'HashIdentifier' 'SquareBracketIdentifier' 'SimpleIdentifier' 'LabelTag' 'header' 'Option' 'OptionBase' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'Implements' 'DefTypeLabel' 'DefType' 'ModuleStatement' 'Statement' 'Block' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )*' '(<eol> | (<whitespace>? ":" <whitespace>?))' '(<eol> | (<whitespace>? ":" <whitespace>?))+' 'OneLineBlock' '(<whitespace>? ":" <whitespace>? Statement ''statement'')' '(<whitespace>? ":" <whitespace>? Statement ''statement'')*' 'BaseType' 'SimpleType' 'Visibility' 'ComplexType' '("." UsableKeywords ''member'')' '("." UsableKeywords ''member'')+' 'Type' 'TypedThing' 'TypedAndInstantiatedThing' 'TypeSize' '(","<whitespace>? Expression ''size'')' '(","<whitespace>? Expression ''size'')*' 'AsType' 'StatementAssignment' 'ExplicitLetSet' 'Assignment' 'ExplicitAssignement' 'OtherStatements' 'Rename' 'Beep' 'DoEvents' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '("," <whitespace> Parameter ''parameter'')' '("," <whitespace> Parameter ''parameter'')*' 'Parameter' '(AsType ''type'')' '(AsType ''type'')?' '(<whitespace> "=" <whitespace> Expression ''default'')' '(<whitespace> "=" <whitespace> Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' '(AsType ''type'' TypeSize ''size''?  )' '(AsType ''type'' TypeSize ''size''?  )?' 'DefineSub' '<whitespace>?' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'ReDefineExpression' 'StaticVariable' 'Variable' 'Constant' 'ModuleProperties' 'ModuleConstants' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )+' 'ConstantList' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )+' 'VariableDefinition' 'Expression' 'ParentheseesExpression' 'Interval' 'Operation' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'LeftSide' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'Equals' 'ValueClause' 'AddressOfClause' 'NewClause' 'OpenMode' 'OpenAccess' 'Lock' 'FileClauses' 'OpenFileClause' 'PrintFileClause' '(";" <whitespace>? Expression ''value'')' '(";" <whitespace>? Expression ''value'')*' 'LineInputClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForNextOneLine' 'ForStepNext' 'If' 'IfThenEmpty' 'IfThenElseOneLine' 'IfThenElse' '(ElseIf ''elseif'')' '(ElseIf ''elseif'')*' 'Else' 'ElseIf' 'RaiseError' 'To' 'Label' 'CaseCondition' 'Case' '("," <whitespace> (CaseCondition ''expression''))' '("," <whitespace> (CaseCondition ''expression''))*' 'Select' '(Case ''case'' <eol>+?)' '(Case ''case'' <eol>+?)*' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'Destination' 'DestinationList' '(<whitespace>?"," <whitespace>?Destination ''label'')' '(<whitespace>?"," <whitespace>?Destination ''label'')*' 'GoToStatement' 'GoSub' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'Return' 'StateAccessBase' 'DictionaryAccess' 'MemberAccess' 'StateAccess' 'ImplicitCallExpression' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayExpression' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)*' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )*' 'ExplicitCallSelectorTypes' 'ExplicitCall' 'RaiseEvent' 'TypeOf' 'StatementCalls' 'ExpressionCalls' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBFileDescriptorLiteralNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCToken #VBHashIdentifierNode #VBSquareBracketIdentifierNode #VBSimpleIdentifierNode #VBLabelTagNode #VBHeaderNode #VBProgramNode #VBOptionBaseNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBImplementsNode #SmaCCToken #VBDefTypeNode #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBBlockNode #OrderedCollection #OrderedCollection #Object #VBSimpleTypeNode #SmaCCToken #VBComplexTypeNode #OrderedCollection #OrderedCollection #Object #VBTypedThingNode #VBAsTypeAndNewNode #VBTypeSizeNode #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitAssignementNode #SmaCCToken #VBExplicitAssignementNode #VBExplicitAssignementNode #Object #VBRenameNode #SmaCCToken #VBDoEventsNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #VBProgramNode #VBProgramNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #OrderedCollection #OrderedCollection #VBSubDefinitionNode #SmaCCToken #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBConstantNode #VBModuleMultiplePropertiesNode #VBModuleMultipleConstantsNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBConstantListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBParentheseesExpressionNode #VBIntervalNode #VBProgramNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #VBProgramNode #VBProgramNode #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBEqualsNode #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #SmaCCToken #SmaCCToken #SmaCCToken #VBProgramNode #VBOpenClauseNode #VBPrintIntoFileClauseNode #OrderedCollection #OrderedCollection #VBLineInputClauseNode #VBProgramNode #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForNextNode #VBForStepNextNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBElseIfBlockNode #OrderedCollection #VBElseIfBlockNode #VBElseIfBlockNode #VBRaiseErrorNode #VBLabelNode #VBLabelNode #VBProgramNode #VBCaseNode #OrderedCollection #OrderedCollection #VBSelectNode #OrderedCollection #OrderedCollection #VBProgramNode #VBResumeLabelNode #VBResumeNextNode #VBResumeEmptyNode #VBProgramNode #VBProgramNode #VBDestinationListNode #OrderedCollection #OrderedCollection #VBGoToStatementNode #VBGoSubNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBProgramNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBReturnNode #VBProgramNode #VBDictionaryAccessNode #VBMemberAccessNode #VBProgramNode #VBProgramNode #VBImplicitParenthesesLessCallNode #VBProgramNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBTypeOfNode #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 75 0 6 0 78 0 6 0 79 0 6 0 86 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 94 0 6 0 102 0 6 0 104 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 110 0 6 0 114 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 128 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 136 0 6 0 140 0 6 0 142 0 6 0 144 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 0 21 0 176 0 25 0 177 0 6 1 144] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 1 49 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 1 13 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 1 49 0 201 1 49 0 203 1 49 0 212 1 53 0 223 1 49 0 234 1 61 0 235 1 49 0 236 1 49 0 237 1 49 0 238 1 49 0 239 1 49 0 240 1 49 0 241 1 49 0 242 1 49 0 243 1 49 0 247 1 49 0 248 1 49 1 18 1 49 1 19 1 49 1 20 1 49 1 21 1 49 1 22 1 49 1 23 1 129 1 25 1 49 1 26 1 49 1 27 1 49 1 28 1 49 1 29 1 49 1 30 1 49 1 34 1 49 1 37 1 161 1 56 1 161 1 57 1 161 1 58 1 49 1 62 1 49 1 63 1 49 1 64 1 49 1 67 1 49 1 68 1 49 1 69 1 49 1 70 1 49 1 71 1 49 1 72 1 49 1 73 1 49 1 74 1 49 1 75 1 49 1 76 1 49 1 77 1 49 1 78 1 49 1 79 1 49 1 80 1 49 1 81 1 49 1 82 1 49 1 83 1 49 1 84 1 49 1 85 1 49 1 90 1 49 1 91 2 13 1 92 1 49 1 97 1 49 1 100 1 49 1 101 1 49 1 102 1 49 1 103 1 49 1 104 1 49 1 109 1 49 1 110 1 49 1 111 1 49 1 112 1 49 1 113 1 49 1 114 1 49 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 1 49 1 129 2 121 1 130 2 125 1 131 1 49 1 139 1 49 1 140 1 49 1 142] 
#[1 1 21 0 22 1 21 0 23 3 29 0 28 3 29 0 29 3 29 0 30 3 29 0 31 3 29 0 32 3 29 0 33 3 29 0 34 3 29 0 35 3 29 0 36 3 29 0 37 3 29 0 38 3 29 0 39 3 29 0 40 3 29 0 41 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 2 209 0 78 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 2 213 0 93 0 145 0 94 0 153 0 102 0 157 0 104 3 41 0 107 2 217 0 108 1 21 0 109 3 41 0 110 2 221 0 114 1 21 0 117 1 21 0 118 1 21 0 125 2 233 0 128 3 41 0 133 2 237 0 134 3 41 0 135 0 217 0 136 1 21 0 140 2 245 0 142 2 249 0 144 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 1 0 172 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 3 37 0 200 3 37 0 201 3 37 0 203 3 37 0 204 3 37 0 208 3 29 0 209 3 37 0 210 3 37 0 211 3 41 0 223 3 37 0 242 3 37 0 243 3 37 0 247 3 37 0 248 3 37 1 5 3 37 1 6 3 37 1 7 3 61 1 8 3 37 1 9 3 37 1 12 3 37 1 14 3 37 1 15 3 37 1 16 3 37 1 17 3 37 1 18 3 37 1 19 3 37 1 20 3 37 1 21 3 37 1 22 3 37 1 23 1 129 1 25 3 37 1 26 3 37 1 27 3 37 1 28 3 37 1 29 3 37 1 30 3 37 1 34 3 37 1 37] 
#[1 3 97 0 107 2 217 0 108 3 97 0 110 3 97 0 133 2 237 0 134 3 97 0 135 3 61 0 142 2 249 0 144 3 97 0 223 3 61 1 8 3 101 1 9 3 101 1 12 3 101 1 14 3 101 1 15 3 101 1 16 3 101 1 17] 
#[0 0 0 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 49 0 83 0 55 0 87 0 56 0 91 0 58 0 95 0 59 0 99 0 64 0 103 0 66 0 107 0 67 0 111 0 69 0 115 0 75 0 119 0 78 0 123 0 79 0 127 0 86 0 131 0 88 0 135 0 90 0 139 0 91 0 143 0 93 0 147 0 94 0 151 0 102 0 155 0 104 0 159 0 107 0 163 0 108 0 167 0 109 0 171 0 110 0 175 0 114 0 179 0 117 0 183 0 118 0 187 0 125 0 191 0 128 0 195 0 133 0 199 0 134 0 203 0 135 0 207 0 136 0 211 0 140 0 215 0 142 0 219 0 144 0 223 0 145 0 227 0 150 0 231 0 167 0 235 0 168 0 239 0 171 0 243 0 172 0 247 0 173 3 117 0 179 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 3 121 0 199 3 125 0 200 3 125 0 201 3 125 0 203 3 125 0 204 3 125 0 208 3 29 0 209 3 125 0 210 3 125 0 211 3 41 0 223 3 125 0 242 3 125 0 243 3 125 0 247 3 125 0 248 3 125 1 5 3 125 1 6 3 125 1 7 3 61 1 8 3 125 1 9 3 125 1 12 3 125 1 14 3 125 1 15 3 125 1 16 3 125 1 17 3 125 1 18 3 125 1 19 3 125 1 20 3 125 1 21 3 125 1 22 3 125 1 23 1 129 1 25 3 125 1 26 3 125 1 27 3 125 1 28 3 125 1 29 3 125 1 30 3 125 1 34 3 125 1 37 0 10 1 144] 
#[1 3 153 0 22 3 153 0 23 3 153 0 43 3 153 0 45 3 153 0 49 3 153 0 55 3 153 0 56 3 153 0 57 3 153 0 58 3 153 0 59 3 153 0 64 3 153 0 66 3 133 0 67 3 153 0 69 3 153 0 79 3 153 0 84 3 153 0 86 3 153 0 90 3 153 0 91 3 153 0 98 3 153 0 109 3 153 0 117 3 153 0 118 3 153 0 125 3 153 0 139 3 153 0 140 3 153 0 145 3 153 0 150 3 153 0 167 1 5 0 168 3 149 0 192 3 153 0 193 3 153 0 194 3 149 0 196] 
#[1 3 153 0 22 3 153 0 23 3 153 0 43 3 153 0 45 3 153 0 49 3 153 0 55 3 153 0 56 3 153 0 57 3 153 0 58 3 153 0 59 3 153 0 64 3 153 0 66 3 133 0 67 3 153 0 69 3 153 0 79 3 153 0 84 3 153 0 86 3 153 0 90 3 153 0 91 3 153 0 98 3 153 0 109 3 153 0 117 3 153 0 118 3 153 0 125 3 153 0 139 3 153 0 140 3 153 0 145 3 153 0 150 3 153 0 167 1 5 0 168 3 165 0 192 3 153 0 193 3 153 0 194 3 165 0 196] 
#[0 0 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 18 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 169 0 172] 
#[0 3 173 0 172] 
#[0 0 22 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 26 0 1 0 26 0 3 0 26 0 5 0 26 0 9 0 26 0 11 0 26 0 55 0 26 0 84 0 26 0 98 0 26 0 100 0 26 0 101 0 26 0 123 0 26 0 151 0 26 0 162 0 251 0 172 0 26 0 173 0 26 1 144] 
#[0 3 181 0 172] 
#[0 0 30 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 34 0 1 0 34 0 3 0 34 0 5 0 34 0 9 0 34 0 11 0 34 0 55 0 34 0 84 0 34 0 98 0 34 0 100 0 34 0 101 0 34 0 123 0 34 0 151 0 34 0 162 0 255 0 172 0 34 0 173 0 34 1 144] 
#[0 3 189 0 172] 
#[0 0 38 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 42 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 193 0 172] 
#[0 0 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 50 0 1 0 50 0 3 0 50 0 5 0 50 0 9 0 50 0 11 0 50 0 55 0 50 0 84 0 50 0 98 0 50 0 100 0 50 0 101 0 50 0 123 0 50 0 151 0 50 0 162 1 3 0 172 0 50 0 173 0 50 1 144] 
#[0 3 201 0 172] 
#[0 0 54 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 58 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 62 0 1 0 62 0 3 0 62 0 5 0 62 0 9 0 62 0 11 0 62 0 55 0 62 0 84 0 62 0 98 0 62 0 100 0 62 0 101 0 62 0 123 0 62 0 151 0 62 0 162 1 7 0 172 0 62 0 173 0 62 1 144] 
#[0 0 66 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 209 0 172] 
#[0 0 70 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 74 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 78 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 213 0 172] 
#[0 0 82 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 86 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 217 0 172] 
#[1 3 221 0 123 3 225 0 162 3 229 0 172 3 233 0 173 3 237 0 182 3 241 0 207 3 245 0 213] 
#[0 3 249 0 172] 
#[0 3 253 0 172] 
#[0 4 1 0 172] 
#[0 0 90 0 172] 
#[0 0 94 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 98 0 172] 
#[0 4 5 0 172] 
#[0 4 9 0 172] 
#[0 4 13 0 172] 
#[0 0 102 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 106 0 1 0 106 0 3 0 106 0 5 0 106 0 9 0 106 0 11 0 106 0 55 0 106 0 84 0 106 0 98 0 106 0 100 0 106 0 101 0 106 0 123 0 106 0 151 0 106 0 162 1 11 0 172 0 106 0 173 0 106 1 144] 
#[1 0 114 0 1 0 114 0 3 0 114 0 5 0 114 0 9 0 114 0 11 0 114 0 55 0 114 0 84 0 114 0 98 0 114 0 100 0 114 0 101 0 114 0 123 0 114 0 151 0 114 0 162 1 15 0 172 0 114 0 173 0 114 1 144] 
#[0 4 21 0 172] 
#[0 4 25 0 172] 
#[0 0 118 0 172] 
#[0 0 122 0 172] 
#[0 4 29 0 172] 
#[1 0 126 0 11 0 126 0 55 0 126 0 84 0 126 0 98 0 126 0 100 0 126 0 101 0 126 0 123 0 126 0 151 0 126 0 162 1 19 0 172 0 126 0 173 0 126 1 144] 
#[0 0 130 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 37 0 172] 
#[1 0 134 0 1 0 134 0 3 0 134 0 5 0 134 0 9 0 134 0 11 0 134 0 55 0 134 0 84 0 134 0 98 0 134 0 100 0 134 0 101 0 134 0 123 0 134 0 151 0 134 0 162 1 23 0 172 0 134 0 173 0 134 1 144] 
#[0 4 41 0 172] 
#[0 0 142 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 146 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 45 0 172] 
#[0 4 49 0 172] 
#[1 0 150 0 1 0 150 0 3 0 150 0 5 0 150 0 9 4 53 0 11 0 150 0 55 0 150 0 84 0 150 0 98 0 150 0 100 0 150 0 101 0 150 0 123 0 150 0 151 0 150 0 162 0 150 0 172 0 150 0 173 0 150 1 144] 
#[0 0 154 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 158 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 57 0 128] 
#[1 0 162 0 1 0 166 0 3 4 61 0 5 0 162 0 9 0 170 0 11 0 170 0 55 0 170 0 84 0 170 0 98 0 170 0 100 0 170 0 101 0 170 0 123 0 170 0 151 0 170 0 162 1 27 0 172 0 170 0 173 4 77 0 228 4 77 0 229 4 77 0 233 0 170 1 144] 
#[0 0 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 186 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 190 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 194 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 198 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 202 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 81 0 172] 
#[0 0 206 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 85 0 172] 
#[0 0 210 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 214 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 218 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 222 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 226 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 230 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 234 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 0 238 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 242 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 246 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 250 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 254 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 2 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 6 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 14 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 89 0 7 4 93 0 172 4 97 1 35 4 101 1 36] 
#[0 1 18 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 26 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 30 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 34 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 38 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 42 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 1 46 0 1 1 31 0 3 1 46 0 4 1 46 0 5 1 46 0 7 1 46 0 9 1 46 0 11 1 46 0 13 1 46 0 22 1 46 0 23 1 46 0 28 1 46 0 29 1 46 0 30 1 46 0 31 1 46 0 32 1 46 0 33 1 46 0 34 1 46 0 35 1 46 0 36 1 46 0 37 1 46 0 38 1 46 0 39 1 46 0 40 1 46 0 41 1 46 0 43 1 46 0 45 1 46 0 49 1 46 0 55 1 46 0 56 1 46 0 58 1 46 0 59 1 46 0 64 1 46 0 66 1 46 0 67 1 46 0 69 1 46 0 75 1 46 0 78 1 46 0 79 1 46 0 84 1 46 0 86 1 46 0 88 1 46 0 90 1 46 0 91 1 46 0 93 1 46 0 94 1 46 0 98 1 46 0 100 1 46 0 101 1 46 0 102 1 46 0 104 1 46 0 107 1 46 0 108 1 46 0 109 1 46 0 110 1 46 0 114 1 46 0 117 1 46 0 118 1 46 0 123 1 46 0 125 1 46 0 128 1 46 0 133 1 46 0 134 1 46 0 135 1 46 0 136 1 46 0 140 1 46 0 142 1 46 0 144 1 46 0 145 1 46 0 150 1 46 0 151 1 46 0 162 1 46 0 167 1 46 0 168 1 46 0 171 1 46 0 172 1 46 0 173 1 46 1 144] 
#[0 1 54 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 58 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 62 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 66 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 70 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 74 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 78 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 82 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 86 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 90 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 94 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 98 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 102 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 106 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 110 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 114 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 118 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 122 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 126 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 130 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 134 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 138 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 142 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 146 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 150 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 154 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 35 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 166 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 170 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 174 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 178 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 182 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 186 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 190 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 194 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 198 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 202 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 206 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 210 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 214 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 39 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 226 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 230 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 234 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 238 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 242 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 1 246 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 4 105 0 1 4 109 0 9 4 113 0 172] 
#[0 1 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 254 0 1 1 254 0 3 1 254 0 9 2 2 0 11 2 2 0 55 2 2 0 84 2 2 0 98 2 2 0 100 2 2 0 101 2 2 0 123 2 2 0 151 2 2 0 162 1 43 0 172 2 2 0 173 2 2 1 144] 
#[1 2 6 0 1 1 47 0 3 2 6 0 4 2 6 0 5 2 6 0 7 2 6 0 9 2 6 0 11 2 6 0 13 2 6 0 22 2 6 0 23 2 6 0 28 2 6 0 29 2 6 0 30 2 6 0 31 2 6 0 32 2 6 0 33 2 6 0 34 2 6 0 35 2 6 0 36 2 6 0 37 2 6 0 38 2 6 0 39 2 6 0 40 2 6 0 41 2 6 0 43 2 6 0 45 2 6 0 49 2 6 0 55 2 6 0 56 2 6 0 58 2 6 0 59 2 6 0 64 2 6 0 66 2 6 0 67 2 6 0 69 2 6 0 75 2 6 0 78 2 6 0 79 2 6 0 84 2 6 0 86 2 6 0 88 2 6 0 90 2 6 0 91 2 6 0 93 2 6 0 94 2 6 0 98 2 6 0 100 2 6 0 101 2 6 0 102 2 6 0 104 2 6 0 107 2 6 0 108 2 6 0 109 2 6 0 110 2 6 0 114 2 6 0 117 2 6 0 118 2 6 0 123 2 6 0 125 2 6 0 128 2 6 0 133 2 6 0 134 2 6 0 135 2 6 0 136 2 6 0 140 2 6 0 142 2 6 0 144 2 6 0 145 2 6 0 150 2 6 0 151 2 6 0 162 2 6 0 167 2 6 0 168 2 6 0 171 2 6 0 172 2 6 0 173 2 6 1 144] 
#[1 2 14 0 11 2 14 0 55 2 14 0 84 2 14 0 98 2 14 0 100 2 14 0 101 2 14 0 123 2 14 0 151 2 14 0 162 1 51 0 172 2 14 0 173 2 14 1 144] 
#[0 2 18 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 121 0 3] 
#[1 2 22 0 1 1 55 0 3 2 22 0 4 2 22 0 5 2 22 0 7 2 22 0 9 2 22 0 11 2 22 0 13 2 22 0 22 2 22 0 23 2 22 0 28 2 22 0 29 2 22 0 30 2 22 0 31 2 22 0 32 2 22 0 33 2 22 0 34 2 22 0 35 2 22 0 36 2 22 0 37 2 22 0 38 2 22 0 39 2 22 0 40 2 22 0 41 2 22 0 43 2 22 0 45 2 22 0 49 2 22 0 55 2 22 0 56 2 22 0 58 2 22 0 59 2 22 0 64 2 22 0 66 2 22 0 67 2 22 0 69 2 22 0 75 2 22 0 78 2 22 0 79 2 22 0 84 2 22 0 86 2 22 0 88 2 22 0 90 2 22 0 91 2 22 0 93 2 22 0 94 2 22 0 98 2 22 0 100 2 22 0 101 2 22 0 102 2 22 0 104 2 22 0 107 2 22 0 108 2 22 0 109 2 22 0 110 2 22 0 114 2 22 0 117 2 22 0 118 2 22 0 123 2 22 0 125 2 22 0 128 2 22 0 133 2 22 0 134 2 22 0 135 2 22 0 136 2 22 0 140 2 22 0 142 2 22 0 144 2 22 0 145 2 22 0 150 2 22 0 151 2 22 0 162 2 22 0 167 2 22 0 168 2 22 0 171 2 22 0 172 2 22 0 173 2 22 1 144] 
#[0 2 30 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 2 34 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 2 38 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 2 42 0 172] 
#[0 2 46 0 172] 
#[0 2 50 0 172] 
#[0 2 54 0 172] 
#[0 2 58 0 172] 
#[0 2 62 0 172] 
#[0 2 66 0 172] 
#[0 2 70 0 172] 
#[0 2 74 0 172] 
#[0 2 78 0 172] 
#[0 2 82 0 172] 
#[0 2 86 0 172] 
#[0 2 90 0 172] 
#[0 2 94 0 172] 
#[0 0 26 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 34 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 50 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 1 0 6 0 9 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 79 0 6 0 86 0 6 0 90 0 6 0 91 0 6 0 109 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 140 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 4 125 0 177] 
#[0 4 129 0 172] 
#[0 4 133 0 172] 
#[0 4 137 0 172] 
#[0 0 106 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 114 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 141 0 172] 
#[0 4 145 0 172] 
#[0 0 134 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 59 0 172] 
#[0 4 149 0 172] 
#[0 0 150 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 153 0 128] 
#[1 4 61 0 5 1 63 0 172 4 77 0 228 4 77 0 229 4 77 0 233] 
#[0 2 102 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 106 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 161 0 172] 
#[0 2 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 165 0 172] 
#[0 2 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 169 0 172] 
#[0 2 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 98 0 172] 
#[0 4 173 0 172] 
#[0 0 0 1 144] 
#[1 0 146 0 5 1 67 0 172] 
#[1 4 153 0 128 4 181 0 150] 
#[0 2 170 0 1 0 9 0 22 0 23 0 25 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 75 0 6 0 78 0 6 0 79 0 6 0 86 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 94 0 6 0 102 0 6 0 104 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 110 0 6 0 114 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 128 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 136 0 6 0 140 0 6 0 142 0 6 0 144 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 185 0 177 4 189 0 178 0 6 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 75 0 6 0 78 0 6 0 79 0 6 0 86 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 94 0 6 0 102 0 6 0 104 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 110 0 6 0 114 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 128 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 136 0 6 0 140 0 6 0 142 0 6 0 144 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 193 0 177 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 49 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 66 0 10 0 67 0 10 0 69 0 10 0 75 0 10 0 78 0 10 0 79 0 10 0 86 0 10 0 88 0 10 0 90 0 10 0 91 0 10 0 93 0 10 0 94 0 10 0 102 0 10 0 104 0 10 0 107 0 10 0 108 0 10 0 109 0 10 0 110 0 10 0 114 0 10 0 117 0 10 0 118 0 10 0 125 0 10 0 128 0 10 0 133 0 10 0 134 0 10 0 135 0 10 0 136 0 10 0 140 0 10 0 142 0 10 0 144 0 10 0 145 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 4 197 0 179 0 10 1 144] 
#[0 2 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 71 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 186 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 190 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 194 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 198 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 202 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 206 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 210 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 4 205 0 191 1 21 0 194 4 205 0 195 4 205 0 196 4 205 0 197] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 4 209 0 191 1 21 0 194 4 209 0 195 4 209 0 196 4 209 0 197 1 161 1 56 1 161 1 57 1 161 1 58 4 213 1 124 2 109 1 125 4 217 1 126 2 109 1 127 2 121 1 130 4 221 1 131 4 225 1 138] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 5 69 1 38 5 73 1 39 5 77 1 40 5 69 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 5 69 1 47 5 109 1 49 5 113 1 51 5 69 1 53 5 69 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 5 157 0 97 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 5 161 0 191 1 21 0 194 5 161 0 195 5 161 0 196 5 161 0 197] 
#[0 5 165 0 45] 
#[1 5 169 0 9 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 5 173 0 56 1 21 0 58 1 21 0 59 5 177 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 6 1 0 80 6 1 0 82 5 189 0 86 6 1 0 89 1 21 0 90 5 197 0 91 6 1 0 92 6 1 0 96 1 21 0 109 6 1 0 116 1 21 0 117 1 21 0 118 6 1 0 120 6 1 0 121 6 1 0 122 1 21 0 125 1 21 0 140 6 1 0 141 1 21 0 145 5 229 0 149 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 5 233 0 191 1 21 0 194 5 233 0 195 5 233 0 196 5 233 0 197 6 1 0 221 5 241 0 222 6 1 0 224 5 249 0 225 5 253 0 226 6 1 0 227] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 5 1 38 5 73 1 39 5 77 1 40 6 5 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 5 1 47 5 109 1 49 5 113 1 51 6 5 1 53 6 5 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 9 0 191 1 21 0 194 6 9 0 195 6 9 0 196 6 9 0 197] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 13 0 191 1 21 0 194 6 13 0 195 6 13 0 196 6 13 0 197 1 161 1 56 1 161 1 57 1 161 1 58 4 213 1 124 2 109 1 125 2 109 1 126 2 109 1 127 2 121 1 130 6 21 1 131] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 25 0 191 1 21 0 194 6 25 0 195 6 25 0 196 6 25 0 197] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 29 0 191 1 21 0 194 6 29 0 195 6 29 0 196 6 29 0 197 6 33 0 202 1 161 1 56 1 161 1 57 1 161 1 58 4 213 1 124 2 109 1 125 6 37 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 6 41 1 25 6 45 1 34] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 6 57 1 24 6 61 1 31] 
#[1 2 214 0 11 2 214 0 55 2 214 0 84 2 214 0 98 2 214 0 100 2 214 0 101 2 214 0 123 2 214 0 151 2 214 0 162 1 75 0 172 2 214 0 173 2 214 1 144] 
#[1 6 69 0 2 2 218 0 3 2 218 0 4 2 218 0 5 2 218 0 7 2 218 0 11 2 218 0 13 2 218 0 22 2 218 0 23 2 218 0 28 2 218 0 29 2 218 0 30 2 218 0 31 2 218 0 32 2 218 0 33 2 218 0 34 2 218 0 35 2 218 0 36 2 218 0 37 2 218 0 38 2 218 0 39 2 218 0 40 2 218 0 41 2 218 0 43 2 218 0 45 2 218 0 49 2 218 0 55 2 218 0 56 2 218 0 58 2 218 0 59 2 218 0 64 2 218 0 66 2 218 0 67 2 218 0 69 2 218 0 75 2 218 0 78 2 218 0 79 2 218 0 84 2 218 0 86 2 218 0 88 2 218 0 90 2 218 0 91 2 218 0 93 2 218 0 94 2 218 0 98 2 218 0 100 2 218 0 101 2 218 0 102 2 218 0 104 2 218 0 107 2 218 0 108 2 218 0 109 2 218 0 110 2 218 0 114 2 218 0 117 2 218 0 118 2 218 0 123 2 218 0 125 2 218 0 128 2 218 0 133 2 218 0 134 2 218 0 135 2 218 0 136 2 218 0 140 2 218 0 142 2 218 0 144 2 218 0 145 2 218 0 150 2 218 0 151 2 218 0 162 2 218 0 167 2 218 0 168 2 218 0 171 2 218 0 172 2 218 0 173 2 218 1 144] 
#[1 6 73 0 148 6 77 0 152] 
#[0 2 222 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 84 0 86 0 88 0 90 0 91 0 94 0 95 0 98 0 100 0 101 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 123 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 6 81 0 172] 
#[1 0 29 0 1 0 33 0 9 2 226 0 11 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 79 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 6 93 0 77 1 21 0 79 2 226 0 84 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 2 226 0 98 2 226 0 100 2 226 0 101 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 2 226 0 123 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 2 226 0 151 0 249 0 152 0 253 0 153 1 83 0 162 1 1 0 167 1 5 0 168 1 9 0 171 1 87 0 172 1 91 0 173 6 89 0 182 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 6 93 0 201 6 93 0 203 6 93 0 212 6 97 0 215 1 53 0 223 6 93 0 234 1 61 0 235 6 93 0 236 6 93 0 237 6 93 0 238 6 93 0 239 6 93 0 240 6 93 0 241 6 93 0 242 6 93 0 243 6 93 0 247 6 93 0 248 6 93 1 18 6 93 1 19 6 93 1 20 6 93 1 21 6 93 1 22 6 93 1 23 1 129 1 25 6 93 1 26 6 93 1 27 6 93 1 28 6 93 1 29 6 93 1 30 6 93 1 34 6 93 1 37 1 161 1 56 1 161 1 57 1 161 1 58 6 93 1 62 6 93 1 63 6 93 1 64 6 93 1 67 6 93 1 68 6 93 1 69 6 93 1 70 6 93 1 71 6 93 1 72 6 93 1 73 6 93 1 74 6 93 1 75 6 93 1 76 6 93 1 77 6 93 1 78 6 93 1 79 6 93 1 80 6 93 1 81 6 93 1 82 6 93 1 83 6 93 1 84 6 93 1 85 6 93 1 90 6 93 1 91 2 13 1 92 6 93 1 97 6 93 1 100 6 93 1 101 6 93 1 102 6 93 1 103 6 93 1 104 6 93 1 109 6 93 1 110 6 93 1 111 6 93 1 112 6 93 1 113 6 93 1 114 6 93 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 6 93 1 129 2 121 1 130 2 125 1 131 6 93 1 139 6 93 1 140 6 93 1 142] 
#[1 6 101 0 123 3 225 0 162 6 105 0 182] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 109 0 191 1 21 0 194 6 109 0 195 6 109 0 196 6 109 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 113 0 191 1 21 0 194 6 113 0 195 6 113 0 196 6 113 0 197] 
#[1 6 117 0 44 6 121 0 95 6 125 0 108 6 129 0 134 6 133 0 144] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 6 149 0 182 6 149 0 191 1 21 0 194 6 149 0 195 6 149 0 196 6 149 0 197 6 149 1 43 6 149 1 105 6 153 1 106] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 6 149 0 182 6 149 0 191 1 21 0 194 6 149 0 195 6 149 0 196 6 149 0 197 6 149 1 43 6 149 1 105 6 157 1 106] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 161 1 38 5 73 1 39 5 77 1 40 6 161 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 161 1 47 5 109 1 49 5 113 1 51 6 161 1 53 6 161 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 165 1 38 5 73 1 39 5 77 1 40 6 165 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 165 1 47 5 109 1 49 5 113 1 51 6 165 1 53 6 165 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 6 169 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 173 1 38 5 73 1 39 5 77 1 40 6 173 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 173 1 47 5 109 1 49 5 113 1 51 6 173 1 53 6 173 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 6 177 0 76] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 6 181 0 132 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 6 185 0 191 1 21 0 194 6 185 0 195 6 185 0 196 6 185 0 197 6 189 1 24 6 193 1 31 6 197 1 38 5 73 1 39 5 77 1 40 6 197 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 197 1 47 5 109 1 49 5 113 1 51 6 197 1 53 6 197 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 6 201 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 6 149 0 182 6 149 0 191 1 21 0 194 6 149 0 195 6 149 0 196 6 149 0 197 6 149 1 43 6 149 1 105 6 205 1 106] 
#[0 6 209 0 84] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 6 213 1 24 6 217 1 31] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 221 1 38 5 73 1 39 5 77 1 40 6 221 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 221 1 47 5 109 1 49 5 113 1 51 6 221 1 53 6 221 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 225 1 38 5 73 1 39 5 77 1 40 6 225 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 225 1 47 5 109 1 49 5 113 1 51 6 225 1 53 6 225 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 2 230 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 6 229 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 6 233 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 6 237 1 38 5 73 1 39 5 77 1 40 6 237 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 6 237 1 47 5 109 1 49 5 113 1 51 6 237 1 53 6 237 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 6 241 0 5 6 245 0 12 6 249 0 18 6 253 0 24] 
#[0 2 234 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 238 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 1 0 172] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 7 5 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 7 9 0 88 1 21 0 90 1 21 0 91 7 13 0 102 7 17 0 104 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 7 21 1 24 7 25 1 31] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 7 29 0 191 1 21 0 194 7 29 0 195 7 29 0 196 7 29 0 197 1 161 1 56 1 161 1 57 1 161 1 58 7 33 1 124 2 109 1 125 2 109 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 7 37 0 172 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 7 41 1 25] 
#[0 7 45 0 7] 
#[0 2 242 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 89 0 7 2 246 0 11 2 246 0 22 2 246 0 23 2 246 0 28 2 246 0 29 2 246 0 30 2 246 0 31 2 246 0 32 2 246 0 33 2 246 0 34 2 246 0 35 2 246 0 36 2 246 0 37 2 246 0 38 2 246 0 39 2 246 0 40 2 246 0 41 2 246 0 43 2 246 0 45 2 246 0 49 2 246 0 55 2 246 0 56 2 246 0 58 2 246 0 59 2 246 0 64 2 246 0 66 2 246 0 67 2 246 0 69 2 246 0 75 2 246 0 78 2 246 0 79 2 246 0 84 2 246 0 86 2 246 0 88 2 246 0 90 2 246 0 91 2 246 0 93 2 246 0 94 2 246 0 98 2 246 0 100 2 246 0 101 2 246 0 102 2 246 0 104 2 246 0 107 2 246 0 108 2 246 0 109 2 246 0 110 2 246 0 114 2 246 0 117 2 246 0 118 2 246 0 123 2 246 0 125 2 246 0 128 2 246 0 133 2 246 0 134 2 246 0 135 2 246 0 136 2 246 0 140 2 246 0 142 2 246 0 144 2 246 0 145 2 246 0 150 2 246 0 151 2 246 0 162 2 246 0 167 2 246 0 168 2 246 0 171 1 95 0 172 2 246 0 173 7 49 1 35 2 246 1 144] 
#[1 3 153 0 22 3 153 0 23 3 153 0 43 3 153 0 45 3 153 0 49 3 153 0 55 3 153 0 56 3 153 0 57 3 153 0 58 3 153 0 59 3 153 0 64 3 153 0 66 3 133 0 67 3 153 0 69 3 153 0 79 3 153 0 84 3 153 0 86 3 153 0 90 3 153 0 91 3 153 0 98 3 153 0 109 3 153 0 117 3 153 0 118 3 153 0 125 3 153 0 139 3 153 0 140 3 153 0 145 3 153 0 150 3 153 0 167 1 5 0 168 7 53 0 192 3 153 0 193 3 153 0 194 7 53 0 196] 
#[1 3 153 0 22 3 153 0 23 3 153 0 43 3 153 0 45 3 153 0 49 3 153 0 55 3 153 0 56 3 153 0 57 3 153 0 58 3 153 0 59 3 153 0 64 3 153 0 66 3 133 0 67 3 153 0 69 3 153 0 79 3 153 0 84 3 153 0 86 3 153 0 90 3 153 0 91 3 153 0 98 3 153 0 109 3 153 0 117 3 153 0 118 3 153 0 125 3 153 0 139 3 153 0 140 3 153 0 145 3 153 0 150 3 153 0 167 1 5 0 168 7 57 0 192 3 153 0 193 3 153 0 194 7 57 0 196] 
#[1 7 61 0 12 7 65 0 18] 
#[1 2 250 0 1 2 250 0 3 2 250 0 6 2 250 0 7 2 250 0 8 2 250 0 9 2 250 0 11 2 250 0 13 2 250 0 22 2 250 0 23 2 250 0 25 2 250 0 43 2 250 0 45 2 250 0 49 2 250 0 54 2 250 0 55 2 250 0 56 2 250 0 58 2 250 0 59 2 250 0 64 2 250 0 66 2 250 0 67 2 250 0 68 2 250 0 69 2 250 0 79 2 250 0 81 2 250 0 83 2 250 0 84 2 250 0 86 2 250 0 90 2 250 0 91 2 250 0 98 2 250 0 100 2 250 0 101 2 250 0 109 2 250 0 117 2 250 0 118 2 250 0 123 2 250 0 125 2 250 0 126 2 250 0 131 2 250 0 140 2 250 0 145 2 250 0 150 2 250 0 151 2 250 0 155 2 250 0 160 2 250 0 161 2 250 0 162 2 250 0 163 2 250 0 164 2 250 0 165 2 250 0 166 2 250 0 167 2 250 0 168 2 250 0 170 2 250 0 171 2 250 0 172 2 250 0 173 7 69 1 133 7 73 1 135 2 250 1 144] 
#[1 2 250 0 1 2 250 0 3 2 250 0 4 2 250 0 6 2 250 0 7 2 250 0 8 2 250 0 9 2 250 0 13 2 250 0 22 2 250 0 23 2 250 0 25 2 250 0 43 2 250 0 45 2 250 0 49 2 250 0 54 2 250 0 55 2 250 0 56 2 250 0 58 2 250 0 59 2 250 0 64 2 250 0 66 2 250 0 67 2 250 0 68 2 250 0 69 2 250 0 79 2 250 0 81 2 250 0 83 2 250 0 86 2 250 0 90 2 250 0 91 2 250 0 109 2 250 0 117 2 250 0 118 2 250 0 125 2 250 0 126 2 250 0 131 2 250 0 140 2 250 0 145 2 250 0 150 2 250 0 155 2 250 0 160 2 250 0 161 2 250 0 162 2 250 0 163 2 250 0 164 2 250 0 165 2 250 0 166 2 250 0 167 2 250 0 168 2 250 0 170 2 250 0 171 1 99 0 172 7 81 1 133 7 73 1 135] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 113 0 173 6 29 0 191 1 21 0 194 6 29 0 195 6 29 0 196 6 29 0 197 7 85 0 202 1 161 1 56 1 161 1 57 1 161 1 58 4 213 1 124 2 109 1 125 6 37 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[1 7 89 0 108 7 93 0 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 7 97 0 191 1 21 0 194 7 97 0 195 7 97 0 196 7 97 0 197] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 7 101 0 191 1 21 0 194 7 101 0 195 7 101 0 196 7 101 0 197 1 161 1 56 1 161 1 57 1 161 1 58 7 105 1 124 2 109 1 125 2 109 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[1 6 177 0 76 7 109 0 87 7 113 0 106 7 117 0 133 3 225 0 162 7 121 0 182] 
#[1 7 125 0 109 7 129 0 118 7 133 0 140] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 7 137 0 191 1 21 0 194 7 137 0 195 7 137 0 196 7 137 0 197] 
#[0 7 141 0 172] 
#[1 6 241 0 5 7 145 0 18 6 253 0 24] 
#[0 7 149 0 169] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 7 5 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 7 9 0 88 1 21 0 90 1 21 0 91 7 153 0 93 7 13 0 102 7 17 0 104 7 157 0 108 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 7 161 0 134 1 21 0 140 7 169 0 142 7 165 0 144 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 7 169 1 8 7 21 1 24 7 25 1 31] 
#[1 7 173 0 108 7 177 0 134 7 181 0 144] 
#[1 7 157 0 108 7 161 0 134 7 169 0 142 7 165 0 144 7 169 1 8] 
#[1 5 5 0 163 7 185 0 185] 
#[0 7 189 0 172] 
#[1 1 21 0 22 1 21 0 23 3 29 0 28 3 29 0 29 3 29 0 30 3 29 0 31 3 29 0 32 3 29 0 33 3 29 0 34 3 29 0 35 3 29 0 36 3 29 0 37 3 29 0 38 3 29 0 39 3 29 0 40 3 29 0 41 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 2 209 0 78 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 2 213 0 93 0 145 0 94 0 153 0 102 0 157 0 104 3 41 0 107 2 217 0 108 1 21 0 109 3 41 0 110 2 221 0 114 1 21 0 117 1 21 0 118 1 21 0 125 2 233 0 128 3 41 0 133 2 237 0 134 3 41 0 135 0 217 0 136 1 21 0 140 2 245 0 142 2 249 0 144 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 1 0 172 3 113 0 173 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 7 193 0 200 7 193 0 201 7 193 0 203 7 193 0 204 7 193 0 208 3 29 0 209 7 193 0 210 7 193 0 211 3 41 0 223 7 193 0 242 7 193 0 243 7 193 0 247 7 193 0 248 7 193 1 5 7 193 1 6 7 193 1 7 3 61 1 8 7 193 1 9 7 193 1 12 7 193 1 14 7 193 1 15 7 193 1 16 7 193 1 17 7 193 1 18 7 193 1 19 7 193 1 20 7 193 1 21 7 193 1 22 7 193 1 23 1 129 1 25 7 193 1 26 7 193 1 27 7 193 1 28 7 193 1 29 7 193 1 30 7 193 1 34 7 193 1 37 2 254 1 144] 
#[0 3 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 49 0 83 0 55 0 87 0 56 0 91 0 58 0 95 0 59 0 99 0 64 0 103 0 66 0 107 0 67 0 111 0 69 0 115 0 75 0 119 0 78 0 123 0 79 0 127 0 86 0 131 0 88 0 135 0 90 0 139 0 91 0 143 0 93 0 147 0 94 0 151 0 102 0 155 0 104 0 159 0 107 0 163 0 108 0 167 0 109 0 171 0 110 0 175 0 114 0 179 0 117 0 183 0 118 0 187 0 125 0 191 0 128 0 195 0 133 0 199 0 134 0 203 0 135 0 207 0 136 0 211 0 140 0 215 0 142 0 219 0 144 0 223 0 145 1 103 0 150 0 231 0 167 0 235 0 168 0 239 0 171 1 107 0 172 0 247 0 173 7 197 0 179 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 7 201 0 200 7 201 0 201 7 201 0 203 7 201 0 204 7 201 0 208 3 29 0 209 7 201 0 210 7 201 0 211 3 41 0 223 7 201 0 242 7 201 0 243 7 201 0 247 7 201 0 248 7 201 1 5 7 201 1 6 7 201 1 7 3 61 1 8 7 201 1 9 7 201 1 12 7 201 1 14 7 201 1 15 7 201 1 16 7 201 1 17 7 201 1 18 7 201 1 19 7 201 1 20 7 201 1 21 7 201 1 22 7 201 1 23 1 129 1 25 7 201 1 26 7 201 1 27 7 201 1 28 7 201 1 29 7 201 1 30 7 201 1 34 7 201 1 37 0 10 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 75 0 6 0 78 0 6 0 79 0 6 0 86 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 94 0 6 0 102 0 6 0 104 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 110 0 6 0 114 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 128 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 136 0 6 0 140 0 6 0 142 0 6 0 144 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 7 205 0 177 4 189 0 178 0 6 1 144] 
#[0 0 62 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 6 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 162 0 1 0 166 0 3 0 162 0 9 3 10 0 11 3 10 0 55 3 10 0 84 3 10 0 98 3 10 0 100 3 10 0 101 3 10 0 123 3 10 0 151 3 10 0 162 3 10 0 172 3 10 0 173 3 10 1 144] 
#[1 4 105 0 1 4 109 0 9] 
#[1 1 254 0 1 1 254 0 3 1 254 0 9 3 14 0 11 3 14 0 55 3 14 0 84 3 14 0 98 3 14 0 100 3 14 0 101 3 14 0 123 3 14 0 151 3 14 0 162 3 14 0 172 3 14 0 173 3 14 1 144] 
#[1 2 22 0 1 2 26 0 3 2 22 0 9 3 18 0 11 3 18 0 55 3 18 0 84 3 18 0 98 3 18 0 100 3 18 0 101 3 18 0 123 3 18 0 151 3 18 0 162 3 18 0 172 3 18 0 173 3 18 1 144] 
#[0 3 22 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 7 209 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 7 213 1 38 5 73 1 39 5 77 1 40 7 213 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 7 213 1 47 5 109 1 49 5 113 1 51 7 213 1 53 7 213 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 7 217 0 172] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 5 5 0 163 1 21 0 167 1 5 0 168 1 9 0 171 7 221 0 182 7 225 0 185 7 101 0 191 1 21 0 194 7 101 0 195 7 101 0 196 7 101 0 197 1 161 1 56 1 161 1 57 1 161 1 58 7 229 1 124 2 109 1 125 2 109 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[0 7 233 0 172] 
#[0 7 237 0 172] 
#[1 7 241 0 159 7 245 0 190] 
#[0 3 26 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 30 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 34 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 85 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 38 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 42 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 46 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 50 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 111 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 62 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 66 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 70 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 74 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 78 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 82 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 86 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 90 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 94 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 162 0 1 1 115 0 3 1 119 0 4 1 119 0 5 1 119 0 7 0 162 0 9 1 119 0 11 1 119 0 13 1 119 0 22 1 119 0 23 1 119 0 28 1 119 0 29 1 119 0 30 1 119 0 31 1 119 0 32 1 119 0 33 1 119 0 34 1 119 0 35 1 119 0 36 1 119 0 37 1 119 0 38 1 119 0 39 1 119 0 40 1 119 0 41 1 119 0 43 1 119 0 45 1 119 0 49 1 119 0 55 1 119 0 56 1 119 0 58 1 119 0 59 1 119 0 64 1 119 0 66 1 119 0 67 1 119 0 69 1 119 0 75 1 119 0 78 1 119 0 79 1 119 0 84 1 119 0 86 1 119 0 88 1 119 0 90 1 119 0 91 1 119 0 93 1 119 0 94 1 119 0 98 1 119 0 100 1 119 0 101 1 119 0 102 1 119 0 104 1 119 0 107 1 119 0 108 1 119 0 109 1 119 0 110 1 119 0 114 1 119 0 117 1 119 0 118 1 119 0 123 1 119 0 125 1 119 0 128 1 119 0 133 1 119 0 134 1 119 0 135 1 119 0 136 1 119 0 140 1 119 0 142 1 119 0 144 1 119 0 145 1 119 0 150 1 119 0 151 1 119 0 162 1 119 0 167 1 119 0 168 1 119 0 171 1 123 0 172 1 119 0 173 1 119 1 144] 
#[1 3 106 0 11 3 106 0 55 3 106 0 84 3 106 0 98 3 106 0 100 3 106 0 101 3 106 0 123 3 106 0 151 3 106 0 162 1 127 0 172 3 106 0 173 3 106 1 144] 
#[0 1 131 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 135 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 126 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 139 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 138 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 142 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 146 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 1 0 172] 
#[0 3 150 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 154 0 3 3 154 0 4 3 154 0 5 3 154 0 7 3 154 0 11 3 154 0 13 3 154 0 22 3 154 0 23 3 154 0 28 3 154 0 29 3 154 0 30 3 154 0 31 3 154 0 32 3 154 0 33 3 154 0 34 3 154 0 35 3 154 0 36 3 154 0 37 3 154 0 38 3 154 0 39 3 154 0 40 3 154 0 41 3 154 0 43 3 154 0 45 3 154 0 49 3 154 0 55 3 154 0 56 3 154 0 58 3 154 0 59 3 154 0 64 3 154 0 66 3 154 0 67 3 154 0 69 3 154 0 75 3 154 0 78 3 154 0 79 3 154 0 84 3 154 0 86 3 154 0 88 3 154 0 90 3 154 0 91 3 154 0 93 3 154 0 94 3 154 0 98 3 154 0 100 3 154 0 101 3 154 0 102 3 154 0 104 3 154 0 107 3 154 0 108 3 154 0 109 3 154 0 110 3 154 0 114 3 154 0 117 3 154 0 118 3 154 0 123 3 154 0 125 3 154 0 128 3 154 0 133 3 154 0 134 3 154 0 135 3 154 0 136 3 154 0 140 3 154 0 142 3 154 0 144 3 154 0 145 3 154 0 150 3 154 0 151 3 154 0 162 3 154 0 167 3 154 0 168 3 154 0 171 1 143 0 172 3 154 0 173 3 154 1 144] 
#[1 3 158 0 3 3 158 0 4 3 158 0 5 3 158 0 7 3 158 0 11 3 158 0 13 3 158 0 22 3 158 0 23 3 158 0 28 3 158 0 29 3 158 0 30 3 158 0 31 3 158 0 32 3 158 0 33 3 158 0 34 3 158 0 35 3 158 0 36 3 158 0 37 3 158 0 38 3 158 0 39 3 158 0 40 3 158 0 41 3 158 0 43 3 158 0 45 3 158 0 49 3 158 0 55 3 158 0 56 3 158 0 58 3 158 0 59 3 158 0 64 3 158 0 66 3 158 0 67 3 158 0 69 3 158 0 75 3 158 0 78 3 158 0 79 3 158 0 84 3 158 0 86 3 158 0 88 3 158 0 90 3 158 0 91 3 158 0 93 3 158 0 94 3 158 0 98 3 158 0 100 3 158 0 101 3 158 0 102 3 158 0 104 3 158 0 107 3 158 0 108 3 158 0 109 3 158 0 110 3 158 0 114 3 158 0 117 3 158 0 118 3 158 0 123 3 158 0 125 3 158 0 128 3 158 0 133 3 158 0 134 3 158 0 135 3 158 0 136 3 158 0 140 3 158 0 142 3 158 0 144 3 158 0 145 3 158 0 150 3 158 0 151 3 158 0 162 3 158 0 167 3 158 0 168 3 158 0 171 1 147 0 172 3 158 0 173 3 158 1 144] 
#[0 3 162 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 166 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 170 0 3 3 170 0 4 3 170 0 5 3 170 0 7 3 170 0 11 3 170 0 13 3 170 0 22 3 170 0 23 3 170 0 28 3 170 0 29 3 170 0 30 3 170 0 31 3 170 0 32 3 170 0 33 3 170 0 34 3 170 0 35 3 170 0 36 3 170 0 37 3 170 0 38 3 170 0 39 3 170 0 40 3 170 0 41 3 170 0 43 3 170 0 45 3 170 0 49 3 170 0 55 3 170 0 56 3 170 0 58 3 170 0 59 3 170 0 64 3 170 0 66 3 170 0 67 3 170 0 69 3 170 0 75 3 170 0 78 3 170 0 79 3 170 0 84 3 170 0 86 3 170 0 88 3 170 0 90 3 170 0 91 3 170 0 93 3 170 0 94 3 170 0 98 3 170 0 100 3 170 0 101 3 170 0 102 3 170 0 104 3 170 0 107 3 170 0 108 3 170 0 109 3 170 0 110 3 170 0 114 3 170 0 117 3 170 0 118 3 170 0 123 3 170 0 125 3 170 0 128 3 170 0 133 3 170 0 134 3 170 0 135 3 170 0 136 3 170 0 140 3 170 0 142 3 170 0 144 3 170 0 145 3 170 0 150 3 170 0 151 3 170 0 162 3 170 0 167 3 170 0 168 3 170 0 171 1 151 0 172 3 170 0 173 3 170 1 144] 
#[1 1 46 0 1 1 155 0 3 1 159 0 4 1 159 0 5 1 159 0 7 1 46 0 9 1 159 0 11 1 159 0 13 1 159 0 22 1 159 0 23 1 159 0 28 1 159 0 29 1 159 0 30 1 159 0 31 1 159 0 32 1 159 0 33 1 159 0 34 1 159 0 35 1 159 0 36 1 159 0 37 1 159 0 38 1 159 0 39 1 159 0 40 1 159 0 41 1 159 0 43 1 159 0 45 1 159 0 49 1 159 0 55 1 159 0 56 1 159 0 58 1 159 0 59 1 159 0 64 1 159 0 66 1 159 0 67 1 159 0 69 1 159 0 75 1 159 0 78 1 159 0 79 1 159 0 84 1 159 0 86 1 159 0 88 1 159 0 90 1 159 0 91 1 159 0 93 1 159 0 94 1 159 0 98 1 159 0 100 1 159 0 101 1 159 0 102 1 159 0 104 1 159 0 107 1 159 0 108 1 159 0 109 1 159 0 110 1 159 0 114 1 159 0 117 1 159 0 118 1 159 0 123 1 159 0 125 1 159 0 128 1 159 0 133 1 159 0 134 1 159 0 135 1 159 0 136 1 159 0 140 1 159 0 142 1 159 0 144 1 159 0 145 1 159 0 150 1 159 0 151 1 159 0 162 1 159 0 167 1 159 0 168 1 159 0 171 1 159 0 172 1 159 0 173 1 159 1 144] 
#[1 4 105 0 1 3 182 0 3 3 182 0 4 3 182 0 5 3 182 0 7 4 109 0 9 3 182 0 11 3 182 0 13 3 182 0 22 3 182 0 23 3 182 0 28 3 182 0 29 3 182 0 30 3 182 0 31 3 182 0 32 3 182 0 33 3 182 0 34 3 182 0 35 3 182 0 36 3 182 0 37 3 182 0 38 3 182 0 39 3 182 0 40 3 182 0 41 3 182 0 43 3 182 0 45 3 182 0 49 3 182 0 55 3 182 0 56 3 182 0 58 3 182 0 59 3 182 0 64 3 182 0 66 3 182 0 67 3 182 0 69 3 182 0 75 3 182 0 78 3 182 0 79 3 182 0 84 3 182 0 86 3 182 0 88 3 182 0 90 3 182 0 91 3 182 0 93 3 182 0 94 3 182 0 98 3 182 0 100 3 182 0 101 3 182 0 102 3 182 0 104 3 182 0 107 3 182 0 108 3 182 0 109 3 182 0 110 3 182 0 114 3 182 0 117 3 182 0 118 3 182 0 123 3 182 0 125 3 182 0 128 3 182 0 133 3 182 0 134 3 182 0 135 3 182 0 136 3 182 0 140 3 182 0 142 3 182 0 144 3 182 0 145 3 182 0 150 3 182 0 151 3 182 0 162 3 182 0 167 3 182 0 168 3 182 0 171 3 182 0 172 3 182 0 173 3 182 1 144] 
#[1 1 254 0 1 1 254 0 3 1 254 0 4 1 254 0 5 1 254 0 7 1 254 0 9 1 254 0 11 1 254 0 13 1 254 0 22 1 254 0 23 1 254 0 28 1 254 0 29 1 254 0 30 1 254 0 31 1 254 0 32 1 254 0 33 1 254 0 34 1 254 0 35 1 254 0 36 1 254 0 37 1 254 0 38 1 254 0 39 1 254 0 40 1 254 0 41 1 254 0 43 1 254 0 45 1 254 0 49 1 254 0 55 1 254 0 56 1 254 0 58 1 254 0 59 1 254 0 64 1 254 0 66 1 254 0 67 1 254 0 69 1 254 0 75 1 254 0 78 1 254 0 79 1 254 0 84 1 254 0 86 1 254 0 88 1 254 0 90 1 254 0 91 1 254 0 93 1 254 0 94 1 254 0 98 1 254 0 100 1 254 0 101 1 254 0 102 1 254 0 104 1 254 0 107 1 254 0 108 1 254 0 109 1 254 0 110 1 254 0 114 1 254 0 117 1 254 0 118 1 254 0 123 1 254 0 125 1 254 0 128 1 254 0 133 1 254 0 134 1 254 0 135 1 254 0 136 1 254 0 140 1 254 0 142 1 254 0 144 1 254 0 145 1 254 0 150 1 254 0 151 1 254 0 162 1 254 0 167 1 254 0 168 1 254 0 171 1 163 0 172 1 254 0 173 1 254 1 144] 
#[1 2 6 0 1 1 167 0 3 1 171 0 4 1 171 0 5 1 171 0 7 2 6 0 9 1 171 0 11 1 171 0 13 1 171 0 22 1 171 0 23 1 171 0 28 1 171 0 29 1 171 0 30 1 171 0 31 1 171 0 32 1 171 0 33 1 171 0 34 1 171 0 35 1 171 0 36 1 171 0 37 1 171 0 38 1 171 0 39 1 171 0 40 1 171 0 41 1 171 0 43 1 171 0 45 1 171 0 49 1 171 0 55 1 171 0 56 1 171 0 58 1 171 0 59 1 171 0 64 1 171 0 66 1 171 0 67 1 171 0 69 1 171 0 75 1 171 0 78 1 171 0 79 1 171 0 84 1 171 0 86 1 171 0 88 1 171 0 90 1 171 0 91 1 171 0 93 1 171 0 94 1 171 0 98 1 171 0 100 1 171 0 101 1 171 0 102 1 171 0 104 1 171 0 107 1 171 0 108 1 171 0 109 1 171 0 110 1 171 0 114 1 171 0 117 1 171 0 118 1 171 0 123 1 171 0 125 1 171 0 128 1 171 0 133 1 171 0 134 1 171 0 135 1 171 0 136 1 171 0 140 1 171 0 142 1 171 0 144 1 171 0 145 1 171 0 150 1 171 0 151 1 171 0 162 1 171 0 167 1 171 0 168 1 171 0 171 1 171 0 172 1 171 0 173 1 171 1 144] 
#[1 2 22 0 1 1 175 0 3 1 179 0 4 1 179 0 5 1 179 0 7 2 22 0 9 1 179 0 11 1 179 0 13 1 179 0 22 1 179 0 23 1 179 0 28 1 179 0 29 1 179 0 30 1 179 0 31 1 179 0 32 1 179 0 33 1 179 0 34 1 179 0 35 1 179 0 36 1 179 0 37 1 179 0 38 1 179 0 39 1 179 0 40 1 179 0 41 1 179 0 43 1 179 0 45 1 179 0 49 1 179 0 55 1 179 0 56 1 179 0 58 1 179 0 59 1 179 0 64 1 179 0 66 1 179 0 67 1 179 0 69 1 179 0 75 1 179 0 78 1 179 0 79 1 179 0 84 1 179 0 86 1 179 0 88 1 179 0 90 1 179 0 91 1 179 0 93 1 179 0 94 1 179 0 98 1 179 0 100 1 179 0 101 1 179 0 102 1 179 0 104 1 179 0 107 1 179 0 108 1 179 0 109 1 179 0 110 1 179 0 114 1 179 0 117 1 179 0 118 1 179 0 123 1 179 0 125 1 179 0 128 1 179 0 133 1 179 0 134 1 179 0 135 1 179 0 136 1 179 0 140 1 179 0 142 1 179 0 144 1 179 0 145 1 179 0 150 1 179 0 151 1 179 0 162 1 179 0 167 1 179 0 168 1 179 0 171 1 179 0 172 1 179 0 173 1 179 1 144] 
#[0 3 194 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 183 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 21 0 172] 
#[0 8 25 0 172] 
#[0 8 29 0 172] 
#[1 8 33 0 22 8 33 0 23 8 33 0 43 8 33 0 45 8 33 0 49 8 33 0 55 8 33 0 56 8 33 0 57 8 33 0 58 8 33 0 59 8 33 0 64 8 33 0 66 3 133 0 67 8 33 0 69 8 33 0 79 8 33 0 84 8 33 0 86 8 33 0 90 8 33 0 91 8 33 0 98 8 33 0 109 8 33 0 117 8 33 0 118 8 33 0 125 8 33 0 139 8 33 0 140 8 33 0 145 8 33 0 150 8 33 0 167 8 33 0 193 8 33 0 194] 
#[0 1 187 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 191 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 214 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 218 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 195 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 226 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 199 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 234 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 246 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 254 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 2 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 6 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 10 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 18 0 1 4 18 0 3 4 18 0 4 4 18 0 5 4 18 0 7 1 203 0 9 4 18 0 11 4 18 0 13 4 18 0 22 4 18 0 23 4 18 0 28 4 18 0 29 4 18 0 30 4 18 0 31 4 18 0 32 4 18 0 33 4 18 0 34 4 18 0 35 4 18 0 36 4 18 0 37 4 18 0 38 4 18 0 39 4 18 0 40 4 18 0 41 4 18 0 43 4 18 0 45 4 18 0 49 4 18 0 55 4 18 0 56 4 18 0 58 4 18 0 59 4 18 0 64 4 18 0 66 4 18 0 67 4 18 0 69 4 18 0 75 4 18 0 78 4 18 0 79 4 18 0 84 4 18 0 86 4 18 0 88 4 18 0 90 4 18 0 91 4 18 0 93 4 18 0 94 4 18 0 98 4 18 0 100 4 18 0 101 4 18 0 102 4 18 0 104 4 18 0 107 4 18 0 108 4 18 0 109 4 18 0 110 4 18 0 114 4 18 0 117 4 18 0 118 4 18 0 123 4 18 0 125 4 18 0 128 4 18 0 133 4 18 0 134 4 18 0 135 4 18 0 136 4 18 0 140 4 18 0 142 4 18 0 144 4 18 0 145 4 18 0 150 4 18 0 151 4 18 0 162 4 18 0 167 4 18 0 168 4 18 0 171 4 18 0 172 4 18 0 173 5 249 0 225 8 37 0 226 4 18 1 144] 
#[0 4 22 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 26 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 30 0 1 4 30 0 3 4 30 0 4 4 30 0 5 4 30 0 7 1 207 0 9 4 30 0 11 4 30 0 13 4 30 0 22 4 30 0 23 4 30 0 28 4 30 0 29 4 30 0 30 4 30 0 31 4 30 0 32 4 30 0 33 4 30 0 34 4 30 0 35 4 30 0 36 4 30 0 37 4 30 0 38 4 30 0 39 4 30 0 40 4 30 0 41 4 30 0 43 4 30 0 45 4 30 0 49 4 30 0 55 4 30 0 56 4 30 0 58 4 30 0 59 4 30 0 64 4 30 0 66 4 30 0 67 4 30 0 69 4 30 0 75 4 30 0 78 4 30 0 79 4 30 0 84 4 30 0 86 4 30 0 88 4 30 0 90 4 30 0 91 4 30 0 93 4 30 0 94 4 30 0 98 4 30 0 100 4 30 0 101 4 30 0 102 4 30 0 104 4 30 0 107 4 30 0 108 4 30 0 109 4 30 0 110 4 30 0 114 4 30 0 117 4 30 0 118 4 30 0 123 4 30 0 125 4 30 0 128 4 30 0 133 4 30 0 134 4 30 0 135 4 30 0 136 4 30 0 140 4 30 0 142 4 30 0 144 4 30 0 145 4 30 0 150 4 30 0 151 4 30 0 162 4 30 0 167 4 30 0 168 4 30 0 171 4 30 0 172 4 30 0 173 8 41 0 225 4 30 1 144] 
#[0 4 34 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 45 0 172] 
#[1 8 49 0 7 8 53 0 172] 
#[1 0 162 0 1 0 166 0 3 0 162 0 9 4 38 0 11 4 38 0 55 4 38 0 84 4 38 0 98 4 38 0 100 4 38 0 101 4 38 0 123 4 38 0 151 4 38 0 162 4 38 0 172 4 38 0 173 4 38 1 144] 
#[0 1 254 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 22 0 1 2 26 0 3 2 22 0 9 4 42 0 11 4 42 0 55 4 42 0 84 4 42 0 98 4 42 0 100 4 42 0 101 4 42 0 123 4 42 0 151 4 42 0 162 4 42 0 172 4 42 0 173 4 42 1 144] 
#[1 4 46 0 22 4 46 0 23 4 46 0 43 4 46 0 45 4 46 0 49 4 46 0 55 4 46 0 56 4 46 0 58 4 46 0 59 4 46 0 64 4 46 0 66 4 46 0 67 4 46 0 69 4 46 0 79 4 46 0 86 4 46 0 90 4 46 0 91 4 46 0 101 4 46 0 109 4 46 0 117 4 46 0 118 4 46 0 125 4 46 0 140 4 46 0 145 4 46 0 150 4 46 0 167 4 46 0 168 4 46 0 171 4 46 0 173 8 57 0 245] 
#[1 0 162 0 1 0 166 0 3 0 162 0 9 8 61 0 172] 
#[0 4 50 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 254 0 1 1 254 0 3 1 254 0 9 8 65 0 172] 
#[1 4 89 0 7 4 54 0 11 4 54 0 22 4 54 0 23 4 54 0 28 4 54 0 29 4 54 0 30 4 54 0 31 4 54 0 32 4 54 0 33 4 54 0 34 4 54 0 35 4 54 0 36 4 54 0 37 4 54 0 38 4 54 0 39 4 54 0 40 4 54 0 41 4 54 0 43 4 54 0 45 4 54 0 49 4 54 0 55 4 54 0 56 4 54 0 58 4 54 0 59 4 54 0 64 4 54 0 66 4 54 0 67 4 54 0 69 4 54 0 75 4 54 0 78 4 54 0 79 4 54 0 84 4 54 0 86 4 54 0 88 4 54 0 90 4 54 0 91 4 54 0 93 4 54 0 94 4 54 0 98 4 54 0 100 4 54 0 101 4 54 0 102 4 54 0 104 4 54 0 107 4 54 0 108 4 54 0 109 4 54 0 110 4 54 0 114 4 54 0 117 4 54 0 118 4 54 0 123 4 54 0 125 4 54 0 128 4 54 0 133 4 54 0 134 4 54 0 135 4 54 0 136 4 54 0 140 4 54 0 142 4 54 0 144 4 54 0 145 4 54 0 150 4 54 0 151 4 54 0 162 4 54 0 167 4 54 0 168 4 54 0 171 1 211 0 172 4 54 0 173 4 97 1 35 4 101 1 36 4 54 1 144] 
#[0 4 58 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 69 0 172] 
#[1 8 73 0 3 4 61 0 5 1 215 0 7 1 215 0 11 1 215 0 22 1 215 0 23 1 215 0 28 1 215 0 29 1 215 0 30 1 215 0 31 1 215 0 32 1 215 0 33 1 215 0 34 1 215 0 35 1 215 0 36 1 215 0 37 1 215 0 38 1 215 0 39 1 215 0 40 1 215 0 41 1 215 0 43 1 215 0 45 1 215 0 49 1 215 0 55 1 215 0 56 1 215 0 58 1 215 0 59 1 215 0 64 1 215 0 66 1 215 0 67 1 215 0 69 1 215 0 75 1 215 0 78 1 215 0 79 1 215 0 84 1 215 0 86 1 215 0 88 1 215 0 90 1 215 0 91 1 215 0 93 1 215 0 94 1 215 0 98 1 215 0 100 1 215 0 101 1 215 0 102 1 215 0 104 1 215 0 107 1 215 0 108 1 215 0 109 1 215 0 110 1 215 0 114 1 215 0 117 1 215 0 118 1 215 0 123 1 215 0 125 1 215 0 128 1 215 0 133 1 215 0 134 1 215 0 135 1 215 0 136 1 215 0 140 1 215 0 142 1 215 0 144 1 215 0 145 1 215 0 150 1 215 0 151 1 215 0 162 1 215 0 167 1 215 0 168 1 215 0 171 1 219 0 172 1 215 0 173 8 85 0 228 8 85 0 229 8 81 0 230 8 85 0 233 1 215 1 144] 
#[1 8 89 0 7 4 66 0 11 4 66 0 22 4 66 0 23 4 66 0 28 4 66 0 29 4 66 0 30 4 66 0 31 4 66 0 32 4 66 0 33 4 66 0 34 4 66 0 35 4 66 0 36 4 66 0 37 4 66 0 38 4 66 0 39 4 66 0 40 4 66 0 41 4 66 0 43 4 66 0 45 4 66 0 49 4 66 0 55 4 66 0 56 4 66 0 58 4 66 0 59 4 66 0 64 4 66 0 66 4 66 0 67 4 66 0 69 4 66 0 75 4 66 0 78 4 66 0 79 4 66 0 84 4 66 0 86 4 66 0 88 4 66 0 90 4 66 0 91 4 66 0 93 4 66 0 94 4 66 0 98 4 66 0 100 4 66 0 101 4 66 0 102 4 66 0 104 4 66 0 107 4 66 0 108 4 66 0 109 4 66 0 110 4 66 0 114 4 66 0 117 4 66 0 118 4 66 0 123 4 66 0 125 4 66 0 128 4 66 0 133 4 66 0 134 4 66 0 135 4 66 0 136 4 66 0 140 4 66 0 142 4 66 0 144 4 66 0 145 4 66 0 150 4 66 0 151 4 66 0 162 4 66 0 167 4 66 0 168 4 66 0 171 1 223 0 172 4 66 0 173 8 97 1 32 8 101 1 33 4 66 1 144] 
#[0 4 70 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 105 0 152] 
#[0 4 74 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 109 0 172] 
#[0 8 113 0 172] 
#[0 8 117 0 123] 
#[0 4 78 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 84 0 86 0 88 0 90 0 91 0 94 0 95 0 98 0 100 0 101 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 123 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 8 121 0 172] 
#[1 2 226 0 11 2 226 0 55 2 226 0 84 2 226 0 98 2 226 0 100 2 226 0 101 2 226 0 123 2 226 0 151 2 226 0 162 2 226 0 172 2 226 0 173 8 125 0 215] 
#[1 8 129 0 11 0 6 0 55 0 6 0 84 0 6 0 98 0 6 0 100 0 6 0 101 0 6 0 123 0 6 0 151 0 6 0 162 8 133 0 172 1 227 0 173 8 141 0 177 8 145 0 214 8 149 0 216 8 153 0 217] 
#[1 4 82 0 11 4 82 0 55 4 82 0 84 4 82 0 98 4 82 0 100 4 82 0 101 4 82 0 123 4 82 0 151 4 82 0 162 1 231 0 172 4 82 0 173 4 82 1 144] 
#[0 8 161 0 172] 
#[1 4 86 0 22 4 86 0 23 4 86 0 43 4 86 0 45 4 86 0 49 4 86 0 55 4 86 0 56 4 86 0 58 4 86 0 59 4 86 0 64 4 86 0 66 4 86 0 67 4 86 0 69 4 86 0 79 4 86 0 86 4 86 0 90 4 86 0 91 4 86 0 101 4 86 0 109 4 86 0 117 4 86 0 118 4 86 0 125 4 86 0 140 4 86 0 145 4 86 0 150 4 86 0 167 4 86 0 168 4 86 0 171 4 86 0 173 8 165 0 250] 
#[1 8 169 0 3 8 173 0 172 8 177 0 253] 
#[0 4 90 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 94 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 98 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 102 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 106 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 110 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 114 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 118 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 4 122 0 7 4 122 0 11 4 122 0 55 4 122 0 84 4 122 0 98 4 122 0 100 4 122 0 101 4 122 0 123 4 122 0 151 4 122 0 162 4 122 0 172 4 122 0 173 8 181 1 108 4 122 1 144] 
#[0 4 126 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 4 130 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 8 185 0 172] 
#[0 8 189 0 172] 
#[1 0 26 0 1 0 26 0 3 0 26 0 9 1 235 0 172] 
#[0 8 197 0 172] 
#[0 8 201 0 172] 
#[0 8 205 0 172] 
#[1 0 162 0 1 8 73 0 3 4 61 0 5 1 215 0 7 0 162 0 9 1 239 0 11 1 239 0 22 1 239 0 23 1 239 0 28 1 239 0 29 1 239 0 30 1 239 0 31 1 239 0 32 1 239 0 33 1 239 0 34 1 239 0 35 1 239 0 36 1 239 0 37 1 239 0 38 1 239 0 39 1 239 0 40 1 239 0 41 1 239 0 43 1 239 0 45 1 239 0 49 1 239 0 55 1 239 0 56 1 239 0 58 1 239 0 59 1 239 0 64 1 239 0 66 1 239 0 67 1 239 0 69 1 239 0 75 1 239 0 78 1 239 0 79 1 239 0 84 1 239 0 86 1 239 0 88 1 239 0 90 1 239 0 91 1 239 0 93 1 239 0 94 1 239 0 98 1 239 0 100 1 239 0 101 1 239 0 102 1 239 0 104 1 239 0 107 1 239 0 108 1 239 0 109 1 239 0 110 1 239 0 114 1 239 0 117 1 239 0 118 1 239 0 123 1 239 0 125 1 239 0 128 1 239 0 133 1 239 0 134 1 239 0 135 1 239 0 136 1 239 0 140 1 239 0 142 1 239 0 144 1 239 0 145 1 239 0 150 1 239 0 151 1 239 0 162 1 239 0 167 1 239 0 168 1 239 0 171 1 243 0 172 1 239 0 173 8 85 0 228 8 85 0 229 8 81 0 230 8 85 0 233 1 239 1 144] 
#[1 8 89 0 7 4 134 0 11 4 134 0 22 4 134 0 23 4 134 0 28 4 134 0 29 4 134 0 30 4 134 0 31 4 134 0 32 4 134 0 33 4 134 0 34 4 134 0 35 4 134 0 36 4 134 0 37 4 134 0 38 4 134 0 39 4 134 0 40 4 134 0 41 4 134 0 43 4 134 0 45 4 134 0 49 4 134 0 55 4 134 0 56 4 134 0 58 4 134 0 59 4 134 0 64 4 134 0 66 4 134 0 67 4 134 0 69 4 134 0 75 4 134 0 78 4 134 0 79 4 134 0 84 4 134 0 86 4 134 0 88 4 134 0 90 4 134 0 91 4 134 0 93 4 134 0 94 4 134 0 98 4 134 0 100 4 134 0 101 4 134 0 102 4 134 0 104 4 134 0 107 4 134 0 108 4 134 0 109 4 134 0 110 4 134 0 114 4 134 0 117 4 134 0 118 4 134 0 123 4 134 0 125 4 134 0 128 4 134 0 133 4 134 0 134 4 134 0 135 4 134 0 136 4 134 0 140 4 134 0 142 4 134 0 144 4 134 0 145 4 134 0 150 4 134 0 151 4 134 0 162 4 134 0 167 4 134 0 168 4 134 0 171 1 247 0 172 4 134 0 173 8 97 1 32 8 101 1 33 4 134 1 144] 
#[0 4 138 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 142 0 11 4 142 0 22 4 142 0 23 4 142 0 28 4 142 0 29 4 142 0 30 4 142 0 31 4 142 0 32 4 142 0 33 4 142 0 34 4 142 0 35 4 142 0 36 4 142 0 37 4 142 0 38 4 142 0 39 4 142 0 40 4 142 0 41 4 142 0 43 4 142 0 45 4 142 0 49 4 142 0 55 4 142 0 56 4 142 0 58 4 142 0 59 4 142 0 64 4 142 0 66 4 142 0 67 4 142 0 69 4 142 0 75 4 142 0 78 4 142 0 79 4 142 0 84 4 142 0 86 4 142 0 88 4 142 0 90 4 142 0 91 4 142 0 93 4 142 0 94 4 142 0 98 4 142 0 100 4 142 0 101 4 142 0 102 4 142 0 104 4 142 0 107 4 142 0 108 4 142 0 109 4 142 0 110 4 142 0 114 4 142 0 117 4 142 0 118 4 142 0 123 4 142 0 125 4 142 0 128 4 142 0 133 4 142 0 134 4 142 0 135 4 142 0 136 4 142 0 140 4 142 0 142 4 142 0 144 4 142 0 145 4 142 0 150 4 142 0 151 4 142 0 162 4 142 0 167 4 142 0 168 4 142 0 171 1 251 0 172 4 142 0 173 4 142 1 144] 
#[1 0 38 0 7 1 255 0 11 1 255 0 55 1 255 0 84 1 255 0 98 1 255 0 100 1 255 0 101 1 255 0 123 1 255 0 151 1 255 0 162 1 255 0 172 1 255 0 173 1 255 1 144] 
#[0 4 150 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 8 213 0 172] 
#[1 8 89 0 7 4 154 0 11 4 154 0 22 4 154 0 23 4 154 0 28 4 154 0 29 4 154 0 30 4 154 0 31 4 154 0 32 4 154 0 33 4 154 0 34 4 154 0 35 4 154 0 36 4 154 0 37 4 154 0 38 4 154 0 39 4 154 0 40 4 154 0 41 4 154 0 43 4 154 0 45 4 154 0 49 4 154 0 55 4 154 0 56 4 154 0 58 4 154 0 59 4 154 0 64 4 154 0 66 4 154 0 67 4 154 0 69 4 154 0 75 4 154 0 78 4 154 0 79 4 154 0 84 4 154 0 86 4 154 0 88 4 154 0 90 4 154 0 91 4 154 0 93 4 154 0 94 4 154 0 98 4 154 0 100 4 154 0 101 4 154 0 102 4 154 0 104 4 154 0 107 4 154 0 108 4 154 0 109 4 154 0 110 4 154 0 114 4 154 0 117 4 154 0 118 4 154 0 123 4 154 0 125 4 154 0 128 4 154 0 133 4 154 0 134 4 154 0 135 4 154 0 136 4 154 0 140 4 154 0 142 4 154 0 144 4 154 0 145 4 154 0 150 4 154 0 151 4 154 0 162 4 154 0 167 4 154 0 168 4 154 0 171 2 3 0 172 4 154 0 173 8 97 1 32 8 101 1 33 4 154 1 144] 
#[0 4 158 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 217 0 151 3 225 0 162 7 253 0 172 3 233 0 173 8 221 0 182 3 241 0 207 8 225 0 213] 
#[1 7 253 0 172 3 233 0 173 3 241 0 207 8 229 0 213] 
#[0 8 233 0 76] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 8 237 1 38 5 73 1 39 5 77 1 40 8 237 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 8 237 1 47 5 109 1 49 5 113 1 51 8 237 1 53 8 237 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 4 162 0 3 4 162 0 4 4 162 0 5 4 162 0 7 4 162 0 11 4 162 0 22 4 162 0 23 4 162 0 28 4 162 0 29 4 162 0 30 4 162 0 31 4 162 0 32 4 162 0 33 4 162 0 34 4 162 0 35 4 162 0 36 4 162 0 37 4 162 0 38 4 162 0 39 4 162 0 40 4 162 0 41 4 162 0 43 4 162 0 45 4 162 0 49 4 162 0 55 4 162 0 56 4 162 0 58 4 162 0 59 4 162 0 64 4 162 0 66 4 162 0 67 4 162 0 69 4 162 0 75 4 162 0 78 4 162 0 79 4 162 0 84 4 162 0 86 4 162 0 88 4 162 0 90 4 162 0 91 4 162 0 93 4 162 0 94 4 162 0 98 4 162 0 100 4 162 0 101 4 162 0 102 4 162 0 104 4 162 0 107 4 162 0 108 4 162 0 109 4 162 0 110 4 162 0 114 4 162 0 117 4 162 0 118 4 162 0 123 4 162 0 125 4 162 0 128 4 162 0 133 4 162 0 134 4 162 0 135 4 162 0 136 4 162 0 140 4 162 0 142 4 162 0 144 4 162 0 145 4 162 0 150 4 162 0 151 4 162 0 162 4 162 0 167 4 162 0 168 4 162 0 171 2 7 0 172 4 162 0 173 4 162 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 8 241 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 8 245 1 38 5 73 1 39 5 77 1 40 8 245 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 8 245 1 47 5 109 1 49 5 113 1 51 8 245 1 53 8 245 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 8 249 0 172] 
#[0 8 253 0 172] 
#[0 9 1 0 172] 
#[0 9 5 0 18] 
#[1 0 62 0 3 0 62 0 5 0 62 0 7 0 62 0 11 0 62 0 22 0 62 0 23 0 62 0 28 0 62 0 29 0 62 0 30 0 62 0 31 0 62 0 32 0 62 0 33 0 62 0 34 0 62 0 35 0 62 0 36 0 62 0 37 0 62 0 38 0 62 0 39 0 62 0 40 0 62 0 41 0 62 0 43 0 62 0 45 0 62 0 49 0 62 0 55 0 62 0 56 0 62 0 58 0 62 0 59 0 62 0 64 0 62 0 66 0 62 0 67 0 62 0 69 0 62 0 75 0 62 0 78 0 62 0 79 0 62 0 84 0 62 0 86 0 62 0 88 0 62 0 90 0 62 0 91 0 62 0 93 0 62 0 94 0 62 0 98 0 62 0 100 0 62 0 101 0 62 0 102 0 62 0 104 0 62 0 107 0 62 0 108 0 62 0 109 0 62 0 110 0 62 0 114 0 62 0 117 0 62 0 118 0 62 0 123 0 62 0 125 0 62 0 128 0 62 0 133 0 62 0 134 0 62 0 135 0 62 0 136 0 62 0 140 0 62 0 142 0 62 0 144 0 62 0 145 0 62 0 150 0 62 0 151 0 62 0 162 0 62 0 167 0 62 0 168 0 62 0 171 2 11 0 172 0 62 0 173 0 62 1 144] 
#[0 9 13 0 172] 
#[0 9 17 0 172] 
#[0 9 21 0 172] 
#[1 8 89 0 7 4 166 0 11 4 166 0 22 4 166 0 23 4 166 0 28 4 166 0 29 4 166 0 30 4 166 0 31 4 166 0 32 4 166 0 33 4 166 0 34 4 166 0 35 4 166 0 36 4 166 0 37 4 166 0 38 4 166 0 39 4 166 0 40 4 166 0 41 4 166 0 43 4 166 0 45 4 166 0 49 4 166 0 55 4 166 0 56 4 166 0 58 4 166 0 59 4 166 0 64 4 166 0 66 4 166 0 67 4 166 0 69 4 166 0 75 4 166 0 78 4 166 0 79 4 166 0 84 4 166 0 86 4 166 0 88 4 166 0 90 4 166 0 91 4 166 0 93 4 166 0 94 4 166 0 98 4 166 0 100 4 166 0 101 4 166 0 102 4 166 0 104 4 166 0 107 4 166 0 108 4 166 0 109 4 166 0 110 4 166 0 114 4 166 0 117 4 166 0 118 4 166 0 123 4 166 0 125 4 166 0 128 4 166 0 133 4 166 0 134 4 166 0 135 4 166 0 136 4 166 0 140 4 166 0 142 4 166 0 144 4 166 0 145 4 166 0 150 4 166 0 151 4 166 0 162 4 166 0 167 4 166 0 168 4 166 0 171 2 15 0 172 4 166 0 173 8 97 1 32 8 101 1 33 4 166 1 144] 
#[0 4 170 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 162 0 1 0 166 0 3 0 162 0 9 2 19 0 172] 
#[1 4 105 0 1 4 109 0 9 9 29 0 172] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 9 33 1 25] 
#[0 4 174 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 9 37 0 172 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 9 41 1 25] 
#[0 4 178 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 186 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 45 0 172] 
#[0 9 49 0 172] 
#[0 4 190 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 194 0 4 4 233 0 6 9 53 0 7 4 237 0 8 0 33 0 9 4 194 0 11 2 23 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 27 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 4 194 0 84 1 21 0 86 1 21 0 90 1 21 0 91 4 194 0 98 4 194 0 100 4 194 0 101 1 21 0 109 1 21 0 117 1 21 0 118 4 194 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 4 194 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 31 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 2 35 0 172 4 194 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 9 97 1 132 9 101 1 134 9 105 1 137 5 153 1 141 5 153 1 143 4 194 1 144] 
#[1 2 250 0 1 2 250 0 3 2 250 0 4 2 250 0 6 2 250 0 7 2 250 0 8 2 250 0 9 2 250 0 13 2 250 0 22 2 250 0 23 2 250 0 25 2 250 0 43 2 250 0 45 2 250 0 49 2 250 0 54 2 250 0 55 2 250 0 56 2 250 0 58 2 250 0 59 2 250 0 64 2 250 0 66 2 250 0 67 2 250 0 68 2 250 0 69 2 250 0 79 2 250 0 81 2 250 0 83 2 250 0 86 2 250 0 90 2 250 0 91 2 250 0 109 2 250 0 117 2 250 0 118 2 250 0 125 2 250 0 126 2 250 0 131 2 250 0 140 2 250 0 145 2 250 0 150 2 250 0 155 2 250 0 160 2 250 0 161 2 250 0 162 2 250 0 163 2 250 0 164 2 250 0 165 2 250 0 166 2 250 0 167 2 250 0 168 2 250 0 170 2 250 0 171 2 250 0 172 9 109 1 133 7 73 1 135] 
#[1 9 113 0 4 9 117 0 172] 
#[1 4 198 0 101 4 198 0 173 9 121 0 206] 
#[0 9 125 0 172] 
#[0 9 129 0 172] 
#[1 8 169 0 3 9 133 0 172 9 137 0 253] 
#[1 0 162 0 1 2 39 0 3 0 162 0 4 0 162 0 5 0 162 0 7 0 162 0 9 0 162 0 11 0 162 0 13 0 162 0 22 0 162 0 23 0 162 0 28 0 162 0 29 0 162 0 30 0 162 0 31 0 162 0 32 0 162 0 33 0 162 0 34 0 162 0 35 0 162 0 36 0 162 0 37 0 162 0 38 0 162 0 39 0 162 0 40 0 162 0 41 0 162 0 43 0 162 0 45 0 162 0 49 0 162 0 55 0 162 0 56 0 162 0 58 0 162 0 59 0 162 0 64 0 162 0 66 0 162 0 67 0 162 0 69 0 162 0 75 0 162 0 78 0 162 0 79 0 162 0 84 0 162 0 86 0 162 0 88 0 162 0 90 0 162 0 91 0 162 0 93 0 162 0 94 0 162 0 98 0 162 0 100 0 162 0 101 0 162 0 102 0 162 0 104 0 162 0 107 0 162 0 108 0 162 0 109 0 162 0 110 0 162 0 114 0 162 0 117 0 162 0 118 0 162 0 123 0 162 0 125 0 162 0 128 0 162 0 133 0 162 0 134 0 162 0 135 0 162 0 136 0 162 0 140 0 162 0 142 0 162 0 144 0 162 0 145 0 162 0 150 0 162 0 151 0 162 0 162 0 162 0 167 0 162 0 168 0 162 0 171 0 162 0 172 0 162 0 173 0 162 1 144] 
#[1 4 105 0 1 4 109 0 9 4 202 0 22 4 202 0 23 4 202 0 28 4 202 0 29 4 202 0 30 4 202 0 31 4 202 0 32 4 202 0 33 4 202 0 34 4 202 0 35 4 202 0 36 4 202 0 37 4 202 0 38 4 202 0 39 4 202 0 40 4 202 0 41 4 202 0 43 4 202 0 45 4 202 0 49 4 202 0 55 4 202 0 56 4 202 0 58 4 202 0 59 4 202 0 64 4 202 0 66 4 202 0 67 4 202 0 69 4 202 0 75 4 202 0 78 4 202 0 79 4 202 0 86 4 202 0 88 4 202 0 90 4 202 0 91 4 202 0 93 4 202 0 94 4 202 0 102 4 202 0 104 4 202 0 107 4 202 0 108 4 202 0 109 4 202 0 110 4 202 0 114 4 202 0 117 4 202 0 118 4 202 0 125 4 202 0 128 4 202 0 133 4 202 0 134 4 202 0 135 4 202 0 136 4 202 0 140 4 202 0 142 4 202 0 144 4 202 0 145 4 202 0 150 4 202 0 167 4 202 0 168 4 202 0 171 4 202 0 172 4 202 0 173 4 202 1 144] 
#[0 9 141 0 172] 
#[0 4 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 145 0 172] 
#[0 4 210 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 149 0 172] 
#[0 9 153 0 172] 
#[0 9 157 0 172] 
#[1 8 169 0 3 9 161 0 172 4 214 0 173 9 165 0 253 9 169 1 13] 
#[1 8 233 0 76 9 173 0 87 9 177 0 106 9 181 0 133 3 225 0 162 9 185 0 182] 
#[0 9 189 0 172] 
#[0 4 218 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 193 0 172] 
#[0 9 197 0 172] 
#[0 9 201 0 172] 
#[0 9 205 0 172] 
#[0 9 209 0 172] 
#[0 9 213 0 172] 
#[0 9 217 0 172] 
#[0 9 221 0 172] 
#[1 4 222 0 22 4 222 0 23 4 222 0 28 4 222 0 29 4 222 0 30 4 222 0 31 4 222 0 32 4 222 0 33 4 222 0 34 4 222 0 35 4 222 0 36 4 222 0 37 4 222 0 38 4 222 0 39 4 222 0 40 4 222 0 41 4 222 0 43 4 222 0 45 4 222 0 49 4 222 0 55 4 222 0 56 4 222 0 58 4 222 0 59 4 222 0 64 4 222 0 66 4 222 0 67 4 222 0 69 4 222 0 75 4 222 0 78 4 222 0 79 9 225 0 85 4 222 0 86 4 222 0 88 4 222 0 90 4 222 0 91 4 222 0 93 4 222 0 94 4 222 0 102 4 222 0 104 4 222 0 107 4 222 0 108 4 222 0 109 4 222 0 110 4 222 0 114 4 222 0 117 4 222 0 118 4 222 0 125 4 222 0 128 4 222 0 133 4 222 0 134 4 222 0 135 4 222 0 136 4 222 0 140 4 222 0 142 4 222 0 144 4 222 0 145 4 222 0 150 4 222 0 167 4 222 0 168 4 222 0 171 4 222 0 172 4 222 0 173 4 222 1 144] 
#[1 5 5 0 163 9 229 0 185] 
#[0 4 226 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 75 0 6 0 78 0 6 0 79 0 6 0 86 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 94 0 6 0 102 0 6 0 104 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 110 0 6 0 114 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 128 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 136 0 6 0 140 0 6 0 142 0 6 0 144 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 9 233 0 177 4 189 0 178 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 49 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 66 0 10 0 67 0 10 0 69 0 10 0 75 0 10 0 78 0 10 0 79 0 10 0 86 0 10 0 88 0 10 0 90 0 10 0 91 0 10 0 93 0 10 0 94 0 10 0 102 0 10 0 104 0 10 0 107 0 10 0 108 0 10 0 109 0 10 0 110 0 10 0 114 0 10 0 117 0 10 0 118 0 10 0 125 0 10 0 128 0 10 0 133 0 10 0 134 0 10 0 135 0 10 0 136 0 10 0 140 0 10 0 142 0 10 0 144 0 10 0 145 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 9 237 0 179 0 10 1 144] 
#[1 1 21 0 22 1 21 0 23 3 29 0 28 3 29 0 29 3 29 0 30 3 29 0 31 3 29 0 32 3 29 0 33 3 29 0 34 3 29 0 35 3 29 0 36 3 29 0 37 3 29 0 38 3 29 0 39 3 29 0 40 3 29 0 41 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 2 209 0 78 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 2 213 0 93 0 145 0 94 0 153 0 102 0 157 0 104 3 41 0 107 2 217 0 108 1 21 0 109 3 41 0 110 2 221 0 114 1 21 0 117 1 21 0 118 1 21 0 125 2 233 0 128 3 41 0 133 2 237 0 134 3 41 0 135 0 217 0 136 1 21 0 140 2 245 0 142 2 249 0 144 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 1 0 172 3 113 0 173 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 7 193 0 200 7 193 0 201 7 193 0 203 7 193 0 204 7 193 0 208 3 29 0 209 7 193 0 210 7 193 0 211 3 41 0 223 7 193 0 242 7 193 0 243 7 193 0 247 7 193 0 248 7 193 1 5 7 193 1 6 7 193 1 7 3 61 1 8 7 193 1 9 7 193 1 12 7 193 1 14 7 193 1 15 7 193 1 16 7 193 1 17 7 193 1 18 7 193 1 19 7 193 1 20 7 193 1 21 7 193 1 22 7 193 1 23 1 129 1 25 7 193 1 26 7 193 1 27 7 193 1 28 7 193 1 29 7 193 1 30 7 193 1 34 7 193 1 37 4 230 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 9 241 1 38 5 73 1 39 5 77 1 40 9 241 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 241 1 47 5 109 1 49 5 113 1 51 9 241 1 53 9 241 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 9 245 0 4 9 249 0 172] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 5 5 0 163 1 21 0 167 1 5 0 168 1 9 0 171 9 253 0 182 10 1 0 185 7 101 0 191 1 21 0 194 7 101 0 195 7 101 0 196 7 101 0 197 1 161 1 56 1 161 1 57 1 161 1 58 10 5 1 124 2 109 1 125 2 109 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[0 4 234 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 238 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 105 0 1 4 242 0 3 4 242 0 4 4 242 0 5 4 242 0 7 4 109 0 9 4 242 0 11 4 242 0 13 4 242 0 22 4 242 0 23 4 242 0 28 4 242 0 29 4 242 0 30 4 242 0 31 4 242 0 32 4 242 0 33 4 242 0 34 4 242 0 35 4 242 0 36 4 242 0 37 4 242 0 38 4 242 0 39 4 242 0 40 4 242 0 41 4 242 0 43 4 242 0 45 4 242 0 49 4 242 0 55 4 242 0 56 4 242 0 58 4 242 0 59 4 242 0 64 4 242 0 66 4 242 0 67 4 242 0 69 4 242 0 75 4 242 0 78 4 242 0 79 4 242 0 84 4 242 0 86 4 242 0 88 4 242 0 90 4 242 0 91 4 242 0 93 4 242 0 94 4 242 0 98 4 242 0 100 4 242 0 101 4 242 0 102 4 242 0 104 4 242 0 107 4 242 0 108 4 242 0 109 4 242 0 110 4 242 0 114 4 242 0 117 4 242 0 118 4 242 0 123 4 242 0 125 4 242 0 128 4 242 0 133 4 242 0 134 4 242 0 135 4 242 0 136 4 242 0 140 4 242 0 142 4 242 0 144 4 242 0 145 4 242 0 150 4 242 0 151 4 242 0 162 4 242 0 167 4 242 0 168 4 242 0 171 4 242 0 172 4 242 0 173 4 242 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 10 9 1 132 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 5 9 0 164 1 21 0 167 1 5 0 168 1 9 0 171 10 13 0 186 7 101 0 191 1 21 0 194 7 101 0 195 7 101 0 196 7 101 0 197 10 17 1 39 1 161 1 56 1 161 1 57 1 161 1 58 10 21 1 124 2 109 1 125 2 109 1 126 2 109 1 127 2 121 1 130 2 125 1 131 10 25 1 141] 
#[0 4 246 0 8 0 156 0 159] 
#[1 10 29 0 8 10 33 0 159] 
#[0 10 37 0 18] 
#[1 10 41 0 18 10 45 0 66] 
#[1 10 49 0 2 10 53 0 5 10 57 0 6 10 61 0 8 10 65 0 10 10 69 0 14 10 73 0 16 10 77 0 17 10 81 0 19 10 85 0 20 10 89 0 46 10 93 0 48 10 97 0 53 10 101 0 72 10 105 0 73 10 109 0 74 10 113 0 103 10 117 0 130 10 121 0 154 10 125 1 48 10 129 1 50 10 133 1 52] 
#[1 10 109 0 74 10 113 0 103 10 117 0 130 10 121 0 154 10 137 1 52] 
#[1 10 69 0 14 10 73 0 16 10 77 0 17 10 81 0 19 10 85 0 20 10 89 0 46 10 93 0 48 10 141 1 48] 
#[1 10 109 0 74 10 113 0 103 10 117 0 130 10 121 0 154 10 145 1 52] 
#[0 10 149 0 18] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 10 153 0 191 1 21 0 194 10 153 0 195 10 153 0 196 10 153 0 197] 
#[0 10 157 0 18] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 10 161 0 181 10 165 0 191 1 21 0 194 10 165 0 195 10 165 0 196 10 165 0 197] 
#[0 4 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 254 0 1 4 254 0 3 4 254 0 4 4 254 0 5 4 254 0 7 2 43 0 9 4 254 0 11 4 254 0 13 4 254 0 22 4 254 0 23 4 254 0 28 4 254 0 29 4 254 0 30 4 254 0 31 4 254 0 32 4 254 0 33 4 254 0 34 4 254 0 35 4 254 0 36 4 254 0 37 4 254 0 38 4 254 0 39 4 254 0 40 4 254 0 41 4 254 0 43 4 254 0 45 4 254 0 49 4 254 0 55 4 254 0 56 4 254 0 58 4 254 0 59 4 254 0 64 4 254 0 66 4 254 0 67 4 254 0 69 4 254 0 75 4 254 0 78 4 254 0 79 4 254 0 84 4 254 0 86 4 254 0 88 4 254 0 90 4 254 0 91 4 254 0 93 4 254 0 94 4 254 0 98 4 254 0 100 4 254 0 101 4 254 0 102 4 254 0 104 4 254 0 107 4 254 0 108 4 254 0 109 4 254 0 110 4 254 0 114 4 254 0 117 4 254 0 118 4 254 0 123 4 254 0 125 4 254 0 128 4 254 0 133 4 254 0 134 4 254 0 135 4 254 0 136 4 254 0 140 4 254 0 142 4 254 0 144 4 254 0 145 4 254 0 150 4 254 0 151 4 254 0 162 4 254 0 167 4 254 0 168 4 254 0 171 4 254 0 172 4 254 0 173 8 41 0 225 4 254 1 144] 
#[0 5 2 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 10 41 0 18 10 169 0 44 10 45 0 66] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 5 6 0 11 5 6 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 47 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 5 6 0 84 1 21 0 86 1 21 0 90 1 21 0 91 5 6 0 98 5 6 0 100 5 6 0 101 1 21 0 109 1 21 0 117 1 21 0 118 5 6 0 123 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 5 6 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 51 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 2 55 0 172 5 6 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 10 177 1 38 5 73 1 39 5 77 1 40 10 177 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 10 177 1 47 5 109 1 49 5 113 1 51 10 177 1 53 10 177 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 10 181 1 66 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143 5 6 1 144] 
#[0 10 185 0 7] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 79 0 6 0 86 0 6 0 90 0 6 0 91 0 6 0 101 0 6 0 109 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 140 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 10 189 0 177 10 193 0 244] 
#[0 10 197 0 18] 
#[0 10 201 0 18] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 10 205 0 191 1 21 0 194 10 205 0 195 10 205 0 196 10 205 0 197] 
#[1 0 29 0 1 4 229 0 3 5 10 0 4 4 233 0 6 5 10 0 7 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 10 209 0 232 10 213 1 38 5 73 1 39 5 77 1 40 10 213 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 10 213 1 47 5 109 1 49 5 113 1 51 10 213 1 53 10 213 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 6 241 0 5 6 253 0 24] 
#[1 4 61 0 5 2 59 0 7 2 59 0 11 2 59 0 22 2 59 0 23 2 59 0 28 2 59 0 29 2 59 0 30 2 59 0 31 2 59 0 32 2 59 0 33 2 59 0 34 2 59 0 35 2 59 0 36 2 59 0 37 2 59 0 38 2 59 0 39 2 59 0 40 2 59 0 41 2 59 0 43 2 59 0 45 2 59 0 49 2 59 0 55 2 59 0 56 2 59 0 58 2 59 0 59 2 59 0 64 2 59 0 66 2 59 0 67 2 59 0 69 2 59 0 75 2 59 0 78 2 59 0 79 2 59 0 84 2 59 0 86 2 59 0 88 2 59 0 90 2 59 0 91 2 59 0 93 2 59 0 94 2 59 0 98 2 59 0 100 2 59 0 101 2 59 0 102 2 59 0 104 2 59 0 107 2 59 0 108 2 59 0 109 2 59 0 110 2 59 0 114 2 59 0 117 2 59 0 118 2 59 0 123 2 59 0 125 2 59 0 128 2 59 0 133 2 59 0 134 2 59 0 135 2 59 0 136 2 59 0 140 2 59 0 142 2 59 0 144 2 59 0 145 2 59 0 150 2 59 0 151 2 59 0 162 2 59 0 167 2 59 0 168 2 59 0 171 2 63 0 172 2 59 0 173 10 217 0 228 10 217 0 229 10 217 0 233 2 59 1 144] 
#[0 5 18 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 10 221 0 172 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 10 225 1 24] 
#[0 10 229 0 7] 
#[0 5 22 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 89 0 7 5 26 0 11 5 26 0 22 5 26 0 23 5 26 0 28 5 26 0 29 5 26 0 30 5 26 0 31 5 26 0 32 5 26 0 33 5 26 0 34 5 26 0 35 5 26 0 36 5 26 0 37 5 26 0 38 5 26 0 39 5 26 0 40 5 26 0 41 5 26 0 43 5 26 0 45 5 26 0 49 5 26 0 55 5 26 0 56 5 26 0 58 5 26 0 59 5 26 0 64 5 26 0 66 5 26 0 67 5 26 0 69 5 26 0 75 5 26 0 78 5 26 0 79 5 26 0 84 5 26 0 86 5 26 0 88 5 26 0 90 5 26 0 91 5 26 0 93 5 26 0 94 5 26 0 98 5 26 0 100 5 26 0 101 5 26 0 102 5 26 0 104 5 26 0 107 5 26 0 108 5 26 0 109 5 26 0 110 5 26 0 114 5 26 0 117 5 26 0 118 5 26 0 123 5 26 0 125 5 26 0 128 5 26 0 133 5 26 0 134 5 26 0 135 5 26 0 136 5 26 0 140 5 26 0 142 5 26 0 144 5 26 0 145 5 26 0 150 5 26 0 151 5 26 0 162 5 26 0 167 5 26 0 168 5 26 0 171 2 67 0 172 5 26 0 173 10 233 1 32 5 26 1 144] 
#[0 10 237 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 10 241 1 38 5 73 1 39 5 77 1 40 10 241 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 10 241 1 47 5 109 1 49 5 113 1 51 10 241 1 53 10 241 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 10 245 1 38 5 73 1 39 5 77 1 40 10 245 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 10 245 1 47 5 109 1 49 5 113 1 51 10 245 1 53 10 245 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 5 30 0 11 5 30 0 55 5 30 0 84 5 30 0 98 5 30 0 100 5 30 0 101 5 30 0 123 5 30 0 151 5 30 0 162 2 71 0 172 5 30 0 173 5 30 1 144] 
#[1 0 29 0 1 0 33 0 9 2 226 0 11 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 79 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 10 253 0 77 1 21 0 79 2 226 0 84 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 2 226 0 98 2 226 0 100 2 226 0 101 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 2 226 0 123 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 2 226 0 151 0 249 0 152 0 253 0 153 2 226 0 162 1 1 0 167 1 5 0 168 1 9 0 171 1 87 0 172 2 226 0 173 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 10 253 0 201 10 253 0 203 10 253 0 212 11 1 0 215 1 53 0 223 10 253 0 234 1 61 0 235 10 253 0 236 10 253 0 237 10 253 0 238 10 253 0 239 10 253 0 240 10 253 0 241 10 253 0 242 10 253 0 243 10 253 0 247 10 253 0 248 10 253 1 18 10 253 1 19 10 253 1 20 10 253 1 21 10 253 1 22 10 253 1 23 1 129 1 25 10 253 1 26 10 253 1 27 10 253 1 28 10 253 1 29 10 253 1 30 10 253 1 34 10 253 1 37 1 161 1 56 1 161 1 57 1 161 1 58 10 253 1 62 10 253 1 63 10 253 1 64 10 253 1 67 10 253 1 68 10 253 1 69 10 253 1 70 10 253 1 71 10 253 1 72 10 253 1 73 10 253 1 74 10 253 1 75 10 253 1 76 10 253 1 77 10 253 1 78 10 253 1 79 10 253 1 80 10 253 1 81 10 253 1 82 10 253 1 83 10 253 1 84 10 253 1 85 10 253 1 90 10 253 1 91 2 13 1 92 10 253 1 97 10 253 1 100 10 253 1 101 10 253 1 102 10 253 1 103 10 253 1 104 10 253 1 109 10 253 1 110 10 253 1 111 10 253 1 112 10 253 1 113 10 253 1 114 10 253 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 10 253 1 129 2 121 1 130 2 125 1 131 10 253 1 139 10 253 1 140 10 253 1 142] 
#[1 8 129 0 11 0 6 0 55 0 6 0 84 0 6 0 98 0 6 0 100 0 6 0 101 0 6 0 123 0 6 0 151 0 6 0 162 8 133 0 172 1 227 0 173 11 5 0 177 8 145 0 214 8 149 0 216 8 153 0 217] 
#[1 5 34 0 1 5 34 0 9 5 34 0 11 5 34 0 22 5 34 0 23 5 34 0 25 5 34 0 27 5 34 0 42 5 34 0 43 5 34 0 44 5 34 0 45 5 34 0 49 5 34 0 54 5 34 0 55 5 34 0 56 5 34 0 57 5 34 0 58 5 34 0 59 5 34 0 60 5 34 0 64 5 34 0 66 5 34 0 67 5 34 0 69 5 34 0 75 5 34 0 77 5 34 0 79 5 34 0 86 5 34 0 88 5 34 0 90 5 34 0 91 5 34 0 94 5 34 0 95 5 34 0 102 5 34 0 104 5 34 0 105 5 34 0 107 5 34 0 109 5 34 0 110 5 34 0 111 5 34 0 112 5 34 0 113 5 34 0 117 5 34 0 118 5 34 0 125 5 34 0 127 5 34 0 128 5 34 0 133 5 34 0 135 5 34 0 136 5 34 0 137 5 34 0 138 5 34 0 139 5 34 0 140 5 34 0 142 5 34 0 145 5 34 0 150 5 34 0 152 5 34 0 153 5 34 0 162 5 34 0 167 5 34 0 168 5 34 0 171 2 75 0 172 5 34 0 173] 
#[0 11 13 0 11] 
#[0 5 38 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 86 0 88 0 90 0 91 0 94 0 95 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 5 42 0 55 5 42 0 84 5 42 0 98 5 42 0 100 5 42 0 101 5 42 0 123 5 42 0 151 5 42 0 162 2 79 0 173] 
#[0 5 46 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173] 
#[0 5 50 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 86 0 88 0 90 0 91 0 94 0 95 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 8 129 0 11 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 11 25 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 3 225 0 162 1 1 0 167 1 5 0 168 1 9 0 171 11 17 0 172 8 137 0 173 11 21 0 182 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 11 25 0 201 11 25 0 203 11 25 0 212 11 29 0 216 1 53 0 223 11 25 0 234 1 61 0 235 11 25 0 236 11 25 0 237 11 25 0 238 11 25 0 239 11 25 0 240 11 25 0 241 11 25 0 242 11 25 0 243 11 25 0 247 11 25 0 248 11 25 1 18 11 25 1 19 11 25 1 20 11 25 1 21 11 25 1 22 11 25 1 23 1 129 1 25 11 25 1 26 11 25 1 27 11 25 1 28 11 25 1 29 11 25 1 30 11 25 1 34 11 25 1 37 1 161 1 56 1 161 1 57 1 161 1 58 11 25 1 62 11 25 1 63 11 25 1 64 11 25 1 67 11 25 1 68 11 25 1 69 11 25 1 70 11 25 1 71 11 25 1 72 11 25 1 73 11 25 1 74 11 25 1 75 11 25 1 76 11 25 1 77 11 25 1 78 11 25 1 79 11 25 1 80 11 25 1 81 11 25 1 82 11 25 1 83 11 25 1 84 11 25 1 85 11 25 1 90 11 25 1 91 2 13 1 92 11 25 1 97 11 25 1 100 11 25 1 101 11 25 1 102 11 25 1 103 11 25 1 104 11 25 1 109 11 25 1 110 11 25 1 111 11 25 1 112 11 25 1 113 11 25 1 114 11 25 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 11 25 1 129 2 121 1 130 2 125 1 131 11 25 1 139 11 25 1 140 11 25 1 142] 
#[1 11 33 0 148 11 37 0 152] 
#[0 11 41 0 123] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 79 0 6 0 86 0 6 0 90 0 6 0 91 0 6 0 101 0 6 0 109 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 140 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 11 45 0 177 11 49 0 249] 
#[1 11 53 0 4 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 9 61 0 81 11 73 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 11 57 0 129 11 61 0 131 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 11 65 0 172 11 69 0 191 1 21 0 194 11 69 0 195 11 69 0 196 11 69 0 197 11 73 0 252 11 77 1 0] 
#[1 8 169 0 3 11 81 0 253] 
#[0 5 54 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 11 85 0 7 5 58 0 11 5 58 0 55 5 58 0 84 5 58 0 98 5 58 0 100 5 58 0 101 5 58 0 123 5 58 0 151 5 58 0 162 2 83 0 172 5 58 0 173 11 93 1 107 5 58 1 144] 
#[1 10 41 0 18 10 45 0 66 11 97 0 146 11 101 0 147] 
#[1 10 41 0 18 11 105 0 24 10 45 0 66] 
#[1 0 181 0 112 11 109 0 137 11 113 1 109] 
#[1 10 41 0 18 10 45 0 66 0 177 0 111 0 181 0 112 11 117 1 104 11 117 1 109 11 117 1 110] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 121 1 38 5 73 1 39 5 77 1 40 11 121 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 121 1 47 5 109 1 49 5 113 1 51 11 121 1 53 11 121 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 6 185 0 191 1 21 0 194 6 185 0 195 6 185 0 196 6 185 0 197 11 125 1 24 11 129 1 31 11 133 1 38 5 73 1 39 5 77 1 40 11 133 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 133 1 47 5 109 1 49 5 113 1 51 11 133 1 53 11 133 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 6 241 0 5 10 37 0 18 6 253 0 24] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 137 1 38 5 73 1 39 5 77 1 40 11 137 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 137 1 47 5 109 1 49 5 113 1 51 11 137 1 53 11 137 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 5 62 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 11 141 0 172] 
#[1 11 145 0 151 3 225 0 162 11 149 0 182] 
#[1 11 153 0 101 3 225 0 162 11 157 0 182] 
#[0 11 161 0 172] 
#[1 5 66 0 3 5 66 0 4 5 66 0 5 5 66 0 7 5 66 0 11 5 66 0 22 5 66 0 23 5 66 0 28 5 66 0 29 5 66 0 30 5 66 0 31 5 66 0 32 5 66 0 33 5 66 0 34 5 66 0 35 5 66 0 36 5 66 0 37 5 66 0 38 5 66 0 39 5 66 0 40 5 66 0 41 5 66 0 43 5 66 0 45 5 66 0 49 5 66 0 55 5 66 0 56 5 66 0 58 5 66 0 59 5 66 0 64 5 66 0 66 5 66 0 67 5 66 0 69 5 66 0 75 5 66 0 78 5 66 0 79 5 66 0 84 5 66 0 86 5 66 0 88 5 66 0 90 5 66 0 91 5 66 0 93 5 66 0 94 5 66 0 98 5 66 0 100 5 66 0 101 5 66 0 102 5 66 0 104 5 66 0 107 5 66 0 108 5 66 0 109 5 66 0 110 5 66 0 114 5 66 0 117 5 66 0 118 5 66 0 123 5 66 0 125 5 66 0 128 5 66 0 133 5 66 0 134 5 66 0 135 5 66 0 136 5 66 0 140 5 66 0 142 5 66 0 144 5 66 0 145 5 66 0 150 5 66 0 151 5 66 0 162 5 66 0 167 5 66 0 168 5 66 0 171 2 87 0 172 5 66 0 173 5 66 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 165 1 38 5 73 1 39 5 77 1 40 11 165 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 165 1 47 5 109 1 49 5 113 1 51 11 165 1 53 11 165 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 5 70 0 3 5 70 0 4 5 70 0 5 5 70 0 7 5 70 0 11 5 70 0 22 5 70 0 23 5 70 0 28 5 70 0 29 5 70 0 30 5 70 0 31 5 70 0 32 5 70 0 33 5 70 0 34 5 70 0 35 5 70 0 36 5 70 0 37 5 70 0 38 5 70 0 39 5 70 0 40 5 70 0 41 5 70 0 43 5 70 0 45 5 70 0 49 5 70 0 55 5 70 0 56 5 70 0 58 5 70 0 59 5 70 0 64 5 70 0 66 5 70 0 67 5 70 0 69 5 70 0 75 5 70 0 78 5 70 0 79 5 70 0 84 5 70 0 86 5 70 0 88 5 70 0 90 5 70 0 91 5 70 0 93 5 70 0 94 5 70 0 98 5 70 0 100 5 70 0 101 5 70 0 102 5 70 0 104 5 70 0 107 5 70 0 108 5 70 0 109 5 70 0 110 5 70 0 114 5 70 0 117 5 70 0 118 5 70 0 123 5 70 0 125 5 70 0 128 5 70 0 133 5 70 0 134 5 70 0 135 5 70 0 136 5 70 0 140 5 70 0 142 5 70 0 144 5 70 0 145 5 70 0 150 5 70 0 151 5 70 0 162 5 70 0 167 5 70 0 168 5 70 0 171 2 91 0 172 5 70 0 173 5 70 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 169 1 38 5 73 1 39 5 77 1 40 11 169 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 169 1 47 5 109 1 49 5 113 1 51 11 169 1 53 11 169 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 173 1 38 5 73 1 39 5 77 1 40 11 173 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 173 1 47 5 109 1 49 5 113 1 51 11 173 1 53 11 173 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 5 169 0 9 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 11 177 0 54 1 21 0 55 5 173 0 56 1 21 0 58 1 21 0 59 5 177 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 11 181 0 80 11 181 0 82 5 189 0 86 11 181 0 89 1 21 0 90 5 197 0 91 11 181 0 92 11 181 0 96 1 21 0 109 11 181 0 116 1 21 0 117 1 21 0 118 11 181 0 120 11 181 0 121 11 181 0 122 1 21 0 125 1 21 0 140 11 181 0 141 1 21 0 145 5 229 0 149 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 5 233 0 191 1 21 0 194 5 233 0 195 5 233 0 196 5 233 0 197 11 181 0 221 5 241 0 222 11 181 0 224 5 249 0 225 5 253 0 226 11 181 0 227] 
#[0 11 185 0 172] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 11 189 0 191 1 21 0 194 11 189 0 195 11 189 0 196 11 189 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 11 193 1 25 11 197 1 34] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 11 201 0 191 1 21 0 194 11 201 0 195 11 201 0 196 11 201 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 11 205 0 191 1 21 0 194 11 205 0 195 11 205 0 196 11 205 0 197] 
#[1 11 209 0 12 11 213 0 18] 
#[1 11 217 0 12 11 221 0 18] 
#[0 5 74 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 11 225 1 25] 
#[0 5 78 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 229 1 38 5 73 1 39 5 77 1 40 11 229 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 229 1 47 5 109 1 49 5 113 1 51 11 229 1 53 11 229 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 11 233 1 38 5 73 1 39 5 77 1 40 11 233 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 11 233 1 47 5 109 1 49 5 113 1 51 11 233 1 53 11 233 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 5 82 0 1 5 82 0 3 5 82 0 4 5 82 0 6 5 82 0 7 5 82 0 8 5 82 0 9 5 82 0 11 5 82 0 13 5 82 0 22 5 82 0 23 5 82 0 25 5 82 0 43 5 82 0 45 5 82 0 49 5 82 0 54 5 82 0 55 5 82 0 56 5 82 0 58 5 82 0 59 5 82 0 64 5 82 0 66 5 82 0 67 5 82 0 68 5 82 0 69 5 82 0 79 5 82 0 81 5 82 0 83 5 82 0 84 5 82 0 86 5 82 0 90 5 82 0 91 5 82 0 98 5 82 0 100 5 82 0 101 5 82 0 109 5 82 0 117 5 82 0 118 5 82 0 123 5 82 0 125 5 82 0 126 5 82 0 131 5 82 0 140 5 82 0 145 5 82 0 150 5 82 0 151 5 82 0 155 5 82 0 160 5 82 0 161 5 82 0 162 5 82 0 163 5 82 0 164 5 82 0 165 5 82 0 166 5 82 0 167 5 82 0 168 5 82 0 170 5 82 0 171 2 95 0 172 5 82 0 173 5 82 1 144] 
#[1 5 86 0 1 5 86 0 3 5 86 0 4 5 86 0 6 5 86 0 7 5 86 0 8 5 86 0 9 5 86 0 11 5 86 0 13 5 86 0 22 5 86 0 23 5 86 0 25 5 86 0 43 5 86 0 45 5 86 0 49 5 86 0 54 5 86 0 55 5 86 0 56 5 86 0 58 5 86 0 59 5 86 0 64 5 86 0 66 5 86 0 67 5 86 0 68 5 86 0 69 5 86 0 79 5 86 0 81 5 86 0 83 5 86 0 84 5 86 0 86 5 86 0 90 5 86 0 91 5 86 0 98 5 86 0 100 5 86 0 101 5 86 0 109 5 86 0 117 5 86 0 118 5 86 0 123 5 86 0 125 5 86 0 126 5 86 0 131 5 86 0 140 5 86 0 145 5 86 0 150 5 86 0 151 5 86 0 155 5 86 0 160 5 86 0 161 5 86 0 162 5 86 0 163 5 86 0 164 5 86 0 165 5 86 0 166 5 86 0 167 5 86 0 168 5 86 0 170 5 86 0 171 2 99 0 172 5 86 0 173 5 86 1 144] 
#[0 5 90 0 172] 
#[0 5 94 0 172] 
#[0 11 245 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 11 249 0 7 4 237 0 8 0 33 0 9 11 253 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 12 1 1 132 5 153 1 141 5 153 1 143] 
#[1 0 162 0 1 2 103 0 3 3 102 0 4 3 102 0 5 3 102 0 7 0 162 0 9 3 102 0 11 3 102 0 13 3 102 0 22 3 102 0 23 3 102 0 28 3 102 0 29 3 102 0 30 3 102 0 31 3 102 0 32 3 102 0 33 3 102 0 34 3 102 0 35 3 102 0 36 3 102 0 37 3 102 0 38 3 102 0 39 3 102 0 40 3 102 0 41 3 102 0 43 3 102 0 45 3 102 0 49 3 102 0 55 3 102 0 56 3 102 0 58 3 102 0 59 3 102 0 64 3 102 0 66 3 102 0 67 3 102 0 69 3 102 0 75 3 102 0 78 3 102 0 79 3 102 0 84 3 102 0 86 3 102 0 88 3 102 0 90 3 102 0 91 3 102 0 93 3 102 0 94 3 102 0 98 3 102 0 100 3 102 0 101 3 102 0 102 3 102 0 104 3 102 0 107 3 102 0 108 3 102 0 109 3 102 0 110 3 102 0 114 3 102 0 117 3 102 0 118 3 102 0 123 3 102 0 125 3 102 0 128 3 102 0 133 3 102 0 134 3 102 0 135 3 102 0 136 3 102 0 140 3 102 0 142 3 102 0 144 3 102 0 145 3 102 0 150 3 102 0 151 3 102 0 162 3 102 0 167 3 102 0 168 3 102 0 171 2 107 0 172 3 102 0 173 3 102 1 144] 
#[0 5 98 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 9 0 172] 
#[1 5 102 0 3 5 102 0 4 5 102 0 5 5 102 0 7 5 102 0 11 5 102 0 13 5 102 0 22 5 102 0 23 5 102 0 28 5 102 0 29 5 102 0 30 5 102 0 31 5 102 0 32 5 102 0 33 5 102 0 34 5 102 0 35 5 102 0 36 5 102 0 37 5 102 0 38 5 102 0 39 5 102 0 40 5 102 0 41 5 102 0 43 5 102 0 45 5 102 0 49 5 102 0 55 5 102 0 56 5 102 0 58 5 102 0 59 5 102 0 64 5 102 0 66 5 102 0 67 5 102 0 69 5 102 0 75 5 102 0 78 5 102 0 79 5 102 0 84 5 102 0 86 5 102 0 88 5 102 0 90 5 102 0 91 5 102 0 93 5 102 0 94 5 102 0 98 5 102 0 100 5 102 0 101 5 102 0 102 5 102 0 104 5 102 0 107 5 102 0 108 5 102 0 109 5 102 0 110 5 102 0 114 5 102 0 117 5 102 0 118 5 102 0 123 5 102 0 125 5 102 0 128 5 102 0 133 5 102 0 134 5 102 0 135 5 102 0 136 5 102 0 140 5 102 0 142 5 102 0 144 5 102 0 145 5 102 0 150 5 102 0 151 5 102 0 162 5 102 0 167 5 102 0 168 5 102 0 171 2 111 0 172 5 102 0 173 5 102 1 144] 
#[1 4 105 0 1 4 109 0 9 2 115 0 172] 
#[1 4 194 0 4 12 13 0 7 4 194 0 11 2 119 0 13 4 194 0 55 4 194 0 84 4 194 0 98 4 194 0 100 4 194 0 101 4 194 0 123 4 194 0 151 4 194 0 162 4 194 0 172 4 194 0 173 12 21 1 137 4 194 1 144] 
#[0 5 106 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 5 110 0 4 12 25 0 7 5 110 0 11 12 29 0 13 5 110 0 55 5 110 0 84 5 110 0 98 5 110 0 100 5 110 0 101 5 110 0 123 5 110 0 151 5 110 0 162 2 123 0 172 5 110 0 173 12 37 1 136 5 110 1 144] 
#[1 12 41 0 4 12 45 0 172] 
#[0 5 114 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 49 0 4] 
#[1 0 6 0 101 2 127 0 173 12 53 0 177 12 57 0 205 12 61 0 207] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 65 0 191 1 21 0 194 12 65 0 195 12 65 0 196 12 65 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 69 0 191 1 21 0 194 12 69 0 195 12 69 0 196 12 69 0 197] 
#[1 8 169 0 3 12 73 0 253] 
#[1 0 174 0 3 4 61 0 5 12 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 12 89 1 11] 
#[1 12 93 0 26 12 97 0 90 12 101 0 145] 
#[0 12 105 0 124] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 109 0 191 1 21 0 194 12 109 0 195 12 109 0 196 12 109 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 113 0 191 1 21 0 194 12 113 0 195 12 113 0 196 12 113 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 117 0 191 1 21 0 194 12 117 0 195 12 117 0 196 12 117 0 197] 
#[1 8 169 0 3 12 129 0 172 2 135 0 173 12 125 0 253 12 129 1 13] 
#[1 12 133 0 172 4 214 0 173 12 133 1 13] 
#[1 3 233 0 173 3 241 0 207 12 137 0 213] 
#[0 12 141 0 172] 
#[0 5 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 145 0 172] 
#[0 5 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 12 149 1 38 5 73 1 39 5 77 1 40 12 149 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 12 149 1 47 5 109 1 49 5 113 1 51 12 149 1 53 12 149 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 12 153 0 108 12 157 0 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 161 0 191 1 21 0 194 12 161 0 195 12 161 0 196 12 161 0 197] 
#[1 12 165 0 109 12 169 0 118 12 173 0 140] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 177 0 191 1 21 0 194 12 177 0 195 12 177 0 196 12 177 0 197] 
#[1 12 181 0 108 12 185 0 134 12 189 0 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 193 0 191 1 21 0 194 12 193 0 195 12 193 0 196 12 193 0 197] 
#[1 12 197 0 109 12 201 0 118 12 205 0 140] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 12 209 0 191 1 21 0 194 12 209 0 195 12 209 0 196 12 209 0 197] 
#[0 5 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 138 0 22 5 138 0 23 5 138 0 28 5 138 0 29 5 138 0 30 5 138 0 31 5 138 0 32 5 138 0 33 5 138 0 34 5 138 0 35 5 138 0 36 5 138 0 37 5 138 0 38 5 138 0 39 5 138 0 40 5 138 0 41 5 138 0 43 5 138 0 45 5 138 0 49 5 138 0 55 5 138 0 56 5 138 0 58 5 138 0 59 5 138 0 64 5 138 0 66 5 138 0 67 5 138 0 69 5 138 0 75 5 138 0 78 5 138 0 79 12 213 0 85 5 138 0 86 5 138 0 88 5 138 0 90 5 138 0 91 5 138 0 93 5 138 0 94 5 138 0 102 5 138 0 104 5 138 0 107 5 138 0 108 5 138 0 109 5 138 0 110 5 138 0 114 5 138 0 117 5 138 0 118 5 138 0 125 5 138 0 128 5 138 0 133 5 138 0 134 5 138 0 135 5 138 0 136 5 138 0 140 5 138 0 142 5 138 0 144 5 138 0 145 5 138 0 150 5 138 0 167 5 138 0 168 5 138 0 171 5 138 0 172 5 138 0 173 5 138 1 144] 
#[1 1 21 0 22 1 21 0 23 3 29 0 28 3 29 0 29 3 29 0 30 3 29 0 31 3 29 0 32 3 29 0 33 3 29 0 34 3 29 0 35 3 29 0 36 3 29 0 37 3 29 0 38 3 29 0 39 3 29 0 40 3 29 0 41 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 2 209 0 78 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 2 213 0 93 0 145 0 94 0 153 0 102 0 157 0 104 3 41 0 107 2 217 0 108 1 21 0 109 3 41 0 110 2 221 0 114 1 21 0 117 1 21 0 118 1 21 0 125 2 233 0 128 3 41 0 133 2 237 0 134 3 41 0 135 0 217 0 136 1 21 0 140 2 245 0 142 2 249 0 144 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 1 0 172 3 113 0 173 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 7 193 0 200 7 193 0 201 7 193 0 203 7 193 0 204 7 193 0 208 3 29 0 209 7 193 0 210 7 193 0 211 3 41 0 223 7 193 0 242 7 193 0 243 7 193 0 247 7 193 0 248 7 193 1 5 7 193 1 6 7 193 1 7 3 61 1 8 7 193 1 9 7 193 1 12 7 193 1 14 7 193 1 15 7 193 1 16 7 193 1 17 7 193 1 18 7 193 1 19 7 193 1 20 7 193 1 21 7 193 1 22 7 193 1 23 1 129 1 25 7 193 1 26 7 193 1 27 7 193 1 28 7 193 1 29 7 193 1 30 7 193 1 34 7 193 1 37 5 142 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 75 0 6 0 78 0 6 0 79 0 6 0 86 0 6 0 88 0 6 0 90 0 6 0 91 0 6 0 93 0 6 0 94 0 6 0 102 0 6 0 104 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 110 0 6 0 114 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 128 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 136 0 6 0 140 0 6 0 142 0 6 0 144 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 12 217 0 177 4 189 0 178 0 6 1 144] 
#[1 12 221 0 4 12 225 0 172] 
#[0 5 146 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 12 229 0 4 10 41 0 18 10 45 0 66] 
#[0 5 150 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 105 0 1 5 158 0 3 5 158 0 4 5 158 0 5 5 158 0 7 4 109 0 9 5 158 0 11 5 158 0 13 5 158 0 22 5 158 0 23 5 158 0 28 5 158 0 29 5 158 0 30 5 158 0 31 5 158 0 32 5 158 0 33 5 158 0 34 5 158 0 35 5 158 0 36 5 158 0 37 5 158 0 38 5 158 0 39 5 158 0 40 5 158 0 41 5 158 0 43 5 158 0 45 5 158 0 49 5 158 0 55 5 158 0 56 5 158 0 58 5 158 0 59 5 158 0 64 5 158 0 66 5 158 0 67 5 158 0 69 5 158 0 75 5 158 0 78 5 158 0 79 5 158 0 84 5 158 0 86 5 158 0 88 5 158 0 90 5 158 0 91 5 158 0 93 5 158 0 94 5 158 0 98 5 158 0 100 5 158 0 101 5 158 0 102 5 158 0 104 5 158 0 107 5 158 0 108 5 158 0 109 5 158 0 110 5 158 0 114 5 158 0 117 5 158 0 118 5 158 0 123 5 158 0 125 5 158 0 128 5 158 0 133 5 158 0 134 5 158 0 135 5 158 0 136 5 158 0 140 5 158 0 142 5 158 0 144 5 158 0 145 5 158 0 150 5 158 0 151 5 158 0 162 5 158 0 167 5 158 0 168 5 158 0 171 5 158 0 172 5 158 0 173 5 158 1 144] 
#[0 12 233 0 172] 
#[0 5 162 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 166 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 105 0 1 5 170 0 3 5 170 0 4 5 170 0 5 5 170 0 7 4 109 0 9 5 170 0 11 5 170 0 13 5 170 0 22 5 170 0 23 5 170 0 28 5 170 0 29 5 170 0 30 5 170 0 31 5 170 0 32 5 170 0 33 5 170 0 34 5 170 0 35 5 170 0 36 5 170 0 37 5 170 0 38 5 170 0 39 5 170 0 40 5 170 0 41 5 170 0 43 5 170 0 45 5 170 0 49 5 170 0 55 5 170 0 56 5 170 0 58 5 170 0 59 5 170 0 64 5 170 0 66 5 170 0 67 5 170 0 69 5 170 0 75 5 170 0 78 5 170 0 79 5 170 0 84 5 170 0 86 5 170 0 88 5 170 0 90 5 170 0 91 5 170 0 93 5 170 0 94 5 170 0 98 5 170 0 100 5 170 0 101 5 170 0 102 5 170 0 104 5 170 0 107 5 170 0 108 5 170 0 109 5 170 0 110 5 170 0 114 5 170 0 117 5 170 0 118 5 170 0 123 5 170 0 125 5 170 0 128 5 170 0 133 5 170 0 134 5 170 0 135 5 170 0 136 5 170 0 140 5 170 0 142 5 170 0 144 5 170 0 145 5 170 0 150 5 170 0 151 5 170 0 162 5 170 0 167 5 170 0 168 5 170 0 171 5 170 0 172 5 170 0 173 5 170 1 144] 
#[0 5 174 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 241 0 159 12 237 0 190] 
#[0 5 178 0 8 0 156 0 159] 
#[0 12 241 0 172] 
#[0 12 245 0 172] 
#[0 12 249 0 172] 
#[0 12 253 0 172] 
#[0 5 182 0 172] 
#[0 5 186 0 172] 
#[0 5 190 0 172] 
#[0 5 194 0 172] 
#[0 5 198 0 172] 
#[0 5 202 0 172] 
#[0 5 206 0 172] 
#[0 5 210 0 172] 
#[0 5 214 0 172] 
#[0 5 218 0 172] 
#[0 5 222 0 172] 
#[0 5 226 0 172] 
#[0 5 230 0 172] 
#[0 5 234 0 172] 
#[0 5 238 0 172] 
#[0 5 242 0 172] 
#[0 5 246 0 172] 
#[0 5 250 0 172] 
#[0 13 1 0 172] 
#[0 13 5 0 172] 
#[0 13 9 0 172] 
#[0 13 13 0 172] 
#[0 13 17 0 172] 
#[0 13 21 0 172] 
#[0 13 25 0 172] 
#[0 13 29 0 172] 
#[0 13 33 0 172] 
#[1 13 37 0 7 13 41 0 172] 
#[1 13 45 0 7 13 49 0 172] 
#[0 13 53 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 5 6 0 11 5 6 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 47 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 5 6 0 84 1 21 0 86 1 21 0 90 1 21 0 91 5 6 0 98 5 6 0 100 5 6 0 101 1 21 0 109 1 21 0 117 1 21 0 118 5 6 0 123 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 5 6 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 51 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 6 0 172 5 6 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 13 57 1 38 5 73 1 39 5 77 1 40 13 57 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 13 57 1 47 5 109 1 49 5 113 1 51 13 57 1 53 13 57 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 13 61 1 66 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143 5 6 1 144] 
#[1 5 6 0 11 5 6 0 13 5 6 0 55 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 2 139 0 172 5 6 0 173 13 69 1 66 5 6 1 144] 
#[1 5 254 0 11 13 73 0 13 5 254 0 55 5 254 0 84 5 254 0 98 5 254 0 100 5 254 0 101 5 254 0 123 5 254 0 151 5 254 0 162 5 254 0 172 5 254 0 173 13 77 1 65 5 254 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 5 6 0 11 5 6 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 47 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 5 6 0 84 1 21 0 86 1 21 0 90 1 21 0 91 5 6 0 98 5 6 0 100 5 6 0 101 1 21 0 109 1 21 0 117 1 21 0 118 5 6 0 123 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 5 6 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 51 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 2 143 0 172 5 6 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 13 85 1 38 5 73 1 39 5 77 1 40 13 85 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 13 85 1 47 5 109 1 49 5 113 1 51 13 85 1 53 13 85 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 13 89 1 66 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143 5 6 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 13 93 0 101 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 113 0 173 13 97 0 191 1 21 0 194 13 97 0 195 13 97 0 196 13 97 0 197 13 101 0 246] 
#[0 6 2 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[0 13 105 0 172] 
#[0 13 109 0 172] 
#[1 8 73 0 3 4 61 0 5 2 147 0 7 2 147 0 11 2 147 0 22 2 147 0 23 2 147 0 28 2 147 0 29 2 147 0 30 2 147 0 31 2 147 0 32 2 147 0 33 2 147 0 34 2 147 0 35 2 147 0 36 2 147 0 37 2 147 0 38 2 147 0 39 2 147 0 40 2 147 0 41 2 147 0 43 2 147 0 45 2 147 0 49 2 147 0 55 2 147 0 56 2 147 0 58 2 147 0 59 2 147 0 64 2 147 0 66 2 147 0 67 2 147 0 69 2 147 0 75 2 147 0 78 2 147 0 79 2 147 0 84 2 147 0 86 2 147 0 88 2 147 0 90 2 147 0 91 2 147 0 93 2 147 0 94 2 147 0 98 2 147 0 100 2 147 0 101 2 147 0 102 2 147 0 104 2 147 0 107 2 147 0 108 2 147 0 109 2 147 0 110 2 147 0 114 2 147 0 117 2 147 0 118 2 147 0 123 2 147 0 125 2 147 0 128 2 147 0 133 2 147 0 134 2 147 0 135 2 147 0 136 2 147 0 140 2 147 0 142 2 147 0 144 2 147 0 145 2 147 0 150 2 147 0 151 2 147 0 162 2 147 0 167 2 147 0 168 2 147 0 171 2 151 0 172 2 147 0 173 13 117 0 228 13 117 0 229 13 113 0 230 13 117 0 233 2 147 1 144] 
#[1 13 121 0 4 13 125 0 7 13 129 0 231] 
#[1 5 10 0 4 5 10 0 7 7 253 0 172 13 133 0 232] 
#[0 6 10 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 13 137 1 24] 
#[0 6 14 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 13 141 0 172 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 13 145 1 24] 
#[0 6 18 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 13 149 1 38 5 73 1 39 5 77 1 40 13 149 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 13 149 1 47 5 109 1 49 5 113 1 51 13 149 1 53 13 149 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 7 253 0 172 3 233 0 173 3 241 0 207 13 153 0 213] 
#[1 13 157 0 123 3 225 0 162 7 253 0 172 3 233 0 173 13 161 0 182 3 241 0 207 13 165 0 213] 
#[0 13 169 0 152] 
#[1 2 226 0 11 2 226 0 55 2 226 0 84 2 226 0 98 2 226 0 100 2 226 0 101 2 226 0 123 2 226 0 151 2 226 0 162 2 226 0 172 2 226 0 173 13 173 0 215] 
#[1 8 129 0 11 0 6 0 55 0 6 0 84 0 6 0 98 0 6 0 100 0 6 0 101 0 6 0 123 0 6 0 151 0 6 0 162 8 133 0 172 1 227 0 173 13 177 0 177 8 145 0 214 8 149 0 216 8 153 0 217] 
#[1 6 22 0 55 6 22 0 84 6 22 0 98 6 22 0 100 6 22 0 101 6 22 0 123 6 22 0 151 6 22 0 162 2 155 0 173] 
#[0 6 26 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 86 0 88 0 90 0 91 0 94 0 95 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 6 30 0 1 6 30 0 9 6 30 0 11 6 30 0 22 6 30 0 23 6 30 0 25 6 30 0 27 6 30 0 42 6 30 0 43 6 30 0 44 6 30 0 45 6 30 0 49 6 30 0 54 6 30 0 55 6 30 0 56 6 30 0 57 6 30 0 58 6 30 0 59 6 30 0 60 6 30 0 64 6 30 0 66 6 30 0 67 6 30 0 69 6 30 0 75 6 30 0 77 6 30 0 79 6 30 0 86 6 30 0 88 6 30 0 90 6 30 0 91 6 30 0 94 6 30 0 95 6 30 0 102 6 30 0 104 6 30 0 105 6 30 0 107 6 30 0 109 6 30 0 110 6 30 0 111 6 30 0 112 6 30 0 113 6 30 0 117 6 30 0 118 6 30 0 125 6 30 0 127 6 30 0 128 6 30 0 133 6 30 0 135 6 30 0 136 6 30 0 137 6 30 0 138 6 30 0 139 6 30 0 140 6 30 0 142 6 30 0 145 6 30 0 150 6 30 0 152 6 30 0 153 6 30 0 162 6 30 0 167 6 30 0 168 6 30 0 171 2 159 0 172 6 30 0 173] 
#[1 11 13 0 11 4 57 0 128] 
#[0 13 185 0 172] 
#[0 6 34 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173] 
#[0 6 38 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 86 0 88 0 90 0 91 0 94 0 95 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 13 189 0 172] 
#[0 13 193 0 172] 
#[1 6 42 0 11 6 42 0 55 6 42 0 84 6 42 0 98 6 42 0 100 6 42 0 101 6 42 0 123 6 42 0 151 6 42 0 162 2 163 0 172 6 42 0 173 6 42 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 13 201 0 101 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 113 0 173 13 205 0 191 1 21 0 194 13 205 0 195 13 205 0 196 13 205 0 197 13 209 0 251] 
#[0 6 46 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[0 6 50 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 13 213 0 172] 
#[0 13 217 0 172] 
#[0 13 221 0 4] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 13 237 0 228 13 237 0 229 13 225 0 230 13 237 0 233 13 237 1 1 13 237 1 2] 
#[0 13 241 0 172] 
#[1 6 58 0 4 6 58 0 7 6 58 0 172 13 245 0 255] 
#[0 6 62 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 13 249 0 172 13 253 0 182 13 253 0 191 1 21 0 194 13 253 0 195 13 253 0 196 13 253 0 197 13 253 1 43 13 253 1 105] 
#[0 14 1 0 7] 
#[0 6 66 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 14 5 0 172 3 233 0 173 3 241 0 207 14 9 0 213 14 13 0 218] 
#[1 14 5 0 172 14 17 0 173 14 21 0 218] 
#[0 14 25 0 172] 
#[0 14 29 0 172] 
#[0 6 70 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 6 74 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 6 78 0 11 6 78 0 22 6 78 0 23 6 78 0 28 6 78 0 29 6 78 0 30 6 78 0 31 6 78 0 32 6 78 0 33 6 78 0 34 6 78 0 35 6 78 0 36 6 78 0 37 6 78 0 38 6 78 0 39 6 78 0 40 6 78 0 41 6 78 0 43 6 78 0 45 6 78 0 49 6 78 0 55 6 78 0 56 6 78 0 58 6 78 0 59 6 78 0 64 6 78 0 66 6 78 0 67 6 78 0 69 6 78 0 75 6 78 0 78 6 78 0 79 6 78 0 84 6 78 0 86 6 78 0 88 6 78 0 90 6 78 0 91 6 78 0 93 6 78 0 94 6 78 0 98 6 78 0 100 6 78 0 101 6 78 0 102 6 78 0 104 6 78 0 107 6 78 0 108 6 78 0 109 6 78 0 110 6 78 0 114 6 78 0 117 6 78 0 118 6 78 0 123 6 78 0 125 6 78 0 128 6 78 0 133 6 78 0 134 6 78 0 135 6 78 0 136 6 78 0 140 6 78 0 142 6 78 0 144 6 78 0 145 6 78 0 150 6 78 0 151 6 78 0 162 6 78 0 167 6 78 0 168 6 78 0 171 2 175 0 172 6 78 0 173 6 78 1 144] 
#[1 8 89 0 7 6 82 0 11 6 82 0 22 6 82 0 23 6 82 0 28 6 82 0 29 6 82 0 30 6 82 0 31 6 82 0 32 6 82 0 33 6 82 0 34 6 82 0 35 6 82 0 36 6 82 0 37 6 82 0 38 6 82 0 39 6 82 0 40 6 82 0 41 6 82 0 43 6 82 0 45 6 82 0 49 6 82 0 55 6 82 0 56 6 82 0 58 6 82 0 59 6 82 0 64 6 82 0 66 6 82 0 67 6 82 0 69 6 82 0 75 6 82 0 78 6 82 0 79 6 82 0 84 6 82 0 86 6 82 0 88 6 82 0 90 6 82 0 91 6 82 0 93 6 82 0 94 6 82 0 98 6 82 0 100 6 82 0 101 6 82 0 102 6 82 0 104 6 82 0 107 6 82 0 108 6 82 0 109 6 82 0 110 6 82 0 114 6 82 0 117 6 82 0 118 6 82 0 123 6 82 0 125 6 82 0 128 6 82 0 133 6 82 0 134 6 82 0 135 6 82 0 136 6 82 0 140 6 82 0 142 6 82 0 144 6 82 0 145 6 82 0 150 6 82 0 151 6 82 0 162 6 82 0 167 6 82 0 168 6 82 0 171 2 179 0 172 6 82 0 173 8 97 1 32 8 101 1 33 6 82 1 144] 
#[0 6 86 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 90 0 11 6 90 0 22 6 90 0 23 6 90 0 28 6 90 0 29 6 90 0 30 6 90 0 31 6 90 0 32 6 90 0 33 6 90 0 34 6 90 0 35 6 90 0 36 6 90 0 37 6 90 0 38 6 90 0 39 6 90 0 40 6 90 0 41 6 90 0 43 6 90 0 45 6 90 0 49 6 90 0 55 6 90 0 56 6 90 0 58 6 90 0 59 6 90 0 64 6 90 0 66 6 90 0 67 6 90 0 69 6 90 0 75 6 90 0 78 6 90 0 79 6 90 0 84 6 90 0 86 6 90 0 88 6 90 0 90 6 90 0 91 6 90 0 93 6 90 0 94 6 90 0 98 6 90 0 100 6 90 0 101 6 90 0 102 6 90 0 104 6 90 0 107 6 90 0 108 6 90 0 109 6 90 0 110 6 90 0 114 6 90 0 117 6 90 0 118 6 90 0 123 6 90 0 125 6 90 0 128 6 90 0 133 6 90 0 134 6 90 0 135 6 90 0 136 6 90 0 140 6 90 0 142 6 90 0 144 6 90 0 145 6 90 0 150 6 90 0 151 6 90 0 162 6 90 0 167 6 90 0 168 6 90 0 171 2 183 0 172 6 90 0 173 6 90 1 144] 
#[1 7 253 0 172 3 233 0 173 14 33 0 207] 
#[0 14 37 0 151] 
#[0 6 94 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 14 41 0 172] 
#[0 14 45 0 172] 
#[0 14 49 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 14 53 1 38 5 73 1 39 5 77 1 40 14 53 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 14 53 1 47 5 109 1 49 5 113 1 51 14 53 1 53 14 53 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 6 98 0 3 6 98 0 4 6 98 0 5 6 98 0 7 6 98 0 11 6 98 0 22 6 98 0 23 6 98 0 28 6 98 0 29 6 98 0 30 6 98 0 31 6 98 0 32 6 98 0 33 6 98 0 34 6 98 0 35 6 98 0 36 6 98 0 37 6 98 0 38 6 98 0 39 6 98 0 40 6 98 0 41 6 98 0 43 6 98 0 45 6 98 0 49 6 98 0 55 6 98 0 56 6 98 0 58 6 98 0 59 6 98 0 64 6 98 0 66 6 98 0 67 6 98 0 69 6 98 0 75 6 98 0 78 6 98 0 79 6 98 0 84 6 98 0 86 6 98 0 88 6 98 0 90 6 98 0 91 6 98 0 93 6 98 0 94 6 98 0 98 6 98 0 100 6 98 0 101 6 98 0 102 6 98 0 104 6 98 0 107 6 98 0 108 6 98 0 109 6 98 0 110 6 98 0 114 6 98 0 117 6 98 0 118 6 98 0 123 6 98 0 125 6 98 0 128 6 98 0 133 6 98 0 134 6 98 0 135 6 98 0 136 6 98 0 140 6 98 0 142 6 98 0 144 6 98 0 145 6 98 0 150 6 98 0 151 6 98 0 162 6 98 0 167 6 98 0 168 6 98 0 171 2 187 0 172 6 98 0 173 6 98 1 144] 
#[1 6 102 0 3 6 102 0 4 6 102 0 5 6 102 0 7 6 102 0 11 6 102 0 13 6 102 0 22 6 102 0 23 6 102 0 28 6 102 0 29 6 102 0 30 6 102 0 31 6 102 0 32 6 102 0 33 6 102 0 34 6 102 0 35 6 102 0 36 6 102 0 37 6 102 0 38 6 102 0 39 6 102 0 40 6 102 0 41 6 102 0 43 6 102 0 45 6 102 0 49 6 102 0 55 6 102 0 56 6 102 0 58 6 102 0 59 6 102 0 64 6 102 0 66 6 102 0 67 6 102 0 69 6 102 0 75 6 102 0 78 6 102 0 79 6 102 0 84 6 102 0 86 6 102 0 88 6 102 0 90 6 102 0 91 6 102 0 93 6 102 0 94 6 102 0 98 6 102 0 100 6 102 0 101 6 102 0 102 6 102 0 104 6 102 0 107 6 102 0 108 6 102 0 109 6 102 0 110 6 102 0 114 6 102 0 117 6 102 0 118 6 102 0 123 6 102 0 125 6 102 0 128 6 102 0 133 6 102 0 134 6 102 0 135 6 102 0 136 6 102 0 140 6 102 0 142 6 102 0 144 6 102 0 145 6 102 0 150 6 102 0 151 6 102 0 162 6 102 0 167 6 102 0 168 6 102 0 171 2 191 0 172 6 102 0 173 6 102 1 144] 
#[1 6 106 0 7 6 110 0 11 6 110 0 55 6 110 0 84 6 110 0 98 6 110 0 100 6 110 0 101 6 110 0 123 6 110 0 151 6 110 0 162 2 195 0 172 6 110 0 173 6 110 1 144] 
#[0 14 57 0 172] 
#[1 6 114 0 3 6 114 0 4 14 61 0 5 6 114 0 7 6 114 0 11 6 114 0 22 6 114 0 23 6 114 0 28 6 114 0 29 6 114 0 30 6 114 0 31 6 114 0 32 6 114 0 33 6 114 0 34 6 114 0 35 6 114 0 36 6 114 0 37 6 114 0 38 6 114 0 39 6 114 0 40 6 114 0 41 6 114 0 43 6 114 0 45 6 114 0 49 6 114 0 55 6 114 0 56 6 114 0 58 6 114 0 59 6 114 0 64 6 114 0 66 6 114 0 67 6 114 0 69 6 114 0 75 6 114 0 78 6 114 0 79 6 114 0 84 6 114 0 86 6 114 0 88 6 114 0 90 6 114 0 91 6 114 0 93 6 114 0 94 6 114 0 98 6 114 0 100 6 114 0 101 6 114 0 102 6 114 0 104 6 114 0 107 6 114 0 108 6 114 0 109 6 114 0 110 6 114 0 114 6 114 0 117 6 114 0 118 6 114 0 123 6 114 0 125 6 114 0 128 6 114 0 133 6 114 0 134 6 114 0 135 6 114 0 136 6 114 0 140 6 114 0 142 6 114 0 144 6 114 0 145 6 114 0 150 6 114 0 151 6 114 0 162 6 114 0 167 6 114 0 168 6 114 0 171 2 199 0 172 6 114 0 173 6 114 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 14 69 1 38 5 73 1 39 5 77 1 40 14 69 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 14 69 1 47 5 109 1 49 5 113 1 51 14 69 1 53 14 69 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 4 46 0 22 4 46 0 23 4 46 0 43 4 46 0 45 4 46 0 49 4 46 0 55 4 46 0 56 4 46 0 58 4 46 0 59 4 46 0 64 4 46 0 66 4 46 0 67 4 46 0 69 4 46 0 79 4 46 0 86 4 46 0 90 4 46 0 91 4 46 0 101 4 46 0 109 4 46 0 117 4 46 0 118 4 46 0 125 4 46 0 140 4 46 0 145 4 46 0 150 4 46 0 167 4 46 0 168 4 46 0 171 4 46 0 173 14 73 0 245] 
#[1 4 89 0 7 6 118 0 11 6 118 0 22 6 118 0 23 6 118 0 28 6 118 0 29 6 118 0 30 6 118 0 31 6 118 0 32 6 118 0 33 6 118 0 34 6 118 0 35 6 118 0 36 6 118 0 37 6 118 0 38 6 118 0 39 6 118 0 40 6 118 0 41 6 118 0 43 6 118 0 45 6 118 0 49 6 118 0 55 6 118 0 56 6 118 0 58 6 118 0 59 6 118 0 64 6 118 0 66 6 118 0 67 6 118 0 69 6 118 0 75 6 118 0 78 6 118 0 79 6 118 0 84 6 118 0 86 6 118 0 88 6 118 0 90 6 118 0 91 6 118 0 93 6 118 0 94 6 118 0 98 6 118 0 100 6 118 0 101 6 118 0 102 6 118 0 104 6 118 0 107 6 118 0 108 6 118 0 109 6 118 0 110 6 118 0 114 6 118 0 117 6 118 0 118 6 118 0 123 6 118 0 125 6 118 0 128 6 118 0 133 6 118 0 134 6 118 0 135 6 118 0 136 6 118 0 140 6 118 0 142 6 118 0 144 6 118 0 145 6 118 0 150 6 118 0 151 6 118 0 162 6 118 0 167 6 118 0 168 6 118 0 171 2 203 0 172 6 118 0 173 4 97 1 35 4 101 1 36 6 118 1 144] 
#[0 6 122 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 86 0 22 4 86 0 23 4 86 0 43 4 86 0 45 4 86 0 49 4 86 0 55 4 86 0 56 4 86 0 58 4 86 0 59 4 86 0 64 4 86 0 66 4 86 0 67 4 86 0 69 4 86 0 79 4 86 0 86 4 86 0 90 4 86 0 91 4 86 0 101 4 86 0 109 4 86 0 117 4 86 0 118 4 86 0 125 4 86 0 140 4 86 0 145 4 86 0 150 4 86 0 167 4 86 0 168 4 86 0 171 4 86 0 173 14 77 0 250] 
#[1 8 169 0 3 14 81 0 172 14 85 0 253] 
#[0 14 89 0 172] 
#[0 14 93 0 172] 
#[0 14 97 0 172] 
#[0 14 101 0 172] 
#[0 6 126 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 130 0 3 6 130 0 4 6 130 0 5 6 130 0 7 6 130 0 11 6 130 0 13 6 130 0 22 6 130 0 23 6 130 0 28 6 130 0 29 6 130 0 30 6 130 0 31 6 130 0 32 6 130 0 33 6 130 0 34 6 130 0 35 6 130 0 36 6 130 0 37 6 130 0 38 6 130 0 39 6 130 0 40 6 130 0 41 6 130 0 43 6 130 0 45 6 130 0 49 6 130 0 55 6 130 0 56 6 130 0 58 6 130 0 59 6 130 0 64 6 130 0 66 6 130 0 67 6 130 0 69 6 130 0 75 6 130 0 78 6 130 0 79 6 130 0 84 6 130 0 86 6 130 0 88 6 130 0 90 6 130 0 91 6 130 0 93 6 130 0 94 6 130 0 98 6 130 0 100 6 130 0 101 6 130 0 102 6 130 0 104 6 130 0 107 6 130 0 108 6 130 0 109 6 130 0 110 6 130 0 114 6 130 0 117 6 130 0 118 6 130 0 123 6 130 0 125 6 130 0 128 6 130 0 133 6 130 0 134 6 130 0 135 6 130 0 136 6 130 0 140 6 130 0 142 6 130 0 144 6 130 0 145 6 130 0 150 6 130 0 151 6 130 0 162 6 130 0 167 6 130 0 168 6 130 0 171 2 207 0 172 6 130 0 173 6 130 1 144] 
#[1 6 134 0 3 6 134 0 4 6 134 0 5 6 134 0 7 6 134 0 11 6 134 0 13 6 134 0 22 6 134 0 23 6 134 0 28 6 134 0 29 6 134 0 30 6 134 0 31 6 134 0 32 6 134 0 33 6 134 0 34 6 134 0 35 6 134 0 36 6 134 0 37 6 134 0 38 6 134 0 39 6 134 0 40 6 134 0 41 6 134 0 43 6 134 0 45 6 134 0 49 6 134 0 55 6 134 0 56 6 134 0 58 6 134 0 59 6 134 0 64 6 134 0 66 6 134 0 67 6 134 0 69 6 134 0 75 6 134 0 78 6 134 0 79 6 134 0 84 6 134 0 86 6 134 0 88 6 134 0 90 6 134 0 91 6 134 0 93 6 134 0 94 6 134 0 98 6 134 0 100 6 134 0 101 6 134 0 102 6 134 0 104 6 134 0 107 6 134 0 108 6 134 0 109 6 134 0 110 6 134 0 114 6 134 0 117 6 134 0 118 6 134 0 123 6 134 0 125 6 134 0 128 6 134 0 133 6 134 0 134 6 134 0 135 6 134 0 136 6 134 0 140 6 134 0 142 6 134 0 144 6 134 0 145 6 134 0 150 6 134 0 151 6 134 0 162 6 134 0 167 6 134 0 168 6 134 0 171 2 211 0 172 6 134 0 173 6 134 1 144] 
#[0 6 138 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 6 142 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 14 105 0 236 14 109 1 38 5 73 1 39 5 77 1 40 14 109 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 14 109 1 47 5 109 1 49 5 113 1 51 14 109 1 53 14 109 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 6 146 0 1 6 146 0 3 6 146 0 4 6 146 0 6 6 146 0 7 6 146 0 8 6 146 0 9 6 146 0 11 6 146 0 13 6 146 0 22 6 146 0 23 6 146 0 25 6 146 0 43 6 146 0 45 6 146 0 49 6 146 0 54 6 146 0 55 6 146 0 56 6 146 0 58 6 146 0 59 6 146 0 64 6 146 0 66 6 146 0 67 6 146 0 68 6 146 0 69 6 146 0 79 6 146 0 81 6 146 0 83 6 146 0 84 6 146 0 86 6 146 0 90 6 146 0 91 6 146 0 98 6 146 0 100 6 146 0 101 6 146 0 109 6 146 0 117 6 146 0 118 6 146 0 123 6 146 0 125 6 146 0 126 6 146 0 131 6 146 0 140 6 146 0 145 6 146 0 150 6 146 0 151 6 146 0 155 6 146 0 160 6 146 0 161 6 146 0 162 6 146 0 163 6 146 0 164 6 146 0 165 6 146 0 166 6 146 0 167 6 146 0 168 6 146 0 170 6 146 0 171 2 215 0 172 6 146 0 173 6 146 1 144] 
#[1 6 150 0 1 6 150 0 3 6 150 0 4 6 150 0 6 6 150 0 7 6 150 0 8 6 150 0 9 6 150 0 11 6 150 0 13 6 150 0 22 6 150 0 23 6 150 0 25 6 150 0 43 6 150 0 45 6 150 0 49 6 150 0 54 6 150 0 55 6 150 0 56 6 150 0 58 6 150 0 59 6 150 0 64 6 150 0 66 6 150 0 67 6 150 0 68 6 150 0 69 6 150 0 79 6 150 0 81 6 150 0 83 6 150 0 84 6 150 0 86 6 150 0 90 6 150 0 91 6 150 0 98 6 150 0 100 6 150 0 101 6 150 0 109 6 150 0 117 6 150 0 118 6 150 0 123 6 150 0 125 6 150 0 126 6 150 0 131 6 150 0 140 6 150 0 145 6 150 0 150 6 150 0 151 6 150 0 155 6 150 0 160 6 150 0 161 6 150 0 162 6 150 0 163 6 150 0 164 6 150 0 165 6 150 0 166 6 150 0 167 6 150 0 168 6 150 0 170 6 150 0 171 2 219 0 172 6 150 0 173 6 150 1 144] 
#[1 14 121 0 7 14 125 0 13] 
#[1 6 245 0 12 14 129 0 18] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 14 133 0 131 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 14 137 0 236 14 141 1 38 5 73 1 39 5 77 1 40 14 141 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 14 141 1 47 5 109 1 49 5 113 1 51 14 141 1 53 14 141 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 6 154 0 1 6 154 0 3 6 154 0 4 6 154 0 6 6 154 0 7 6 154 0 8 6 154 0 9 6 154 0 11 6 154 0 13 6 154 0 22 6 154 0 23 6 154 0 25 6 154 0 43 6 154 0 45 6 154 0 49 6 154 0 54 6 154 0 55 6 154 0 56 6 154 0 58 6 154 0 59 6 154 0 64 6 154 0 66 6 154 0 67 6 154 0 68 6 154 0 69 6 154 0 79 6 154 0 81 6 154 0 83 6 154 0 84 6 154 0 86 6 154 0 90 6 154 0 91 6 154 0 98 6 154 0 100 6 154 0 101 6 154 0 109 6 154 0 117 6 154 0 118 6 154 0 123 6 154 0 125 6 154 0 126 6 154 0 131 6 154 0 140 6 154 0 145 6 154 0 150 6 154 0 151 6 154 0 155 6 154 0 160 6 154 0 161 6 154 0 162 6 154 0 163 6 154 0 164 6 154 0 165 6 154 0 166 6 154 0 167 6 154 0 168 6 154 0 170 6 154 0 171 2 223 0 172 6 154 0 173 6 154 1 144] 
#[1 6 158 0 1 6 158 0 3 6 158 0 4 6 158 0 6 6 158 0 7 6 158 0 8 6 158 0 9 6 158 0 11 6 158 0 13 6 158 0 22 6 158 0 23 6 158 0 25 6 158 0 43 6 158 0 45 6 158 0 49 6 158 0 54 6 158 0 55 6 158 0 56 6 158 0 58 6 158 0 59 6 158 0 64 6 158 0 66 6 158 0 67 6 158 0 68 6 158 0 69 6 158 0 79 6 158 0 81 6 158 0 83 6 158 0 84 6 158 0 86 6 158 0 90 6 158 0 91 6 158 0 98 6 158 0 100 6 158 0 101 6 158 0 109 6 158 0 117 6 158 0 118 6 158 0 123 6 158 0 125 6 158 0 126 6 158 0 131 6 158 0 140 6 158 0 145 6 158 0 150 6 158 0 151 6 158 0 155 6 158 0 160 6 158 0 161 6 158 0 162 6 158 0 163 6 158 0 164 6 158 0 165 6 158 0 166 6 158 0 167 6 158 0 168 6 158 0 170 6 158 0 171 2 227 0 172 6 158 0 173 6 158 1 144] 
#[1 6 162 0 4 12 25 0 7 6 162 0 11 12 29 0 13 6 162 0 55 6 162 0 84 6 162 0 98 6 162 0 100 6 162 0 101 6 162 0 123 6 162 0 151 6 162 0 162 2 231 0 172 6 162 0 173 12 37 1 136 6 162 1 144] 
#[1 0 29 0 1 4 229 0 3 6 166 0 4 4 233 0 6 6 166 0 7 4 237 0 8 0 33 0 9 6 166 0 11 6 166 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 235 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 6 166 0 84 1 21 0 86 1 21 0 90 1 21 0 91 6 166 0 98 6 166 0 100 6 166 0 101 1 21 0 109 1 21 0 117 1 21 0 118 6 166 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 6 166 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 239 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 2 243 0 172 6 166 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 14 157 1 132 5 153 1 141 5 153 1 143 6 166 1 144] 
#[1 0 29 0 1 4 229 0 3 6 170 0 4 4 233 0 6 6 170 0 7 4 237 0 8 0 33 0 9 6 170 0 11 6 170 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 247 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 6 170 0 84 1 21 0 86 1 21 0 90 1 21 0 91 6 170 0 98 6 170 0 100 6 170 0 101 1 21 0 109 1 21 0 117 1 21 0 118 6 170 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 6 170 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 251 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 2 255 0 172 6 170 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 14 165 1 132 5 153 1 141 5 153 1 143 6 170 1 144] 
#[1 14 169 0 7 14 173 0 13] 
#[0 6 174 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 6 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 14 177 0 4] 
#[0 6 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 14 181 0 101 3 113 0 173] 
#[0 6 186 0 101 0 173] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 85 0 173 6 29 0 191 1 21 0 194 6 29 0 195 6 29 0 196 6 29 0 197 14 185 0 202 1 161 1 56 1 161 1 57 1 161 1 58 4 213 1 124 2 109 1 125 6 37 1 126 2 109 1 127 2 121 1 130 2 125 1 131] 
#[0 14 189 0 172] 
#[0 14 193 0 172] 
#[1 0 174 0 3 4 61 0 5 14 197 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 14 201 1 11] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 14 209 1 11] 
#[1 8 73 0 3 6 190 0 173 14 213 0 230] 
#[0 6 194 0 173] 
#[1 3 233 0 173 3 241 0 207 14 217 0 213] 
#[0 6 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 210 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 14 221 0 253] 
#[1 8 169 0 3 14 225 0 253] 
#[1 8 169 0 3 14 229 0 253] 
#[0 5 122 0 173] 
#[1 14 233 0 172 4 214 0 173 14 233 1 13] 
#[1 3 233 0 173 3 241 0 207 14 237 0 213] 
#[1 3 233 0 173 3 241 0 207 14 241 0 213] 
#[0 14 245 0 101] 
#[1 14 249 0 26 14 253 0 90 15 1 0 145] 
#[0 15 5 0 124] 
#[1 6 106 0 7 6 106 0 11 6 106 0 22 6 106 0 23 6 106 0 28 6 106 0 29 6 106 0 30 6 106 0 31 6 106 0 32 6 106 0 33 6 106 0 34 6 106 0 35 6 106 0 36 6 106 0 37 6 106 0 38 6 106 0 39 6 106 0 40 6 106 0 41 6 106 0 43 6 106 0 45 6 106 0 49 6 106 0 55 6 106 0 56 6 106 0 58 6 106 0 59 6 106 0 64 6 106 0 66 6 106 0 67 6 106 0 69 6 106 0 75 6 106 0 78 6 106 0 79 6 106 0 84 6 106 0 86 6 106 0 88 6 106 0 90 6 106 0 91 6 106 0 93 6 106 0 94 6 106 0 98 6 106 0 100 6 106 0 101 6 106 0 102 6 106 0 104 6 106 0 107 6 106 0 108 6 106 0 109 6 106 0 110 6 106 0 114 6 106 0 117 6 106 0 118 6 106 0 123 6 106 0 125 6 106 0 128 6 106 0 133 6 106 0 134 6 106 0 135 6 106 0 136 6 106 0 140 6 106 0 142 6 106 0 144 6 106 0 145 6 106 0 150 6 106 0 151 6 106 0 162 6 106 0 167 6 106 0 168 6 106 0 171 3 3 0 172 6 106 0 173 6 106 1 144] 
#[0 15 9 0 172] 
#[0 15 13 0 172] 
#[1 8 169 0 3 15 17 0 172 15 21 0 253] 
#[0 15 25 0 172] 
#[0 15 29 0 172] 
#[0 15 33 0 172] 
#[1 8 169 0 3 15 37 0 172 4 214 0 173 15 41 0 253 15 45 1 13] 
#[0 15 49 0 172] 
#[0 15 53 0 172] 
#[0 15 57 0 172] 
#[1 8 169 0 3 15 61 0 172 15 65 0 253] 
#[0 15 69 0 172] 
#[0 15 73 0 172] 
#[0 15 77 0 172] 
#[1 8 169 0 3 15 81 0 172 4 214 0 173 15 85 0 253 15 89 1 13] 
#[0 6 214 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 3 29 0 28 3 29 0 29 3 29 0 30 3 29 0 31 3 29 0 32 3 29 0 33 3 29 0 34 3 29 0 35 3 29 0 36 3 29 0 37 3 29 0 38 3 29 0 39 3 29 0 40 3 29 0 41 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 2 209 0 78 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 2 213 0 93 0 145 0 94 0 153 0 102 0 157 0 104 3 41 0 107 2 217 0 108 1 21 0 109 3 41 0 110 2 221 0 114 1 21 0 117 1 21 0 118 1 21 0 125 2 233 0 128 3 41 0 133 2 237 0 134 3 41 0 135 0 217 0 136 1 21 0 140 2 245 0 142 2 249 0 144 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 1 0 172 3 113 0 173 3 5 0 191 1 21 0 194 3 5 0 195 3 5 0 196 3 5 0 197 7 193 0 200 7 193 0 201 7 193 0 203 7 193 0 204 7 193 0 208 3 29 0 209 7 193 0 210 7 193 0 211 3 41 0 223 7 193 0 242 7 193 0 243 7 193 0 247 7 193 0 248 7 193 1 5 7 193 1 6 7 193 1 7 3 61 1 8 7 193 1 9 7 193 1 12 7 193 1 14 7 193 1 15 7 193 1 16 7 193 1 17 7 193 1 18 7 193 1 19 7 193 1 20 7 193 1 21 7 193 1 22 7 193 1 23 1 129 1 25 7 193 1 26 7 193 1 27 7 193 1 28 7 193 1 29 7 193 1 30 7 193 1 34 7 193 1 37 6 218 1 144] 
#[0 6 222 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 93 0 4 10 41 0 18 10 45 0 66] 
#[0 6 226 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 97 0 46 15 101 0 47] 
#[1 15 105 0 8 10 33 0 159] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 109 1 38 5 73 1 39 5 77 1 40 15 109 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 109 1 47 5 109 1 49 5 113 1 51 15 109 1 53 15 109 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 113 1 38 5 73 1 39 5 77 1 40 15 113 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 113 1 47 5 109 1 49 5 113 1 51 15 113 1 53 15 113 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 117 1 38 5 73 1 39 5 77 1 40 15 117 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 117 1 47 5 109 1 49 5 113 1 51 15 117 1 53 15 117 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 121 1 38 5 73 1 39 5 77 1 40 15 121 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 121 1 47 5 109 1 49 5 113 1 51 15 121 1 53 15 121 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 125 1 38 5 73 1 39 5 77 1 40 15 125 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 15 129 1 46 15 125 1 47 5 109 1 49 15 133 1 51 15 125 1 53 15 125 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 137 1 38 5 73 1 39 5 77 1 40 15 137 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 137 1 47 5 109 1 49 5 113 1 51 15 137 1 53 15 137 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 141 1 38 5 73 1 39 5 77 1 40 15 141 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 141 1 47 5 109 1 49 5 113 1 51 15 141 1 53 15 141 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 145 1 38 5 73 1 39 5 77 1 40 15 145 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 145 1 47 5 109 1 49 5 113 1 51 15 145 1 53 15 145 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 125 1 38 5 73 1 39 5 77 1 40 15 125 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 15 149 1 46 15 125 1 47 5 109 1 49 15 153 1 51 15 125 1 53 15 125 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 157 1 38 5 73 1 39 5 77 1 40 15 157 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 157 1 47 5 109 1 49 5 113 1 51 15 157 1 53 15 157 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 161 1 38 5 73 1 39 5 77 1 40 15 161 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 161 1 47 5 109 1 49 5 113 1 51 15 161 1 53 15 161 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 15 165 0 115] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 169 1 38 5 73 1 39 5 77 1 40 15 169 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 169 1 47 5 109 1 49 5 113 1 51 15 169 1 53 15 169 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 15 173 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 177 1 38 5 73 1 39 5 77 1 40 15 177 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 177 1 47 5 109 1 49 5 113 1 51 15 177 1 53 15 177 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 15 181 0 7] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 15 185 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 189 1 38 5 73 1 39 5 77 1 40 15 189 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 189 1 47 5 109 1 49 5 113 1 51 15 189 1 53 15 189 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 15 193 0 7] 
#[0 15 217 0 23 0 26 0 45 0 58 0 61 1 59] 
#[1 5 6 0 11 5 6 0 13 5 6 0 55 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 3 7 0 172 5 6 0 173 15 225 1 66 5 6 1 144] 
#[1 6 230 0 11 13 73 0 13 6 230 0 55 6 230 0 84 6 230 0 98 6 230 0 100 6 230 0 101 6 230 0 123 6 230 0 151 6 230 0 162 6 230 0 172 6 230 0 173 13 77 1 65 6 230 1 144] 
#[1 5 6 0 11 5 6 0 13 10 41 0 18 5 6 0 55 10 45 0 66 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 5 6 0 172 5 6 0 173 15 229 1 66 5 6 1 144] 
#[1 6 234 0 11 13 73 0 13 6 234 0 55 6 234 0 84 6 234 0 98 6 234 0 100 6 234 0 101 6 234 0 123 6 234 0 151 6 234 0 162 6 234 0 172 6 234 0 173 13 77 1 65 6 234 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 15 233 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 237 1 38 5 73 1 39 5 77 1 40 15 237 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 237 1 47 5 109 1 49 5 113 1 51 15 237 1 53 15 237 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 6 238 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 5 6 0 11 5 6 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 2 47 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 5 6 0 84 1 21 0 86 1 21 0 90 1 21 0 91 5 6 0 98 5 6 0 100 5 6 0 101 1 21 0 109 1 21 0 117 1 21 0 118 5 6 0 123 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 5 6 0 151 4 249 0 155 4 253 0 160 5 1 0 161 2 51 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 6 0 172 5 6 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 15 241 1 38 5 73 1 39 5 77 1 40 15 241 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 241 1 47 5 109 1 49 5 113 1 51 15 241 1 53 15 241 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 15 245 1 66 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143 5 6 1 144] 
#[1 5 6 0 11 5 6 0 13 5 6 0 55 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 3 11 0 172 5 6 0 173 15 253 1 66 5 6 1 144] 
#[1 6 242 0 11 13 73 0 13 6 242 0 55 6 242 0 84 6 242 0 98 6 242 0 100 6 242 0 101 6 242 0 123 6 242 0 151 6 242 0 162 6 242 0 172 6 242 0 173 13 77 1 65 6 242 1 144] 
#[0 16 1 0 172] 
#[1 8 73 0 3 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 79 0 174 0 86 0 174 0 90 0 174 0 91 0 174 0 101 0 174 0 109 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 140 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 16 9 0 228 16 9 0 229 16 5 0 230 16 9 0 233] 
#[0 6 246 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 13 1 38 5 73 1 39 5 77 1 40 16 13 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 13 1 47 5 109 1 49 5 113 1 51 16 13 1 53 16 13 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 17 1 38 5 73 1 39 5 77 1 40 16 17 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 17 1 47 5 109 1 49 5 113 1 51 16 17 1 53 16 17 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 4 61 0 5 3 19 0 7 3 19 0 11 3 19 0 22 3 19 0 23 3 19 0 28 3 19 0 29 3 19 0 30 3 19 0 31 3 19 0 32 3 19 0 33 3 19 0 34 3 19 0 35 3 19 0 36 3 19 0 37 3 19 0 38 3 19 0 39 3 19 0 40 3 19 0 41 3 19 0 43 3 19 0 45 3 19 0 49 3 19 0 55 3 19 0 56 3 19 0 58 3 19 0 59 3 19 0 64 3 19 0 66 3 19 0 67 3 19 0 69 3 19 0 75 3 19 0 78 3 19 0 79 3 19 0 84 3 19 0 86 3 19 0 88 3 19 0 90 3 19 0 91 3 19 0 93 3 19 0 94 3 19 0 98 3 19 0 100 3 19 0 101 3 19 0 102 3 19 0 104 3 19 0 107 3 19 0 108 3 19 0 109 3 19 0 110 3 19 0 114 3 19 0 117 3 19 0 118 3 19 0 123 3 19 0 125 3 19 0 128 3 19 0 133 3 19 0 134 3 19 0 135 3 19 0 136 3 19 0 140 3 19 0 142 3 19 0 144 3 19 0 145 3 19 0 150 3 19 0 151 3 19 0 162 3 19 0 167 3 19 0 168 3 19 0 171 3 23 0 172 3 19 0 173 16 21 0 228 16 21 0 229 16 21 0 233 3 19 1 144] 
#[0 6 254 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 2 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 16 25 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 29 1 38 5 73 1 39 5 77 1 40 16 29 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 29 1 47 5 109 1 49 5 113 1 51 16 29 1 53 16 29 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 7 6 0 4 0 7] 
#[1 16 33 0 4 13 125 0 7 13 129 0 231] 
#[0 7 10 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 6 49 0 70 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 6 53 0 191 1 21 0 194 6 53 0 195 6 53 0 196 6 53 0 197 16 37 1 24] 
#[0 7 14 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 18 0 11 7 18 0 55 7 18 0 84 7 18 0 98 7 18 0 100 7 18 0 101 7 18 0 123 7 18 0 151 7 18 0 162 3 27 0 172 7 18 0 173 7 18 1 144] 
#[1 16 41 0 123 3 225 0 162 16 45 0 182] 
#[0 7 22 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 16 49 0 172] 
#[1 16 53 0 123 3 225 0 162 16 57 0 182] 
#[0 16 61 0 172] 
#[1 8 129 0 11 0 6 0 55 0 6 0 84 0 6 0 98 0 6 0 100 0 6 0 101 0 6 0 123 0 6 0 151 0 6 0 162 8 133 0 172 1 227 0 173 16 65 0 177 8 145 0 214 8 149 0 216 8 153 0 217] 
#[1 7 26 0 55 7 26 0 84 7 26 0 98 7 26 0 100 7 26 0 101 7 26 0 123 7 26 0 151 7 26 0 162 3 31 0 173] 
#[0 7 30 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 67 0 69 0 75 0 77 0 79 0 86 0 88 0 90 0 91 0 94 0 95 0 102 0 104 0 105 0 107 0 109 0 110 0 111 0 112 0 113 0 117 0 118 0 125 0 127 0 128 0 133 0 135 0 136 0 137 0 138 0 139 0 140 0 142 0 145 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 16 69 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 1 13 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 16 69 0 201 16 69 0 203 16 69 0 212 1 53 0 223 16 69 0 234 1 61 0 235 16 69 0 236 16 69 0 237 16 69 0 238 16 69 0 239 16 69 0 240 16 69 0 241 16 69 0 242 16 69 0 243 16 69 0 247 16 69 0 248 16 69 1 18 16 69 1 19 16 69 1 20 16 69 1 21 16 69 1 22 16 69 1 23 1 129 1 25 16 69 1 26 16 69 1 27 16 69 1 28 16 69 1 29 16 69 1 30 16 69 1 34 16 69 1 37 1 161 1 56 1 161 1 57 1 161 1 58 16 69 1 62 16 69 1 63 16 69 1 64 16 69 1 67 16 69 1 68 16 69 1 69 16 69 1 70 16 69 1 71 16 69 1 72 16 69 1 73 16 69 1 74 16 69 1 75 16 69 1 76 16 69 1 77 16 69 1 78 16 69 1 79 16 69 1 80 16 69 1 81 16 69 1 82 16 69 1 83 16 69 1 84 16 69 1 85 16 69 1 90 16 69 1 91 2 13 1 92 16 69 1 97 16 69 1 100 16 69 1 101 16 69 1 102 16 69 1 103 16 69 1 104 16 69 1 109 16 69 1 110 16 69 1 111 16 69 1 112 16 69 1 113 16 69 1 114 16 69 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 16 69 1 129 2 121 1 130 2 125 1 131 16 69 1 139 16 69 1 140 16 69 1 142] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 73 1 38 5 73 1 39 5 77 1 40 16 73 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 73 1 47 5 109 1 49 5 113 1 51 16 73 1 53 16 73 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 77 1 38 5 73 1 39 5 77 1 40 16 77 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 77 1 47 5 109 1 49 5 113 1 51 16 77 1 53 16 77 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 16 81 0 148 16 85 0 152] 
#[0 16 89 0 172] 
#[1 7 34 0 22 7 34 0 23 7 34 0 43 7 34 0 45 7 34 0 49 7 34 0 55 7 34 0 56 7 34 0 58 7 34 0 59 7 34 0 64 7 34 0 66 7 34 0 67 7 34 0 69 7 34 0 79 7 34 0 86 7 34 0 90 7 34 0 91 7 34 0 101 7 34 0 109 7 34 0 117 7 34 0 118 7 34 0 125 7 34 0 140 7 34 0 145 7 34 0 150 7 34 0 167 7 34 0 168 7 34 0 171 16 93 0 172 7 34 0 173] 
#[0 7 38 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 9 61 0 81 16 105 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 16 97 0 131 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 16 101 0 191 1 21 0 194 16 101 0 195 16 101 0 196 16 101 0 197 16 105 0 252] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 16 109 0 191 1 21 0 194 16 109 0 195 16 109 0 196 16 109 0 197] 
#[0 7 42 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 16 113 0 228 16 113 0 229 16 113 0 233 16 113 1 1 16 113 1 2] 
#[0 7 46 0 4 0 7 0 172] 
#[0 7 50 0 4 0 7 0 172] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 16 125 1 4] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 16 129 0 131 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 16 133 0 191 1 21 0 194 16 133 0 195 16 133 0 196 16 133 0 197] 
#[1 16 137 0 4 16 141 0 7 16 145 0 172 16 149 0 254] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 16 153 0 182 16 153 0 191 1 21 0 194 16 153 0 195 16 153 0 196 16 153 0 197 16 153 1 43 16 153 1 105] 
#[0 7 58 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 16 157 0 172 16 161 0 182 16 161 0 191 1 21 0 194 16 161 0 195 16 161 0 196 16 161 0 197 16 161 1 43 16 161 1 105] 
#[1 0 29 0 1 0 33 0 9 7 62 0 11 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 3 39 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 16 165 0 77 1 21 0 79 7 62 0 84 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 7 62 0 98 7 62 0 100 7 62 0 101 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 7 62 0 123 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 7 62 0 151 0 249 0 152 0 253 0 153 7 62 0 162 1 1 0 167 1 5 0 168 1 9 0 171 3 43 0 172 7 62 0 173 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 16 165 0 201 16 165 0 203 16 165 0 212 16 169 0 220 1 53 0 223 16 165 0 234 1 61 0 235 16 165 0 236 16 165 0 237 16 165 0 238 16 165 0 239 16 165 0 240 16 165 0 241 16 165 0 242 16 165 0 243 16 165 0 247 16 165 0 248 16 165 1 18 16 165 1 19 16 165 1 20 16 165 1 21 16 165 1 22 16 165 1 23 1 129 1 25 16 165 1 26 16 165 1 27 16 165 1 28 16 165 1 29 16 165 1 30 16 165 1 34 16 165 1 37 1 161 1 56 1 161 1 57 1 161 1 58 16 165 1 62 16 165 1 63 16 165 1 64 16 165 1 67 16 165 1 68 16 165 1 69 16 165 1 70 16 165 1 71 16 165 1 72 16 165 1 73 16 165 1 74 16 165 1 75 16 165 1 76 16 165 1 77 16 165 1 78 16 165 1 79 16 165 1 80 16 165 1 81 16 165 1 82 16 165 1 83 16 165 1 84 16 165 1 85 16 165 1 90 16 165 1 91 2 13 1 92 16 165 1 97 16 165 1 100 16 165 1 101 16 165 1 102 16 165 1 103 16 165 1 104 16 165 1 109 16 165 1 110 16 165 1 111 16 165 1 112 16 165 1 113 16 165 1 114 16 165 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 16 165 1 129 2 121 1 130 2 125 1 131 16 165 1 139 16 165 1 140 16 165 1 142 7 62 1 144] 
#[1 7 66 0 98 7 66 0 100 7 66 0 101 7 66 0 162 16 173 1 87] 
#[1 7 70 0 11 7 70 0 55 7 70 0 84 7 70 0 98 7 70 0 100 7 70 0 101 7 70 0 123 7 70 0 151 7 70 0 162 3 47 0 172 7 70 0 173 7 70 1 144] 
#[0 7 74 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 7 78 0 11 7 78 0 55 7 78 0 84 7 78 0 98 7 78 0 100 7 78 0 101 7 78 0 123 7 78 0 151 7 78 0 162 3 51 0 172 7 78 0 173 7 78 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 185 1 38 5 73 1 39 5 77 1 40 16 185 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 185 1 47 5 109 1 49 5 113 1 51 16 185 1 53 16 185 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 16 189 0 55] 
#[1 7 82 0 84 7 82 0 101 7 82 0 162 6 85 0 173 16 193 1 99] 
#[0 7 86 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 16 197 0 151] 
#[0 16 201 0 153] 
#[0 16 205 0 101] 
#[1 7 90 0 11 7 90 0 22 7 90 0 23 7 90 0 28 7 90 0 29 7 90 0 30 7 90 0 31 7 90 0 32 7 90 0 33 7 90 0 34 7 90 0 35 7 90 0 36 7 90 0 37 7 90 0 38 7 90 0 39 7 90 0 40 7 90 0 41 7 90 0 43 7 90 0 45 7 90 0 49 7 90 0 55 7 90 0 56 7 90 0 58 7 90 0 59 7 90 0 64 7 90 0 66 7 90 0 67 7 90 0 69 7 90 0 75 7 90 0 78 7 90 0 79 7 90 0 84 7 90 0 86 7 90 0 88 7 90 0 90 7 90 0 91 7 90 0 93 7 90 0 94 7 90 0 98 7 90 0 100 7 90 0 101 7 90 0 102 7 90 0 104 7 90 0 107 7 90 0 108 7 90 0 109 7 90 0 110 7 90 0 114 7 90 0 117 7 90 0 118 7 90 0 123 7 90 0 125 7 90 0 128 7 90 0 133 7 90 0 134 7 90 0 135 7 90 0 136 7 90 0 140 7 90 0 142 7 90 0 144 7 90 0 145 7 90 0 150 7 90 0 151 7 90 0 162 7 90 0 167 7 90 0 168 7 90 0 171 3 55 0 172 7 90 0 173 7 90 1 144] 
#[1 5 169 0 9 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 5 173 0 56 1 21 0 58 1 21 0 59 5 177 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 16 209 0 80 16 209 0 82 5 189 0 86 16 209 0 89 1 21 0 90 5 197 0 91 16 209 0 92 16 209 0 96 1 21 0 109 16 209 0 116 1 21 0 117 1 21 0 118 16 209 0 120 16 209 0 121 16 209 0 122 1 21 0 125 1 21 0 140 16 209 0 141 1 21 0 145 5 229 0 149 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 5 233 0 191 1 21 0 194 5 233 0 195 5 233 0 196 5 233 0 197 16 209 0 221 5 241 0 222 16 209 0 224 5 249 0 225 5 253 0 226 16 209 0 227] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 16 213 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 217 1 38 5 73 1 39 5 77 1 40 16 217 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 217 1 47 5 109 1 49 5 113 1 51 16 217 1 53 16 217 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 16 221 0 5] 
#[1 7 94 0 7 7 94 0 11 7 94 0 22 7 94 0 23 7 94 0 28 7 94 0 29 7 94 0 30 7 94 0 31 7 94 0 32 7 94 0 33 7 94 0 34 7 94 0 35 7 94 0 36 7 94 0 37 7 94 0 38 7 94 0 39 7 94 0 40 7 94 0 41 7 94 0 43 7 94 0 45 7 94 0 49 7 94 0 55 7 94 0 56 7 94 0 58 7 94 0 59 7 94 0 64 7 94 0 66 7 94 0 67 7 94 0 69 7 94 0 75 7 94 0 78 7 94 0 79 7 94 0 84 7 94 0 86 7 94 0 88 7 94 0 90 7 94 0 91 7 94 0 93 7 94 0 94 7 94 0 98 7 94 0 100 7 94 0 101 7 94 0 102 7 94 0 104 7 94 0 107 7 94 0 108 7 94 0 109 7 94 0 110 7 94 0 114 7 94 0 117 7 94 0 118 7 94 0 123 7 94 0 125 7 94 0 128 7 94 0 133 7 94 0 134 7 94 0 135 7 94 0 136 7 94 0 140 7 94 0 142 7 94 0 144 7 94 0 145 7 94 0 150 7 94 0 151 7 94 0 162 7 94 0 167 7 94 0 168 7 94 0 171 3 59 0 172 7 94 0 173 7 94 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 79 0 6 0 86 0 6 0 90 0 6 0 91 0 6 0 101 0 6 0 109 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 140 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 225 0 177 10 193 0 244] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 49 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 67 0 6 0 69 0 6 0 79 0 6 0 86 0 6 0 90 0 6 0 91 0 6 0 101 0 6 0 109 0 6 0 117 0 6 0 118 0 6 0 125 0 6 0 140 0 6 0 145 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 229 0 177 11 49 0 249] 
#[1 8 169 0 3 16 233 0 253] 
#[0 7 98 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 237 1 38 5 73 1 39 5 77 1 40 16 237 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 237 1 47 5 109 1 49 5 113 1 51 16 237 1 53 16 237 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 241 1 38 5 73 1 39 5 77 1 40 16 241 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 241 1 47 5 109 1 49 5 113 1 51 16 241 1 53 16 241 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 245 1 38 5 73 1 39 5 77 1 40 16 245 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 245 1 47 5 109 1 49 5 113 1 51 16 245 1 53 16 245 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 16 249 1 38 5 73 1 39 5 77 1 40 16 249 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 16 249 1 47 5 109 1 49 5 113 1 51 16 249 1 53 16 249 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 7 102 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 106 0 3 7 106 0 4 7 106 0 5 7 106 0 7 7 106 0 11 7 106 0 13 7 106 0 22 7 106 0 23 7 106 0 28 7 106 0 29 7 106 0 30 7 106 0 31 7 106 0 32 7 106 0 33 7 106 0 34 7 106 0 35 7 106 0 36 7 106 0 37 7 106 0 38 7 106 0 39 7 106 0 40 7 106 0 41 7 106 0 43 7 106 0 45 7 106 0 49 7 106 0 55 7 106 0 56 7 106 0 58 7 106 0 59 7 106 0 64 7 106 0 66 7 106 0 67 7 106 0 69 7 106 0 75 7 106 0 78 7 106 0 79 7 106 0 84 7 106 0 86 7 106 0 88 7 106 0 90 7 106 0 91 7 106 0 93 7 106 0 94 7 106 0 98 7 106 0 100 7 106 0 101 7 106 0 102 7 106 0 104 7 106 0 107 7 106 0 108 7 106 0 109 7 106 0 110 7 106 0 114 7 106 0 117 7 106 0 118 7 106 0 123 7 106 0 125 7 106 0 128 7 106 0 133 7 106 0 134 7 106 0 135 7 106 0 136 7 106 0 140 7 106 0 142 7 106 0 144 7 106 0 145 7 106 0 150 7 106 0 151 7 106 0 162 7 106 0 167 7 106 0 168 7 106 0 171 3 63 0 172 7 106 0 173 7 106 1 144] 
#[0 7 110 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 114 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 7 118 0 1 7 118 0 3 7 118 0 4 7 118 0 6 7 118 0 7 7 118 0 8 7 118 0 9 7 118 0 11 7 118 0 13 7 118 0 22 7 118 0 23 7 118 0 25 7 118 0 43 7 118 0 45 7 118 0 49 7 118 0 54 7 118 0 55 7 118 0 56 7 118 0 58 7 118 0 59 7 118 0 64 7 118 0 66 7 118 0 67 7 118 0 68 7 118 0 69 7 118 0 79 7 118 0 81 7 118 0 83 7 118 0 84 7 118 0 86 7 118 0 90 7 118 0 91 7 118 0 98 7 118 0 100 7 118 0 101 7 118 0 109 7 118 0 117 7 118 0 118 7 118 0 123 7 118 0 125 7 118 0 126 7 118 0 131 7 118 0 140 7 118 0 145 7 118 0 150 7 118 0 151 7 118 0 155 7 118 0 160 7 118 0 161 7 118 0 162 7 118 0 163 7 118 0 164 7 118 0 165 7 118 0 166 7 118 0 167 7 118 0 168 7 118 0 170 7 118 0 171 3 67 0 172 7 118 0 173 7 118 1 144] 
#[1 7 122 0 1 7 122 0 3 7 122 0 4 7 122 0 6 7 122 0 7 7 122 0 8 7 122 0 9 7 122 0 11 7 122 0 13 7 122 0 22 7 122 0 23 7 122 0 25 7 122 0 43 7 122 0 45 7 122 0 49 7 122 0 54 7 122 0 55 7 122 0 56 7 122 0 58 7 122 0 59 7 122 0 64 7 122 0 66 7 122 0 67 7 122 0 68 7 122 0 69 7 122 0 79 7 122 0 81 7 122 0 83 7 122 0 84 7 122 0 86 7 122 0 90 7 122 0 91 7 122 0 98 7 122 0 100 7 122 0 101 7 122 0 109 7 122 0 117 7 122 0 118 7 122 0 123 7 122 0 125 7 122 0 126 7 122 0 131 7 122 0 140 7 122 0 145 7 122 0 150 7 122 0 151 7 122 0 155 7 122 0 160 7 122 0 161 7 122 0 162 7 122 0 163 7 122 0 164 7 122 0 165 7 122 0 166 7 122 0 167 7 122 0 168 7 122 0 170 7 122 0 171 3 71 0 172 7 122 0 173 7 122 1 144] 
#[0 17 5 0 172] 
#[0 17 9 0 172] 
#[0 7 126 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 130 0 3 7 130 0 4 7 130 0 5 7 130 0 7 7 130 0 11 7 130 0 13 7 130 0 22 7 130 0 23 7 130 0 28 7 130 0 29 7 130 0 30 7 130 0 31 7 130 0 32 7 130 0 33 7 130 0 34 7 130 0 35 7 130 0 36 7 130 0 37 7 130 0 38 7 130 0 39 7 130 0 40 7 130 0 41 7 130 0 43 7 130 0 45 7 130 0 49 7 130 0 55 7 130 0 56 7 130 0 58 7 130 0 59 7 130 0 64 7 130 0 66 7 130 0 67 7 130 0 69 7 130 0 75 7 130 0 78 7 130 0 79 7 130 0 84 7 130 0 86 7 130 0 88 7 130 0 90 7 130 0 91 7 130 0 93 7 130 0 94 7 130 0 98 7 130 0 100 7 130 0 101 7 130 0 102 7 130 0 104 7 130 0 107 7 130 0 108 7 130 0 109 7 130 0 110 7 130 0 114 7 130 0 117 7 130 0 118 7 130 0 123 7 130 0 125 7 130 0 128 7 130 0 133 7 130 0 134 7 130 0 135 7 130 0 136 7 130 0 140 7 130 0 142 7 130 0 144 7 130 0 145 7 130 0 150 7 130 0 151 7 130 0 162 7 130 0 167 7 130 0 168 7 130 0 171 3 75 0 172 7 130 0 173 7 130 1 144] 
#[0 7 134 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 138 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 7 142 0 4 4 233 0 6 7 142 0 7 4 237 0 8 0 33 0 9 7 142 0 11 7 142 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 3 79 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 7 142 0 84 1 21 0 86 1 21 0 90 1 21 0 91 7 142 0 98 7 142 0 100 7 142 0 101 1 21 0 109 1 21 0 117 1 21 0 118 7 142 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 7 142 0 151 4 249 0 155 4 253 0 160 5 1 0 161 3 83 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 7 142 0 172 7 142 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 17 13 1 132 5 153 1 141 5 153 1 143 7 142 1 144] 
#[0 7 146 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 7 150 0 4 4 233 0 6 7 150 0 7 4 237 0 8 0 33 0 9 7 150 0 11 7 150 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 3 87 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 7 150 0 84 1 21 0 86 1 21 0 90 1 21 0 91 7 150 0 98 7 150 0 100 7 150 0 101 1 21 0 109 1 21 0 117 1 21 0 118 7 150 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 7 150 0 151 4 249 0 155 4 253 0 160 5 1 0 161 3 91 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 7 150 0 172 7 150 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 17 17 1 132 5 153 1 141 5 153 1 143 7 150 1 144] 
#[0 7 154 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 7 158 0 4 4 233 0 6 7 158 0 7 4 237 0 8 0 33 0 9 7 158 0 11 7 158 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 3 95 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 7 158 0 84 1 21 0 86 1 21 0 90 1 21 0 91 7 158 0 98 7 158 0 100 7 158 0 101 1 21 0 109 1 21 0 117 1 21 0 118 7 158 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 7 158 0 151 4 249 0 155 4 253 0 160 5 1 0 161 3 99 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 3 103 0 172 7 158 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 17 25 1 132 5 153 1 141 5 153 1 143 7 158 1 144] 
#[1 0 29 0 1 4 229 0 3 7 162 0 4 4 233 0 6 7 162 0 7 4 237 0 8 0 33 0 9 7 162 0 11 7 162 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 3 107 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 7 162 0 84 1 21 0 86 1 21 0 90 1 21 0 91 7 162 0 98 7 162 0 100 7 162 0 101 1 21 0 109 1 21 0 117 1 21 0 118 7 162 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 7 162 0 151 4 249 0 155 4 253 0 160 5 1 0 161 3 111 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 3 115 0 172 7 162 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 17 33 1 132 5 153 1 141 5 153 1 143 7 162 1 144] 
#[0 7 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 174 0 101 0 173] 
#[0 17 37 0 119] 
#[0 17 41 0 119] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 17 45 1 11] 
#[1 3 233 0 173 3 241 0 207 17 49 0 213] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 17 53 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 17 57 1 38 5 73 1 39 5 77 1 40 17 57 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 17 57 1 47 5 109 1 49 5 113 1 51 17 57 1 53 17 57 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 3 233 0 173 3 241 0 207 17 61 0 213] 
#[0 7 178 0 173] 
#[0 17 65 0 101] 
#[1 0 174 0 3 4 61 0 5 8 77 0 172 3 119 0 173 3 241 0 207 17 69 0 213 17 73 0 228 17 73 0 229 17 73 0 233] 
#[1 3 233 0 173 3 241 0 207 17 77 0 213] 
#[1 3 233 0 173 3 241 0 207 17 81 0 213] 
#[1 3 233 0 173 3 241 0 207 17 85 0 213] 
#[0 17 89 0 101] 
#[0 17 93 0 101] 
#[0 17 97 0 172] 
#[0 7 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 101 0 191 1 21 0 194 17 101 0 195 17 101 0 196 17 101 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 105 0 191 1 21 0 194 17 105 0 195 17 105 0 196 17 105 0 197] 
#[1 8 169 0 3 17 109 0 253] 
#[1 0 174 0 3 4 61 0 5 17 113 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 17 117 1 11] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 121 0 191 1 21 0 194 17 121 0 195 17 121 0 196 17 121 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 125 0 191 1 21 0 194 17 125 0 195 17 125 0 196 17 125 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 129 0 191 1 21 0 194 17 129 0 195 17 129 0 196 17 129 0 197] 
#[1 8 169 0 3 17 137 0 172 2 135 0 173 17 133 0 253 17 137 1 13] 
#[1 17 141 0 172 4 214 0 173 17 141 1 13] 
#[1 3 233 0 173 3 241 0 207 17 145 0 213] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 149 0 191 1 21 0 194 17 149 0 195 17 149 0 196 17 149 0 197] 
#[1 17 153 0 109 17 157 0 118 17 161 0 140] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 165 0 191 1 21 0 194 17 165 0 195 17 165 0 196 17 165 0 197] 
#[1 8 169 0 3 17 169 0 253] 
#[1 0 174 0 3 4 61 0 5 17 173 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 17 177 1 11] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 181 0 191 1 21 0 194 17 181 0 195 17 181 0 196 17 181 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 185 0 191 1 21 0 194 17 185 0 195 17 185 0 196 17 185 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 17 189 0 191 1 21 0 194 17 189 0 195 17 189 0 196 17 189 0 197] 
#[1 8 169 0 3 17 197 0 172 2 135 0 173 17 193 0 253 17 197 1 13] 
#[1 17 201 0 172 4 214 0 173 17 201 1 13] 
#[1 3 233 0 173 3 241 0 207 17 205 0 213] 
#[0 7 198 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 17 209 0 172] 
#[0 17 213 0 172] 
#[1 7 241 0 159 17 217 0 190] 
#[1 7 202 0 3 7 202 0 4 7 202 0 5 7 202 0 7 7 202 0 11 7 202 0 13 7 202 0 22 7 202 0 23 7 202 0 28 7 202 0 29 7 202 0 30 7 202 0 31 7 202 0 32 7 202 0 33 7 202 0 34 7 202 0 35 7 202 0 36 7 202 0 37 7 202 0 38 7 202 0 39 7 202 0 40 7 202 0 41 7 202 0 43 7 202 0 45 7 202 0 49 7 202 0 55 7 202 0 56 7 202 0 58 7 202 0 59 7 202 0 64 7 202 0 66 7 202 0 67 7 202 0 69 7 202 0 75 7 202 0 78 7 202 0 79 7 202 0 84 7 202 0 86 7 202 0 88 7 202 0 90 7 202 0 91 7 202 0 93 7 202 0 94 7 202 0 98 7 202 0 100 7 202 0 101 7 202 0 102 7 202 0 104 7 202 0 107 7 202 0 108 7 202 0 109 7 202 0 110 7 202 0 114 7 202 0 117 7 202 0 118 7 202 0 123 7 202 0 125 7 202 0 128 7 202 0 133 7 202 0 134 7 202 0 135 7 202 0 136 7 202 0 140 7 202 0 142 7 202 0 144 7 202 0 145 7 202 0 150 7 202 0 151 7 202 0 162 7 202 0 167 7 202 0 168 7 202 0 171 3 123 0 172 7 202 0 173 7 202 1 144] 
#[1 7 206 0 3 7 206 0 4 7 206 0 5 7 206 0 7 7 206 0 11 7 206 0 13 7 206 0 22 7 206 0 23 7 206 0 28 7 206 0 29 7 206 0 30 7 206 0 31 7 206 0 32 7 206 0 33 7 206 0 34 7 206 0 35 7 206 0 36 7 206 0 37 7 206 0 38 7 206 0 39 7 206 0 40 7 206 0 41 7 206 0 43 7 206 0 45 7 206 0 49 7 206 0 55 7 206 0 56 7 206 0 58 7 206 0 59 7 206 0 64 7 206 0 66 7 206 0 67 7 206 0 69 7 206 0 75 7 206 0 78 7 206 0 79 7 206 0 84 7 206 0 86 7 206 0 88 7 206 0 90 7 206 0 91 7 206 0 93 7 206 0 94 7 206 0 98 7 206 0 100 7 206 0 101 7 206 0 102 7 206 0 104 7 206 0 107 7 206 0 108 7 206 0 109 7 206 0 110 7 206 0 114 7 206 0 117 7 206 0 118 7 206 0 123 7 206 0 125 7 206 0 128 7 206 0 133 7 206 0 134 7 206 0 135 7 206 0 136 7 206 0 140 7 206 0 142 7 206 0 144 7 206 0 145 7 206 0 150 7 206 0 151 7 206 0 162 7 206 0 167 7 206 0 168 7 206 0 171 3 127 0 172 7 206 0 173 7 206 1 144] 
#[1 7 210 0 3 7 210 0 4 7 210 0 5 7 210 0 7 7 210 0 11 7 210 0 13 7 210 0 22 7 210 0 23 7 210 0 28 7 210 0 29 7 210 0 30 7 210 0 31 7 210 0 32 7 210 0 33 7 210 0 34 7 210 0 35 7 210 0 36 7 210 0 37 7 210 0 38 7 210 0 39 7 210 0 40 7 210 0 41 7 210 0 43 7 210 0 45 7 210 0 49 7 210 0 55 7 210 0 56 7 210 0 58 7 210 0 59 7 210 0 64 7 210 0 66 7 210 0 67 7 210 0 69 7 210 0 75 7 210 0 78 7 210 0 79 7 210 0 84 7 210 0 86 7 210 0 88 7 210 0 90 7 210 0 91 7 210 0 93 7 210 0 94 7 210 0 98 7 210 0 100 7 210 0 101 7 210 0 102 7 210 0 104 7 210 0 107 7 210 0 108 7 210 0 109 7 210 0 110 7 210 0 114 7 210 0 117 7 210 0 118 7 210 0 123 7 210 0 125 7 210 0 128 7 210 0 133 7 210 0 134 7 210 0 135 7 210 0 136 7 210 0 140 7 210 0 142 7 210 0 144 7 210 0 145 7 210 0 150 7 210 0 151 7 210 0 162 7 210 0 167 7 210 0 168 7 210 0 171 3 131 0 172 7 210 0 173 7 210 1 144] 
#[1 7 214 0 3 7 214 0 4 7 214 0 5 7 214 0 7 7 214 0 11 7 214 0 13 7 214 0 22 7 214 0 23 7 214 0 28 7 214 0 29 7 214 0 30 7 214 0 31 7 214 0 32 7 214 0 33 7 214 0 34 7 214 0 35 7 214 0 36 7 214 0 37 7 214 0 38 7 214 0 39 7 214 0 40 7 214 0 41 7 214 0 43 7 214 0 45 7 214 0 49 7 214 0 55 7 214 0 56 7 214 0 58 7 214 0 59 7 214 0 64 7 214 0 66 7 214 0 67 7 214 0 69 7 214 0 75 7 214 0 78 7 214 0 79 7 214 0 84 7 214 0 86 7 214 0 88 7 214 0 90 7 214 0 91 7 214 0 93 7 214 0 94 7 214 0 98 7 214 0 100 7 214 0 101 7 214 0 102 7 214 0 104 7 214 0 107 7 214 0 108 7 214 0 109 7 214 0 110 7 214 0 114 7 214 0 117 7 214 0 118 7 214 0 123 7 214 0 125 7 214 0 128 7 214 0 133 7 214 0 134 7 214 0 135 7 214 0 136 7 214 0 140 7 214 0 142 7 214 0 144 7 214 0 145 7 214 0 150 7 214 0 151 7 214 0 162 7 214 0 167 7 214 0 168 7 214 0 171 3 135 0 172 7 214 0 173 7 214 1 144] 
#[0 7 253 0 172] 
#[1 7 218 0 3 7 218 0 4 7 218 0 5 7 218 0 7 7 218 0 11 7 218 0 13 7 218 0 22 7 218 0 23 7 218 0 28 7 218 0 29 7 218 0 30 7 218 0 31 7 218 0 32 7 218 0 33 7 218 0 34 7 218 0 35 7 218 0 36 7 218 0 37 7 218 0 38 7 218 0 39 7 218 0 40 7 218 0 41 7 218 0 43 7 218 0 45 7 218 0 49 7 218 0 55 7 218 0 56 7 218 0 58 7 218 0 59 7 218 0 64 7 218 0 66 7 218 0 67 7 218 0 69 7 218 0 75 7 218 0 78 7 218 0 79 7 218 0 84 7 218 0 86 7 218 0 88 7 218 0 90 7 218 0 91 7 218 0 93 7 218 0 94 7 218 0 98 7 218 0 100 7 218 0 101 7 218 0 102 7 218 0 104 7 218 0 107 7 218 0 108 7 218 0 109 7 218 0 110 7 218 0 114 7 218 0 117 7 218 0 118 7 218 0 123 7 218 0 125 7 218 0 128 7 218 0 133 7 218 0 134 7 218 0 135 7 218 0 136 7 218 0 140 7 218 0 142 7 218 0 144 7 218 0 145 7 218 0 150 7 218 0 151 7 218 0 162 7 218 0 167 7 218 0 168 7 218 0 171 3 139 0 172 7 218 0 173 7 218 1 144] 
#[1 7 222 0 3 7 222 0 4 7 222 0 5 7 222 0 7 7 222 0 11 7 222 0 13 7 222 0 22 7 222 0 23 7 222 0 28 7 222 0 29 7 222 0 30 7 222 0 31 7 222 0 32 7 222 0 33 7 222 0 34 7 222 0 35 7 222 0 36 7 222 0 37 7 222 0 38 7 222 0 39 7 222 0 40 7 222 0 41 7 222 0 43 7 222 0 45 7 222 0 49 7 222 0 55 7 222 0 56 7 222 0 58 7 222 0 59 7 222 0 64 7 222 0 66 7 222 0 67 7 222 0 69 7 222 0 75 7 222 0 78 7 222 0 79 7 222 0 84 7 222 0 86 7 222 0 88 7 222 0 90 7 222 0 91 7 222 0 93 7 222 0 94 7 222 0 98 7 222 0 100 7 222 0 101 7 222 0 102 7 222 0 104 7 222 0 107 7 222 0 108 7 222 0 109 7 222 0 110 7 222 0 114 7 222 0 117 7 222 0 118 7 222 0 123 7 222 0 125 7 222 0 128 7 222 0 133 7 222 0 134 7 222 0 135 7 222 0 136 7 222 0 140 7 222 0 142 7 222 0 144 7 222 0 145 7 222 0 150 7 222 0 151 7 222 0 162 7 222 0 167 7 222 0 168 7 222 0 171 3 143 0 172 7 222 0 173 7 222 1 144] 
#[1 7 226 0 3 7 226 0 4 7 226 0 5 7 226 0 7 7 226 0 11 7 226 0 13 7 226 0 22 7 226 0 23 7 226 0 28 7 226 0 29 7 226 0 30 7 226 0 31 7 226 0 32 7 226 0 33 7 226 0 34 7 226 0 35 7 226 0 36 7 226 0 37 7 226 0 38 7 226 0 39 7 226 0 40 7 226 0 41 7 226 0 43 7 226 0 45 7 226 0 49 7 226 0 55 7 226 0 56 7 226 0 58 7 226 0 59 7 226 0 64 7 226 0 66 7 226 0 67 7 226 0 69 7 226 0 75 7 226 0 78 7 226 0 79 7 226 0 84 7 226 0 86 7 226 0 88 7 226 0 90 7 226 0 91 7 226 0 93 7 226 0 94 7 226 0 98 7 226 0 100 7 226 0 101 7 226 0 102 7 226 0 104 7 226 0 107 7 226 0 108 7 226 0 109 7 226 0 110 7 226 0 114 7 226 0 117 7 226 0 118 7 226 0 123 7 226 0 125 7 226 0 128 7 226 0 133 7 226 0 134 7 226 0 135 7 226 0 136 7 226 0 140 7 226 0 142 7 226 0 144 7 226 0 145 7 226 0 150 7 226 0 151 7 226 0 162 7 226 0 167 7 226 0 168 7 226 0 171 3 147 0 172 7 226 0 173 7 226 1 144] 
#[1 7 230 0 3 7 230 0 4 7 230 0 5 7 230 0 7 7 230 0 11 7 230 0 13 7 230 0 22 7 230 0 23 7 230 0 28 7 230 0 29 7 230 0 30 7 230 0 31 7 230 0 32 7 230 0 33 7 230 0 34 7 230 0 35 7 230 0 36 7 230 0 37 7 230 0 38 7 230 0 39 7 230 0 40 7 230 0 41 7 230 0 43 7 230 0 45 7 230 0 49 7 230 0 55 7 230 0 56 7 230 0 58 7 230 0 59 7 230 0 64 7 230 0 66 7 230 0 67 7 230 0 69 7 230 0 75 7 230 0 78 7 230 0 79 7 230 0 84 7 230 0 86 7 230 0 88 7 230 0 90 7 230 0 91 7 230 0 93 7 230 0 94 7 230 0 98 7 230 0 100 7 230 0 101 7 230 0 102 7 230 0 104 7 230 0 107 7 230 0 108 7 230 0 109 7 230 0 110 7 230 0 114 7 230 0 117 7 230 0 118 7 230 0 123 7 230 0 125 7 230 0 128 7 230 0 133 7 230 0 134 7 230 0 135 7 230 0 136 7 230 0 140 7 230 0 142 7 230 0 144 7 230 0 145 7 230 0 150 7 230 0 151 7 230 0 162 7 230 0 167 7 230 0 168 7 230 0 171 3 151 0 172 7 230 0 173 7 230 1 144] 
#[1 7 234 0 3 7 234 0 4 7 234 0 5 7 234 0 7 7 234 0 11 7 234 0 13 7 234 0 22 7 234 0 23 7 234 0 28 7 234 0 29 7 234 0 30 7 234 0 31 7 234 0 32 7 234 0 33 7 234 0 34 7 234 0 35 7 234 0 36 7 234 0 37 7 234 0 38 7 234 0 39 7 234 0 40 7 234 0 41 7 234 0 43 7 234 0 45 7 234 0 49 7 234 0 55 7 234 0 56 7 234 0 58 7 234 0 59 7 234 0 64 7 234 0 66 7 234 0 67 7 234 0 69 7 234 0 75 7 234 0 78 7 234 0 79 7 234 0 84 7 234 0 86 7 234 0 88 7 234 0 90 7 234 0 91 7 234 0 93 7 234 0 94 7 234 0 98 7 234 0 100 7 234 0 101 7 234 0 102 7 234 0 104 7 234 0 107 7 234 0 108 7 234 0 109 7 234 0 110 7 234 0 114 7 234 0 117 7 234 0 118 7 234 0 123 7 234 0 125 7 234 0 128 7 234 0 133 7 234 0 134 7 234 0 135 7 234 0 136 7 234 0 140 7 234 0 142 7 234 0 144 7 234 0 145 7 234 0 150 7 234 0 151 7 234 0 162 7 234 0 167 7 234 0 168 7 234 0 171 3 155 0 172 7 234 0 173 7 234 1 144] 
#[1 7 238 0 3 7 238 0 4 7 238 0 5 7 238 0 7 7 238 0 11 7 238 0 13 7 238 0 22 7 238 0 23 7 238 0 28 7 238 0 29 7 238 0 30 7 238 0 31 7 238 0 32 7 238 0 33 7 238 0 34 7 238 0 35 7 238 0 36 7 238 0 37 7 238 0 38 7 238 0 39 7 238 0 40 7 238 0 41 7 238 0 43 7 238 0 45 7 238 0 49 7 238 0 55 7 238 0 56 7 238 0 58 7 238 0 59 7 238 0 64 7 238 0 66 7 238 0 67 7 238 0 69 7 238 0 75 7 238 0 78 7 238 0 79 7 238 0 84 7 238 0 86 7 238 0 88 7 238 0 90 7 238 0 91 7 238 0 93 7 238 0 94 7 238 0 98 7 238 0 100 7 238 0 101 7 238 0 102 7 238 0 104 7 238 0 107 7 238 0 108 7 238 0 109 7 238 0 110 7 238 0 114 7 238 0 117 7 238 0 118 7 238 0 123 7 238 0 125 7 238 0 128 7 238 0 133 7 238 0 134 7 238 0 135 7 238 0 136 7 238 0 140 7 238 0 142 7 238 0 144 7 238 0 145 7 238 0 150 7 238 0 151 7 238 0 162 7 238 0 167 7 238 0 168 7 238 0 171 3 159 0 172 7 238 0 173 7 238 1 144] 
#[1 7 242 0 3 7 242 0 4 7 242 0 5 7 242 0 7 7 242 0 11 7 242 0 13 7 242 0 22 7 242 0 23 7 242 0 28 7 242 0 29 7 242 0 30 7 242 0 31 7 242 0 32 7 242 0 33 7 242 0 34 7 242 0 35 7 242 0 36 7 242 0 37 7 242 0 38 7 242 0 39 7 242 0 40 7 242 0 41 7 242 0 43 7 242 0 45 7 242 0 49 7 242 0 55 7 242 0 56 7 242 0 58 7 242 0 59 7 242 0 64 7 242 0 66 7 242 0 67 7 242 0 69 7 242 0 75 7 242 0 78 7 242 0 79 7 242 0 84 7 242 0 86 7 242 0 88 7 242 0 90 7 242 0 91 7 242 0 93 7 242 0 94 7 242 0 98 7 242 0 100 7 242 0 101 7 242 0 102 7 242 0 104 7 242 0 107 7 242 0 108 7 242 0 109 7 242 0 110 7 242 0 114 7 242 0 117 7 242 0 118 7 242 0 123 7 242 0 125 7 242 0 128 7 242 0 133 7 242 0 134 7 242 0 135 7 242 0 136 7 242 0 140 7 242 0 142 7 242 0 144 7 242 0 145 7 242 0 150 7 242 0 151 7 242 0 162 7 242 0 167 7 242 0 168 7 242 0 171 3 163 0 172 7 242 0 173 7 242 1 144] 
#[1 7 246 0 3 7 246 0 4 7 246 0 5 7 246 0 7 7 246 0 11 7 246 0 13 7 246 0 22 7 246 0 23 7 246 0 28 7 246 0 29 7 246 0 30 7 246 0 31 7 246 0 32 7 246 0 33 7 246 0 34 7 246 0 35 7 246 0 36 7 246 0 37 7 246 0 38 7 246 0 39 7 246 0 40 7 246 0 41 7 246 0 43 7 246 0 45 7 246 0 49 7 246 0 55 7 246 0 56 7 246 0 58 7 246 0 59 7 246 0 64 7 246 0 66 7 246 0 67 7 246 0 69 7 246 0 75 7 246 0 78 7 246 0 79 7 246 0 84 7 246 0 86 7 246 0 88 7 246 0 90 7 246 0 91 7 246 0 93 7 246 0 94 7 246 0 98 7 246 0 100 7 246 0 101 7 246 0 102 7 246 0 104 7 246 0 107 7 246 0 108 7 246 0 109 7 246 0 110 7 246 0 114 7 246 0 117 7 246 0 118 7 246 0 123 7 246 0 125 7 246 0 128 7 246 0 133 7 246 0 134 7 246 0 135 7 246 0 136 7 246 0 140 7 246 0 142 7 246 0 144 7 246 0 145 7 246 0 150 7 246 0 151 7 246 0 162 7 246 0 167 7 246 0 168 7 246 0 171 3 167 0 172 7 246 0 173 7 246 1 144] 
#[1 7 250 0 3 7 250 0 4 7 250 0 5 7 250 0 7 7 250 0 11 7 250 0 13 7 250 0 22 7 250 0 23 7 250 0 28 7 250 0 29 7 250 0 30 7 250 0 31 7 250 0 32 7 250 0 33 7 250 0 34 7 250 0 35 7 250 0 36 7 250 0 37 7 250 0 38 7 250 0 39 7 250 0 40 7 250 0 41 7 250 0 43 7 250 0 45 7 250 0 49 7 250 0 55 7 250 0 56 7 250 0 58 7 250 0 59 7 250 0 64 7 250 0 66 7 250 0 67 7 250 0 69 7 250 0 75 7 250 0 78 7 250 0 79 7 250 0 84 7 250 0 86 7 250 0 88 7 250 0 90 7 250 0 91 7 250 0 93 7 250 0 94 7 250 0 98 7 250 0 100 7 250 0 101 7 250 0 102 7 250 0 104 7 250 0 107 7 250 0 108 7 250 0 109 7 250 0 110 7 250 0 114 7 250 0 117 7 250 0 118 7 250 0 123 7 250 0 125 7 250 0 128 7 250 0 133 7 250 0 134 7 250 0 135 7 250 0 136 7 250 0 140 7 250 0 142 7 250 0 144 7 250 0 145 7 250 0 150 7 250 0 151 7 250 0 162 7 250 0 167 7 250 0 168 7 250 0 171 3 171 0 172 7 250 0 173 7 250 1 144] 
#[0 17 221 0 172] 
#[0 17 225 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 17 229 1 38 5 73 1 39 5 77 1 40 17 229 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 17 229 1 47 5 109 1 49 5 113 1 51 17 229 1 53 17 229 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 7 254 0 11 7 254 0 55 7 254 0 84 7 254 0 98 7 254 0 100 7 254 0 101 7 254 0 123 7 254 0 151 7 254 0 162 3 175 0 172 7 254 0 173 7 254 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 17 233 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 17 237 1 38 5 73 1 39 5 77 1 40 17 237 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 17 237 1 47 5 109 1 49 5 113 1 51 17 237 1 53 17 237 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 17 241 1 38 5 73 1 39 5 77 1 40 17 241 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 17 241 1 47 5 109 1 49 5 113 1 51 17 241 1 53 17 241 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 2 0 11 8 2 0 55 8 2 0 84 8 2 0 98 8 2 0 100 8 2 0 101 8 2 0 123 8 2 0 151 8 2 0 162 3 179 0 172 8 2 0 173 8 2 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 17 245 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 17 249 1 38 5 73 1 39 5 77 1 40 17 249 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 17 249 1 47 5 109 1 49 5 113 1 51 17 249 1 53 17 249 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 8 6 0 172] 
#[0 8 10 0 172] 
#[0 8 14 0 172] 
#[0 8 18 0 172] 
#[0 8 22 0 172] 
#[0 17 253 0 172] 
#[1 5 6 0 11 5 6 0 13 10 41 0 18 5 6 0 55 10 45 0 66 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 5 6 0 172 5 6 0 173 18 1 1 66 5 6 1 144] 
#[1 8 26 0 11 13 73 0 13 8 26 0 55 8 26 0 84 8 26 0 98 8 26 0 100 8 26 0 101 8 26 0 123 8 26 0 151 8 26 0 162 8 26 0 172 8 26 0 173 13 77 1 65 8 26 1 144] 
#[1 8 30 0 11 13 73 0 13 8 30 0 55 8 30 0 84 8 30 0 98 8 30 0 100 8 30 0 101 8 30 0 123 8 30 0 151 8 30 0 162 8 30 0 172 8 30 0 173 13 77 1 65 8 30 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 18 5 1 38 5 73 1 39 5 77 1 40 18 5 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 5 1 47 5 109 1 49 5 113 1 51 18 5 1 53 18 5 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 34 0 11 8 34 0 13 8 34 0 55 8 34 0 84 8 34 0 98 8 34 0 100 8 34 0 101 8 34 0 123 8 34 0 151 8 34 0 162 3 183 0 172 8 34 0 173 8 34 1 144] 
#[1 5 6 0 11 5 6 0 13 5 6 0 55 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 3 187 0 172 5 6 0 173 18 13 1 66 5 6 1 144] 
#[1 8 38 0 11 13 73 0 13 8 38 0 55 8 38 0 84 8 38 0 98 8 38 0 100 8 38 0 101 8 38 0 123 8 38 0 151 8 38 0 162 8 38 0 172 8 38 0 173 13 77 1 65 8 38 1 144] 
#[1 5 6 0 11 5 6 0 13 10 41 0 18 5 6 0 55 10 45 0 66 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 5 6 0 172 5 6 0 173 18 17 1 66 5 6 1 144] 
#[1 8 42 0 11 13 73 0 13 8 42 0 55 8 42 0 84 8 42 0 98 8 42 0 100 8 42 0 101 8 42 0 123 8 42 0 151 8 42 0 162 8 42 0 172 8 42 0 173 13 77 1 65 8 42 1 144] 
#[0 18 21 0 67] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 79 0 174 0 86 0 174 0 90 0 174 0 91 0 174 0 101 0 174 0 109 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 140 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 18 25 0 228 18 25 0 229 18 25 0 233] 
#[1 18 29 0 5 8 46 0 22 8 46 0 23 8 46 0 43 8 46 0 45 8 46 0 49 8 46 0 55 8 46 0 56 8 46 0 58 8 46 0 59 8 46 0 64 8 46 0 66 8 46 0 67 8 46 0 69 8 46 0 79 8 46 0 86 8 46 0 90 8 46 0 91 8 46 0 101 8 46 0 109 8 46 0 117 8 46 0 118 8 46 0 125 8 46 0 140 8 46 0 145 8 46 0 150 8 46 0 167 8 46 0 168 8 46 0 171 18 33 0 172 8 46 0 173] 
#[1 8 50 0 11 8 50 0 22 8 50 0 23 8 50 0 28 8 50 0 29 8 50 0 30 8 50 0 31 8 50 0 32 8 50 0 33 8 50 0 34 8 50 0 35 8 50 0 36 8 50 0 37 8 50 0 38 8 50 0 39 8 50 0 40 8 50 0 41 8 50 0 43 8 50 0 45 8 50 0 49 8 50 0 55 8 50 0 56 8 50 0 58 8 50 0 59 8 50 0 64 8 50 0 66 8 50 0 67 8 50 0 69 8 50 0 75 8 50 0 78 8 50 0 79 8 50 0 84 8 50 0 86 8 50 0 88 8 50 0 90 8 50 0 91 8 50 0 93 8 50 0 94 8 50 0 98 8 50 0 100 8 50 0 101 8 50 0 102 8 50 0 104 8 50 0 107 8 50 0 108 8 50 0 109 8 50 0 110 8 50 0 114 8 50 0 117 8 50 0 118 8 50 0 123 8 50 0 125 8 50 0 128 8 50 0 133 8 50 0 134 8 50 0 135 8 50 0 136 8 50 0 140 8 50 0 142 8 50 0 144 8 50 0 145 8 50 0 150 8 50 0 151 8 50 0 162 8 50 0 167 8 50 0 168 8 50 0 171 3 191 0 172 8 50 0 173 8 50 1 144] 
#[1 8 54 0 11 8 54 0 22 8 54 0 23 8 54 0 28 8 54 0 29 8 54 0 30 8 54 0 31 8 54 0 32 8 54 0 33 8 54 0 34 8 54 0 35 8 54 0 36 8 54 0 37 8 54 0 38 8 54 0 39 8 54 0 40 8 54 0 41 8 54 0 43 8 54 0 45 8 54 0 49 8 54 0 55 8 54 0 56 8 54 0 58 8 54 0 59 8 54 0 64 8 54 0 66 8 54 0 67 8 54 0 69 8 54 0 75 8 54 0 78 8 54 0 79 8 54 0 84 8 54 0 86 8 54 0 88 8 54 0 90 8 54 0 91 8 54 0 93 8 54 0 94 8 54 0 98 8 54 0 100 8 54 0 101 8 54 0 102 8 54 0 104 8 54 0 107 8 54 0 108 8 54 0 109 8 54 0 110 8 54 0 114 8 54 0 117 8 54 0 118 8 54 0 123 8 54 0 125 8 54 0 128 8 54 0 133 8 54 0 134 8 54 0 135 8 54 0 136 8 54 0 140 8 54 0 142 8 54 0 144 8 54 0 145 8 54 0 150 8 54 0 151 8 54 0 162 8 54 0 167 8 54 0 168 8 54 0 171 3 195 0 172 8 54 0 173 8 54 1 144] 
#[0 8 58 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 18 37 1 38 5 73 1 39 5 77 1 40 18 37 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 37 1 47 5 109 1 49 5 113 1 51 18 37 1 53 18 37 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 62 0 4 8 62 0 7 7 253 0 172] 
#[0 8 66 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 70 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 74 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 18 41 0 172] 
#[0 18 45 0 123] 
#[0 8 78 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 18 49 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 18 53 1 38 5 73 1 39 5 77 1 40 18 53 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 53 1 47 5 109 1 49 5 113 1 51 18 53 1 53 18 53 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 82 0 55 8 82 0 84 8 82 0 98 8 82 0 100 8 82 0 101 8 82 0 123 8 82 0 151 8 82 0 162 3 199 0 173] 
#[0 8 86 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173] 
#[1 8 90 0 11 8 90 0 55 8 90 0 84 8 90 0 98 8 90 0 100 8 90 0 101 8 90 0 123 8 90 0 151 8 90 0 162 3 203 0 172 8 90 0 173 8 90 1 144] 
#[1 8 94 0 11 8 94 0 55 8 94 0 84 8 94 0 98 8 94 0 100 8 94 0 101 8 94 0 123 8 94 0 151 8 94 0 162 3 207 0 172 8 94 0 173 8 94 1 144] 
#[0 18 57 0 172] 
#[0 18 61 0 172] 
#[0 18 65 0 102] 
#[0 18 69 0 18] 
#[0 18 73 0 172] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 18 81 0 228 18 81 0 229 18 77 0 230 18 81 0 233 18 81 1 1 18 81 1 2] 
#[0 18 85 0 172] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 18 93 0 228 18 93 0 229 18 89 0 230 18 93 0 233 18 93 1 1 18 93 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 18 97 1 4] 
#[0 18 101 0 18] 
#[0 8 98 0 4 0 7 0 172] 
#[0 8 102 0 4 0 7 0 172] 
#[0 18 105 0 172] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 18 113 0 228 18 113 0 229 18 109 0 230 18 113 0 233 18 113 1 1 18 113 1 2] 
#[0 8 106 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 18 117 0 172] 
#[0 18 121 0 4] 
#[0 8 110 0 4 0 7 0 172] 
#[0 8 114 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 4 237 0 8 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 3 225 0 162 1 21 0 167 1 5 0 168 1 9 0 171 18 125 0 182 18 125 0 191 1 21 0 194 18 125 0 195 18 125 0 196 18 125 0 197 18 125 1 43 18 125 1 105] 
#[0 8 118 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 7 62 0 11 7 62 0 55 7 62 0 84 7 62 0 98 7 62 0 100 7 62 0 101 7 62 0 123 7 62 0 151 7 62 0 162 7 62 0 172 7 62 0 173 18 129 0 220 7 62 1 144] 
#[1 18 133 0 11 8 122 0 55 8 122 0 84 8 122 0 98 8 122 0 100 8 122 0 101 8 122 0 123 8 122 0 151 8 122 0 162 3 211 0 172 8 122 0 173 18 141 0 219 8 122 1 144] 
#[1 18 145 0 98 18 149 0 100 18 153 0 101 3 225 0 162 18 157 0 182 18 161 1 86 18 165 1 88 18 161 1 89] 
#[1 18 173 0 98 18 177 0 99] 
#[1 18 181 0 98 18 185 0 99] 
#[1 8 126 0 11 8 126 0 55 8 126 0 84 8 126 0 98 8 126 0 100 8 126 0 101 8 126 0 123 8 126 0 151 8 126 0 162 3 215 0 172 8 126 0 173 8 126 1 144] 
#[0 8 130 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 18 189 0 84 18 193 0 101 3 225 0 162 18 197 0 182 18 201 1 94 18 205 1 98] 
#[0 8 134 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 8 138 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 18 209 0 172] 
#[0 8 142 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 18 213 1 38 5 73 1 39 5 77 1 40 18 213 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 213 1 47 5 109 1 49 5 113 1 51 18 213 1 53 18 213 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 146 0 3 8 146 0 4 8 146 0 5 8 146 0 7 8 146 0 11 8 146 0 22 8 146 0 23 8 146 0 28 8 146 0 29 8 146 0 30 8 146 0 31 8 146 0 32 8 146 0 33 8 146 0 34 8 146 0 35 8 146 0 36 8 146 0 37 8 146 0 38 8 146 0 39 8 146 0 40 8 146 0 41 8 146 0 43 8 146 0 45 8 146 0 49 8 146 0 55 8 146 0 56 8 146 0 58 8 146 0 59 8 146 0 64 8 146 0 66 8 146 0 67 8 146 0 69 8 146 0 75 8 146 0 78 8 146 0 79 8 146 0 84 8 146 0 86 8 146 0 88 8 146 0 90 8 146 0 91 8 146 0 93 8 146 0 94 8 146 0 98 8 146 0 100 8 146 0 101 8 146 0 102 8 146 0 104 8 146 0 107 8 146 0 108 8 146 0 109 8 146 0 110 8 146 0 114 8 146 0 117 8 146 0 118 8 146 0 123 8 146 0 125 8 146 0 128 8 146 0 133 8 146 0 134 8 146 0 135 8 146 0 136 8 146 0 140 8 146 0 142 8 146 0 144 8 146 0 145 8 146 0 150 8 146 0 151 8 146 0 162 8 146 0 167 8 146 0 168 8 146 0 171 3 219 0 172 8 146 0 173 8 146 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 18 217 0 172 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 18 221 1 38 5 73 1 39 5 77 1 40 18 221 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 221 1 47 5 109 1 49 5 113 1 51 18 221 1 53 18 221 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 18 225 0 101 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 113 0 173 13 97 0 191 1 21 0 194 13 97 0 195 13 97 0 196 13 97 0 197 13 101 0 246] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 18 229 0 101 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 3 113 0 173 13 205 0 191 1 21 0 194 13 205 0 195 13 205 0 196 13 205 0 197 13 209 0 251] 
#[0 8 150 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 154 0 11 8 154 0 55 8 154 0 84 8 154 0 98 8 154 0 100 8 154 0 101 8 154 0 123 8 154 0 151 8 154 0 162 3 223 0 172 8 154 0 173 8 154 1 144] 
#[1 8 158 0 11 8 158 0 55 8 158 0 84 8 158 0 98 8 158 0 100 8 158 0 101 8 158 0 123 8 158 0 151 8 158 0 162 3 227 0 172 8 158 0 173 8 158 1 144] 
#[1 8 162 0 11 8 162 0 55 8 162 0 84 8 162 0 98 8 162 0 100 8 162 0 101 8 162 0 123 8 162 0 151 8 162 0 162 3 231 0 172 8 162 0 173 8 162 1 144] 
#[1 8 166 0 11 8 166 0 55 8 166 0 84 8 166 0 98 8 166 0 100 8 166 0 101 8 166 0 123 8 166 0 151 8 166 0 162 3 235 0 172 8 166 0 173 8 166 1 144] 
#[0 8 170 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 8 174 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 49 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 69 0 79 0 81 0 83 0 84 0 86 0 90 0 91 0 98 0 100 0 101 0 109 0 117 0 118 0 123 0 125 0 126 0 131 0 140 0 145 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 18 233 1 38 5 73 1 39 5 77 1 40 18 233 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 233 1 47 5 109 1 49 5 113 1 51 18 233 1 53 18 233 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 18 237 0 236 18 241 1 38 5 73 1 39 5 77 1 40 18 241 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 18 241 1 47 5 109 1 49 5 113 1 51 18 241 1 53 18 241 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 8 178 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 8 182 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 8 186 0 4 4 233 0 6 8 186 0 7 4 237 0 8 0 33 0 9 8 186 0 11 8 186 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 3 239 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 8 186 0 84 1 21 0 86 1 21 0 90 1 21 0 91 8 186 0 98 8 186 0 100 8 186 0 101 1 21 0 109 1 21 0 117 1 21 0 118 8 186 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 8 186 0 151 4 249 0 155 4 253 0 160 5 1 0 161 3 243 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 8 186 0 172 8 186 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 18 245 1 132 5 153 1 141 5 153 1 143 8 186 1 144] 
#[0 8 190 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 8 194 0 4 4 233 0 6 8 194 0 7 4 237 0 8 0 33 0 9 8 194 0 11 8 194 0 13 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 3 247 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 8 194 0 84 1 21 0 86 1 21 0 90 1 21 0 91 8 194 0 98 8 194 0 100 8 194 0 101 1 21 0 109 1 21 0 117 1 21 0 118 8 194 0 123 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 8 194 0 151 4 249 0 155 4 253 0 160 5 1 0 161 3 251 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 8 194 0 172 8 194 0 173 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 18 249 1 132 5 153 1 141 5 153 1 143 8 194 1 144] 
#[0 8 198 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 18 253 0 172] 
#[0 19 1 0 172] 
#[1 3 233 0 173 3 241 0 207 19 5 0 213] 
#[0 19 9 0 101] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 19 13 1 38 5 73 1 39 5 77 1 40 19 13 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 19 13 1 47 5 109 1 49 5 113 1 51 19 13 1 53 19 13 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 3 255 0 3 7 253 0 172 3 255 0 173] 
#[0 19 17 0 101] 
#[0 19 21 0 172] 
#[0 19 25 0 101] 
#[1 8 73 0 3 3 233 0 173 3 241 0 207 19 29 0 213 19 33 0 230] 
#[0 19 37 0 101] 
#[0 19 41 0 101] 
#[0 19 45 0 101] 
#[0 19 49 0 172] 
#[0 19 53 0 172] 
#[0 19 57 0 144] 
#[0 19 61 0 172] 
#[0 19 65 0 172] 
#[1 0 174 0 3 4 61 0 5 19 69 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 19 73 1 11] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 19 77 1 11] 
#[1 3 233 0 173 3 241 0 207 19 81 0 213] 
#[1 8 169 0 3 19 85 0 253] 
#[1 8 169 0 3 19 89 0 253] 
#[1 8 169 0 3 19 93 0 253] 
#[1 19 97 0 172 4 214 0 173 19 97 1 13] 
#[1 3 233 0 173 3 241 0 207 19 101 0 213] 
#[1 3 233 0 173 3 241 0 207 19 105 0 213] 
#[0 19 109 0 101] 
#[1 8 169 0 3 19 113 0 172 19 117 0 253] 
#[0 19 121 0 172] 
#[0 19 125 0 172] 
#[0 19 129 0 172] 
#[1 8 169 0 3 19 133 0 172 4 214 0 173 19 137 0 253 19 141 1 13] 
#[1 0 174 0 3 4 61 0 5 19 145 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 19 149 1 11] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 19 153 1 11] 
#[1 3 233 0 173 3 241 0 207 19 157 0 213] 
#[1 8 169 0 3 19 161 0 253] 
#[1 8 169 0 3 19 165 0 253] 
#[1 8 169 0 3 19 169 0 253] 
#[1 19 173 0 172 4 214 0 173 19 173 1 13] 
#[1 3 233 0 173 3 241 0 207 19 177 0 213] 
#[1 3 233 0 173 3 241 0 207 19 181 0 213] 
#[0 19 185 0 101] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 19 189 1 132 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 9 61 0 81 9 85 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 9 69 0 131 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 9 77 0 191 1 21 0 194 9 77 0 195 9 77 0 196 9 77 0 197 9 81 0 236 9 85 0 252 9 89 1 38 5 73 1 39 5 77 1 40 9 89 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 9 89 1 47 5 109 1 49 5 113 1 51 9 89 1 53 9 89 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 9 93 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 19 193 1 132 5 153 1 141 5 153 1 143] 
#[1 19 197 0 8 10 33 0 159] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 19 201 1 38 5 73 1 39 5 77 1 40 19 201 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 19 201 1 47 5 109 1 49 5 113 1 51 19 201 1 53 19 201 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 10 41 0 18 19 205 0 66] 
#[1 8 202 0 11 8 202 0 55 8 202 0 84 8 202 0 98 8 202 0 100 8 202 0 101 8 202 0 123 8 202 0 151 8 202 0 162 4 3 0 172 8 202 0 173 8 202 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 19 209 1 38 5 73 1 39 5 77 1 40 19 209 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 19 209 1 47 5 109 1 49 5 113 1 51 19 209 1 53 19 209 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 206 0 11 8 206 0 55 8 206 0 84 8 206 0 98 8 206 0 100 8 206 0 101 8 206 0 123 8 206 0 151 8 206 0 162 4 7 0 172 8 206 0 173 8 206 1 144] 
#[1 8 210 0 11 8 210 0 55 8 210 0 84 8 210 0 98 8 210 0 100 8 210 0 101 8 210 0 123 8 210 0 151 8 210 0 162 4 11 0 172 8 210 0 173 8 210 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 19 213 1 38 5 73 1 39 5 77 1 40 19 213 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 19 213 1 47 5 109 1 49 5 113 1 51 19 213 1 53 19 213 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 214 0 11 8 214 0 55 8 214 0 84 8 214 0 98 8 214 0 100 8 214 0 101 8 214 0 123 8 214 0 151 8 214 0 162 4 15 0 172 8 214 0 173 8 214 1 144] 
#[1 19 217 0 24 19 253 0 50 19 253 0 51 19 253 0 52 19 249 0 62 19 249 0 63 19 253 0 65 19 249 0 69 19 249 1 60 19 253 1 61] 
#[1 8 218 0 11 13 73 0 13 8 218 0 55 8 218 0 84 8 218 0 98 8 218 0 100 8 218 0 101 8 218 0 123 8 218 0 151 8 218 0 162 8 218 0 172 8 218 0 173 13 77 1 65 8 218 1 144] 
#[1 8 222 0 11 8 222 0 13 8 222 0 55 8 222 0 84 8 222 0 98 8 222 0 100 8 222 0 101 8 222 0 123 8 222 0 151 8 222 0 162 4 19 0 172 8 222 0 173 8 222 1 144] 
#[1 5 6 0 11 5 6 0 13 10 41 0 18 5 6 0 55 10 45 0 66 5 6 0 84 5 6 0 98 5 6 0 100 5 6 0 101 5 6 0 123 5 6 0 151 5 6 0 162 5 6 0 172 5 6 0 173 20 1 1 66 5 6 1 144] 
#[1 8 226 0 11 13 73 0 13 8 226 0 55 8 226 0 84 8 226 0 98 8 226 0 100 8 226 0 101 8 226 0 123 8 226 0 151 8 226 0 162 8 226 0 172 8 226 0 173 13 77 1 65 8 226 1 144] 
#[1 8 230 0 11 13 73 0 13 8 230 0 55 8 230 0 84 8 230 0 98 8 230 0 100 8 230 0 101 8 230 0 123 8 230 0 151 8 230 0 162 8 230 0 172 8 230 0 173 13 77 1 65 8 230 1 144] 
#[0 8 234 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 20 5 0 5 8 238 0 22 8 238 0 23 8 238 0 43 8 238 0 45 8 238 0 49 8 238 0 55 8 238 0 56 8 238 0 58 8 238 0 59 8 238 0 64 8 238 0 66 8 238 0 67 8 238 0 69 8 238 0 79 8 238 0 86 8 238 0 90 8 238 0 91 8 238 0 101 8 238 0 109 8 238 0 117 8 238 0 118 8 238 0 125 8 238 0 140 8 238 0 145 8 238 0 150 8 238 0 167 8 238 0 168 8 238 0 171 20 9 0 172 8 238 0 173] 
#[1 3 225 0 162 20 13 0 172 20 17 0 182] 
#[0 20 21 0 5] 
#[1 8 242 0 4 8 242 0 7 7 253 0 172] 
#[0 20 25 0 123] 
#[0 8 246 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 20 29 0 123] 
#[1 8 250 0 11 8 250 0 55 8 250 0 84 8 250 0 98 8 250 0 100 8 250 0 101 8 250 0 123 8 250 0 151 8 250 0 162 4 23 0 172 8 250 0 173 8 250 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 20 33 1 38 5 73 1 39 5 77 1 40 20 33 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 20 33 1 47 5 109 1 49 5 113 1 51 20 33 1 53 20 33 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 20 37 1 38 5 73 1 39 5 77 1 40 20 37 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 20 37 1 47 5 109 1 49 5 113 1 51 20 37 1 53 20 37 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 8 254 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 41 0 172] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 20 45 0 191 1 21 0 194 20 45 0 195 20 45 0 196 20 45 0 197] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 20 49 0 228 20 49 0 229 20 49 0 233 20 49 1 1 20 49 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 20 53 1 4] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 20 57 0 131 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 20 61 0 191 1 21 0 194 20 61 0 195 20 61 0 196 20 61 0 197] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 20 65 0 228 20 65 0 229 20 65 0 233 20 65 1 1 20 65 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 20 69 1 4] 
#[0 9 2 0 4 0 7 0 172] 
#[0 20 73 0 172] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 20 77 0 191 1 21 0 194 20 77 0 195 20 77 0 196 20 77 0 197] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 20 81 0 228 20 81 0 229 20 81 0 233 20 81 1 1 20 81 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 20 85 1 4] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 9 61 0 81 11 73 0 83 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 11 57 0 129 11 61 0 131 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 11 69 0 191 1 21 0 194 11 69 0 195 11 69 0 196 11 69 0 197 11 73 0 252 20 89 1 0] 
#[0 9 6 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 10 0 7 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 18 133 0 11 9 14 0 55 9 14 0 84 9 14 0 98 9 14 0 100 9 14 0 101 9 14 0 123 9 14 0 151 9 14 0 162 4 27 0 172 9 14 0 173 18 141 0 219 9 14 1 144] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 20 97 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 20 93 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 20 97 0 201 20 97 0 203 20 97 0 212 1 53 0 223 20 97 0 234 1 61 0 235 20 97 0 236 20 97 0 237 20 97 0 238 20 97 0 239 20 97 0 240 20 97 0 241 20 97 0 242 20 97 0 243 20 97 0 247 20 97 0 248 20 97 1 18 20 97 1 19 20 97 1 20 20 97 1 21 20 97 1 22 20 97 1 23 1 129 1 25 20 97 1 26 20 97 1 27 20 97 1 28 20 97 1 29 20 97 1 30 20 97 1 34 20 97 1 37 1 161 1 56 1 161 1 57 1 161 1 58 20 97 1 62 20 97 1 63 20 97 1 64 20 97 1 67 20 97 1 68 20 97 1 69 20 97 1 70 20 97 1 71 20 97 1 72 20 97 1 73 20 97 1 74 20 97 1 75 20 97 1 76 20 97 1 77 20 97 1 78 20 97 1 79 20 97 1 80 20 97 1 81 20 97 1 82 20 97 1 83 20 97 1 84 20 97 1 85 20 97 1 90 20 97 1 91 2 13 1 92 20 97 1 97 20 97 1 100 20 97 1 101 20 97 1 102 20 97 1 103 20 97 1 104 20 97 1 109 20 97 1 110 20 97 1 111 20 97 1 112 20 97 1 113 20 97 1 114 20 97 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 20 97 1 129 2 121 1 130 2 125 1 131 20 97 1 139 20 97 1 140 20 97 1 142] 
#[0 20 101 0 11] 
#[0 9 18 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 9 22 0 101 9 22 0 162 3 233 0 173 3 241 0 207 20 105 0 213] 
#[0 20 109 0 172] 
#[0 20 113 0 172] 
#[0 20 117 0 172] 
#[0 9 26 0 98 0 100 0 101 0 162] 
#[1 20 121 0 101 3 225 0 162 20 125 0 182] 
#[0 9 30 0 98 0 100 0 101 0 162] 
#[1 14 5 0 172 20 129 0 218] 
#[1 14 5 0 172 20 133 0 218] 
#[1 14 5 0 172 20 137 0 218] 
#[1 14 5 0 172 20 141 0 218] 
#[0 20 145 0 172] 
#[0 20 149 0 172] 
#[0 20 153 0 172] 
#[1 9 34 0 84 9 34 0 101 9 34 0 162 3 233 0 173 20 157 0 207] 
#[0 9 38 0 84 0 101 0 162] 
#[0 20 161 0 153] 
#[1 9 42 0 3 9 42 0 4 9 42 0 5 9 42 0 7 9 42 0 11 9 42 0 22 9 42 0 23 9 42 0 28 9 42 0 29 9 42 0 30 9 42 0 31 9 42 0 32 9 42 0 33 9 42 0 34 9 42 0 35 9 42 0 36 9 42 0 37 9 42 0 38 9 42 0 39 9 42 0 40 9 42 0 41 9 42 0 43 9 42 0 45 9 42 0 49 9 42 0 55 9 42 0 56 9 42 0 58 9 42 0 59 9 42 0 64 9 42 0 66 9 42 0 67 9 42 0 69 9 42 0 75 9 42 0 78 9 42 0 79 9 42 0 84 9 42 0 86 9 42 0 88 9 42 0 90 9 42 0 91 9 42 0 93 9 42 0 94 9 42 0 98 9 42 0 100 9 42 0 101 9 42 0 102 9 42 0 104 9 42 0 107 9 42 0 108 9 42 0 109 9 42 0 110 9 42 0 114 9 42 0 117 9 42 0 118 9 42 0 123 9 42 0 125 9 42 0 128 9 42 0 133 9 42 0 134 9 42 0 135 9 42 0 136 9 42 0 140 9 42 0 142 9 42 0 144 9 42 0 145 9 42 0 150 9 42 0 151 9 42 0 162 9 42 0 167 9 42 0 168 9 42 0 171 4 31 0 172 9 42 0 173 9 42 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 20 165 1 38 5 73 1 39 5 77 1 40 20 165 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 20 165 1 47 5 109 1 49 5 113 1 51 20 165 1 53 20 165 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 9 46 0 3 9 46 0 4 9 46 0 5 9 46 0 7 9 46 0 11 9 46 0 22 9 46 0 23 9 46 0 28 9 46 0 29 9 46 0 30 9 46 0 31 9 46 0 32 9 46 0 33 9 46 0 34 9 46 0 35 9 46 0 36 9 46 0 37 9 46 0 38 9 46 0 39 9 46 0 40 9 46 0 41 9 46 0 43 9 46 0 45 9 46 0 49 9 46 0 55 9 46 0 56 9 46 0 58 9 46 0 59 9 46 0 64 9 46 0 66 9 46 0 67 9 46 0 69 9 46 0 75 9 46 0 78 9 46 0 79 9 46 0 84 9 46 0 86 9 46 0 88 9 46 0 90 9 46 0 91 9 46 0 93 9 46 0 94 9 46 0 98 9 46 0 100 9 46 0 101 9 46 0 102 9 46 0 104 9 46 0 107 9 46 0 108 9 46 0 109 9 46 0 110 9 46 0 114 9 46 0 117 9 46 0 118 9 46 0 123 9 46 0 125 9 46 0 128 9 46 0 133 9 46 0 134 9 46 0 135 9 46 0 136 9 46 0 140 9 46 0 142 9 46 0 144 9 46 0 145 9 46 0 150 9 46 0 151 9 46 0 162 9 46 0 167 9 46 0 168 9 46 0 171 4 35 0 172 9 46 0 173 9 46 1 144] 
#[0 20 169 0 172] 
#[0 20 173 0 172] 
#[1 4 39 0 3 4 39 0 4 4 39 0 5 4 39 0 7 4 39 0 11 4 39 0 13 4 39 0 22 4 39 0 23 4 39 0 28 4 39 0 29 4 39 0 30 4 39 0 31 4 39 0 32 4 39 0 33 4 39 0 34 4 39 0 35 4 39 0 36 4 39 0 37 4 39 0 38 4 39 0 39 4 39 0 40 4 39 0 41 4 39 0 43 4 39 0 45 4 39 0 49 4 39 0 55 4 39 0 56 4 39 0 58 4 39 0 59 4 39 0 64 4 39 0 66 4 39 0 67 4 39 0 69 4 39 0 75 4 39 0 78 4 39 0 79 4 39 0 84 4 39 0 86 4 39 0 88 4 39 0 90 4 39 0 91 4 39 0 93 4 39 0 94 4 39 0 98 4 39 0 100 4 39 0 101 4 39 0 102 4 39 0 104 4 39 0 107 4 39 0 108 4 39 0 109 4 39 0 110 4 39 0 114 4 39 0 117 4 39 0 118 4 39 0 123 4 39 0 125 4 39 0 128 4 39 0 133 4 39 0 134 4 39 0 135 4 39 0 136 4 39 0 140 4 39 0 142 4 39 0 144 4 39 0 145 4 39 0 150 4 39 0 151 4 39 0 162 4 39 0 167 4 39 0 168 4 39 0 171 4 43 0 172 4 39 0 173 4 39 1 144] 
#[0 9 50 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 9 54 0 3 9 54 0 4 9 54 0 5 9 54 0 7 9 54 0 11 9 54 0 13 9 54 0 22 9 54 0 23 9 54 0 28 9 54 0 29 9 54 0 30 9 54 0 31 9 54 0 32 9 54 0 33 9 54 0 34 9 54 0 35 9 54 0 36 9 54 0 37 9 54 0 38 9 54 0 39 9 54 0 40 9 54 0 41 9 54 0 43 9 54 0 45 9 54 0 49 9 54 0 55 9 54 0 56 9 54 0 58 9 54 0 59 9 54 0 64 9 54 0 66 9 54 0 67 9 54 0 69 9 54 0 75 9 54 0 78 9 54 0 79 9 54 0 84 9 54 0 86 9 54 0 88 9 54 0 90 9 54 0 91 9 54 0 93 9 54 0 94 9 54 0 98 9 54 0 100 9 54 0 101 9 54 0 102 9 54 0 104 9 54 0 107 9 54 0 108 9 54 0 109 9 54 0 110 9 54 0 114 9 54 0 117 9 54 0 118 9 54 0 123 9 54 0 125 9 54 0 128 9 54 0 133 9 54 0 134 9 54 0 135 9 54 0 136 9 54 0 140 9 54 0 142 9 54 0 144 9 54 0 145 9 54 0 150 9 54 0 151 9 54 0 162 9 54 0 167 9 54 0 168 9 54 0 171 4 47 0 172 9 54 0 173 9 54 1 144] 
#[0 9 58 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 9 62 0 4 0 7 0 11 0 13 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 5 13 0 165 20 177 0 187] 
#[1 5 13 0 165 20 181 0 187] 
#[0 20 185 0 101] 
#[0 20 189 0 172] 
#[1 4 51 0 3 7 253 0 172 4 51 0 173] 
#[0 20 193 0 172] 
#[0 20 197 0 108] 
#[0 20 201 0 172] 
#[0 20 205 0 101] 
#[1 3 233 0 173 3 241 0 207 20 209 0 213] 
#[0 20 213 0 172] 
#[0 20 217 0 172] 
#[0 20 221 0 172] 
#[0 20 225 0 144] 
#[0 20 229 0 144] 
#[0 9 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 233 0 119] 
#[0 20 237 0 119] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 20 241 1 11] 
#[1 3 233 0 173 3 241 0 207 20 245 0 213] 
#[1 3 233 0 173 3 241 0 207 20 249 0 213] 
#[0 20 253 0 101] 
#[1 0 174 0 3 4 61 0 5 8 77 0 172 3 119 0 173 3 241 0 207 21 1 0 213 21 5 0 228 21 5 0 229 21 5 0 233] 
#[1 3 233 0 173 3 241 0 207 21 9 0 213] 
#[1 3 233 0 173 3 241 0 207 21 13 0 213] 
#[1 3 233 0 173 3 241 0 207 21 17 0 213] 
#[0 21 21 0 101] 
#[0 21 25 0 101] 
#[0 21 29 0 172] 
#[1 8 169 0 3 21 33 0 253] 
#[1 0 174 0 3 4 61 0 5 21 37 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 21 41 1 11] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 21 45 0 191 1 21 0 194 21 45 0 195 21 45 0 196 21 45 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 21 49 0 191 1 21 0 194 21 49 0 195 21 49 0 196 21 49 0 197] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 21 53 0 191 1 21 0 194 21 53 0 195 21 53 0 196 21 53 0 197] 
#[1 8 169 0 3 21 61 0 172 2 135 0 173 21 57 0 253 21 61 1 13] 
#[1 21 65 0 172 4 214 0 173 21 65 1 13] 
#[1 3 233 0 173 3 241 0 207 21 69 0 213] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 21 73 1 11] 
#[1 3 233 0 173 3 241 0 207 21 77 0 213] 
#[1 3 233 0 173 3 241 0 207 21 81 0 213] 
#[0 21 85 0 101] 
#[1 0 174 0 3 4 61 0 5 8 77 0 172 3 119 0 173 3 241 0 207 21 89 0 213 21 93 0 228 21 93 0 229 21 93 0 233] 
#[1 3 233 0 173 3 241 0 207 21 97 0 213] 
#[1 3 233 0 173 3 241 0 207 21 101 0 213] 
#[1 3 233 0 173 3 241 0 207 21 105 0 213] 
#[0 21 109 0 101] 
#[0 21 113 0 101] 
#[0 21 117 0 172] 
#[0 9 70 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 74 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 241 0 159 21 121 0 190] 
#[1 21 125 0 55 3 225 0 162 21 129 0 172 3 233 0 173 21 133 0 182 3 241 0 207 21 137 0 213] 
#[0 21 141 0 172] 
#[1 9 78 0 11 9 78 0 55 9 78 0 84 9 78 0 98 9 78 0 100 9 78 0 101 9 78 0 123 9 78 0 151 9 78 0 162 4 55 0 172 9 78 0 173 9 78 1 144] 
#[1 9 82 0 11 9 82 0 55 9 82 0 84 9 82 0 98 9 82 0 100 9 82 0 101 9 82 0 123 9 82 0 151 9 82 0 162 4 59 0 172 9 82 0 173 9 82 1 144] 
#[0 21 145 0 172] 
#[0 9 86 0 172] 
#[0 9 90 0 172] 
#[0 9 94 0 172] 
#[0 9 98 0 172] 
#[0 9 102 0 172] 
#[0 9 106 0 172] 
#[0 9 110 0 172] 
#[0 21 149 0 172] 
#[0 21 153 0 172] 
#[1 9 114 0 11 13 73 0 13 9 114 0 55 9 114 0 84 9 114 0 98 9 114 0 100 9 114 0 101 9 114 0 123 9 114 0 151 9 114 0 162 9 114 0 172 9 114 0 173 13 77 1 65 9 114 1 144] 
#[1 3 225 0 162 21 157 0 172 21 161 0 182] 
#[0 21 165 0 5] 
#[1 3 225 0 162 21 169 0 182] 
#[0 9 118 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 3 225 0 162 21 173 0 172 21 177 0 182] 
#[0 9 122 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 9 126 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 9 130 0 11 9 130 0 55 9 130 0 84 9 130 0 98 9 130 0 100 9 130 0 101 9 130 0 123 9 130 0 151 9 130 0 162 4 63 0 172 9 130 0 173 9 130 1 144] 
#[1 9 134 0 11 9 134 0 55 9 134 0 84 9 134 0 98 9 134 0 100 9 134 0 101 9 134 0 123 9 134 0 151 9 134 0 162 4 67 0 172 9 134 0 173 9 134 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 21 181 1 38 5 73 1 39 5 77 1 40 21 181 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 21 181 1 47 5 109 1 49 5 113 1 51 21 181 1 53 21 181 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 21 189 0 228 21 189 0 229 21 185 0 230 21 189 0 233 21 189 1 1 21 189 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 21 193 1 4] 
#[0 9 138 0 4 0 7 0 172] 
#[0 21 197 0 172] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 21 205 0 228 21 205 0 229 21 201 0 230 21 205 0 233 21 205 1 1 21 205 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 21 209 1 4] 
#[0 9 142 0 4 0 7 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 21 213 1 38 5 73 1 39 5 77 1 40 21 213 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 21 213 1 47 5 109 1 49 5 113 1 51 21 213 1 53 21 213 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 21 221 0 228 21 221 0 229 21 217 0 230 21 221 0 233 21 221 1 1 21 221 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 21 225 1 4] 
#[0 9 146 0 4 0 7 0 172] 
#[0 9 150 0 4 0 7 0 172] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 21 233 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 21 229 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 1 13 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 21 233 0 201 21 233 0 203 21 233 0 212 1 53 0 223 21 233 0 234 1 61 0 235 21 233 0 236 21 233 0 237 21 233 0 238 21 233 0 239 21 233 0 240 21 233 0 241 21 233 0 242 21 233 0 243 21 233 0 247 21 233 0 248 21 233 1 18 21 233 1 19 21 233 1 20 21 233 1 21 21 233 1 22 21 233 1 23 1 129 1 25 21 233 1 26 21 233 1 27 21 233 1 28 21 233 1 29 21 233 1 30 21 233 1 34 21 233 1 37 1 161 1 56 1 161 1 57 1 161 1 58 21 233 1 62 21 233 1 63 21 233 1 64 21 233 1 67 21 233 1 68 21 233 1 69 21 233 1 70 21 233 1 71 21 233 1 72 21 233 1 73 21 233 1 74 21 233 1 75 21 233 1 76 21 233 1 77 21 233 1 78 21 233 1 79 21 233 1 80 21 233 1 81 21 233 1 82 21 233 1 83 21 233 1 84 21 233 1 85 21 233 1 90 21 233 1 91 2 13 1 92 21 233 1 97 21 233 1 100 21 233 1 101 21 233 1 102 21 233 1 103 21 233 1 104 21 233 1 109 21 233 1 110 21 233 1 111 21 233 1 112 21 233 1 113 21 233 1 114 21 233 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 21 233 1 129 2 121 1 130 2 125 1 131 21 233 1 139 21 233 1 140 21 233 1 142] 
#[0 9 154 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 21 241 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 21 237 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 21 241 0 201 21 241 0 203 21 241 0 212 1 53 0 223 21 241 0 234 1 61 0 235 21 241 0 236 21 241 0 237 21 241 0 238 21 241 0 239 21 241 0 240 21 241 0 241 21 241 0 242 21 241 0 243 21 241 0 247 21 241 0 248 21 241 1 18 21 241 1 19 21 241 1 20 21 241 1 21 21 241 1 22 21 241 1 23 1 129 1 25 21 241 1 26 21 241 1 27 21 241 1 28 21 241 1 29 21 241 1 30 21 241 1 34 21 241 1 37 1 161 1 56 1 161 1 57 1 161 1 58 21 241 1 62 21 241 1 63 21 241 1 64 21 241 1 67 21 241 1 68 21 241 1 69 21 241 1 70 21 241 1 71 21 241 1 72 21 241 1 73 21 241 1 74 21 241 1 75 21 241 1 76 21 241 1 77 21 241 1 78 21 241 1 79 21 241 1 80 21 241 1 81 21 241 1 82 21 241 1 83 21 241 1 84 21 241 1 85 21 241 1 90 21 241 1 91 2 13 1 92 21 241 1 97 21 241 1 100 21 241 1 101 21 241 1 102 21 241 1 103 21 241 1 104 21 241 1 109 21 241 1 110 21 241 1 111 21 241 1 112 21 241 1 113 21 241 1 114 21 241 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 21 241 1 129 2 121 1 130 2 125 1 131 21 241 1 139 21 241 1 140 21 241 1 142] 
#[0 9 158 0 101 0 162] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 21 245 1 38 5 73 1 39 5 77 1 40 21 245 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 21 245 1 47 5 109 1 49 5 113 1 51 21 245 1 53 21 245 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 21 249 0 113] 
#[1 21 253 0 98 22 1 0 100 22 5 0 101] 
#[0 22 9 0 172] 
#[0 22 13 0 172] 
#[0 9 162 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 9 166 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 9 170 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 9 174 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 22 17 0 98 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 22 21 0 180 22 21 0 181 22 21 0 182 22 21 0 183 22 21 0 184 22 21 0 185 22 21 0 186 22 21 0 187 22 21 0 188 22 21 0 189 22 25 0 191 1 21 0 194 22 25 0 195 22 25 0 196 22 25 0 197 15 125 1 38 5 73 1 39 22 29 1 40 15 125 1 41 5 85 1 42 22 33 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 125 1 47 5 109 1 49 5 113 1 51 15 125 1 53 15 125 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 22 37 1 93 5 133 1 124 5 141 1 125 22 41 1 126 5 141 1 127 2 121 1 130 5 145 1 131 22 45 1 141 22 45 1 143] 
#[0 22 49 0 139] 
#[1 22 53 0 84 22 57 0 101] 
#[1 9 178 0 84 9 178 0 101 9 178 0 162 6 85 0 173] 
#[0 9 182 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 9 186 0 3 9 186 0 4 9 186 0 5 9 186 0 7 9 186 0 11 9 186 0 22 9 186 0 23 9 186 0 28 9 186 0 29 9 186 0 30 9 186 0 31 9 186 0 32 9 186 0 33 9 186 0 34 9 186 0 35 9 186 0 36 9 186 0 37 9 186 0 38 9 186 0 39 9 186 0 40 9 186 0 41 9 186 0 43 9 186 0 45 9 186 0 49 9 186 0 55 9 186 0 56 9 186 0 58 9 186 0 59 9 186 0 64 9 186 0 66 9 186 0 67 9 186 0 69 9 186 0 75 9 186 0 78 9 186 0 79 9 186 0 84 9 186 0 86 9 186 0 88 9 186 0 90 9 186 0 91 9 186 0 93 9 186 0 94 9 186 0 98 9 186 0 100 9 186 0 101 9 186 0 102 9 186 0 104 9 186 0 107 9 186 0 108 9 186 0 109 9 186 0 110 9 186 0 114 9 186 0 117 9 186 0 118 9 186 0 123 9 186 0 125 9 186 0 128 9 186 0 133 9 186 0 134 9 186 0 135 9 186 0 136 9 186 0 140 9 186 0 142 9 186 0 144 9 186 0 145 9 186 0 150 9 186 0 151 9 186 0 162 9 186 0 167 9 186 0 168 9 186 0 171 4 71 0 172 9 186 0 173 9 186 1 144] 
#[0 22 61 0 67] 
#[0 22 65 0 102] 
#[1 8 169 0 3 22 69 0 22 22 73 0 172 22 77 0 253] 
#[1 8 169 0 3 22 81 0 22 22 85 0 172 22 89 0 253] 
#[0 22 93 0 172] 
#[0 22 97 0 108] 
#[0 22 101 0 108] 
#[0 9 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 22 105 0 108 22 109 0 134] 
#[0 22 113 0 172] 
#[0 22 117 0 101] 
#[1 22 121 0 108 22 125 0 134] 
#[1 22 129 0 108 22 133 0 134] 
#[0 22 137 0 144] 
#[0 9 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 22 141 0 172] 
#[0 22 145 0 172] 
#[1 3 233 0 173 3 241 0 207 22 149 0 213] 
#[0 22 153 0 101] 
#[0 22 157 0 101] 
#[0 22 161 0 172] 
#[0 22 165 0 101] 
#[1 8 73 0 3 3 233 0 173 3 241 0 207 22 169 0 213 22 173 0 230] 
#[0 22 177 0 101] 
#[0 22 181 0 101] 
#[0 22 185 0 101] 
#[0 22 189 0 172] 
#[0 22 193 0 172] 
#[0 22 197 0 144] 
#[1 0 174 0 3 4 61 0 5 22 201 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 22 205 1 11] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 22 209 1 11] 
#[1 3 233 0 173 3 241 0 207 22 213 0 213] 
#[1 8 169 0 3 22 217 0 253] 
#[1 8 169 0 3 22 221 0 253] 
#[1 8 169 0 3 22 225 0 253] 
#[1 22 229 0 172 4 214 0 173 22 229 1 13] 
#[1 3 233 0 173 3 241 0 207 22 233 0 213] 
#[1 3 233 0 173 3 241 0 207 22 237 0 213] 
#[0 22 241 0 101] 
#[1 3 233 0 173 3 241 0 207 22 245 0 213] 
#[0 22 249 0 101] 
#[0 22 253 0 101] 
#[0 23 1 0 172] 
#[0 23 5 0 101] 
#[1 8 73 0 3 3 233 0 173 3 241 0 207 23 9 0 213 23 13 0 230] 
#[0 23 17 0 101] 
#[0 23 21 0 101] 
#[0 23 25 0 101] 
#[0 23 29 0 172] 
#[0 23 33 0 172] 
#[0 23 37 0 144] 
#[1 23 41 0 8 10 33 0 159] 
#[1 9 202 0 11 9 202 0 55 9 202 0 84 9 202 0 98 9 202 0 100 9 202 0 101 9 202 0 123 9 202 0 151 9 202 0 162 4 75 0 172 9 202 0 173 9 202 1 144] 
#[1 10 41 0 18 23 49 0 55 10 45 0 66 3 225 0 162 3 233 0 173 23 53 0 182 3 241 0 207 23 57 0 213] 
#[0 23 61 0 172] 
#[1 23 65 0 55 3 225 0 162 23 69 0 182] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 23 73 1 38 5 73 1 39 5 77 1 40 23 73 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 23 73 1 47 5 109 1 49 5 113 1 51 23 73 1 53 23 73 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 23 77 1 38 5 73 1 39 5 77 1 40 23 77 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 23 77 1 47 5 109 1 49 5 113 1 51 23 77 1 53 23 77 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 23 81 0 24 23 85 0 50 23 85 0 51 23 85 0 52 23 85 0 65 23 85 1 61] 
#[0 23 89 0 24] 
#[1 3 225 0 162 23 93 0 182] 
#[0 9 206 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 3 225 0 162 23 97 0 172 23 101 0 182] 
#[0 9 210 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 3 225 0 162 23 105 0 182] 
#[0 9 214 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 9 218 0 22 9 218 0 23 9 218 0 43 9 218 0 45 9 218 0 49 9 218 0 55 9 218 0 56 9 218 0 58 9 218 0 59 9 218 0 64 9 218 0 66 9 218 0 67 9 218 0 69 9 218 0 79 9 218 0 86 9 218 0 90 9 218 0 91 9 218 0 101 9 218 0 109 9 218 0 117 9 218 0 118 9 218 0 125 9 218 0 140 9 218 0 145 9 218 0 150 9 218 0 167 9 218 0 168 9 218 0 171 7 253 0 172 9 218 0 173] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 23 109 0 228 23 109 0 229 23 109 0 233 23 109 1 1 23 109 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 23 113 1 4] 
#[0 9 222 0 4 0 7 0 172] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 23 117 0 191 1 21 0 194 23 117 0 195 23 117 0 196 23 117 0 197] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 23 121 0 228 23 121 0 229 23 121 0 233 23 121 1 1 23 121 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 23 125 1 4] 
#[0 9 226 0 4 0 7 0 172] 
#[1 9 230 0 4 9 230 0 7 4 79 0 172] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 23 129 0 228 23 129 0 229 23 129 0 233 23 129 1 1 23 129 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 23 133 1 4] 
#[0 9 234 0 4 0 7 0 172] 
#[0 23 137 0 172] 
#[0 9 238 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 1 21 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 1 21 0 66 0 109 0 67 1 21 0 69 0 117 0 75 23 141 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 21 229 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 1 13 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 23 141 0 201 23 141 0 203 23 141 0 212 1 53 0 223 23 141 0 234 1 61 0 235 23 141 0 236 23 141 0 237 23 141 0 238 23 141 0 239 23 141 0 240 23 141 0 241 23 141 0 242 23 141 0 243 23 141 0 247 23 141 0 248 23 141 1 18 23 141 1 19 23 141 1 20 23 141 1 21 23 141 1 22 23 141 1 23 1 129 1 25 23 141 1 26 23 141 1 27 23 141 1 28 23 141 1 29 23 141 1 30 23 141 1 34 23 141 1 37 1 161 1 56 1 161 1 57 1 161 1 58 23 141 1 62 23 141 1 63 23 141 1 64 23 141 1 67 23 141 1 68 23 141 1 69 23 141 1 70 23 141 1 71 23 141 1 72 23 141 1 73 23 141 1 74 23 141 1 75 23 141 1 76 23 141 1 77 23 141 1 78 23 141 1 79 23 141 1 80 23 141 1 81 23 141 1 82 23 141 1 83 23 141 1 84 23 141 1 85 23 141 1 90 23 141 1 91 2 13 1 92 23 141 1 97 23 141 1 100 23 141 1 101 23 141 1 102 23 141 1 103 23 141 1 104 23 141 1 109 23 141 1 110 23 141 1 111 23 141 1 112 23 141 1 113 23 141 1 114 23 141 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 23 141 1 129 2 121 1 130 2 125 1 131 23 141 1 139 23 141 1 140 23 141 1 142] 
#[0 9 242 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 23 145 0 172] 
#[0 9 246 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 9 250 0 101 9 250 0 162 3 233 0 173 3 241 0 207 23 149 0 213] 
#[0 23 153 0 172] 
#[0 23 157 0 172] 
#[0 23 161 0 113] 
#[0 23 165 0 101] 
#[1 9 254 0 7 9 254 0 11 9 254 0 84 9 254 0 101 9 254 0 162 9 254 0 172 9 254 0 173 23 169 1 96] 
#[1 10 2 0 7 10 2 0 11 10 2 0 84 10 2 0 101 10 2 0 162 4 83 0 172 10 2 0 173] 
#[1 0 162 0 1 0 166 0 3 10 6 0 7 0 162 0 9 10 6 0 11 10 6 0 84 10 6 0 101 10 6 0 162 4 87 0 172 10 6 0 173] 
#[1 10 10 0 7 10 10 0 11 10 10 0 84 10 10 0 101 10 10 0 162 4 91 0 172 10 10 0 173] 
#[1 10 14 0 7 10 14 0 11 10 14 0 84 10 14 0 101 10 14 0 162 4 95 0 172 10 14 0 173] 
#[1 9 254 0 7 9 254 0 11 9 254 0 84 9 254 0 101 9 254 0 162 9 254 0 172 9 254 0 173 23 173 1 96] 
#[1 1 254 0 1 1 254 0 3 10 18 0 7 1 254 0 9 10 18 0 11 10 18 0 84 10 18 0 101 10 18 0 162 4 99 0 172 10 18 0 173] 
#[1 10 22 0 7 10 22 0 11 10 22 0 84 10 22 0 101 10 22 0 162 4 103 0 172 10 22 0 173] 
#[0 10 26 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 23 177 0 172] 
#[0 23 181 0 172] 
#[0 10 30 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 34 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 185 0 172] 
#[1 8 169 0 3 23 189 0 22 23 193 0 253] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 23 197 0 228 23 197 0 229 23 197 0 233 0 174 1 144] 
#[0 23 201 0 172] 
#[1 8 169 0 3 23 205 0 22 23 209 0 253] 
#[0 10 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 213 0 108] 
#[0 10 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 23 217 0 108 23 221 0 134] 
#[0 23 225 0 172] 
#[0 10 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 70 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 13 0 165 23 229 0 187] 
#[1 5 13 0 165 23 233 0 187] 
#[0 23 237 0 101] 
#[0 23 241 0 172] 
#[0 23 245 0 172] 
#[0 23 249 0 108] 
#[0 23 253 0 172] 
#[0 24 1 0 101] 
#[1 3 233 0 173 3 241 0 207 24 5 0 213] 
#[0 24 9 0 172] 
#[0 24 13 0 172] 
#[0 24 17 0 172] 
#[0 24 21 0 144] 
#[0 24 25 0 144] 
#[0 10 78 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 174 0 3 14 205 0 5 6 253 0 24 8 77 0 172 2 131 0 173 12 81 0 228 12 81 0 229 12 81 0 233 12 85 1 10 24 29 1 11] 
#[1 3 233 0 173 3 241 0 207 24 33 0 213] 
#[1 3 233 0 173 3 241 0 207 24 37 0 213] 
#[0 24 41 0 101] 
#[1 0 174 0 3 4 61 0 5 8 77 0 172 3 119 0 173 3 241 0 207 24 45 0 213 24 49 0 228 24 49 0 229 24 49 0 233] 
#[1 3 233 0 173 3 241 0 207 24 53 0 213] 
#[1 3 233 0 173 3 241 0 207 24 57 0 213] 
#[1 3 233 0 173 3 241 0 207 24 61 0 213] 
#[0 24 65 0 101] 
#[0 24 69 0 101] 
#[0 24 73 0 172] 
#[0 24 77 0 101] 
#[0 24 81 0 172] 
#[0 24 85 0 172] 
#[0 24 89 0 108] 
#[0 24 93 0 172] 
#[0 24 97 0 101] 
#[1 3 233 0 173 3 241 0 207 24 101 0 213] 
#[0 24 105 0 172] 
#[0 24 109 0 172] 
#[0 24 113 0 172] 
#[0 24 117 0 144] 
#[0 24 121 0 144] 
#[0 10 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 241 0 159 24 125 0 190] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 24 129 0 191 1 21 0 194 24 129 0 195 24 129 0 196 24 129 0 197] 
#[1 10 86 0 11 10 86 0 55 10 86 0 84 10 86 0 98 10 86 0 100 10 86 0 101 10 86 0 123 10 86 0 151 10 86 0 162 4 107 0 172 10 86 0 173 10 86 1 144] 
#[0 24 137 0 172] 
#[1 24 141 0 55 3 225 0 162 24 145 0 182] 
#[0 24 149 0 55] 
#[1 10 90 0 11 10 90 0 55 10 90 0 84 10 90 0 98 10 90 0 100 10 90 0 101 10 90 0 123 10 90 0 151 10 90 0 162 4 111 0 172 10 90 0 173 10 90 1 144] 
#[0 24 157 0 172] 
#[1 24 161 0 55 3 225 0 162 4 115 0 172 3 233 0 173 24 169 0 182 3 241 0 207 24 173 0 213 24 177 0 218] 
#[1 10 94 0 11 10 94 0 55 10 94 0 84 10 94 0 98 10 94 0 100 10 94 0 101 10 94 0 123 10 94 0 151 10 94 0 162 4 119 0 172 10 94 0 173 10 94 1 144] 
#[0 24 185 0 172] 
#[0 24 189 0 172] 
#[0 24 193 0 172] 
#[0 10 98 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 3 225 0 162 24 197 0 182] 
#[0 10 102 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[0 10 106 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 24 201 1 4] 
#[0 10 110 0 4 0 7 0 172] 
#[1 8 73 0 3 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 24 209 0 228 24 209 0 229 24 205 0 230 24 209 0 233 24 209 1 1 24 209 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 24 213 1 4] 
#[0 10 114 0 4 0 7 0 172] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 24 217 1 4] 
#[0 10 118 0 4 0 7 0 172] 
#[0 24 221 0 76] 
#[0 10 122 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 10 41 0 18 10 45 0 66 24 225 0 146] 
#[0 10 126 0 101 0 162] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 24 229 1 38 5 73 1 39 5 77 1 40 24 229 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 24 229 1 47 5 109 1 49 5 113 1 51 24 229 1 53 24 229 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 24 233 0 113] 
#[0 10 130 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 24 237 0 172] 
#[1 24 241 0 7 24 245 0 11 10 134 0 84 10 134 0 101 10 134 0 162 14 5 0 172 4 123 0 173 3 241 0 207 24 249 0 213 24 253 0 218 25 1 1 95] 
#[1 24 241 0 7 25 5 0 11 10 138 0 84 10 138 0 101 10 138 0 162 14 5 0 172 4 127 0 173 3 241 0 207 25 9 0 213 25 13 0 218 25 1 1 95] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 25 17 0 98 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 22 21 0 180 22 21 0 181 22 21 0 182 22 21 0 183 22 21 0 184 22 21 0 185 22 21 0 186 22 21 0 187 22 21 0 188 22 21 0 189 22 25 0 191 1 21 0 194 22 25 0 195 22 25 0 196 22 25 0 197 15 125 1 38 5 73 1 39 22 29 1 40 15 125 1 41 5 85 1 42 22 33 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 125 1 47 5 109 1 49 5 113 1 51 15 125 1 53 15 125 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 25 21 1 93 5 133 1 124 5 141 1 125 22 41 1 126 5 141 1 127 2 121 1 130 5 145 1 131 22 45 1 141 22 45 1 143] 
#[0 25 25 0 139] 
#[1 5 13 0 165 25 29 0 187] 
#[0 25 33 0 172] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 25 37 0 228 25 37 0 229 25 37 0 233 0 174 1 144] 
#[0 10 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 13 0 165 25 41 0 187] 
#[0 25 45 0 172] 
#[0 10 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 49 0 108 25 53 0 134] 
#[1 8 169 0 3 25 57 0 22 25 61 0 172 25 65 0 253] 
#[1 8 169 0 3 25 69 0 22 25 73 0 172 25 77 0 253] 
#[0 25 81 0 172] 
#[0 25 85 0 108] 
#[0 25 89 0 108] 
#[0 10 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 93 0 108 25 97 0 134] 
#[0 25 101 0 172] 
#[0 25 105 0 101] 
#[1 25 109 0 108 25 113 0 134] 
#[1 25 117 0 108 25 121 0 134] 
#[0 25 125 0 144] 
#[0 10 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 233 0 173 3 241 0 207 25 129 0 213] 
#[0 25 133 0 101] 
#[0 25 137 0 101] 
#[0 25 141 0 172] 
#[0 25 145 0 101] 
#[1 8 73 0 3 3 233 0 173 3 241 0 207 25 149 0 213 25 153 0 230] 
#[0 25 157 0 101] 
#[0 25 161 0 101] 
#[0 25 165 0 101] 
#[0 25 169 0 172] 
#[0 25 173 0 172] 
#[0 25 177 0 144] 
#[0 25 181 0 172] 
#[0 25 185 0 108] 
#[0 25 189 0 108] 
#[0 10 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 193 0 108 25 197 0 134] 
#[0 25 201 0 172] 
#[0 25 205 0 101] 
#[1 25 209 0 108 25 213 0 134] 
#[1 25 217 0 108 25 221 0 134] 
#[0 25 225 0 144] 
#[0 10 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 229 0 156 10 33 0 159] 
#[0 10 186 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 25 233 0 191 1 21 0 194 25 233 0 195 25 233 0 196 25 233 0 197] 
#[0 25 237 0 55] 
#[1 10 190 0 11 10 190 0 55 10 190 0 84 10 190 0 98 10 190 0 100 10 190 0 101 10 190 0 123 10 190 0 151 10 190 0 162 4 131 0 172 10 190 0 173 10 190 1 144] 
#[0 25 245 0 172] 
#[1 10 194 0 11 10 194 0 55 10 194 0 84 10 194 0 98 10 194 0 100 10 194 0 101 10 194 0 123 10 194 0 151 10 194 0 162 4 135 0 172 10 194 0 173 10 194 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 25 253 0 191 1 21 0 194 25 253 0 195 25 253 0 196 25 253 0 197] 
#[0 26 1 0 55] 
#[1 4 139 0 11 4 139 0 55 4 139 0 84 4 139 0 98 4 139 0 100 4 139 0 101 4 139 0 123 4 139 0 151 4 139 0 162 4 143 0 172 4 139 0 173 4 139 1 144] 
#[1 0 29 0 1 0 33 0 9 7 62 0 11 10 41 0 18 1 21 0 22 1 21 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 21 0 45 0 69 0 49 0 73 0 54 3 39 0 55 1 21 0 56 0 85 0 57 1 21 0 58 0 93 0 59 0 97 0 60 1 21 0 64 26 9 0 66 0 109 0 67 1 21 0 69 0 117 0 75 16 165 0 77 1 21 0 79 1 21 0 86 0 133 0 88 1 21 0 90 1 21 0 91 0 145 0 94 0 149 0 95 0 153 0 102 0 157 0 104 0 161 0 105 1 53 0 107 1 21 0 109 1 53 0 110 0 177 0 111 0 181 0 112 0 185 0 113 1 21 0 117 0 193 0 118 0 197 0 125 0 201 0 127 0 205 0 128 1 53 0 133 1 53 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 140 0 237 0 142 26 13 0 143 1 21 0 145 1 21 0 150 0 249 0 152 0 253 0 153 1 1 0 167 1 5 0 168 1 9 0 171 3 43 0 172 1 17 0 191 1 21 0 194 1 17 0 195 1 17 0 196 1 17 0 197 1 37 0 198 16 165 0 201 16 165 0 203 16 165 0 212 16 169 0 220 1 53 0 223 16 165 0 234 1 61 0 235 16 165 0 236 16 165 0 237 16 165 0 238 16 165 0 239 16 165 0 240 16 165 0 241 16 165 0 242 16 165 0 243 16 165 0 247 16 165 0 248 16 165 1 18 16 165 1 19 16 165 1 20 16 165 1 21 16 165 1 22 16 165 1 23 1 129 1 25 16 165 1 26 16 165 1 27 16 165 1 28 16 165 1 29 16 165 1 30 16 165 1 34 16 165 1 37 1 161 1 56 1 161 1 57 1 161 1 58 16 165 1 62 16 165 1 63 16 165 1 64 16 165 1 67 16 165 1 68 16 165 1 69 16 165 1 70 16 165 1 71 16 165 1 72 16 165 1 73 16 165 1 74 16 165 1 75 16 165 1 76 16 165 1 77 16 165 1 78 16 165 1 79 16 165 1 80 16 165 1 81 16 165 1 82 16 165 1 83 16 165 1 84 16 165 1 85 16 165 1 90 16 165 1 91 2 13 1 92 16 165 1 97 16 165 1 100 16 165 1 101 16 165 1 102 16 165 1 103 16 165 1 104 16 165 1 109 16 165 1 110 16 165 1 111 16 165 1 112 16 165 1 113 16 165 1 114 16 165 1 116 2 69 1 117 2 69 1 118 2 69 1 119 2 69 1 120 2 69 1 121 2 69 1 122 2 69 1 123 2 97 1 124 2 109 1 125 2 105 1 126 2 109 1 127 2 113 1 128 16 165 1 129 2 121 1 130 2 125 1 131 16 165 1 139 16 165 1 140 16 165 1 142] 
#[0 26 17 0 172] 
#[1 26 21 0 55 3 225 0 162 26 25 0 182] 
#[0 26 29 0 55] 
#[1 10 41 0 18 10 45 0 66 26 33 0 117] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 26 37 1 38 5 73 1 39 5 77 1 40 26 37 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 26 37 1 47 5 109 1 49 5 113 1 51 26 37 1 53 26 37 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 26 41 0 24] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 26 45 1 38 5 73 1 39 5 77 1 40 26 45 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 26 45 1 47 5 109 1 49 5 113 1 51 26 45 1 53 26 45 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 10 206 0 22 0 23 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 79 0 86 0 90 0 91 0 101 0 109 0 117 0 118 0 125 0 140 0 145 0 150 0 167 0 168 0 171 0 173] 
#[0 10 210 0 4 0 7 0 172] 
#[1 2 167 0 4 4 61 0 5 2 167 0 7 2 171 0 172 26 49 0 228 26 49 0 229 26 49 0 233 26 49 1 1 26 49 1 2] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 26 53 1 4] 
#[0 10 214 0 4 0 7 0 172] 
#[0 10 218 0 4 0 7 0 172] 
#[0 26 57 0 172] 
#[1 10 222 0 98 10 222 0 100 10 222 0 101 10 222 0 162 3 233 0 173 3 241 0 207 26 61 0 213] 
#[0 26 65 0 172] 
#[0 10 226 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 26 69 0 113] 
#[0 26 73 0 172] 
#[1 10 230 0 84 10 230 0 101 10 230 0 162 14 5 0 172 4 147 0 173 3 241 0 207 26 77 0 213 26 81 0 218] 
#[0 10 234 0 84 0 101 0 162 0 173] 
#[0 26 85 0 173] 
#[0 10 238 0 7 0 11 0 84 0 101 0 162 0 172 0 173] 
#[1 10 242 0 84 10 242 0 101 10 242 0 162 14 5 0 172 4 151 0 173 3 241 0 207 26 89 0 213 26 93 0 218] 
#[0 10 246 0 84 0 101 0 162 0 173] 
#[0 26 97 0 173] 
#[1 9 254 0 7 9 254 0 11 9 254 0 84 9 254 0 101 9 254 0 162 9 254 0 172 9 254 0 173 26 101 1 96] 
#[1 9 254 0 7 9 254 0 11 9 254 0 84 9 254 0 101 9 254 0 162 9 254 0 172 9 254 0 173 26 105 1 96] 
#[0 10 250 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 8 169 0 3 26 109 0 172 26 113 0 253] 
#[1 5 13 0 165 26 117 0 187] 
#[0 10 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 26 121 0 172 26 125 0 253] 
#[1 5 13 0 165 26 129 0 187] 
#[0 11 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 6 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 133 0 172] 
#[1 8 169 0 3 26 137 0 22 26 141 0 253] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 26 145 0 228 26 145 0 229 26 145 0 233 0 174 1 144] 
#[0 26 149 0 172] 
#[1 8 169 0 3 26 153 0 22 26 157 0 253] 
#[0 11 10 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 161 0 108] 
#[0 11 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 165 0 108 26 169 0 134] 
#[0 26 173 0 172] 
#[0 11 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 177 0 101] 
#[0 26 181 0 172] 
#[0 26 185 0 172] 
#[0 26 189 0 108] 
#[0 26 193 0 172] 
#[0 26 197 0 101] 
#[1 3 233 0 173 3 241 0 207 26 201 0 213] 
#[0 26 205 0 172] 
#[0 26 209 0 172] 
#[0 26 213 0 172] 
#[0 26 217 0 144] 
#[0 26 221 0 144] 
#[0 11 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 225 0 108] 
#[0 11 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 229 0 108 26 233 0 134] 
#[0 26 237 0 172] 
#[0 11 70 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 78 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 82 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 86 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 90 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 84 0 86 0 88 0 90 0 91 0 93 0 94 0 98 0 100 0 101 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 123 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 94 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 11 98 0 11 11 98 0 55 11 98 0 84 11 98 0 98 11 98 0 100 11 98 0 101 11 98 0 123 11 98 0 151 11 98 0 162 4 155 0 172 11 98 0 173 11 98 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 26 245 0 191 1 21 0 194 26 245 0 195 26 245 0 196 26 245 0 197] 
#[0 26 249 0 55] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 26 253 0 191 1 21 0 194 26 253 0 195 26 253 0 196 26 253 0 197] 
#[0 11 102 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 11 106 0 11 11 106 0 55 11 106 0 84 11 106 0 98 11 106 0 100 11 106 0 101 11 106 0 123 11 106 0 151 11 106 0 162 4 159 0 172 11 106 0 173 11 106 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 27 5 0 191 1 21 0 194 27 5 0 195 27 5 0 196 27 5 0 197] 
#[1 0 58 0 1 0 58 0 3 0 58 0 5 0 58 0 9 0 58 0 11 0 58 0 55 4 163 0 172] 
#[0 27 9 0 172] 
#[0 27 13 0 55] 
#[1 11 110 0 11 11 110 0 55 11 110 0 84 11 110 0 98 11 110 0 100 11 110 0 101 11 110 0 123 11 110 0 151 11 110 0 162 4 167 0 172 11 110 0 173 11 110 1 144] 
#[0 27 21 0 172] 
#[0 11 114 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[0 27 25 0 172] 
#[1 11 118 0 11 11 118 0 55 11 118 0 84 11 118 0 98 11 118 0 100 11 118 0 101 11 118 0 123 11 118 0 151 11 118 0 162 4 171 0 172 11 118 0 173 11 118 1 144] 
#[0 27 33 0 172] 
#[1 11 122 0 11 11 122 0 55 11 122 0 84 11 122 0 98 11 122 0 100 11 122 0 101 11 122 0 123 11 122 0 151 11 122 0 162 4 175 0 172 11 122 0 173 11 122 1 144] 
#[1 7 54 0 4 7 54 0 7 3 35 0 172 16 121 1 3 27 41 1 4] 
#[0 11 126 0 4 0 7 0 172] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 27 45 1 38 5 73 1 39 5 77 1 40 27 45 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 27 45 1 47 5 109 1 49 5 113 1 51 27 45 1 53 27 45 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 11 130 0 98 0 100 0 101 0 162] 
#[1 10 41 0 18 10 45 0 66 27 49 0 146] 
#[0 11 134 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 22 21 0 180 22 21 0 181 22 21 0 182 22 21 0 183 22 21 0 184 22 21 0 185 22 21 0 186 22 21 0 187 22 21 0 188 22 21 0 189 22 25 0 191 1 21 0 194 22 25 0 195 22 25 0 196 22 25 0 197 15 125 1 38 5 73 1 39 22 29 1 40 15 125 1 41 5 85 1 42 22 33 1 43 5 85 1 44 5 85 1 45 5 101 1 46 15 125 1 47 5 109 1 49 5 113 1 51 15 125 1 53 15 125 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 27 53 1 93 5 133 1 124 5 141 1 125 22 41 1 126 5 141 1 127 2 121 1 130 5 145 1 131 22 45 1 141 22 45 1 143] 
#[0 11 138 0 84 0 101 0 162 0 173] 
#[0 27 57 0 173] 
#[0 11 142 0 84 0 101 0 162 0 173] 
#[0 11 146 0 84 0 101 0 162 0 173] 
#[0 27 61 0 173] 
#[0 11 150 0 84 0 101 0 162 0 173] 
#[1 24 241 0 7 27 65 0 11 11 154 0 84 11 154 0 101 11 154 0 162 14 5 0 172 4 179 0 173 3 241 0 207 27 69 0 213 27 73 0 218 25 1 1 95] 
#[1 24 241 0 7 27 77 0 11 11 158 0 84 11 158 0 101 11 158 0 162 14 5 0 172 4 183 0 173 3 241 0 207 27 81 0 213 27 85 0 218 25 1 1 95] 
#[1 8 169 0 3 27 89 0 253] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 27 93 0 228 27 93 0 229 27 93 0 233 0 174 1 144] 
#[1 8 169 0 3 27 97 0 172 27 101 0 253] 
#[1 8 169 0 3 27 105 0 253] 
#[0 11 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 27 109 0 172 27 113 0 253] 
#[1 5 13 0 165 27 117 0 187] 
#[0 27 121 0 172] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 27 125 0 228 27 125 0 229 27 125 0 233 0 174 1 144] 
#[0 11 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 13 0 165 27 129 0 187] 
#[0 27 133 0 172] 
#[0 11 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 137 0 108 27 141 0 134] 
#[0 27 145 0 172] 
#[0 27 149 0 108] 
#[0 27 153 0 108] 
#[0 11 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 157 0 108 27 161 0 134] 
#[0 27 165 0 172] 
#[0 27 169 0 101] 
#[1 27 173 0 108 27 177 0 134] 
#[1 27 181 0 108 27 185 0 134] 
#[0 27 189 0 144] 
#[0 11 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 193 0 108 27 197 0 134] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 27 201 0 191 1 21 0 194 27 201 0 195 27 201 0 196 27 201 0 197] 
#[0 11 210 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 11 214 0 11 11 214 0 55 11 214 0 84 11 214 0 98 11 214 0 100 11 214 0 101 11 214 0 123 11 214 0 151 11 214 0 162 4 187 0 172 11 214 0 173 11 214 1 144] 
#[0 11 218 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 27 209 0 191 1 21 0 194 27 209 0 195 27 209 0 196 27 209 0 197] 
#[0 11 222 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 27 213 1 38 5 73 1 39 5 77 1 40 27 213 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 27 213 1 47 5 109 1 49 5 113 1 51 27 213 1 53 27 213 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 11 226 0 11 11 226 0 55 11 226 0 84 11 226 0 98 11 226 0 100 11 226 0 101 11 226 0 123 11 226 0 151 11 226 0 162 4 191 0 172 11 226 0 173 11 226 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 27 221 0 191 1 21 0 194 27 221 0 195 27 221 0 196 27 221 0 197] 
#[0 27 225 0 55] 
#[0 27 229 0 18] 
#[1 10 41 0 18 10 45 0 66 27 233 0 117] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 27 237 1 38 5 73 1 39 5 77 1 40 27 237 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 27 237 1 47 5 109 1 49 5 113 1 51 27 237 1 53 27 237 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[1 10 41 0 18 10 45 0 66 27 241 0 117] 
#[0 11 230 0 4 0 7 0 172] 
#[1 4 195 0 11 4 195 0 55 4 195 0 84 4 195 0 98 4 195 0 100 4 195 0 101 4 195 0 123 4 195 0 151 4 195 0 162 4 199 0 172 4 195 0 173 4 195 1 144] 
#[1 11 234 0 98 11 234 0 100 11 234 0 101 11 234 0 162 3 233 0 173 3 241 0 207 27 245 0 213] 
#[0 11 238 0 7 0 11 0 84 0 101 0 162 0 172 0 173] 
#[0 11 242 0 84 0 101 0 162 0 173] 
#[0 11 246 0 84 0 101 0 162 0 173] 
#[1 11 250 0 84 11 250 0 101 11 250 0 162 14 5 0 172 4 203 0 173 3 241 0 207 27 249 0 213 27 253 0 218] 
#[0 11 254 0 84 0 101 0 162 0 173] 
#[0 28 1 0 173] 
#[1 12 2 0 84 12 2 0 101 12 2 0 162 14 5 0 172 4 207 0 173 3 241 0 207 28 5 0 213 28 9 0 218] 
#[0 12 6 0 84 0 101 0 162 0 173] 
#[0 28 13 0 173] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 17 0 228 28 17 0 229 28 17 0 233 0 174 1 144] 
#[0 12 10 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 21 0 253] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 25 0 228 28 25 0 229 28 25 0 233 0 174 1 144] 
#[0 12 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 29 0 253] 
#[0 12 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 33 0 172 28 37 0 253] 
#[1 5 13 0 165 28 41 0 187] 
#[0 12 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 45 0 172 28 49 0 253] 
#[1 5 13 0 165 28 53 0 187] 
#[0 12 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 28 57 0 108] 
#[0 12 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 28 61 0 108 28 65 0 134] 
#[0 28 69 0 172] 
#[0 12 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 70 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 78 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 28 73 0 191 1 21 0 194 28 73 0 195 28 73 0 196 28 73 0 197] 
#[0 12 82 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 28 77 0 55 3 225 0 162 7 253 0 172 3 233 0 173 28 81 0 182 3 241 0 207 28 85 0 213] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 28 89 0 191 1 21 0 194 28 89 0 195 28 89 0 196 28 89 0 197] 
#[0 12 86 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 12 90 0 11 12 90 0 55 12 90 0 84 12 90 0 98 12 90 0 100 12 90 0 101 12 90 0 123 12 90 0 151 12 90 0 162 4 211 0 172 12 90 0 173 12 90 1 144] 
#[0 28 97 0 172] 
#[0 28 101 0 172] 
#[1 12 94 0 11 12 94 0 55 12 94 0 84 12 94 0 98 12 94 0 100 12 94 0 101 12 94 0 123 12 94 0 151 12 94 0 162 4 215 0 172 12 94 0 173 12 94 1 144] 
#[0 28 109 0 172] 
#[0 12 98 0 98 0 100 0 101 0 162] 
#[0 12 102 0 84 0 101 0 162 0 173] 
#[0 28 113 0 173] 
#[0 12 106 0 84 0 101 0 162 0 173] 
#[0 12 110 0 84 0 101 0 162 0 173] 
#[0 28 117 0 173] 
#[0 12 114 0 84 0 101 0 162 0 173] 
#[0 12 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 121 0 228 28 121 0 229 28 121 0 233 0 174 1 144] 
#[0 12 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 125 0 253] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 129 0 228 28 129 0 229 28 129 0 233 0 174 1 144] 
#[1 8 169 0 3 28 133 0 172 28 137 0 253] 
#[1 8 169 0 3 28 141 0 253] 
#[0 12 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 145 0 172 28 149 0 253] 
#[0 12 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 28 153 0 108 28 157 0 134] 
#[0 12 146 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 12 150 0 11 12 150 0 55 12 150 0 84 12 150 0 98 12 150 0 100 12 150 0 101 12 150 0 123 12 150 0 151 12 150 0 162 4 219 0 172 12 150 0 173 12 150 1 144] 
#[0 28 165 0 172] 
#[1 28 169 0 55 3 225 0 162 28 173 0 182] 
#[0 12 154 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 28 177 0 191 1 21 0 194 28 177 0 195 28 177 0 196 28 177 0 197] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 28 181 1 38 5 73 1 39 5 77 1 40 28 181 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 28 181 1 47 5 109 1 49 5 113 1 51 28 181 1 53 28 181 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 28 185 0 18] 
#[1 10 41 0 18 10 45 0 66 28 189 0 117] 
#[0 28 193 0 18] 
#[0 12 158 0 84 0 101 0 162 0 173] 
#[0 12 162 0 84 0 101 0 162 0 173] 
#[0 12 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 197 0 228 28 197 0 229 28 197 0 233 0 174 1 144] 
#[0 12 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 201 0 253] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 205 0 228 28 205 0 229 28 205 0 233 0 174 1 144] 
#[0 12 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 169 0 3 28 209 0 253] 
#[0 12 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 28 213 0 191 1 21 0 194 28 213 0 195 28 213 0 196 28 213 0 197] 
#[0 28 217 0 55] 
#[1 12 190 0 11 12 190 0 55 12 190 0 84 12 190 0 98 12 190 0 100 12 190 0 101 12 190 0 123 12 190 0 151 12 190 0 162 4 223 0 172 12 190 0 173 12 190 1 144] 
#[0 28 225 0 172] 
#[0 12 194 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 12 198 0 11 12 198 0 55 12 198 0 84 12 198 0 98 12 198 0 100 12 198 0 101 12 198 0 123 12 198 0 151 12 198 0 162 4 227 0 172 12 198 0 173 12 198 1 144] 
#[0 28 229 0 172] 
#[0 28 233 0 172] 
#[0 28 237 0 172] 
#[0 12 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 61 0 5 0 174 0 22 0 174 0 23 0 174 0 28 0 174 0 29 0 174 0 30 0 174 0 31 0 174 0 32 0 174 0 33 0 174 0 34 0 174 0 35 0 174 0 36 0 174 0 37 0 174 0 38 0 174 0 39 0 174 0 40 0 174 0 41 0 174 0 43 0 174 0 45 0 174 0 49 0 174 0 55 0 174 0 56 0 174 0 58 0 174 0 59 0 174 0 64 0 174 0 66 0 174 0 67 0 174 0 69 0 174 0 75 0 174 0 78 0 174 0 79 0 174 0 86 0 174 0 88 0 174 0 90 0 174 0 91 0 174 0 93 0 174 0 94 0 174 0 102 0 174 0 104 0 174 0 107 0 174 0 108 0 174 0 109 0 174 0 110 0 174 0 114 0 174 0 117 0 174 0 118 0 174 0 125 0 174 0 128 0 174 0 133 0 174 0 134 0 174 0 135 0 174 0 136 0 174 0 140 0 174 0 142 0 174 0 144 0 174 0 145 0 174 0 150 0 174 0 167 0 174 0 168 0 174 0 171 3 15 0 172 0 174 0 173 28 241 0 228 28 241 0 229 28 241 0 233 0 174 1 144] 
#[0 12 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 210 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 214 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 12 218 0 11 12 218 0 55 12 218 0 84 12 218 0 98 12 218 0 100 12 218 0 101 12 218 0 123 12 218 0 151 12 218 0 162 4 231 0 172 12 218 0 173 12 218 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 28 249 0 191 1 21 0 194 28 249 0 195 28 249 0 196 28 249 0 197] 
#[0 28 253 0 55] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 29 1 1 38 5 73 1 39 5 77 1 40 29 1 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 29 1 1 47 5 109 1 49 5 113 1 51 29 1 1 53 29 1 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 29 5 0 18] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 29 9 1 38 5 73 1 39 5 77 1 40 29 9 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 29 9 1 47 5 109 1 49 5 113 1 51 29 9 1 53 29 9 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 12 222 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 49 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 69 0 75 0 78 0 79 0 86 0 88 0 90 0 91 0 93 0 94 0 102 0 104 0 107 0 108 0 109 0 110 0 114 0 117 0 118 0 125 0 128 0 133 0 134 0 135 0 136 0 140 0 142 0 144 0 145 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 29 13 0 191 1 21 0 194 29 13 0 195 29 13 0 196 29 13 0 197] 
#[0 12 226 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 12 230 0 11 12 230 0 55 12 230 0 84 12 230 0 98 12 230 0 100 12 230 0 101 12 230 0 123 12 230 0 151 12 230 0 162 4 235 0 172 12 230 0 173 12 230 1 144] 
#[1 12 234 0 11 12 234 0 55 12 234 0 84 12 234 0 98 12 234 0 100 12 234 0 101 12 234 0 123 12 234 0 151 12 234 0 162 4 239 0 172 12 234 0 173 12 234 1 144] 
#[0 29 21 0 172] 
#[1 12 238 0 11 12 238 0 55 12 238 0 84 12 238 0 98 12 238 0 100 12 238 0 101 12 238 0 123 12 238 0 151 12 238 0 162 4 243 0 172 12 238 0 173 12 238 1 144] 
#[0 12 242 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 1 21 0 22 1 21 0 23 1 21 0 43 1 21 0 45 1 21 0 49 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 1 21 0 140 1 21 0 145 1 21 0 150 1 21 0 167 1 5 0 168 1 9 0 171 29 25 0 191 1 21 0 194 29 25 0 195 29 25 0 196 29 25 0 197] 
#[1 0 29 0 1 4 229 0 3 4 233 0 6 4 237 0 8 0 33 0 9 1 21 0 22 1 21 0 23 0 45 0 25 1 21 0 43 1 21 0 45 1 21 0 49 0 73 0 54 1 21 0 55 1 21 0 56 1 21 0 58 1 21 0 59 1 21 0 64 1 21 0 66 1 21 0 67 4 241 0 68 1 21 0 69 1 21 0 79 1 21 0 86 1 21 0 90 1 21 0 91 1 21 0 109 1 21 0 117 1 21 0 118 1 21 0 125 4 245 0 126 1 21 0 140 1 21 0 145 1 21 0 150 4 249 0 155 4 253 0 160 5 1 0 161 3 225 0 162 5 5 0 163 5 9 0 164 5 13 0 165 5 17 0 166 1 21 0 167 1 5 0 168 5 21 0 170 1 9 0 171 5 25 0 180 5 25 0 181 5 25 0 182 5 25 0 183 5 25 0 184 5 25 0 185 5 25 0 186 5 25 0 187 5 25 0 188 5 25 0 189 5 65 0 191 1 21 0 194 5 65 0 195 5 65 0 196 5 65 0 197 29 29 1 38 5 73 1 39 5 77 1 40 29 29 1 41 5 85 1 42 5 85 1 43 5 85 1 44 5 85 1 45 5 101 1 46 29 29 1 47 5 109 1 49 5 113 1 51 29 29 1 53 29 29 1 54 5 125 1 55 5 129 1 56 5 129 1 57 5 129 1 58 5 133 1 124 5 141 1 125 5 137 1 126 5 141 1 127 2 121 1 130 5 145 1 131 5 153 1 141 5 153 1 143] 
#[0 12 246 0 11 0 55 0 84 0 98 0 100 0 101 0 123 0 151 0 162 0 172 0 173 1 144] 
#[1 12 250 0 11 12 250 0 55 12 250 0 84 12 250 0 98 12 250 0 100 12 250 0 101 12 250 0 123 12 250 0 151 12 250 0 162 4 247 0 172 12 250 0 173 12 250 1 144]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument6: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument8: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result timesToken: ((nodes at: 3) at: 1).
	result plusToken: ((nodes at: 3) at: 2).
	result minusToken: ((nodes at: 3) at: 3).
	result divideToken: ((nodes at: 3) at: 4).
	result upArrowToken: ((nodes at: 3) at: 5).
	result _Token: ((nodes at: 3) at: 6).
	result modToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignment2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result setting: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType15: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 1) to: result statements.
	result addNodes: ((nodes at: 2) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addObjects: ((nodes at: 3) at: 1) to: result statements.
	result addNodes: ((nodes at: 3) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock3: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObjects: ((nodes at: 4) at: 1) to: result statements.
	result addNodes: ((nodes at: 4) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 4) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 4) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock4: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObject: (nodes at: 4) to: result statements.
	result addObjects: ((nodes at: 5) at: 1) to: result statements.
	result addNodes: ((nodes at: 5) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 5) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation3: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: ((nodes at: 3) at: 1).
	result orToken: ((nodes at: 3) at: 2).
	result xorToken: ((nodes at: 3) at: 3).
	result eqvToken: ((nodes at: 3) at: 4).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase10: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase11: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase12: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase13: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase14: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase15: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase16: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase17: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase18: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase19: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase1: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase20: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase21: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase22: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase23: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase24: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase2: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase3: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase4: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase5: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase6: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase7: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase8: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase9: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result greaterThanToken: ((nodes at: 3) at: 1).
	result lessThanToken: ((nodes at: 3) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 3) at: 3).
	result lessThanEqualToken: ((nodes at: 3) at: 4).
	result greaterThanEqualToken: ((nodes at: 3) at: 5).
	result iSToken: ((nodes at: 3) at: 6).
	result lIKEToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType2: nodes [
	| result |
	result := VBComplexTypeNode new.
	result base: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant1: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant2: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result equalToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstantList1: nodes [
	| result |
	result := VBConstantListNode new.
	result addNode: (nodes at: 1) to: result constants.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result constants.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction10: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction11: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction12: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	result type: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	result type: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction5: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction6: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction7: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	result type: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction8: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction9: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub10: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub11: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub12: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub5: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub6: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub7: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub8: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub9: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefType1: nodes [
	| result |
	result := VBDefTypeNode new.
	result deftype: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result pattern: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result enumTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction10: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction11: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction12: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction13: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction14: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction15: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction16: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result type: ((nodes at: 11) at: 1).
	result _size: ((nodes at: 11) at: 2).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: ((nodes at: 5) at: 1).
	result _size: ((nodes at: 5) at: 2).
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction9: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub10: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub11: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub12: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub13: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub14: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub15: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub16: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub9: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result tYPETokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result tYPETokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result tYPETokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result tYPETokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDestinationList1: nodes [
	| result |
	result := VBDestinationListNode new.
	result addNode: (nodes at: 1) to: result labels.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result labels.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result bangToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess2: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoEvents1: nodes [
	| result |
	result := VBDoEventsNode new.
	result doEventsToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result untilToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result untilToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result whileToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result loopToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result whileToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result whileToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result whileToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	result ifMatch: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result ifMatch: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result ifMatch: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	result ifMatch: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEquals1: nodes [
	| result |
	result := VBEqualsNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent3: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent4: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result doToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result fORToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result propertyToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result kind: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result left: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result operator: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result right: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFileDescriptorLiteral1: nodes [
	| result |
	result := VBFileDescriptorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach10: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach11: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach12: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach13: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach14: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach15: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach16: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addNode: (nodes at: 16) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addNode: (nodes at: 12) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach9: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result element: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result element: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext5: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext6: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result element: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext7: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext8: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result element: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNextOneLine1: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result element: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	result addToken: (nodes at: 19) to: result whitespaceTokens.
	result element: (nodes at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext5: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext6: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result element: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext7: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext8: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result tOToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result element: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSub1: nodes [
	| result |
	result := VBGoSubNode new.
	result gosubToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endLineNumber: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenEmpty1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplements1: nodes [
	| result |
	result := VBImplementsNode new.
	result implementsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result interface: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall2: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result whitespaceToken: (nodes at: 3).
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result whitespaceToken: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral2: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	result andToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInterval1: nodes [
	| result |
	result := VBIntervalNode new.
	result from: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result tOToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBLabelNode new.
	result label: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelTag1: nodes [
	| result |
	result := VBLabelTagNode new.
	result name: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause5: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause6: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause7: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause8: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result periodToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess2: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constant: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constant: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants1: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constants: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants2: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constants: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet17: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet18: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet19: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet20: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet21: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet22: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result functionToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet23: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addToken: (nodes at: 16) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet24: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result functionToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result functionToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation2: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result typeName: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation2: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result resumeToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result integerExpression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 3) at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause1: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause2: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result lenToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result equalToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result length: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause3: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause4: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause5: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause6: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause7: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause8: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result lenToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result equalToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result length: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption10: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result explicitToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption11: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result privateToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result moduleToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption12: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result privateToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result moduleToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionValueNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result databaseToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result databaseToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result compare: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption7: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption8: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result compare: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption9: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result explicitToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase1: nodes [
	| result |
	result := VBOptionBaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result baseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase2: nodes [
	| result |
	result := VBOptionBaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result baseToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result type: (nodes at: 8).
	result addTokens: ((nodes at: 9) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 9) at: 2).
	result default: ((nodes at: 9) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result _size: (nodes at: 8).
	result type: (nodes at: 9).
	result addTokens: ((nodes at: 10) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 10) at: 2).
	result default: ((nodes at: 10) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 3) at: 2).
	result default: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 4) at: 2).
	result default: ((nodes at: 4) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList3: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList4: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression2: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression3: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression4: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation2: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause10: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause11: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause12: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addTokens: ((nodes at: 9) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 9) at: 2) to: result values.
	result addTokens: ((nodes at: 9) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause1: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result values.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause2: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause3: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause4: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause5: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause6: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause7: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause8: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause9: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess2: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess3: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess4: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseError1: nodes [
	| result |
	result := VBRaiseErrorNode new.
	result eRRORToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result errorCode: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variable: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variables: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRename1: nodes [
	| result |
	result := VBRenameNode new.
	result nameToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result oldName: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result aSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result newName: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeEmpty1: nodes [
	| result |
	result := VBResumeEmptyNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result nEXTToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReturn1: nodes [
	| result |
	result := VBReturnNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect1: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: ((nodes at: 7) at: 1) to: result cases.
	result addTokens: ((nodes at: 7) at: 2) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect2: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: ((nodes at: 7) at: 1) to: result cases.
	result addTokens: ((nodes at: 7) at: 2) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleType1: nodes [
	| result |
	result := VBSimpleTypeNode new.
	result typeName: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSquareBracketIdentifier1: nodes [
	| result |
	result := VBSquareBracketIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry10: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result timesToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry3: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry4: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry5: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry6: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry7: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result timesToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry8: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result timesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry9: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result timesToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf1: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result iSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf2: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result isNotToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize1: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result sizes.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize2: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result nEWToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing10: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result fixedSize: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBTypedThingNode new.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result fixedSize: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing3: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing4: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing5: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result fixedSize: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing6: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing7: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result fixedSize: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing8: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing9: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable5: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable6: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable7: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable8: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result endLineNumber: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result wendToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Case__case___eol____1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Case__case___eol____2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Case__case___eol_____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 5 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 1).
	self add: ((nodes at: 2) at: 5) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace__Parameter__parameter__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___SetUpAssignation__setting___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____5: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___10: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___11: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___12: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___13: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___14: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___15: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___16: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___3: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___4: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___5: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___6: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___7: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___8: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___9: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____10: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____11: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____12: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____13: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____14: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____15: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____16: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____6: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____7: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____8: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____9: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument______2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Destination__label___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	result classToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader3: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader4: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	result classToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result elements.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result elements.
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result elements.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule3: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result elements.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule4: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addNode: (nodes at: 4) to: result elements.
	result addTokens: ((nodes at: 5) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result elements.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]
