Class {
	#name : #VBParser,
	#superclass : #VBAbstractParser,
	#category : #'VBParser-ParsingCore'
}

{ #category : #generated }
VBParser class >> ambiguousTransitions [
^#(
#[ 0 10 0 37] 
#[ 0 10 0 41] 
#[ 0 10 2 137] 
#[ 0 10 2 141] 
#[ 0 10 2 145] 
#[ 0 10 2 149] 
#[ 0 10 2 153] 
#[ 0 10 2 157] 
#[ 0 10 2 161] 
#[ 0 10 2 165] 
#[ 0 10 2 169] 
#[ 0 10 2 173] 
#[ 0 10 2 177] 
#[ 0 10 2 181] 
#[ 0 10 2 185] 
#[ 0 10 2 189] 
#[ 0 10 2 193] 
#[ 0 10 0 65] 
#[ 0 10 0 77] 
#[ 0 10 0 81] 
#[ 0 10 0 89] 
#[ 0 10 2 197] 
#[ 0 10 0 101] 
#[ 0 10 0 105] 
#[ 0 10 0 109] 
#[ 0 10 0 113] 
#[ 0 10 2 201] 
#[ 0 10 0 121] 
#[ 0 10 0 125] 
#[ 0 10 0 129] 
#[ 0 10 0 133] 
#[ 0 10 0 137] 
#[ 0 10 2 205] 
#[ 0 10 0 141] 
#[ 0 10 0 149] 
#[ 0 10 0 153] 
#[ 0 10 0 161] 
#[ 0 10 2 209] 
#[ 0 10 0 165] 
#[ 0 10 0 169] 
#[ 0 10 2 213] 
#[ 0 10 0 185] 
#[ 0 10 2 217] 
#[ 0 10 2 221] 
#[ 0 10 2 225] 
#[ 0 10 0 205] 
#[ 0 10 2 229] 
#[ 0 10 0 209] 
#[ 0 10 0 213] 
#[ 0 10 2 233] 
#[ 0 10 2 237] 
#[ 0 10 2 241] 
#[ 0 10 0 237] 
#[ 0 10 3 97] 
#[ 0 10 2 245] 
#[ 0 10 1 1] 
#[ 0 10 1 5] 
#[ 0 10 3 101] 
#[ 0 10 3 105] 
#[ 0 26 3 169] 
#[ 0 46 3 189] 
#[ 0 54 3 197] 
#[ 0 98 0 102] 
#[ 0 106 4 9] 
#[ 0 118 4 25] 
#[ 0 126 0 130] 
#[ 0 154 0 162 0 166 4 57] 
#[ 1 38 1 42] 
#[ 1 150 1 154] 
#[ 1 210 1 214] 
#[ 1 246 1 250] 
#[ 1 254 2 2] 
#[ 2 6 4 109] 
#[ 2 14 2 18] 
#[ 2 90 4 33] 
#[ 0 166 4 149] 
#[ 0 138 4 169] 
#[ 0 54 2 170] 
#[ 2 206 6 57] 
#[ 0 77 2 218] 
#[ 2 218 3 217] 
#[ 1 9 2 218] 
#[ 2 218 6 77] 
#[ 2 238 4 85] 
#[ 2 242 7 69] 
#[ 0 10 0 241] 
#[ 0 10 2 249] 
#[ 3 46 3 50] 
#[ 0 154 0 158 3 90 3 94] 
#[ 0 154 3 90 3 94] 
#[ 0 154 3 90 3 94 7 241] 
#[ 3 98 7 245] 
#[ 3 102 3 106] 
#[ 3 110 3 114] 
#[ 3 122 3 126] 
#[ 3 146 7 253] 
#[ 3 150 8 1] 
#[ 3 162 8 5] 
#[ 1 38 1 42 3 166 3 170] 
#[ 1 38 3 166 3 170] 
#[ 1 246 8 9] 
#[ 1 254 2 2 3 178] 
#[ 1 254 3 178] 
#[ 2 14 2 18 3 182] 
#[ 2 14 3 182] 
#[ 3 190 3 194] 
#[ 0 38 3 198] 
#[ 0 50 3 202] 
#[ 0 70 3 214] 
#[ 0 78 3 222] 
#[ 4 10 5 161] 
#[ 4 22 5 161] 
#[ 4 46 4 85] 
#[ 0 166 4 54] 
#[ 0 166 4 54 8 69] 
#[ 4 58 8 85] 
#[ 0 6 8 129] 
#[ 4 74 8 149] 
#[ 0 26 8 185] 
#[ 0 166 3 90 4 54] 
#[ 0 154 0 166 3 90 3 94 4 54 8 201] 
#[ 4 126 8 85] 
#[ 4 134 7 245] 
#[ 0 34 4 138] 
#[ 4 146 8 85] 
#[ 4 154 7 245] 
#[ 0 54 9 1] 
#[ 4 158 8 85] 
#[ 0 154 9 17] 
#[ 4 186 9 49] 
#[ 0 77 4 186] 
#[ 3 217 4 186] 
#[ 4 186 9 65] 
#[ 0 154 0 158] 
#[ 4 246 5 161] 
#[ 0 77 4 254] 
#[ 3 217 4 254] 
#[ 4 254 10 165] 
#[ 0 166 5 6] 
#[ 0 166 5 6 8 69] 
#[ 5 18 8 85] 
#[ 5 22 10 241] 
#[ 5 26 11 1] 
#[ 3 105 5 34] 
#[ 5 50 11 81] 
#[ 5 58 7 245] 
#[ 5 62 7 245] 
#[ 5 74 11 229] 
#[ 5 78 11 233] 
#[ 0 158 3 90] 
#[ 0 154 3 90 3 94 11 253] 
#[ 5 94 7 245] 
#[ 3 174 4 105] 
#[ 4 186 12 9] 
#[ 5 102 12 25] 
#[ 0 6 3 225] 
#[ 0 166 5 110] 
#[ 4 206 5 114] 
#[ 4 254 13 57] 
#[ 4 254 13 73] 
#[ 0 166 5 254] 
#[ 0 166 5 254 8 69] 
#[ 3 105 6 14] 
#[ 6 22 13 173] 
#[ 6 34 13 189] 
#[ 0 166 6 46] 
#[ 0 166 6 46 8 69] 
#[ 6 70 7 245] 
#[ 6 74 8 85] 
#[ 6 82 7 245] 
#[ 6 90 7 245] 
#[ 6 94 7 245] 
#[ 6 98 6 102 7 245] 
#[ 6 106 14 57] 
#[ 4 85 6 110] 
#[ 6 122 7 245] 
#[ 6 126 7 245] 
#[ 6 138 14 105] 
#[ 6 142 14 109] 
#[ 6 146 14 137] 
#[ 6 150 14 141] 
#[ 6 154 12 25] 
#[ 0 77 6 158] 
#[ 3 217 6 158] 
#[ 6 158 14 145] 
#[ 0 77 6 162] 
#[ 3 217 6 162] 
#[ 6 162 14 153] 
#[ 6 98 7 245] 
#[ 4 254 15 213] 
#[ 4 254 15 241] 
#[ 0 166 8 69] 
#[ 0 166 6 242] 
#[ 0 166 6 242 8 69] 
#[ 7 10 7 245] 
#[ 3 105 7 18] 
#[ 7 46 16 109] 
#[ 0 77 7 54] 
#[ 1 9 7 54] 
#[ 7 62 16 169] 
#[ 7 70 16 173] 
#[ 7 82 7 245] 
#[ 7 86 7 245] 
#[ 7 98 7 245] 
#[ 7 110 16 245] 
#[ 7 114 16 249] 
#[ 7 122 7 245] 
#[ 0 77 7 134] 
#[ 3 217 7 134] 
#[ 0 77 7 142] 
#[ 3 217 7 142] 
#[ 0 77 7 150] 
#[ 3 217 7 150] 
#[ 7 150 17 13] 
#[ 0 77 7 154] 
#[ 3 217 7 154] 
#[ 7 154 17 21] 
#[ 0 166 3 225] 
#[ 7 194 7 245] 
#[ 7 198 7 245] 
#[ 7 202 7 245] 
#[ 7 206 7 245] 
#[ 7 210 7 249] 
#[ 3 150 7 214 8 1] 
#[ 7 218 7 245] 
#[ 7 222 7 245] 
#[ 7 226 7 245] 
#[ 7 230 7 249] 
#[ 3 150 7 234 8 1] 
#[ 7 238 7 245] 
#[ 7 242 7 245] 
#[ 7 245 7 246] 
#[ 7 245 7 250] 
#[ 7 245 8 26] 
#[ 4 254 18 1] 
#[ 7 245 8 42] 
#[ 7 245 8 46] 
#[ 3 105 8 74] 
#[ 7 245 8 82] 
#[ 7 245 8 86] 
#[ 8 114 18 129] 
#[ 7 245 8 118] 
#[ 7 245 8 138] 
#[ 7 245 8 146] 
#[ 7 245 8 150] 
#[ 7 245 8 154] 
#[ 7 245 8 158] 
#[ 0 77 8 178] 
#[ 3 217 8 178] 
#[ 0 77 8 186] 
#[ 3 217 8 186] 
#[ 4 154 5 62] 
#[ 7 245 8 194] 
#[ 7 245 8 198] 
#[ 7 245 8 202] 
#[ 7 245 8 206] 
#[ 7 245 8 214] 
#[ 7 245 8 242] 
#[ 9 6 18 129] 
#[ 7 245 9 34] 
#[ 7 245 9 38] 
#[ 6 102 7 194] 
#[ 6 102 7 194 7 245] 
#[ 7 245 9 46] 
#[ 5 58 6 90] 
#[ 7 245 9 70] 
#[ 7 245 9 74] 
#[ 7 245 9 122] 
#[ 7 245 9 126] 
#[ 7 245 9 178] 
#[ 9 194 23 37] 
#[ 7 245 9 222] 
#[ 3 46 3 50 9 250] 
#[ 0 154 3 90 3 94 7 241 9 254] 
#[ 3 110 3 114 10 2] 
#[ 3 130 10 6] 
#[ 1 246 8 9 10 10] 
#[ 3 190 3 194 10 14] 
#[ 10 78 24 125] 
#[ 10 82 24 145] 
#[ 7 202 24 157] 
#[ 10 86 24 173] 
#[ 3 225 10 126] 
#[ 3 225 10 130] 
#[ 10 182 25 233] 
#[ 10 186 25 241] 
#[ 10 190 10 194] 
#[ 10 190 10 194 25 253] 
#[ 3 225 10 222] 
#[ 3 225 10 234] 
#[ 11 90 26 229] 
#[ 11 98 26 245] 
#[ 11 102 27 5] 
#[ 11 110 27 17] 
#[ 11 114 27 25] 
#[ 3 225 11 146] 
#[ 3 225 11 150] 
#[ 11 206 27 193] 
#[ 11 218 27 205] 
#[ 6 70 7 82] 
#[ 6 70 7 82 7 245] 
#[ 3 225 11 242] 
#[ 3 225 11 250] 
#[ 12 82 28 81] 
#[ 12 86 28 93] 
#[ 12 142 28 149] 
#[ 12 182 28 209] 
#[ 7 245 12 190] 
#[ 12 210 28 233] 
#[ 12 222 29 5] 
#[ 7 245 12 226] 
#[ 7 245 12 230] 
#[ 7 245 12 242]
	).
]

{ #category : #'generated-accessing' }
VBParser class >> cacheId [
	^'2022-07-29T16:19:57.484104+02:00'
]

{ #category : #generated }
VBParser class >> definitionComment [
"%glr;
%ignorecase;
%annotate_tokens;

#expression operators -- lowest precedence are first.

%left "")""  ;
%nonassoc  ""="" "":="";
%nonassoc  ""New"";
%left "","";
%right "":"";
%left ""eqv"" ;

%left ""xor"";
%left  ""or"";
%left  ""and"";
%nonassoc  ""<>"" ""<"" "">"" ""<="" "">="" ""Like"" ""Is"" ""IsNot"";
%left ""<<"" "">>"";
%left ""&"" ;
%left ""+"" ""-"";
%left ""*"" ""/"" ""Mod"";
%right ""not"" ;
%right ""^"";
%right  ""~"";
%right ""["" ""("";
%right ""!"" ;


%prefix VB;
%root Program;
%suffix Node;
%start module Statement ModuleStatement BehaviourDefinition;

<lineContinuation>
   :   ( \x20 | \xA0 | \x9) (_) ( \x20 | \xA0 | \x9)* ( \r | \n | \r\n | \x2028 ) ( \x20 | \xA0 | \x9)*
   ;

<DECIMAL_INTEGER>
	: 0 | [1-9] [0-9]*	
	;
<HEX_INTEGER>
	: 0[xX][0-9a-fA-F]+	
	;
<OCTAL_INTEGER>
	: 0[0-7]+	
	;
	
<EXPONENT>
	: [eE] [\-\+]? [0-9]+ 	
	;
<FLOAT_TYPE>
	: [fFdD]	
	;

<DATE_LITERAL>
   : (\#) ([^\#\r\n])* (\#)
   ;

<COLOR_LITERAL>
   : \& H [0-9a-fA-F]+ \&?
   ;


<INTEGER_LITERAL>
	: (<DECIMAL_INTEGER> | <HEX_INTEGER> | <OCTAL_INTEGER>) [lL]?	
	;
<FLOATING_POINT_LITERAL>
	: [0-9]+ \. [0-9]* <EXPONENT>? <FLOAT_TYPE>? 
	| \. [0-9]+ <EXPONENT>? <FLOAT_TYPE>? 
	| [0-9]+ <EXPONENT> <FLOAT_TYPE>? 
	| [0-9]+ <FLOAT_TYPE>	
	| <HEX_INTEGER> \. [0-9a-fA-F]+ [pP] [\-\+]? [0-9]+ <FLOAT_TYPE>?
	;
<BOOLEAN_LITERAL>
	: true
	| false
	;
<STRING_LITERAL>
   : \"" ([^\""\r\n] | \""\"")* \""
   ;
<NULL_LITERAL>
	: Nothing	
	;

<IDENTIFIER>
	: (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|$)* 
	;

<SBIDENTIFIER>
	: (\[) (<isLetter> | [a-zA-Z_$] ) (<isLetter>|\w|\-|/|$|\s)* (\]) 
	;
<DEFTYPE> 
	: ([a-zA-Z]) (\-) ([a-zA-Z]); 
	
<HASH_NUMBER>
	: ( \#) (<DECIMAL_INTEGER>)
	;
	
<HASH_IDENTIFIER>
	: ( \#) (<isLetter>|\w|$)*
	;

<whitespace> : ( \x20 | \xA0 | \x9) + ; 

<eol>
   : (<whitespace>?) ( \r | \n | \r\n | \x2028 | \ ) (<whitespace>?)
   ;

<comment>
   :  (<whitespace>?)(\' | :?  REM  \ ) ( [^\n\r])* 
   ;

###################################################### 
########## Basic module
###################################################### 

module: <eol>* (header 'header' <eol>*)? (ModuleStatement 'element')?  (<eol>* ModuleStatement 'element' )*  <eol>* {{Module}};

###################################################### 
########## Literals
###################################################### 
literal 
	: 
	  FileDescriptorLiteral
	| IntegerLiteral
	| ColorLiteral
	| DateLiteral
	| FloatLiteral
	| BooleanLiteral
	| StringLiteral
	| Null
	| GuidLiteral
;

FileDescriptorLiteral 	: <HASH_NUMBER> 'token' 			{{FileDescriptorLiteral}};
IntegerLiteral 			: <INTEGER_LITERAL> 'token' ""&""? 	{{IntegerLiteral}};
ColorLiteral			: <COLOR_LITERAL> 'token' 			{{ColorLiteral}} ; 
DateLiteral				: <DATE_LITERAL> 'token' 			{{DateLiteral}};
FloatLiteral			: <FLOATING_POINT_LITERAL> 'token' 	{{FloatLiteral}};
BooleanLiteral			: <BOOLEAN_LITERAL> 'token' 		{{BooleanLiteral}};
StringLiteral			: <STRING_LITERAL> 'token' 			{{StringLiteral}};
Null					: <NULL_LITERAL> 'token' 			{{Null}};




GuidLiteral: 
		""{""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> +
		""-"" 
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""-""
		<HEX_INTEGER> + 
		""}"" 
		{{GuidLiteral}};


Identifier : 
	 SimpleIdentifier
	| HashIdentifier
	| SquareBracketIdentifier;

KeywordIdentifier : UsableKeywords 'token'  {{SimpleIdentifier}} | SquareBracketIdentifier;


UsableKeywords  :  
  IdentifierWords  
| ""open"" 
| ""type"" 
| ""select"" 
| ""case"" 
| ""else""   
;

IdentifierWords :  
  <IDENTIFIER>     
| ""text"" 
| ""name"" 
| ""version"" 
| ""database"" 
| ""collection"" 
| ""bold"" 
| ""append"" 
| ""Object""  
| ""len"" 
| ""get"" | ""set"" | ""let"" 
| ""date"" 
| ""input"" 
| ""print"" 
| ""write"" 
| ""Error""
| ""Next""
| ""Output""
| ""Alias""
| ""String"" 
| ""Type"" 
;

HashIdentifier 			: <HASH_IDENTIFIER> 'token' {{HashIdentifier}};
SquareBracketIdentifier : <SBIDENTIFIER> 'token' 	{{SquareBracketIdentifier}};
SimpleIdentifier 		: IdentifierWords 'token'  	{{SimpleIdentifier}};


LabelTag : <IDENTIFIER> 'name' "":""  {{LabelTag}};

###################################################### 
########## Module header and configuration
###################################################### 

header: <whitespace>? ""version"" <whitespace> FloatLiteral  'version'  (""class"")?  {{}};
Option
   :  <whitespace>? ""option"" <whitespace> IntegerLiteral 'value' {{OptionValue}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> ""database"" {{OptionCompareDatabase}}
   |  <whitespace>? ""option"" <whitespace> ""compare"" <whitespace> (""binary""| ""text"" 'compare') {{OptionCompare}}
   |  <whitespace>? ""option"" <whitespace> ""explicit"" {{OptionExplicit}}
   |  <whitespace>? ""option"" <whitespace> ""private"" <whitespace> ""module""{{OptionPrivateModule}}
   | OptionBase
   ;
   
OptionBase : 
	<whitespace>? 
	""option"" <whitespace> 
	""base"" <whitespace> 
	Expression 'value' {{OptionBase}} 
;

SetUpAssignation :  
	(Identifier  'identifier' | MemberAccess 'identifier') <whitespace> ""="" <whitespace> Expression 'value' {{SetUpAssignation}} 
;
Attribute
 : ""attribute"" <whitespace> SetUpAssignation 'setting' {{ModuleAttribute}}
 ;
Configuration 
:	""begin""  <eol>* SetUpAssignation 'setting' ( <eol>+ SetUpAssignation 'setting')* <eol>*""end"" {{Configuration}};

Implements : ""implements"" <whitespace> StateAccessBase 'interface' {{Implements}}; 

DefTypeLabel : 
  ""DefBool"" | ""DefByte"" |""DefCur"" 
| ""DefDate"" | ""DefDec"" | ""DefDbl"" 
| ""DefInt"" | ""DefLng"" | ""DefLnglng"" 
| ""DefLngPtr"" | ""DefObj"" | ""DefSng"" 
| ""DefStr"" | ""DefVar"" 
;

DefType : DefTypeLabel 'deftype' <whitespace> <DEFTYPE> 'pattern' {{DefType}}; 

ModuleStatement :  
  Option  
| Configuration 
| Attribute 
| DeclareExternal 
| VariableDefinition 
| BehaviourDefinition 
| Types 
| Implements 
| DefType
 ;

###################################################### 
########## Body statements
###################################################### 

Statement :  
  StatementAssignment 
| VariableDefinition 
| Attribute 
| OptionBase 
| StatementCalls  
| ControlFlowStatement 
| Types 
| Label 
| Exits 
| Go 
| FileClauses 
| RaiseEvent 
| OtherStatements ;

# A Block is a list of statements. Each entry can be headed with a line number. Lines are splitted by newline 
Block: 
	    <eol>+
		(IntegerLiteral 'lineNumber' <whitespace>)? 
		 Statement 'statement'?
	   (
		 (<eol> | (<whitespace>? "":"" <whitespace>?))+ 
		 (IntegerLiteral 'lineNumber' <whitespace>)? 
		  Statement 'statement' 
	   )*
	   <eol>*
	   {{Block}};
	   
# Oneline blocks can have one or more ""lines"" splitted by "":"" 

OneLineBlock : 
	<whitespace> Statement 'statement'? 
	(<whitespace>? "":"" <whitespace>? Statement 'statement')* 
	{{Block}}
;

BaseType : 
  ""boolean"" 
| ""byte"" 
| ""currency"" 
| ""collection"" 
| ""date"" 
| ""decimal"" 
| ""double"" 
| ""integer"" 
| ""long"" 
| ""longlong""
| ""longptr"" 
| ""object"" 
| ""single"" 
| ""string"" 
| ""variant""
{{BaseType}};

SimpleType : 
	Identifier 'typeName'
	{{SimpleType}}
	;


Visibility: 
  ""private"" 
| ""public"" 
| ""friend"" 
| ""global"" ; 

ComplexType: 
	(SimpleType 'base')?  
	(""."" UsableKeywords 'member')+ 
	{{ComplexType}}
;

Type: 
  BaseType 
| SimpleType 
| ComplexType 
;



TypedThing : 
			 (<whitespace> ""as"" <whitespace> Type 'type')?
			 (<whitespace>? ""*"" <whitespace>? Expression 'fixedSize')?  
			 {{TypedThing}}
;
			 
TypedAndInstantiatedThing :	 
			<whitespace> ""as"" <whitespace>
			""new"" <whitespace> 
			Type 'type'
			{{AsTypeAndNew}}
; 

TypeSize : ""("" 
			Expression 'size'? 
			("",""<whitespace>? Expression 'size')* 
			"")"" 
			{{TypeSize}} 
;

AsType : 
  TypedThing 
| TypedAndInstantiatedThing;



###################################################### 
########## assign statements
###################################################### 

StatementAssignment : Assignment | ExplicitAssignement ;

ExplicitLetSet: ""let"" | ""set""; 

Assignment : 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' | "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};
		
ExplicitAssignement : 
		ExplicitLetSet 'kind' <whitespace> 
		(Identifier 'left' | StateAccessBase 'left') <whitespace> 
		(""="" 'operator' |  "":="" 'operator') <whitespace> 
		Expression 'right' 
		{{ExplicitAssignement}};

###################################################### 
########## other statements
###################################################### 
 
OtherStatements : 
  Rename 
| Beep 
| DoEvents;

Rename : 
	""name"" <whitespace> 
	Expression 'oldName' <whitespace> 
	""as"" <whitespace> 
	Expression 'newName' 
	{{Rename}} ;
	
Beep : ""beep"" ;
DoEvents : ""DoEvents"" {{DoEvents}} ;

###################################################### 
########## Types
###################################################### 

Types : 
  DefineEnum 
| DefineType 
| Event ;

DefineType : 
      (Visibility 'visibility' <whitespace>)? 
	  ""type"" <whitespace> 
	  Identifier 'name' 
	  ( <eol>* TypeEntry 'field' )* 
	  <eol>* 
	  ""end"" <whitespace>  ""type"" 
	  {{DefineType}} ;
	  
TypeEntry :
	  Identifier 'name'
	  (TypeSize 'size')?
	  AsType 'type' 
	  (<whitespace>?""*""<whitespace>? IntegerLiteral 'size' )? 
	  {{TypeEntry}};
	  
Event  : 
	  (Visibility 'visibility' <whitespace>)?  
	  ""event"" <whitespace> 
	  Identifier 'selector' <whitespace>?
	  ParameterList 'parameters'
	  {{Event}} ;
	  
DefineEnum :  
	  (Visibility 'visibility' <whitespace>)?  
	  ""enum"" <whitespace> 
	  Identifier 'name'  
	  ( <eol>* EnumEntry 'field')* 
	  <eol>*  
	  ""end"" <whitespace> ""enum"" 
	  {{DefineEnum}};
	  
EnumEntry : 
      Identifier 'name'  
	  ( <whitespace> ""="" <whitespace> Expression 'value')? 
	  {{EnumEntry}};

###################################################### 
########## Parameters
###################################################### 

ParameterPassingStrategy :  ""byval"" | ""byref"" {{ParameterPassingStrategy}};
ParameterList:""(""(Parameter 'parameter' ("","" <whitespace> Parameter 'parameter')* )? <whitespace>? "")"" {{ParameterList}};
	
Parameter: 
	(""optional"" <whitespace>)? 
	(ParameterPassingStrategy 'strategy' <whitespace>)? 
	(""paramarray"" <whitespace>)? 
	Identifier 'name' 
	(TypeSize 'size')?
	(AsType 'type')? 
	(<whitespace> ""="" <whitespace> Expression 'default')? 
	{{Parameter}};

###################################################### 
########## External declaration
###################################################### 

DeclareSub: 
			(Visibility 'visibility' <whitespace> )? 
			""declare"" <whitespace> 
			""sub"" <whitespace> 
			Identifier 'selector' <whitespace> 
			""lib"" <whitespace> 
			StringLiteral 'library' <whitespace>?
			(""alias"" <whitespace> StringLiteral 'alias' <whitespace>?)? 
			ParameterList 'parameters' 
			{{ExternalSub}};
			
DeclareFunction: 
		(Visibility 'visibility' <whitespace> )? 
		""declare"" <whitespace> 
		""function"" <whitespace> 
		Identifier 'selector' <whitespace> 
		""lib"" <whitespace> 
		StringLiteral 'library' <whitespace>? 
		(""alias"" <whitespace>  StringLiteral 'alias' <whitespace>? )? 
		ParameterList 'parameters'
		AsType 'type'
		{{ExternalFunction}};
		
		
DeclareExternal : DeclareSub|DeclareFunction; 

###################################################### 
########## Function / Sub Definition 
###################################################### 

Modifier: ""static"" ;

DefineFunction: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""function""  <whitespace>
	Identifier 'selector'<whitespace>?
	ParameterList 'parameters' <whitespace>?
	(AsType 'type' TypeSize 'size'?  )?
	Block 'block' 
	""end""  <whitespace> ""function"" 
   {{FunctionDefinition}};

DefineSub: 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""sub""  <whitespace>
	Identifier 'selector'<whitespace>?
	(ParameterList 'parameters')? <whitespace>?
	Block 'block' 
	""end"" <whitespace> ""sub"" 
   {{SubDefinition}};
   

ModulePropertyGet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""get""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	(AsType 'type' TypeSize 'size'?)? 
	Block 'block' 
	""end"" <whitespace> (""property"" | ""function"") 
    {{ModulePropertyGet}}; 
	
	
ModulePropertySet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""set""  <whitespace>
	Identifier 'selector'
	ParameterList 'parameters'
	Block 'block'  
	""end"" <whitespace> (""property"" | ""function"")
  {{ModulePropertyGet}}; 
  
ModulePropertyLet : 
	(Visibility 'visibility' <whitespace>)? 
	(Modifier 'modifier' <whitespace>)? 
	""property"" <whitespace> ""let""  <whitespace>
	Identifier 'selector' 
	ParameterList 'parameters'
	 Block 'block'  
	 ""end"" <whitespace> (""property"" | ""function"") 
{{ModulePropertyGet}}; 

BehaviourDefinition:  
  DefineFunction 
| DefineSub 
| ModulePropertyGet 
| ModulePropertySet 
| ModulePropertyLet ;

###################################################### 
########## Variable / And Multiple Variables
###################################################### 

ModuleProperty : 
	Visibility 'visibility' <whitespace>
	Variable 'variable' 
	{{ModuleProperty}};
	
ModuleConstant : 
	(Visibility 'visibility' <whitespace>)? 
	""const"" <whitespace> 
	Constant 'constant'
	{{ModuleConstant}};

DefineVariable : 
	""dim"" <whitespace> 
	Variable 'variable' 
	{{DimVariable}};


ReDefineVariable : 
	""redim"" <whitespace> 
	(""preserve"" <whitespace>)? 
	Variable 'variable' 
	{{ReDimVariable}};
	
ReDefineExpression : 
	""redim"" <whitespace>
	(""preserve"" <whitespace>)? 
	Expression 'variable' 
	{{ReDimVariable}};
	
StaticVariable : 
	""static""  <whitespace>  
	Variable 'variable'
	{{StaticVariable}};
	
Variable : 
	(""WithEvents""  <whitespace> )? 
	Identifier 'name'
	(TypeSize 'size')?
	(AsType 'type') ? 
	{{Variable}};
	
Constant :  
	Identifier 'constant'
	(AsType 'type') ? 
	<whitespace> ""=""  <whitespace> 
	Expression 'value' 
	{{Constant}} ;

ModuleProperties : 
	Visibility 'visibility'  <whitespace>
	VariableList 'variables' 
	{{ModuleMultipleProperties}};
	
	
ModuleConstants : 
	(Visibility 'visibility'  <whitespace> )? 
	""const""  <whitespace> 
	ConstantList 'constants' 
	{{ModuleMultipleConstants}};
	
DefineVariables : 
	""dim""  <whitespace>
	VariableList 'variables' 
	{{DimMultipleVariables}};
	
ReDefineVariables : 
	""redim""  <whitespace> 
	(""preserve""  <whitespace>)?  
	VariableList 'variables' 
	{{ReDimMultipleVariables}};
	
StaticVariables : 
	""static"" <whitespace> 
	VariableList 'variables' 
	{{StaticMultipleVariables}};
	
VariableList : Variable 'variable' ( <whitespace>? "",""  <whitespace>?  Variable 'variable' )+ {{VariableList}};
ConstantList : Constant 'constant' ( <whitespace>? "",""  <whitespace>?  Constant 'constant' )+ {{ConstantList}};

VariableDefinition :
  ModuleProperties 
| ModuleProperty 
| ModuleConstant 
| ModuleConstants 
| ConstantList 
| DefineVariable 
| ReDefineVariable 
| ReDefineExpression 
| DefineVariables 
| ReDefineVariables 
| StaticVariable 
| StaticVariables ;

###################################################### 
########## Value Statements
###################################################### 


Expression :   
  ValueClause  
| StateAccess 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval 
| Operation ; 

ParentheseesExpression : 
	""(""  <whitespace>? 
	Expression 'expression'  
	<whitespace>? "")"" 
	{{ParentheseesExpression}};
	
Interval : 
	Expression 'from' <whitespace> 
	""to""  <whitespace> 
	Expression 'to'  
	{{Interval}} ; 


##########
### Ops
##########

Operation : 
  UnaryOperation 
| BinaryOperation ;

####################
### Unary Ops 
####################

UnaryOperation:   
  NegatedOperation
| PositiveOperation 
| NotOperation 
; 

NegatedOperation : 
	""-""
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{NegatedOperation}}
;
	
PositiveOperation : 
	""+"" <whitespace> 
	(StateAccessBase 'value' | IntegerLiteral 'value' | FloatLiteral 'value')
	{{PositiveOperation}} 
;

NotOperation : 
	""not"" <whitespace>
	(StateAccessBase 'value' | BooleanLiteral 'value' | ParentheseesExpression 'value' | TypeOf 'value' )
	{{NotOperation}}
;


####################
### Binary Ops 
####################

LeftSide :  
  ValueClause  
| StateAccessBase 
| ExpressionCalls 
| Identifier 
| literal 
| ParentheseesExpression  
| Interval
| UnaryOperation ;


BinaryOperation : 
  ComparisonOperation  
| ArithmeticOperation 
| BooleanBinaryOperation 
| Equals  
| ConcatenationOperation ;

ComparisonOperator : "">"" | ""<""  |  ""<>"" | ""<="" | "">="" | ""is"" | ""like"" ;

ComparisonOperation : 
		(LeftSide 'left' | ArithmeticOperation 'left') <whitespace>
		ComparisonOperator <whitespace> 
		(LeftSide 'right' | ArithmeticOperation 'right') 
		{{ComparisonOperation}};
		
ArithmeticOperator : ""*"" | ""+"" | ""-"" | ""/"" | ""^"" | ""\"" | ""Mod"";

ArithmeticOperation : 
		LeftSide 'left' <whitespace>
		ArithmeticOperator <whitespace>
		Expression 'right' {{ArithmeticOperation}};


BooleanOperator : ""and"" | ""or"" | ""xor"" | ""eqv"";

BooleanBinaryOperation : 
		(ComparisonOperation 'left' | Equals 'left' | LeftSide 'left'  ) <whitespace>
		BooleanOperator   <whitespace>
		Expression 'right' 
		{{ArithmeticOperation}};


ConcatenationOperation : 
		LeftSide 'left' <whitespace>
		""&"" <whitespace>
		Expression 'right' 
		{{ConcatenationOperation}}; 

Equals : 
	(Identifier 'left' | MemberAccess 'left' | Expression 'left') <whitespace>
	""="" 'operator' <whitespace>
	Expression 'right' 
	{{Equals}}; 


####################
### Value Clause 
####################

ValueClause: 
  AddressOfClause 
| NewClause ;

AddressOfClause : 
		""AddressOf"" <whitespace>
		Identifier 'name'  
		{{AddressOfClause}}; 
		
NewClause : 
		""New"" <whitespace>
		Type 'typeName' 
		{{NewClause}};

OpenMode :  
  ""Append"" 
| ""Binary"" 
| ""Input"" 
| ""Output"" 
| ""Random"" ;


OpenAccess : 
  ""Read"" 
| ""Write"" 
| ""Read Write"" ;

Lock :  
  ""Shared"" 
| ""Lock Read"" 
| ""Lock Write"" 
| ""Lock Read Write"";


FileClauses : 
  OpenFileClause 
| PrintFileClause 
| LineInputClause ;

OpenFileClause : 
		""Open"" <whitespace>
		Expression 'filepath' <whitespace>
		""For"" <whitespace>
		OpenMode 'mode' <whitespace>
		(OpenAccess 'access' <whitespace>)? 
		(Lock 'lock' <whitespace>)? 
		""As"" <whitespace>
		Expression 'fileDescriptor' 
		(<whitespace> ""len"" <whitespace> ""="" <whitespace> Expression'length')? 
		{{OpenClause}};
		
		
PrintFileClause : 
		""Print"" <whitespace>
		Identifier 'fileNumber' <whitespace>?
		"","" <whitespace>? 
		(Expression 'value' <whitespace>?)? 
		("";"" <whitespace>? Expression 'value')*  
		{{PrintIntoFileClause}};
		
LineInputClause : 
		""Line"" <whitespace>
		""Input"" <whitespace>
		(Identifier 'fileNumber' | FileDescriptorLiteral  'fileNumber') <whitespace>?  
		"",""  <whitespace>?
		(Expression 'value') 
		{{LineInputClause}};


###################################################### 
########## Control flow statements
###################################################### 

ControlFlowStatement : 
  Exits
| Loops 
| If  
| On 
| Resume 
| To 
| With 
| RaiseError 
| Select ; 

####################
#### Loops
####################


Loops : 
  DoLoop 
| WhileWend 
| ForLoop ;

####################
########## Do
####################

DoLoop : 
  InfinityLoop 
| WhileTrue 
| UntilTrue 
| DoWhileTrue 
| DoUntilTrue; 


InfinityLoop : 
	""do""  
		(Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{InfinityLoop}} ;

WhileTrue :  
	""do"" <whitespace>
	""while"" <whitespace>
	Expression 'condition' 
	( Block 'body')? 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop""  
	{{WhileTrue}}; 
	
	
UntilTrue : 
	""do"" <whitespace>
	""until"" <whitespace>
	Expression 'condition'
		Block 'body'
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""loop"" 
   {{UntilTrue}}; 

DoWhileTrue :  
	""do"" 
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)?  
	""loop"" <whitespace> 
	""while"" <whitespace> 
	Expression 'condition' 
    {{DoWhileTrue}}; 

DoUntilTrue : 
	""do"" 
	 Block 'body' 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""loop"" <whitespace> 
	""until"" <whitespace>
	Expression 'condition'
    {{DoUntilTrue}}; 


####################
########## WhileWend
####################

WhileWend: 
	""while"" <whitespace> 
	Expression 'condition'
	( Block 'body')?   
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""wend"" 
	{{WhileWend}}; 

####################
########## For 
####################

ForLoop : 
  ForEach 
| ForNext 
| ForNextOneLine 
| ForStepNext;

ForEach :  
	""for"" <whitespace> 
	""each"" <whitespace> 
	Identifier 'element' <whitespace> 
	""in"" <whitespace> 
	Expression 'group' <whitespace>?
	( Block 'body')?
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForEach}} ;

ForNext :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'   
	( Block 'body')? 
	 (IntegerLiteral 'endLineNumber' <whitespace>) ? 
	 ""next"" 
	 (<whitespace> Identifier 'element')? 
    {{ForNext}} ;

ForNextOneLine :   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace> 
	""="" <whitespace> 
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit'
		( OneLineBlock 'body')? 
	""next""
   {{ForNext}} ;

ForStepNext:   
	""for"" <whitespace> 
	Identifier 'counter' <whitespace>
	""="" <whitespace>
	Expression  'initialValue' <whitespace> 
	""to"" <whitespace> 
	Expression  'limit' <whitespace> 
	""step"" <whitespace> 
	Expression 'step'   
		( Block 'body')?  
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""next"" 
	(<whitespace> Identifier 'element' )? 
    {{ForStepNext}} ;

####################
########## If
####################

If : 
  IfThenElseOneLine 
| IfThenEmpty
| IfThenElse ; 

IfThenEmpty : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then:"") <eol> 
{{IfThenElse}};


IfThenElseOneLine : 
	""if"" <whitespace> 
	Expression 'condition' <whitespace> 
	(""then""|""then:"") 
	OneLineBlock 'ifTrue' 
	(<whitespace> (""else""|""else:"") OneLineBlock 'ifFalse' )?
{{IfThenElse}};

IfThenElse : 
	""if"" <whitespace> 
	Expression  'condition' 
	<whitespace> 
	""then""
	(Block 'ifTrue')  
	(ElseIf 'elseif')* 
	(Else 'else')?
    (IntegerLiteral 'endLineNumber'<whitespace>)? 
	""end"" <whitespace> ""if""
	{{IfThenElse}};
	
Else: 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""else"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}};
	
ElseIf: 
    (IntegerLiteral 'endLineNumber' <whitespace>)? 
	""elseif"" <whitespace> 
	Expression  'condition' <whitespace>
	""then"" 
	(Block 'ifMatch')?  
	{{ElseIfBlock}}; 



####################
###### Error 
####################

RaiseError : 
  ""Error"" <whitespace> Expression 'errorCode'  
  {{RaiseError}} ;
	
##########################
###### Label / LabelSub
##########################

	To : Label ;
	Label : LabelTag 'label' {{Label}}; 	
	
	
####################
###### Select Case 
####################
CaseCondition : 
  ExpressionCalls
| NegatedOperation 
| Interval
| Identifier 
| MemberAccess 
| literal;

Case : 
	(IntegerLiteral 'lineNumber' <whitespace>)? 
	""case"" <whitespace>
	(CaseCondition 'expression' | ""else"")
	("","" <whitespace> (CaseCondition 'expression'))*
	"":""?
	(Block 'body' | (OneLineBlock 'body' <eol>))?
	{{Case}};
	
Select : 
	""select"" <whitespace> 
	""case"" <whitespace>
	Expression 'expression' 
	<eol>+ (Case 'case' <eol>+?)* 
	(IntegerLiteral 'endLineNumber' <whitespace>)? 
	""end"" <whitespace> ""select"" 
	{{Select}};

####################
###### Resume
####################

Resume: 
  ResumeLabel 
| ResumeNext 
| ResumeEmpty ;
	
ResumeLabel : 
	""resume"" <whitespace> 
	DestinationList 'destination' 
	{{ResumeLabel}} ; 
	
ResumeNext : 
	""resume"" <whitespace> 
	""next"" 
	{{ResumeNext}} ; 
	
ResumeEmpty : ""resume"" {{ResumeEmpty}}; 

####################
###### GoTo / GoSub 
####################

Go : 
  GoToStatement 
| GoSub ;


Destination : 
  Identifier 
| IntegerLiteral 
| NegatedOperation ;

 
DestinationList :  
	Destination 'label' 
	(<whitespace>?"","" <whitespace>?Destination 'label')*
	{{DestinationList}};

GoToStatement : 
	""goto"" <whitespace> 
	DestinationList 'destination'   
	{{GoToStatement}};
	
GoSub :  
	""gosub"" <whitespace> 
	DestinationList 'destination'  
	{{GoSub}} ;

####################
########## On 
####################

On : 
  OnErrorGoTo 
| OnErrorResumeNext 
| OnExpressionGo; 

OnErrorGoTo : 
	""on"" <whitespace>
	""error"" <whitespace>
	GoToStatement 'to' 
	{{OnErrorGoTo}};
	
OnErrorResumeNext : 
	""on""  <whitespace>
	""error"" <whitespace>
	""resume""  <whitespace>
	""next""
	{{OnErrorResumeNext}} ;
	
OnExpressionGo : 
	""on"" <whitespace>
	Expression 'integerExpression' <whitespace>
	Go 'to' 
	{{OnExpressionGo}} ;

####################
########## Error
####################

Error: 
	""error"" <whitespace>
	Expression 'errorCode' 
	{{Error}} ;

####################
########## With
####################

With : 
	""with"" <whitespace>
	Expression 'with' 
	Block 'block' 
	(IntegerLiteral 'endLineNumber' <whitespace>)?
	""end"" <whitespace> ""with"" 
	{{With}} ;

####################
########## Exits
####################

Exits : 
  ExitFunction 
| ExitSub 
| ExitProperty 
| ExitDo 
| ExitFor 
| Return; 

ExitFunction : 
	""exit"" <whitespace>
	""function"" 
	{{Exits}} ;
	
ExitSub : 
	""exit"" <whitespace>
	""sub"" 
	{{Exits}} ; 
ExitDo : 
	""exit"" <whitespace>
	""do"" 
	{{Exits}} ; 
	
ExitFor : 
	""exit"" <whitespace>
	""for"" 
	{{Exits}} ;
	
ExitProperty : 
	""exit"" <whitespace> 
	""property"" 
	{{Exits}} ;
	
Return : 
	""return"" 
	{{Return}} ;

########################################
### Calls and accesses 
########################################

StateAccessBase :
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess; 

############################################################
### Normal accesses.  object.value dic!key
############################################################

DictionaryAccess : 
	(StateAccessBase 'receiver')?
	""!"" 
	KeywordIdentifier 'member' 
	{{DictionaryAccess}} ;

MemberAccess : 
	(StateAccessBase 'receiver')?
	"".""  
	KeywordIdentifier 'member' 
	{{MemberAccess}};


StateAccess : 
	DictionaryAccess 
  | MemberAccess;
  
  
############################################################
### ImplicitParenthesesLessCall.   selector arg1, arg2, , , arg
############################################################

ImplicitCallExpression : 
  MemberAccess
| Identifier
;


ImplicitParenthesesLessCall :  
		ImplicitCallExpression 'selector'  <whitespace> 
		ArgumentList 'arguments' 
		{{ImplicitParenthesesLessCall}} 
		
|       ImplicitCallExpression 'selector'
		{{ImplicitParenthesesLessCall}} 
 
;

############################################################
### ImplicitCalls.   selector(arg1, arg2, , , arg). 
############################################################
ProcedureCallOrArrayExpression : 
  StateAccess
| ValueClause
| Identifier
| ProcedureCallOrArrayAccess
;

ProcedureCallOrArrayAccess :  
		ProcedureCallOrArrayExpression 'selector'
		""(""<whitespace>?
		  ArgumentList 'arguments'
		 <whitespace>?"")""
		{{ProcedureCallOrArrayAccess}} 

;

############################################################
### Argument and argument list. 
### Expression, expression, assignment 
############################################################

Argument : 
        (ParameterPassingStrategy 'strategy' <whitespace>)?  
		(""paramarray"" <whitespace>)?  
		(Expression 'value' | Assignment 'value') 
		{{Argument}};
		
		
ArgumentList : 
		(<whitespace>? Argument 'argument' ? ("","" | "";"" )  <whitespace>?)* 
		Argument 'argument'? 
		(<whitespace>?("","" | "";"" ) <whitespace>? Argument 'argument' ? )*
		{{ArgumentList}};


ExplicitCallSelectorTypes :
  Identifier 
| MemberAccess  
| ProcedureCallOrArrayAccess;


############################################################
### ExplicitCall.  Call selector(arg1, arg2, , , arg). 
############################################################

ExplicitCall : 
		""Call"" <whitespace>
		 ExplicitCallSelectorTypes 'selector'  
		{{ExplicitCall}} ;
		
RaiseEvent : 
		""RaiseEvent"" <whitespace>
		(Identifier 'selector' | ProcedureCallOrArrayAccess 'selector' )
		{{RaiseEvent}};

TypeOf : 
		""TypeOf"" <whitespace>
		Argument 'argument' <whitespace>
		(""Is"" | ""IsNot"") <whitespace>
		Argument 'type'  
		{{TypeOf}};

StatementCalls :  
  ImplicitParenthesesLessCall 
| ExplicitCall ;

ExpressionCalls : 
  ProcedureCallOrArrayAccess 
| TypeOf ;"
]

{ #category : #generated }
VBParser class >> reduceTable [
^#(
	#(177 0 #reduceActionFor_eol__1: 2057217 false ) 
	#(179 0 #reduceActionFor__eol___ModuleStatement__element____1: 2121729 false ) 
	#(194 1 #liftFirstValue: 3470357 false ) 
	#(194 1 #liftFirstValue: 3470344 false ) 
	#(241 1 #reduceActionForDoEvents1: 8685569 false ) 
	#(194 1 #liftFirstValue: 3470354 false ) 
	#(194 1 #liftFirstValue: 3470351 false ) 
	#(194 1 #liftFirstValue: 3470355 false ) 
	#(194 1 #liftFirstValue: 3470345 false ) 
	#(194 1 #liftFirstValue: 3470356 false ) 
	#(194 1 #liftFirstValue: 3470352 false ) 
	#(194 1 #liftFirstValue: 3470358 false ) 
	#(194 1 #liftFirstValue: 3470359 false ) 
	#(194 1 #liftFirstValue: 3470353 false ) 
	#(240 1 #liftFirstValue: 8669185 false ) 
	#(194 1 #liftFirstValue: 3470343 false ) 
	#(194 1 #liftFirstValue: 3470342 false ) 
	#(194 1 #liftFirstValue: 3470341 false ) 
	#(194 1 #liftFirstValue: 3470350 false ) 
	#(223 1 #liftFirstValue: 7022595 false ) 
	#(194 1 #liftFirstValue: 3470347 false ) 
	#(223 1 #liftFirstValue: 7022596 false ) 
	#(194 1 #liftFirstValue: 3470346 false ) 
	#(194 1 #liftFirstValue: 3470349 false ) 
	#(235 1 #liftFirstValue: 7897089 false ) 
	#(194 1 #liftFirstValue: 3470339 false ) 
	#(223 1 #liftFirstValue: 7022593 false ) 
	#(223 1 #liftFirstValue: 7022594 false ) 
	#(359 1 #reduceActionForResumeEmpty1: 24282113 false ) 
	#(379 1 #reduceActionForReturn1: 26064897 false ) 
	#(194 1 #liftFirstValue: 3470348 false ) 
	#(235 1 #liftFirstValue: 7897090 false ) 
	#(194 1 #liftFirstValue: 3470338 false ) 
	#(194 1 #liftFirstValue: 3470340 false ) 
	#(194 1 #liftFirstValue: 3470337 false ) 
	#(196 1 #reduceActionForSquareBracketIdentifier1: 3824641 false ) 
	#(195 1 #reduceActionForHashIdentifier1: 3757057 false ) 
	#(380 1 #liftFirstValue: 26211331 false ) 
	#(386 1 #liftFirstValue: 27420675 false ) 
	#(384 1 #liftFirstValue: 26945538 false ) 
	#(228 0 #reduceActionForTypedThing1: 7236609 false ) 
	#(197 1 #reduceActionForSimpleIdentifier1: 3905537 false ) 
	#(191 1 #liftFirstValue: 3192834 false ) 
	#(191 1 #liftFirstValue: 3192835 false ) 
	#(191 1 #liftFirstValue: 3192833 false ) 
	#(348 1 #reduceActionForLabel1: 23337985 false ) 
	#(212 1 #liftFirstValue: 5952516 false ) 
	#(212 1 #liftFirstValue: 5952515 false ) 
	#(212 1 #liftFirstValue: 5952513 false ) 
	#(234 1 #liftFirstValue: 7837697 false ) 
	#(234 1 #liftFirstValue: 7837698 false ) 
	#(212 1 #liftFirstValue: 5952525 false ) 
	#(238 1 #liftFirstValue: 8487937 false ) 
	#(238 1 #liftFirstValue: 8487938 false ) 
	#(238 1 #liftFirstValue: 8487939 false ) 
	#(212 1 #liftFirstValue: 5952519 false ) 
	#(242 1 #liftFirstValue: 8857602 false ) 
	#(242 1 #liftFirstValue: 8857603 false ) 
	#(242 1 #liftFirstValue: 8857601 false ) 
	#(293 1 #liftFirstValue: 15009794 false ) 
	#(293 1 #liftFirstValue: 15009795 false ) 
	#(293 1 #liftFirstValue: 15009798 false ) 
	#(293 1 #liftFirstValue: 15009799 false ) 
	#(293 1 #liftFirstValue: 15009800 false ) 
	#(293 1 #liftFirstValue: 15009803 false ) 
	#(293 1 #liftFirstValue: 15009793 false ) 
	#(293 1 #liftFirstValue: 15009796 false ) 
	#(293 1 #liftFirstValue: 15009801 false ) 
	#(293 1 #liftFirstValue: 15009802 false ) 
	#(293 1 #liftFirstValue: 15009804 false ) 
	#(293 1 #liftFirstValue: 15009797 false ) 
	#(212 1 #liftFirstValue: 5952514 false ) 
	#(380 1 #liftFirstValue: 26211330 false ) 
	#(386 1 #liftFirstValue: 27420674 false ) 
	#(312 1 #liftFirstValue: 17893377 false ) 
	#(312 1 #liftFirstValue: 17893378 false ) 
	#(212 1 #liftFirstValue: 5952523 false ) 
	#(318 1 #liftFirstValue: 18320385 false ) 
	#(318 1 #liftFirstValue: 18320386 false ) 
	#(318 1 #liftFirstValue: 18320387 false ) 
	#(212 1 #liftFirstValue: 5952518 false ) 
	#(324 1 #liftFirstValue: 19345410 false ) 
	#(325 1 #liftFirstValue: 19509249 false ) 
	#(326 1 #liftFirstValue: 19613697 false ) 
	#(326 1 #liftFirstValue: 19613698 false ) 
	#(326 1 #liftFirstValue: 19613699 false ) 
	#(326 1 #liftFirstValue: 19613700 false ) 
	#(326 1 #liftFirstValue: 19613701 false ) 
	#(325 1 #liftFirstValue: 19509250 false ) 
	#(325 1 #liftFirstValue: 19509251 false ) 
	#(333 1 #liftFirstValue: 20841473 false ) 
	#(333 1 #liftFirstValue: 20841474 false ) 
	#(333 1 #liftFirstValue: 20841475 false ) 
	#(333 1 #liftFirstValue: 20841476 false ) 
	#(324 1 #liftFirstValue: 19345411 false ) 
	#(338 1 #liftFirstValue: 22195202 false ) 
	#(338 1 #liftFirstValue: 22195201 false ) 
	#(338 1 #liftFirstValue: 22195203 false ) 
	#(324 1 #liftFirstValue: 19345416 false ) 
	#(324 1 #liftFirstValue: 19345414 false ) 
	#(212 1 #liftFirstValue: 5952520 false ) 
	#(347 1 #liftFirstValue: 23323649 false ) 
	#(324 1 #liftFirstValue: 19345417 false ) 
	#(324 1 #liftFirstValue: 19345413 false ) 
	#(356 1 #liftFirstValue: 24059905 false ) 
	#(356 1 #liftFirstValue: 24059906 false ) 
	#(356 1 #liftFirstValue: 24059907 false ) 
	#(212 1 #liftFirstValue: 5952522 false ) 
	#(360 1 #liftFirstValue: 24390657 false ) 
	#(360 1 #liftFirstValue: 24390658 false ) 
	#(324 1 #liftFirstValue: 19345412 false ) 
	#(367 1 #liftFirstValue: 24859649 false ) 
	#(367 1 #liftFirstValue: 24859650 false ) 
	#(367 1 #liftFirstValue: 24859651 false ) 
	#(324 1 #liftFirstValue: 19345415 false ) 
	#(324 1 #liftFirstValue: 19345409 false ) 
	#(212 1 #liftFirstValue: 5952521 false ) 
	#(373 1 #liftFirstValue: 25676801 false ) 
	#(373 1 #liftFirstValue: 25676802 false ) 
	#(373 1 #liftFirstValue: 25676804 false ) 
	#(373 1 #liftFirstValue: 25676805 false ) 
	#(373 1 #liftFirstValue: 25676803 false ) 
	#(373 1 #liftFirstValue: 25676806 false ) 
	#(383 1 #liftFirstValue: 26694657 false ) 
	#(383 1 #liftFirstValue: 26694658 false ) 
	#(384 1 #liftFirstValue: 26945537 false ) 
	#(380 1 #liftFirstValue: 26211329 false ) 
	#(386 1 #liftFirstValue: 27420673 false ) 
	#(385 1 #reduceActionForImplicitParenthesesLessCall2: 27004930 false ) 
	#(398 1 #liftFirstValue: 28952577 false ) 
	#(380 1 #liftFirstValue: 26211332 false ) 
	#(386 1 #liftFirstValue: 27420676 false ) 
	#(398 1 #liftFirstValue: 28952578 false ) 
	#(212 1 #liftFirstValue: 5952524 false ) 
	#(212 1 #liftFirstValue: 5952517 false ) 
	#(209 1 #liftFirstValue: 5369857 false ) 
	#(209 1 #liftFirstValue: 5369858 false ) 
	#(209 1 #liftFirstValue: 5369859 false ) 
	#(209 1 #liftFirstValue: 5369860 false ) 
	#(209 1 #liftFirstValue: 5369862 false ) 
	#(209 1 #liftFirstValue: 5369861 false ) 
	#(209 1 #liftFirstValue: 5369863 false ) 
	#(209 1 #liftFirstValue: 5369864 false ) 
	#(209 1 #liftFirstValue: 5369866 false ) 
	#(209 1 #liftFirstValue: 5369865 false ) 
	#(209 1 #liftFirstValue: 5369867 false ) 
	#(209 1 #liftFirstValue: 5369868 false ) 
	#(209 1 #liftFirstValue: 5369869 false ) 
	#(209 1 #liftFirstValue: 5369870 false ) 
	#(264 1 #liftFirstValue: 11439105 false ) 
	#(211 1 #liftFirstValue: 5643265 false ) 
	#(200 1 #liftFirstValue: 4280333 false ) 
	#(211 1 #liftFirstValue: 5643267 false ) 
	#(211 1 #liftFirstValue: 5643266 false ) 
	#(211 1 #liftFirstValue: 5643272 false ) 
	#(211 1 #liftFirstValue: 5643273 false ) 
	#(211 1 #liftFirstValue: 5643271 false ) 
	#(263 1 #liftFirstValue: 11235329 false ) 
	#(263 1 #liftFirstValue: 11235330 false ) 
	#(211 1 #liftFirstValue: 5643268 false ) 
	#(273 1 #liftFirstValue: 12982273 false ) 
	#(273 1 #liftFirstValue: 12982274 false ) 
	#(273 1 #liftFirstValue: 12982275 false ) 
	#(273 1 #liftFirstValue: 12982276 false ) 
	#(273 1 #liftFirstValue: 12982277 false ) 
	#(211 1 #liftFirstValue: 5643270 false ) 
	#(211 1 #liftFirstValue: 5643269 false ) 
	#(177 2 #reduceActionFor_eol__2: 2057218 false ) 
	#(193 1 #liftFirstValue: 3371010 false ) 
	#(193 1 #liftFirstValue: 3371011 false ) 
	#(193 1 #liftFirstValue: 3371013 false ) 
	#(193 1 #liftFirstValue: 3371014 false ) 
	#(193 1 #liftFirstValue: 3371012 false ) 
	#(381 2 #reduceActionForDictionaryAccess1: 26474497 false ) 
	#(192 1 #reduceActionForSimpleIdentifier1: 3274753 false ) 
	#(193 1 #liftFirstValue: 3371009 false ) 
	#(192 1 #liftFirstValue: 3274754 false ) 
	#(382 2 #reduceActionForMemberAccess1: 26588161 false ) 
	#(327 2 #reduceActionForInfinityLoop1: 19700737 false ) 
	#(182 1 #reduceActionForIntegerLiteral1: 2563073 false ) 
	#(207 1 #reduceActionFor_eol__1: 5213185 false ) 
	#(215 0 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: 6382593 false ) 
	#(198 2 #reduceActionForLabelTag1: 3978241 false ) 
	#(233 1 #liftFirstValue: 7634945 false ) 
	#(233 1 #liftFirstValue: 7634946 false ) 
	#(292 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14929921 false ) 
	#(290 2 #reduceActionForConstantList1: 14894081 false ) 
	#(391 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 28112897 false ) 
	#(176 3 #reduceActionFormodule1: 2049025 false ) 
	#(179 2 #reduceActionFor__eol___ModuleStatement__element____2: 2121730 false ) 
	#(313 3 #reduceActionForAddressOfClause1: 17942529 false ) 
	#(394 1 #liftFirstValue: 28299265 false ) 
	#(394 1 #liftFirstValue: 28299266 false ) 
	#(394 1 #liftFirstValue: 28299267 false ) 
	#(395 3 #reduceActionForExplicitCall1: 28575745 false ) 
	#(184 1 #reduceActionForDateLiteral1: 2702337 false ) 
	#(183 1 #reduceActionForColorLiteral1: 2636801 false ) 
	#(185 1 #reduceActionForFloatLiteral1: 2763777 false ) 
	#(186 1 #reduceActionForBooleanLiteral1: 2834433 false ) 
	#(187 1 #reduceActionForStringLiteral1: 2903041 false ) 
	#(188 1 #reduceActionForNull1: 2969601 false ) 
	#(181 1 #reduceActionForFileDescriptorLiteral1: 2484225 false ) 
	#(294 1 #liftFirstValue: 15412229 false ) 
	#(302 1 #liftFirstValue: 16521221 false ) 
	#(180 1 #liftFirstValue: 2316289 false ) 
	#(180 1 #liftFirstValue: 2316290 false ) 
	#(180 1 #liftFirstValue: 2316291 false ) 
	#(180 1 #liftFirstValue: 2316292 false ) 
	#(180 1 #liftFirstValue: 2316293 false ) 
	#(180 1 #liftFirstValue: 2316294 false ) 
	#(180 1 #liftFirstValue: 2316295 false ) 
	#(180 1 #liftFirstValue: 2316296 false ) 
	#(180 1 #liftFirstValue: 2316297 false ) 
	#(294 1 #liftFirstValue: 15412228 false ) 
	#(302 1 #liftFirstValue: 16521220 false ) 
	#(346 3 #reduceActionForRaiseError1: 23156737 false ) 
	#(294 1 #liftFirstValue: 15412230 false ) 
	#(302 1 #liftFirstValue: 16521222 false ) 
	#(302 1 #liftFirstValue: 16521223 false ) 
	#(294 1 #liftFirstValue: 15412231 false ) 
	#(294 1 #liftFirstValue: 15412232 false ) 
	#(297 1 #liftFirstValue: 15827969 false ) 
	#(302 1 #liftFirstValue: 16521224 false ) 
	#(298 1 #liftFirstValue: 15940609 false ) 
	#(298 1 #liftFirstValue: 15940610 false ) 
	#(298 1 #liftFirstValue: 15940611 false ) 
	#(297 1 #liftFirstValue: 15827970 false ) 
	#(303 1 #liftFirstValue: 16675841 false ) 
	#(303 1 #liftFirstValue: 16675842 false ) 
	#(303 1 #liftFirstValue: 16675843 false ) 
	#(303 1 #liftFirstValue: 16675845 false ) 
	#(303 1 #liftFirstValue: 16675844 false ) 
	#(294 1 #liftFirstValue: 15412225 false ) 
	#(302 1 #liftFirstValue: 16521217 false ) 
	#(302 1 #liftFirstValue: 16521218 false ) 
	#(294 1 #liftFirstValue: 15412226 false ) 
	#(399 1 #liftFirstValue: 29022209 false ) 
	#(399 1 #liftFirstValue: 29022210 false ) 
	#(294 1 #liftFirstValue: 15412227 false ) 
	#(302 1 #liftFirstValue: 16521219 false ) 
	#(221 1 #liftFirstValue: 6746124 false ) 
	#(221 1 #liftFirstValue: 6746126 false ) 
	#(221 1 #liftFirstValue: 6746113 false ) 
	#(221 1 #liftFirstValue: 6746114 false ) 
	#(221 1 #liftFirstValue: 6746116 false ) 
	#(221 1 #liftFirstValue: 6746115 false ) 
	#(221 1 #liftFirstValue: 6746117 false ) 
	#(221 1 #liftFirstValue: 6746118 false ) 
	#(221 1 #liftFirstValue: 6746119 false ) 
	#(221 1 #liftFirstValue: 6746120 false ) 
	#(221 1 #liftFirstValue: 6746121 false ) 
	#(221 1 #liftFirstValue: 6746122 false ) 
	#(221 1 #liftFirstValue: 6746123 false ) 
	#(221 1 #liftFirstValue: 6746125 false ) 
	#(221 1 #reduceActionForBaseType15: 6746127 false ) 
	#(222 1 #reduceActionForSimpleType1: 6963201 false ) 
	#(227 1 #liftFirstValue: 7182337 false ) 
	#(227 1 #liftFirstValue: 7182338 false ) 
	#(227 1 #liftFirstValue: 7182339 false ) 
	#(226 1 #reduceActionFor_____UsableKeywords__member___1: 7129089 false ) 
	#(224 1 #reduceActionForComplexType1: 7089153 false ) 
	#(314 3 #reduceActionForNewClause1: 18039809 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28682241 false ) 
	#(396 3 #reduceActionForRaiseEvent1: 28682242 false ) 
	#(245 0 #reduceActionFor__eol___ModuleStatement__element____1: 9019393 false ) 
	#(203 3 #reduceActionForAttribute1: 5059585 false ) 
	#(275 3 #reduceActionForModuleConstant1: 13369345 false ) 
	#(283 3 #reduceActionForModuleConstants1: 14289921 false ) 
	#(280 1 #reduceActionForVariable1: 13912065 false ) 
	#(276 3 #reduceActionForDefineVariable1: 13498369 false ) 
	#(284 3 #reduceActionForDefineVariables1: 14439425 false ) 
	#(182 2 #reduceActionForIntegerLiteral2: 2563074 false ) 
	#(207 2 #reduceActionFor_eol__2: 5213186 false ) 
	#(327 3 #reduceActionForInfinityLoop3: 19700739 false ) 
	#(250 0 #reduceActionFor__eol___ModuleStatement__element____1: 9562113 false ) 
	#(377 3 #reduceActionForExitFor1: 25940993 false ) 
	#(376 3 #reduceActionForExitDo1: 25885697 false ) 
	#(374 3 #reduceActionForExitFunction1: 25763841 false ) 
	#(378 3 #reduceActionForExitProperty1: 25997313 false ) 
	#(375 3 #reduceActionForExitSub1: 25830401 false ) 
	#(361 1 #liftFirstValue: 24426498 false ) 
	#(361 1 #liftFirstValue: 24426497 false ) 
	#(361 1 #liftFirstValue: 24426499 false ) 
	#(364 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 24543233 false ) 
	#(366 3 #reduceActionForGoSub1: 24718337 false ) 
	#(365 3 #reduceActionForGoToStatement1: 24621057 false ) 
	#(277 3 #reduceActionForReDefineVariable1: 13581313 false ) 
	#(285 3 #reduceActionForReDefineVariables1: 14537729 false ) 
	#(278 3 #reduceActionForReDefineVariable1: 13700097 false ) 
	#(358 3 #reduceActionForResumeNext1: 24212481 false ) 
	#(357 3 #reduceActionForResumeLabel1: 24117249 false ) 
	#(279 3 #reduceActionForStaticVariable1: 13821953 false ) 
	#(286 3 #reduceActionForStaticVariables1: 14674945 false ) 
	#(228 2 #reduceActionForTypedThing2: 7236610 false ) 
	#(274 3 #reduceActionForModuleProperty1: 13265921 false ) 
	#(282 3 #reduceActionForModuleProperties1: 14166017 false ) 
	#(291 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14929921 false ) 
	#(292 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14929922 false ) 
	#(381 3 #reduceActionForDictionaryAccess2: 26474498 false ) 
	#(382 3 #reduceActionForMemberAccess2: 26588162 false ) 
	#(385 3 #reduceActionForImplicitParenthesesLessCall1: 27004929 false ) 
	#(393 0 #reduceActionFor__whitespace___Argument__argument___________________whitespace____1: 28209153 false ) 
	#(206 0 #reduceActionFor__eol___ModuleStatement__element____1: 5211137 false ) 
	#(208 3 #reduceActionForImplements1: 5282817 false ) 
	#(200 3 #reduceActionForOption9: 4280329 false ) 
	#(200 3 #reduceActionForOption1: 4280321 false ) 
	#(269 0 #nil 11968513 false ) 
	#(210 3 #reduceActionForDefType1: 5560321 false ) 
	#(199 3 #reduceActionForheader1: 4190209 false ) 
	#(178 2 #reduceActionFor__eol___ModuleStatement__element___1: 2121729 false ) 
	#(176 4 #reduceActionFormodule2: 2049026 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 16021506 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 16021507 false ) 
	#(299 2 #reduceActionForNegatedOperation2: 16021505 false ) 
	#(190 1 #reduceActionFor_HEX_INTEGER___1: 3044353 false ) 
	#(225 2 #reduceActionFor_____UsableKeywords__member__1: 7129089 false ) 
	#(224 2 #reduceActionForComplexType2: 7089154 false ) 
	#(226 2 #reduceActionFor_____UsableKeywords__member___2: 7129090 false ) 
	#(322 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 18898945 false ) 
	#(232 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 7566337 false ) 
	#(280 2 #reduceActionForVariable3: 13912067 false ) 
	#(280 2 #reduceActionForVariable2: 13912066 false ) 
	#(289 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 14815233 false ) 
	#(287 2 #reduceActionForVariableList1: 14779393 false ) 
	#(327 4 #reduceActionForInfinityLoop2: 19700738 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____2: 6387714 false ) 
	#(216 1 #reduceActionFor__eol______whitespace________whitespace____1: 6387713 false ) 
	#(213 3 #reduceActionForBlock1: 6283265 false ) 
	#(215 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: 6382594 false ) 
	#(217 1 #reduceActionFor___whitespace_________whitespace____Constant__constant____1: 6387713 false ) 
	#(247 4 #reduceActionForEvent1: 9277441 false ) 
	#(362 2 #reduceActionForDestinationList1: 24499201 false ) 
	#(332 4 #reduceActionForWhileWend1: 20621313 false ) 
	#(228 3 #reduceActionForTypedThing3: 7236611 false ) 
	#(228 3 #reduceActionForTypedThing4: 7236612 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14929922 false ) 
	#(291 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14929923 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___1: 28112897 false ) 
	#(390 1 #reduceActionFor__whitespace___Argument__argument___________________whitespace___3: 28112899 false ) 
	#(252 1 #reduceActionForParameterPassingStrategy2: 9915394 false ) 
	#(252 1 #liftFirstValue: 9915393 false ) 
	#(388 1 #reduceActionForArgument2: 27916290 false ) 
	#(388 1 #reduceActionForArgument2: 27916289 false ) 
	#(391 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace____2: 28112898 false ) 
	#(389 2 #reduceActionForArgumentList1: 28094465 false ) 
	#(387 4 #reduceActionForProcedureCallOrArrayAccess1: 27530241 false ) 
	#(267 0 #reduceActionFor_AsType__type__TypeSize__size______1: 11668481 false ) 
	#(269 1 #liftFirstValue: 11968514 false ) 
	#(200 4 #reduceActionForOption10: 4280330 false ) 
	#(200 4 #reduceActionForOption2: 4280322 false ) 
	#(199 4 #reduceActionForheader2: 4190210 false ) 
	#(199 4 #reduceActionForheader3: 4190211 false ) 
	#(176 5 #reduceActionFormodule3: 2049027 false ) 
	#(295 3 #reduceActionForParentheseesExpression1: 15561729 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16150530 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16150531 false ) 
	#(300 3 #reduceActionForPositiveOperation2: 16150529 false ) 
	#(301 3 #reduceActionForNotOperation2: 16295938 false ) 
	#(301 3 #reduceActionForNotOperation2: 16295939 false ) 
	#(301 3 #reduceActionForNotOperation2: 16295937 false ) 
	#(301 3 #reduceActionForNotOperation2: 16295940 false ) 
	#(190 2 #reduceActionFor_eol__2: 3044354 false ) 
	#(306 1 #reduceActionForArithmeticOperator1: 17091585 false ) 
	#(306 1 #reduceActionForArithmeticOperator2: 17091586 false ) 
	#(306 1 #reduceActionForArithmeticOperator3: 17091587 false ) 
	#(306 1 #reduceActionForArithmeticOperator4: 17091588 false ) 
	#(304 1 #reduceActionForArithmeticOperator2: 16809986 false ) 
	#(304 1 #reduceActionForArithmeticOperator4: 16809988 false ) 
	#(304 1 #reduceActionForArithmeticOperator3: 16809987 false ) 
	#(304 1 #reduceActionForArithmeticOperator1: 16809985 false ) 
	#(304 1 #reduceActionForComparisonOperator5: 16809989 false ) 
	#(304 1 #reduceActionForComparisonOperator6: 16809990 false ) 
	#(304 1 #reduceActionForComparisonOperator7: 16809991 false ) 
	#(306 1 #reduceActionForComparisonOperator7: 17091591 false ) 
	#(306 1 #reduceActionForComparisonOperator6: 17091590 false ) 
	#(306 1 #reduceActionForComparisonOperator5: 17091589 false ) 
	#(308 1 #reduceActionForBooleanOperator1: 17297409 false ) 
	#(308 1 #reduceActionForBooleanOperator4: 17297412 false ) 
	#(308 1 #reduceActionForBooleanOperator2: 17297410 false ) 
	#(308 1 #reduceActionForBooleanOperator3: 17297411 false ) 
	#(320 5 #reduceActionForPrintFileClause1: 18751489 false ) 
	#(245 2 #reduceActionFor__eol___ModuleStatement__element____2: 9019394 false ) 
	#(280 3 #reduceActionForVariable5: 13912069 false ) 
	#(280 3 #reduceActionForVariable4: 13912068 false ) 
	#(288 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 14815233 false ) 
	#(289 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 14815234 false ) 
	#(213 4 #reduceActionForBlock2: 6283266 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____3: 6387715 false ) 
	#(216 2 #reduceActionFor__eol______whitespace________whitespace____4: 6387716 false ) 
	#(214 2 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: 6382593 false ) 
	#(217 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6387714 false ) 
	#(327 5 #reduceActionForInfinityLoop4: 19700740 false ) 
	#(250 2 #reduceActionFor__eol___ModuleStatement__element____2: 9562114 false ) 
	#(253 2 #reduceActionForParameterList1: 9993217 false ) 
	#(258 0 #nil 10291201 false ) 
	#(255 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 10034177 false ) 
	#(247 5 #reduceActionForEvent2: 9277442 false ) 
	#(364 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 24543234 false ) 
	#(368 5 #reduceActionForOnErrorGoTo1: 24923137 false ) 
	#(370 5 #reduceActionForOnExpressionGo1: 25147393 false ) 
	#(201 5 #reduceActionForOptionBase1: 4788225 false ) 
	#(277 5 #reduceActionForReDefineVariable2: 13581314 false ) 
	#(285 5 #reduceActionForReDefineVariables2: 14537730 false ) 
	#(278 5 #reduceActionForReDefineVariable2: 13700098 false ) 
	#(332 5 #reduceActionForWhileWend3: 20621315 false ) 
	#(228 4 #reduceActionForTypedThing5: 7236613 false ) 
	#(236 5 #reduceActionForAssignment2: 7930882 false ) 
	#(281 5 #reduceActionForConstant1: 14035969 false ) 
	#(236 5 #reduceActionForAssignment2: 7930881 false ) 
	#(228 4 #reduceActionForTypedThing6: 7236614 false ) 
	#(275 5 #reduceActionForModuleConstant2: 13369346 false ) 
	#(283 5 #reduceActionForModuleConstants2: 14289922 false ) 
	#(291 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14929924 false ) 
	#(236 5 #reduceActionForAssignment2: 7930884 false ) 
	#(236 5 #reduceActionForAssignment2: 7930883 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___2: 28112898 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___4: 28112900 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___9: 28112905 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___11: 28112907 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___5: 28112901 false ) 
	#(390 2 #reduceActionFor__whitespace___Argument__argument___________________whitespace___7: 28112903 false ) 
	#(389 3 #reduceActionForArgumentList2: 28094466 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____1: 28209153 false ) 
	#(392 1 #reduceActionFor__whitespace________________whitespace___Argument__argument_____5: 28209157 false ) 
	#(393 2 #reduceActionFor__whitespace________________whitespace___Argument__argument______2: 28209154 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess3: 27530243 false ) 
	#(387 5 #reduceActionForProcedureCallOrArrayAccess2: 27530242 false ) 
	#(206 2 #reduceActionFor___eol___SetUpAssignation__setting___2: 5211138 false ) 
	#(266 1 #reduceActionFor_AsType__type__TypeSize__size_____1: 11668481 false ) 
	#(267 1 #reduceActionFor_AsType__type__TypeSize__size______2: 11668482 false ) 
	#(200 5 #reduceActionForOption5: 4280325 false ) 
	#(200 5 #reduceActionForOption3: 4280323 false ) 
	#(200 5 #reduceActionForOption6: 4280326 false ) 
	#(200 5 #reduceActionForOption11: 4280331 false ) 
	#(199 5 #reduceActionForheader4: 4190212 false ) 
	#(176 6 #reduceActionFormodule4: 2049028 false ) 
	#(295 4 #reduceActionForParentheseesExpression3: 15561731 false ) 
	#(295 4 #reduceActionForParentheseesExpression2: 15561730 false ) 
	#(320 6 #reduceActionForPrintFileClause4: 18751492 false ) 
	#(320 6 #reduceActionForPrintFileClause2: 18751490 false ) 
	#(322 2 #reduceActionFor______whitespace___Expression__value___2: 18898946 false ) 
	#(320 6 #reduceActionForPrintFileClause7: 18751495 false ) 
	#(244 2 #reduceActionFor__eol___ModuleStatement__element___1: 9019393 false ) 
	#(280 4 #reduceActionForVariable7: 13912071 false ) 
	#(280 4 #reduceActionForVariable6: 13912070 false ) 
	#(230 3 #reduceActionForTypeSize1: 7523329 false ) 
	#(232 2 #reduceActionFor______whitespace___Expression__value___2: 7566338 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 14815234 false ) 
	#(288 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 14815235 false ) 
	#(330 6 #reduceActionForDoWhileTrue1: 20184065 false ) 
	#(328 6 #reduceActionForWhileTrue1: 19826689 false ) 
	#(213 5 #reduceActionForBlock3: 6283267 false ) 
	#(216 3 #reduceActionFor__eol______whitespace________whitespace____5: 6387717 false ) 
	#(251 1 #reduceActionForEnumEntry1: 9659393 false ) 
	#(249 2 #reduceActionFor__eol___ModuleStatement__element___1: 9562113 false ) 
	#(253 3 #reduceActionForParameterList2: 9993218 false ) 
	#(257 1 #liftFirstValue: 10291201 false ) 
	#(258 1 #liftFirstValue: 10291202 false ) 
	#(260 0 #reduceActionFor__whitespace_______whitespace__Expression__default___1: 10310657 false ) 
	#(363 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 24543233 false ) 
	#(220 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 6672385 false ) 
	#(343 0 #reduceActionFor_eol__1: 22674433 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine1: 22366209 false ) 
	#(339 6 #reduceActionForIfThenEmpty1: 22254593 false ) 
	#(340 6 #reduceActionForIfThenElseOneLine4: 22366212 false ) 
	#(355 0 #reduceActionFor__eol___ModuleStatement__element____1: 23881729 false ) 
	#(332 6 #reduceActionForWhileWend2: 20621314 false ) 
	#(201 6 #reduceActionForOptionBase2: 4788226 false ) 
	#(281 6 #reduceActionForConstant2: 14035970 false ) 
	#(247 6 #reduceActionForEvent3: 9277443 false ) 
	#(388 3 #reduceActionForArgument4: 27916292 false ) 
	#(388 3 #reduceActionForArgument4: 27916291 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___10: 28112906 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___12: 28112908 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___13: 28112909 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___15: 28112911 false ) 
	#(388 3 #reduceActionForArgument6: 27916294 false ) 
	#(388 3 #reduceActionForArgument6: 27916293 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___6: 28112902 false ) 
	#(390 3 #reduceActionFor__whitespace___Argument__argument___________________whitespace___8: 28112904 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____3: 28209155 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____2: 28209154 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____7: 28209159 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____6: 28209158 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____9: 28209161 false ) 
	#(392 2 #reduceActionFor__whitespace________________whitespace___Argument__argument_____13: 28209165 false ) 
	#(387 6 #reduceActionForProcedureCallOrArrayAccess4: 27530244 false ) 
	#(204 6 #reduceActionForConfiguration1: 5149697 false ) 
	#(205 2 #reduceActionFor__eol___ModuleStatement__element___1: 5211137 false ) 
	#(266 2 #reduceActionFor_____UsableKeywords__member__1: 11668482 false ) 
	#(200 6 #reduceActionForOption7: 4280327 false ) 
	#(200 6 #reduceActionForOption4: 4280324 false ) 
	#(200 6 #reduceActionForOption8: 4280328 false ) 
	#(200 6 #reduceActionForOption12: 4280332 false ) 
	#(295 5 #reduceActionForParentheseesExpression4: 15561732 false ) 
	#(311 5 #reduceActionForEquals1: 17675265 false ) 
	#(311 5 #reduceActionForEquals1: 17675267 false ) 
	#(296 5 #reduceActionForInterval1: 15689729 false ) 
	#(310 5 #reduceActionForConcatenationOperation1: 17542145 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16884737 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16884738 false ) 
	#(307 5 #reduceActionForArithmeticOperation1: 17158145 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17347587 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17347585 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16884739 false ) 
	#(305 5 #reduceActionForComparisonOperation1: 16884740 false ) 
	#(309 5 #reduceActionForBooleanBinaryOperation3: 17347586 false ) 
	#(311 5 #reduceActionForEquals1: 17675266 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18972677 false ) 
	#(323 7 #reduceActionForLineInputClause5: 18972673 false ) 
	#(315 1 #liftFirstValue: 18112513 false ) 
	#(315 1 #liftFirstValue: 18112514 false ) 
	#(315 1 #liftFirstValue: 18112515 false ) 
	#(315 1 #liftFirstValue: 18112516 false ) 
	#(315 1 #liftFirstValue: 18112517 false ) 
	#(320 7 #reduceActionForPrintFileClause5: 18751493 false ) 
	#(320 7 #reduceActionForPrintFileClause3: 18751491 false ) 
	#(321 2 #reduceActionFor______whitespace___Expression__value__1: 18898945 false ) 
	#(320 7 #reduceActionForPrintFileClause10: 18751498 false ) 
	#(320 7 #reduceActionForPrintFileClause8: 18751496 false ) 
	#(246 2 #reduceActionForTypeEntry1: 9118721 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4905985 false ) 
	#(202 5 #reduceActionForSetUpAssignation1: 4905986 false ) 
	#(280 5 #reduceActionForVariable8: 13912072 false ) 
	#(231 2 #reduceActionFor______whitespace___Expression__value__1: 7566337 false ) 
	#(230 4 #reduceActionForTypeSize2: 7523330 false ) 
	#(288 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 14815236 false ) 
	#(329 7 #reduceActionForUntilTrue1: 20009985 false ) 
	#(328 7 #reduceActionForWhileTrue3: 19826691 false ) 
	#(213 6 #reduceActionForBlock4: 6283268 false ) 
	#(214 4 #reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: 6382594 false ) 
	#(331 7 #reduceActionForDoUntilTrue1: 20372481 false ) 
	#(330 7 #reduceActionForDoWhileTrue3: 20184067 false ) 
	#(260 1 #reduceActionFor_AsType__type__TypeSize__size______2: 10310658 false ) 
	#(256 3 #reduceActionForParameter1: 10120193 false ) 
	#(253 4 #reduceActionForParameterList3: 9993219 false ) 
	#(255 2 #reduceActionFor______whitespace___Expression__value___2: 10034178 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 24543234 false ) 
	#(363 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 24543235 false ) 
	#(218 2 #reduceActionForOneLineBlock1: 6616065 false ) 
	#(239 7 #reduceActionForRename1: 8539137 false ) 
	#(369 7 #reduceActionForOnErrorResumeNext1: 25022465 false ) 
	#(332 7 #reduceActionForWhileWend4: 20621316 false ) 
	#(372 7 #reduceActionForWith1: 25457665 false ) 
	#(229 6 #reduceActionForTypedAndInstantiatedThing1: 7394305 false ) 
	#(228 6 #reduceActionForTypedThing7: 7236615 false ) 
	#(247 7 #reduceActionForEvent4: 9277444 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8113154 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8113153 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8113156 false ) 
	#(237 7 #reduceActionForExplicitAssignement2: 8113155 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___14: 28112910 false ) 
	#(390 4 #reduceActionFor__whitespace___Argument__argument___________________whitespace___16: 28112912 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____4: 28209156 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____8: 28209160 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____11: 28209163 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____10: 28209162 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____15: 28209167 false ) 
	#(392 3 #reduceActionFor__whitespace________________whitespace___Argument__argument_____14: 28209166 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18972678 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18972679 false ) 
	#(323 8 #reduceActionForLineInputClause6: 18972674 false ) 
	#(323 8 #reduceActionForLineInputClause7: 18972675 false ) 
	#(320 8 #reduceActionForPrintFileClause6: 18751494 false ) 
	#(321 3 #reduceActionFor______whitespace___Expression__value__2: 18898946 false ) 
	#(320 8 #reduceActionForPrintFileClause11: 18751499 false ) 
	#(320 8 #reduceActionForPrintFileClause9: 18751497 false ) 
	#(243 8 #reduceActionForDefineType1: 8906753 false ) 
	#(246 3 #reduceActionForTypeEntry6: 9118726 false ) 
	#(231 3 #reduceActionFor______whitespace___Expression__value__2: 7566338 false ) 
	#(328 8 #reduceActionForWhileTrue2: 19826690 false ) 
	#(330 8 #reduceActionForDoWhileTrue2: 20184066 false ) 
	#(248 8 #reduceActionForDefineEnum1: 9449473 false ) 
	#(256 4 #reduceActionForParameter2: 10120194 false ) 
	#(253 5 #reduceActionForParameterList4: 9993220 false ) 
	#(363 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 24543236 false ) 
	#(218 3 #reduceActionForOneLineBlock2: 6616066 false ) 
	#(220 2 #reduceActionFor___whitespace_________whitespace____Constant__constant____2: 6672386 false ) 
	#(344 1 #reduceActionForElse1: 22808577 false ) 
	#(343 2 #reduceActionFor_eol__2: 22674434 false ) 
	#(342 1 #liftFirstValue: 22674433 false ) 
	#(354 1 #reduceActionFor_Case__case___eol____1: 23881729 false ) 
	#(355 2 #reduceActionFor_Case__case___eol_____2: 23881730 false ) 
	#(228 7 #reduceActionForTypedThing8: 7236616 false ) 
	#(228 7 #reduceActionForTypedThing9: 7236617 false ) 
	#(388 5 #reduceActionForArgument8: 27916296 false ) 
	#(388 5 #reduceActionForArgument8: 27916295 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____12: 28209164 false ) 
	#(392 4 #reduceActionFor__whitespace________________whitespace___Argument__argument_____16: 28209168 false ) 
	#(268 8 #reduceActionForDefineSub1: 11784193 false ) 
	#(397 7 #reduceActionForTypeOf1: 28813313 false ) 
	#(397 7 #reduceActionForTypeOf2: 28813314 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18972680 false ) 
	#(323 9 #reduceActionForLineInputClause8: 18972676 false ) 
	#(317 1 #liftFirstValue: 18243588 false ) 
	#(317 1 #liftFirstValue: 18243586 false ) 
	#(317 1 #liftFirstValue: 18243587 false ) 
	#(316 1 #liftFirstValue: 18189315 false ) 
	#(316 1 #liftFirstValue: 18189313 false ) 
	#(317 1 #liftFirstValue: 18243585 false ) 
	#(316 1 #liftFirstValue: 18189314 false ) 
	#(320 9 #reduceActionForPrintFileClause12: 18751500 false ) 
	#(246 4 #reduceActionForTypeEntry2: 9118722 false ) 
	#(329 9 #reduceActionForUntilTrue2: 20009986 false ) 
	#(328 9 #reduceActionForWhileTrue4: 19826692 false ) 
	#(331 9 #reduceActionForDoUntilTrue2: 20372482 false ) 
	#(330 9 #reduceActionForDoWhileTrue4: 20184068 false ) 
	#(256 5 #reduceActionForParameter9: 10120201 false ) 
	#(256 5 #reduceActionForParameter3: 10120195 false ) 
	#(256 5 #reduceActionForParameter5: 10120197 false ) 
	#(254 3 #reduceActionFor______whitespace__Parameter__parameter__1: 10034177 false ) 
	#(219 2 #reduceActionFor___whitespace_________whitespace____Constant__constant___1: 6672385 false ) 
	#(344 2 #reduceActionForElse2: 22808578 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine2: 22366210 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine3: 22366211 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine5: 22366213 false ) 
	#(340 9 #reduceActionForIfThenElseOneLine6: 22366214 false ) 
	#(354 2 #reduceActionFor_Case__case___eol____2: 23881730 false ) 
	#(372 9 #reduceActionForWith2: 25457666 false ) 
	#(228 8 #reduceActionForTypedThing10: 7236618 false ) 
	#(265 9 #reduceActionForDefineFunction1: 11461633 false ) 
	#(268 9 #reduceActionForDefineSub3: 11784195 false ) 
	#(268 9 #reduceActionForDefineSub2: 11784194 false ) 
	#(334 10 #reduceActionForForEach1: 20910081 false ) 
	#(246 5 #reduceActionForTypeEntry7: 9118727 false ) 
	#(246 5 #reduceActionForTypeEntry3: 9118723 false ) 
	#(246 5 #reduceActionForTypeEntry4: 9118724 false ) 
	#(251 5 #reduceActionForEnumEntry2: 9659394 false ) 
	#(256 6 #reduceActionForParameter10: 10120202 false ) 
	#(256 6 #reduceActionForParameter4: 10120196 false ) 
	#(259 4 #reduceActionFor__whitespace_______whitespace__Expression__default__1: 10310657 false ) 
	#(256 6 #reduceActionForParameter6: 10120198 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___2: 6672386 false ) 
	#(219 3 #reduceActionFor___whitespace_________whitespace____Constant__constant___3: 6672387 false ) 
	#(341 10 #reduceActionForIfThenElse1: 22567937 false ) 
	#(344 3 #reduceActionForElse3: 22808579 false ) 
	#(352 0 #reduceActionFor__whitespace_______whitespace__Destination__label___1: 23672833 false ) 
	#(349 1 #liftFirstValue: 23444486 false ) 
	#(349 1 #liftFirstValue: 23444484 false ) 
	#(349 1 #liftFirstValue: 23444483 false ) 
	#(349 1 #liftFirstValue: 23444482 false ) 
	#(349 1 #liftFirstValue: 23444485 false ) 
	#(349 1 #liftFirstValue: 23444481 false ) 
	#(353 10 #reduceActionForSelect1: 23790593 false ) 
	#(243 10 #reduceActionForDefineType2: 8906754 false ) 
	#(248 10 #reduceActionForDefineEnum2: 9449474 false ) 
	#(261 10 #reduceActionForDeclareSub1: 10532865 false ) 
	#(265 10 #reduceActionForDefineFunction3: 11461635 false ) 
	#(265 10 #reduceActionForDefineFunction2: 11461634 false ) 
	#(270 10 #reduceActionForModulePropertyGet2: 12054530 false ) 
	#(270 10 #reduceActionForModulePropertyGet1: 12054529 false ) 
	#(272 10 #reduceActionForModulePropertyLet2: 12686338 false ) 
	#(272 10 #reduceActionForModulePropertyLet1: 12686337 false ) 
	#(271 10 #reduceActionForModulePropertySet2: 12390402 false ) 
	#(271 10 #reduceActionForModulePropertySet1: 12390401 false ) 
	#(268 10 #reduceActionForDefineSub4: 11784196 false ) 
	#(268 10 #reduceActionForDefineSub9: 11784201 false ) 
	#(268 10 #reduceActionForDefineSub5: 11784197 false ) 
	#(334 11 #reduceActionForForEach9: 20910089 false ) 
	#(334 11 #reduceActionForForEach5: 20910085 false ) 
	#(319 11 #reduceActionForOpenFileClause1: 18395137 false ) 
	#(246 6 #reduceActionForTypeEntry8: 9118728 false ) 
	#(246 6 #reduceActionForTypeEntry9: 9118729 false ) 
	#(246 6 #reduceActionForTypeEntry5: 9118725 false ) 
	#(256 7 #reduceActionForParameter11: 10120203 false ) 
	#(256 7 #reduceActionForParameter13: 10120205 false ) 
	#(256 7 #reduceActionForParameter7: 10120199 false ) 
	#(219 4 #reduceActionFor___whitespace_________whitespace____Constant__constant___4: 6672388 false ) 
	#(344 4 #reduceActionForElse4: 22808580 false ) 
	#(341 11 #reduceActionForIfThenElse3: 22567939 false ) 
	#(350 4 #reduceActionForCase7: 23555079 false ) 
	#(350 4 #reduceActionForCase1: 23555073 false ) 
	#(262 11 #reduceActionForDeclareFunction1: 10870785 false ) 
	#(261 11 #reduceActionForDeclareSub4: 10532868 false ) 
	#(265 11 #reduceActionForDefineFunction4: 11461636 false ) 
	#(270 11 #reduceActionForModulePropertyGet4: 12054532 false ) 
	#(270 11 #reduceActionForModulePropertyGet3: 12054531 false ) 
	#(265 11 #reduceActionForDefineFunction9: 11461641 false ) 
	#(268 11 #reduceActionForDefineSub11: 11784203 false ) 
	#(268 11 #reduceActionForDefineSub10: 11784202 false ) 
	#(265 11 #reduceActionForDefineFunction5: 11461637 false ) 
	#(268 11 #reduceActionForDefineSub7: 11784199 false ) 
	#(268 11 #reduceActionForDefineSub6: 11784198 false ) 
	#(334 12 #reduceActionForForEach2: 20910082 false ) 
	#(334 12 #reduceActionForForEach13: 20910093 false ) 
	#(334 12 #reduceActionForForEach3: 20910083 false ) 
	#(335 12 #reduceActionForForNext1: 21196801 false ) 
	#(336 12 #reduceActionForForNext1: 21517313 false ) 
	#(246 7 #reduceActionForTypeEntry10: 9118730 false ) 
	#(256 8 #reduceActionForParameter12: 10120204 false ) 
	#(256 8 #reduceActionForParameter14: 10120206 false ) 
	#(256 8 #reduceActionForParameter8: 10120200 false ) 
	#(345 5 #reduceActionForElseIf1: 22918145 false ) 
	#(341 12 #reduceActionForIfThenElse2: 22567938 false ) 
	#(350 5 #reduceActionForCase10: 23555082 false ) 
	#(350 5 #reduceActionForCase8: 23555080 false ) 
	#(352 2 #reduceActionFor______whitespace___Expression__value___2: 23672834 false ) 
	#(350 5 #reduceActionForCase4: 23555076 false ) 
	#(350 5 #reduceActionForCase2: 23555074 false ) 
	#(353 12 #reduceActionForSelect2: 23790594 false ) 
	#(262 12 #reduceActionForDeclareFunction4: 10870788 false ) 
	#(270 12 #reduceActionForModulePropertyGet6: 12054534 false ) 
	#(270 12 #reduceActionForModulePropertyGet5: 12054533 false ) 
	#(261 12 #reduceActionForDeclareSub7: 10532871 false ) 
	#(265 12 #reduceActionForDefineFunction11: 11461643 false ) 
	#(265 12 #reduceActionForDefineFunction10: 11461642 false ) 
	#(270 12 #reduceActionForModulePropertyGet14: 12054542 false ) 
	#(270 12 #reduceActionForModulePropertyGet13: 12054541 false ) 
	#(272 12 #reduceActionForModulePropertyLet6: 12686342 false ) 
	#(272 12 #reduceActionForModulePropertyLet5: 12686341 false ) 
	#(271 12 #reduceActionForModulePropertySet6: 12390406 false ) 
	#(271 12 #reduceActionForModulePropertySet5: 12390405 false ) 
	#(268 12 #reduceActionForDefineSub12: 11784204 false ) 
	#(268 12 #reduceActionForDefineSub13: 11784205 false ) 
	#(265 12 #reduceActionForDefineFunction7: 11461639 false ) 
	#(265 12 #reduceActionForDefineFunction6: 11461638 false ) 
	#(270 12 #reduceActionForModulePropertyGet8: 12054536 false ) 
	#(270 12 #reduceActionForModulePropertyGet7: 12054535 false ) 
	#(272 12 #reduceActionForModulePropertyLet4: 12686340 false ) 
	#(272 12 #reduceActionForModulePropertyLet3: 12686339 false ) 
	#(271 12 #reduceActionForModulePropertySet4: 12390404 false ) 
	#(271 12 #reduceActionForModulePropertySet3: 12390403 false ) 
	#(268 12 #reduceActionForDefineSub8: 11784200 false ) 
	#(189 11 #reduceActionForGuidLiteral1: 3021825 false ) 
	#(334 13 #reduceActionForForEach10: 20910090 false ) 
	#(334 13 #reduceActionForForEach11: 20910091 false ) 
	#(334 13 #reduceActionForForEach6: 20910086 false ) 
	#(334 13 #reduceActionForForEach7: 20910087 false ) 
	#(335 13 #reduceActionForForNext5: 21196805 false ) 
	#(336 13 #reduceActionForForNext5: 21517314 false ) 
	#(319 13 #reduceActionForOpenFileClause5: 18395141 false ) 
	#(319 13 #reduceActionForOpenFileClause3: 18395139 false ) 
	#(256 9 #reduceActionForParameter15: 10120207 false ) 
	#(345 6 #reduceActionForElseIf2: 22918146 false ) 
	#(341 13 #reduceActionForIfThenElse4: 22567940 false ) 
	#(350 6 #reduceActionForCase11: 23555083 false ) 
	#(350 6 #reduceActionForCase9: 23555081 false ) 
	#(350 6 #reduceActionForCase5: 23555077 false ) 
	#(350 6 #reduceActionForCase3: 23555075 false ) 
	#(350 6 #reduceActionForCase19: 23555091 false ) 
	#(350 6 #reduceActionForCase13: 23555085 false ) 
	#(261 13 #reduceActionForDeclareSub2: 10532866 false ) 
	#(262 13 #reduceActionForDeclareFunction7: 10870791 false ) 
	#(261 13 #reduceActionForDeclareSub10: 10532874 false ) 
	#(265 13 #reduceActionForDefineFunction12: 11461644 false ) 
	#(270 13 #reduceActionForModulePropertyGet16: 12054544 false ) 
	#(270 13 #reduceActionForModulePropertyGet15: 12054543 false ) 
	#(265 13 #reduceActionForDefineFunction13: 11461645 false ) 
	#(268 13 #reduceActionForDefineSub15: 11784207 false ) 
	#(268 13 #reduceActionForDefineSub14: 11784206 false ) 
	#(265 13 #reduceActionForDefineFunction8: 11461640 false ) 
	#(270 13 #reduceActionForModulePropertyGet10: 12054538 false ) 
	#(270 13 #reduceActionForModulePropertyGet9: 12054537 false ) 
	#(334 14 #reduceActionForForEach14: 20910094 false ) 
	#(334 14 #reduceActionForForEach15: 20910095 false ) 
	#(334 14 #reduceActionForForEach4: 20910084 false ) 
	#(335 14 #reduceActionForForNext2: 21196802 false ) 
	#(335 14 #reduceActionForForNext3: 21196803 false ) 
	#(256 10 #reduceActionForParameter16: 10120208 false ) 
	#(345 7 #reduceActionForElseIf3: 22918147 false ) 
	#(351 3 #reduceActionFor______whitespace__Parameter__parameter__1: 23672833 false ) 
	#(350 7 #reduceActionForCase12: 23555084 false ) 
	#(350 7 #reduceActionForCase6: 23555078 false ) 
	#(350 7 #reduceActionForCase22: 23555094 false ) 
	#(350 7 #reduceActionForCase20: 23555092 false ) 
	#(350 7 #reduceActionForCase16: 23555088 false ) 
	#(350 7 #reduceActionForCase14: 23555086 false ) 
	#(262 14 #reduceActionForDeclareFunction2: 10870786 false ) 
	#(261 14 #reduceActionForDeclareSub3: 10532867 false ) 
	#(261 14 #reduceActionForDeclareSub5: 10532869 false ) 
	#(262 14 #reduceActionForDeclareFunction10: 10870794 false ) 
	#(270 14 #reduceActionForModulePropertyGet18: 12054546 false ) 
	#(270 14 #reduceActionForModulePropertyGet17: 12054545 false ) 
	#(265 14 #reduceActionForDefineFunction15: 11461647 false ) 
	#(265 14 #reduceActionForDefineFunction14: 11461646 false ) 
	#(270 14 #reduceActionForModulePropertyGet20: 12054548 false ) 
	#(270 14 #reduceActionForModulePropertyGet19: 12054547 false ) 
	#(272 14 #reduceActionForModulePropertyLet8: 12686344 false ) 
	#(272 14 #reduceActionForModulePropertyLet7: 12686343 false ) 
	#(271 14 #reduceActionForModulePropertySet8: 12390408 false ) 
	#(271 14 #reduceActionForModulePropertySet7: 12390407 false ) 
	#(268 14 #reduceActionForDefineSub16: 11784208 false ) 
	#(270 14 #reduceActionForModulePropertyGet12: 12054540 false ) 
	#(270 14 #reduceActionForModulePropertyGet11: 12054539 false ) 
	#(334 15 #reduceActionForForEach12: 20910092 false ) 
	#(334 15 #reduceActionForForEach8: 20910088 false ) 
	#(335 15 #reduceActionForForNext6: 21196806 false ) 
	#(335 15 #reduceActionForForNext7: 21196807 false ) 
	#(319 15 #reduceActionForOpenFileClause7: 18395143 false ) 
	#(345 8 #reduceActionForElseIf4: 22918148 false ) 
	#(350 8 #reduceActionForCase23: 23555095 false ) 
	#(350 8 #reduceActionForCase21: 23555093 false ) 
	#(350 8 #reduceActionForCase17: 23555089 false ) 
	#(350 8 #reduceActionForCase15: 23555087 false ) 
	#(262 15 #reduceActionForDeclareFunction3: 10870787 false ) 
	#(262 15 #reduceActionForDeclareFunction5: 10870789 false ) 
	#(261 15 #reduceActionForDeclareSub6: 10532870 false ) 
	#(261 15 #reduceActionForDeclareSub8: 10532872 false ) 
	#(265 15 #reduceActionForDefineFunction16: 11461648 false ) 
	#(270 15 #reduceActionForModulePropertyGet22: 12054550 false ) 
	#(270 15 #reduceActionForModulePropertyGet21: 12054549 false ) 
	#(334 16 #reduceActionForForEach16: 20910096 false ) 
	#(337 16 #reduceActionForForStepNext1: 21754881 false ) 
	#(335 16 #reduceActionForForNext4: 21196804 false ) 
	#(350 9 #reduceActionForCase24: 23555096 false ) 
	#(350 9 #reduceActionForCase18: 23555090 false ) 
	#(262 16 #reduceActionForDeclareFunction6: 10870790 false ) 
	#(262 16 #reduceActionForDeclareFunction8: 10870792 false ) 
	#(261 16 #reduceActionForDeclareSub9: 10532873 false ) 
	#(261 16 #reduceActionForDeclareSub11: 10532875 false ) 
	#(270 16 #reduceActionForModulePropertyGet24: 12054552 false ) 
	#(270 16 #reduceActionForModulePropertyGet23: 12054551 false ) 
	#(337 17 #reduceActionForForStepNext5: 21754885 false ) 
	#(335 17 #reduceActionForForNext8: 21196808 false ) 
	#(319 17 #reduceActionForOpenFileClause2: 18395138 false ) 
	#(262 17 #reduceActionForDeclareFunction9: 10870793 false ) 
	#(262 17 #reduceActionForDeclareFunction11: 10870795 false ) 
	#(261 17 #reduceActionForDeclareSub12: 10532876 false ) 
	#(337 18 #reduceActionForForStepNext2: 21754882 false ) 
	#(337 18 #reduceActionForForStepNext3: 21754883 false ) 
	#(262 18 #reduceActionForDeclareFunction12: 10870796 false ) 
	#(337 19 #reduceActionForForStepNext6: 21754886 false ) 
	#(337 19 #reduceActionForForStepNext7: 21754887 false ) 
	#(319 19 #reduceActionForOpenFileClause6: 18395142 false ) 
	#(319 19 #reduceActionForOpenFileClause4: 18395140 false ) 
	#(337 20 #reduceActionForForStepNext4: 21754884 false ) 
	#(337 21 #reduceActionForForStepNext8: 21754888 false ) 
	#(319 21 #reduceActionForOpenFileClause8: 18395144 false )
	).
]

{ #category : #'generated-accessing' }
VBParser class >> scannerClass [
	^VBScanner
]

{ #category : #generated }
VBParser class >> startingStateForBehaviourDefinition [
	^ 4
]

{ #category : #generated }
VBParser class >> startingStateForModuleStatement [
	^ 3
]

{ #category : #generated }
VBParser class >> startingStateForStatement [
	^ 2
]

{ #category : #generated }
VBParser class >> startingStateFormodule [
	^ 1
]

{ #category : #generated }
VBParser class >> symbolNames [
	^ #('"!"' '"&"' '"("' '")"' '"*"' '"+"' '","' '"-"' '"."' '"/"' '":"' '":="' '";"' '"<"' '"<<"' '"<="' '"<>"' '"="' '">"' '">="' '">>"' '"ALIAS"' '"APPEND"' '"AS"' '"AddressOf"' '"BINARY"' '"Call"' '"DefBool"' '"DefByte"' '"DefCur"' '"DefDate"' '"DefDbl"' '"DefDec"' '"DefInt"' '"DefLng"' '"DefLngPtr"' '"DefLnglng"' '"DefObj"' '"DefSng"' '"DefStr"' '"DefVar"' '"DoEvents"' '"ERROR"' '"FOR"' '"INPUT"' '"IS"' '"IsNot"' '"LIKE"' '"Line"' '"Lock Read Write"' '"Lock Read"' '"Lock Write"' '"Mod"' '"NEW"' '"NEXT"' '"OBJECT"' '"OPEN"' '"Output"' '"PRINT"' '"RaiseEvent"' '"Random"' '"Read Write"' '"Read"' '"STRING"' '"Shared"' '"TYPE"' '"TypeOf"' '"WRITE"' '"WithEvents"' '"["' '"\"' '"^"' '"and"' '"attribute"' '"base"' '"beep"' '"begin"' '"bold"' '"boolean"' '"byref"' '"byte"' '"byval"' '"case"' '"class"' '"collection"' '"compare"' '"const"' '"currency"' '"database"' '"date"' '"decimal"' '"declare"' '"dim"' '"do"' '"double"' '"each"' '"else"' '"else:"' '"elseif"' '"end"' '"enum"' '"eqv"' '"event"' '"exit"' '"explicit"' '"friend"' '"function"' '"get"' '"global"' '"gosub"' '"goto"' '"if"' '"implements"' '"in"' '"integer"' '"len"' '"let"' '"lib"' '"long"' '"longlong"' '"longptr"' '"loop"' '"module"' '"name"' '"not"' '"on"' '"option"' '"optional"' '"or"' '"paramarray"' '"preserve"' '"private"' '"property"' '"public"' '"redim"' '"resume"' '"return"' '"select"' '"set"' '"single"' '"static"' '"step"' '"sub"' '"text"' '"then"' '"then:"' '"to"' '"until"' '"variant"' '"version"' '"wend"' '"while"' '"with"' '"xor"' '"{"' '"}"' '"~"' '<lineContinuation>' '<HEX_INTEGER>' '<DATE_LITERAL>' '<COLOR_LITERAL>' '<INTEGER_LITERAL>' '<FLOATING_POINT_LITERAL>' '<BOOLEAN_LITERAL>' '<STRING_LITERAL>' '<NULL_LITERAL>' '<IDENTIFIER>' '<SBIDENTIFIER>' '<DEFTYPE>' '<HASH_NUMBER>' '<HASH_IDENTIFIER>' '<whitespace>' '<eol>' '<comment>' 'B e g i n' 'module' '<eol>*' '(<eol>* ModuleStatement ''element'' )' '(<eol>* ModuleStatement ''element'' )*' 'literal' 'FileDescriptorLiteral' 'IntegerLiteral' 'ColorLiteral' 'DateLiteral' 'FloatLiteral' 'BooleanLiteral' 'StringLiteral' 'Null' 'GuidLiteral' '<HEX_INTEGER> +' 'Identifier' 'KeywordIdentifier' 'UsableKeywords' 'IdentifierWords' 'HashIdentifier' 'SquareBracketIdentifier' 'SimpleIdentifier' 'LabelTag' 'header' 'Option' 'OptionBase' 'SetUpAssignation' 'Attribute' 'Configuration' '( <eol>+ SetUpAssignation ''setting'')' '( <eol>+ SetUpAssignation ''setting'')*' '<eol>+' 'Implements' 'DefTypeLabel' 'DefType' 'ModuleStatement' 'Statement' 'Block' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )' '(
		 (<eol> | (<whitespace>? ":" <whitespace>?))+ 
		 (IntegerLiteral ''lineNumber'' <whitespace>)? 
		  Statement ''statement'' 
	   )*' '(<eol> | (<whitespace>? ":" <whitespace>?))' '(<eol> | (<whitespace>? ":" <whitespace>?))+' 'OneLineBlock' '(<whitespace>? ":" <whitespace>? Statement ''statement'')' '(<whitespace>? ":" <whitespace>? Statement ''statement'')*' 'BaseType' 'SimpleType' 'Visibility' 'ComplexType' '("." UsableKeywords ''member'')' '("." UsableKeywords ''member'')+' 'Type' 'TypedThing' 'TypedAndInstantiatedThing' 'TypeSize' '(","<whitespace>? Expression ''size'')' '(","<whitespace>? Expression ''size'')*' 'AsType' 'StatementAssignment' 'ExplicitLetSet' 'Assignment' 'ExplicitAssignement' 'OtherStatements' 'Rename' 'Beep' 'DoEvents' 'Types' 'DefineType' '( <eol>* TypeEntry ''field'' )' '( <eol>* TypeEntry ''field'' )*' 'TypeEntry' 'Event' 'DefineEnum' '( <eol>* EnumEntry ''field'')' '( <eol>* EnumEntry ''field'')*' 'EnumEntry' 'ParameterPassingStrategy' 'ParameterList' '("," <whitespace> Parameter ''parameter'')' '("," <whitespace> Parameter ''parameter'')*' 'Parameter' '(AsType ''type'')' '(AsType ''type'')?' '(<whitespace> "=" <whitespace> Expression ''default'')' '(<whitespace> "=" <whitespace> Expression ''default'')?' 'DeclareSub' 'DeclareFunction' 'DeclareExternal' 'Modifier' 'DefineFunction' '(AsType ''type'' TypeSize ''size''?  )' '(AsType ''type'' TypeSize ''size''?  )?' 'DefineSub' '<whitespace>?' 'ModulePropertyGet' 'ModulePropertySet' 'ModulePropertyLet' 'BehaviourDefinition' 'ModuleProperty' 'ModuleConstant' 'DefineVariable' 'ReDefineVariable' 'ReDefineExpression' 'StaticVariable' 'Variable' 'Constant' 'ModuleProperties' 'ModuleConstants' 'DefineVariables' 'ReDefineVariables' 'StaticVariables' 'VariableList' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )' '( <whitespace>? ","  <whitespace>?  Variable ''variable'' )+' 'ConstantList' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )' '( <whitespace>? ","  <whitespace>?  Constant ''constant'' )+' 'VariableDefinition' 'Expression' 'ParentheseesExpression' 'Interval' 'Operation' 'UnaryOperation' 'NegatedOperation' 'PositiveOperation' 'NotOperation' 'LeftSide' 'BinaryOperation' 'ComparisonOperator' 'ComparisonOperation' 'ArithmeticOperator' 'ArithmeticOperation' 'BooleanOperator' 'BooleanBinaryOperation' 'ConcatenationOperation' 'Equals' 'ValueClause' 'AddressOfClause' 'NewClause' 'OpenMode' 'OpenAccess' 'Lock' 'FileClauses' 'OpenFileClause' 'PrintFileClause' '(";" <whitespace>? Expression ''value'')' '(";" <whitespace>? Expression ''value'')*' 'LineInputClause' 'ControlFlowStatement' 'Loops' 'DoLoop' 'InfinityLoop' 'WhileTrue' 'UntilTrue' 'DoWhileTrue' 'DoUntilTrue' 'WhileWend' 'ForLoop' 'ForEach' 'ForNext' 'ForNextOneLine' 'ForStepNext' 'If' 'IfThenEmpty' 'IfThenElseOneLine' 'IfThenElse' '(ElseIf ''elseif'')' '(ElseIf ''elseif'')*' 'Else' 'ElseIf' 'RaiseError' 'To' 'Label' 'CaseCondition' 'Case' '("," <whitespace> (CaseCondition ''expression''))' '("," <whitespace> (CaseCondition ''expression''))*' 'Select' '(Case ''case'' <eol>+?)' '(Case ''case'' <eol>+?)*' 'Resume' 'ResumeLabel' 'ResumeNext' 'ResumeEmpty' 'Go' 'Destination' 'DestinationList' '(<whitespace>?"," <whitespace>?Destination ''label'')' '(<whitespace>?"," <whitespace>?Destination ''label'')*' 'GoToStatement' 'GoSub' 'On' 'OnErrorGoTo' 'OnErrorResumeNext' 'OnExpressionGo' 'Error' 'With' 'Exits' 'ExitFunction' 'ExitSub' 'ExitDo' 'ExitFor' 'ExitProperty' 'Return' 'StateAccessBase' 'DictionaryAccess' 'MemberAccess' 'StateAccess' 'ImplicitCallExpression' 'ImplicitParenthesesLessCall' 'ProcedureCallOrArrayExpression' 'ProcedureCallOrArrayAccess' 'Argument' 'ArgumentList' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)' '(<whitespace>? Argument ''argument'' ? ("," | ";" )  <whitespace>?)*' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )' '(<whitespace>?("," | ";" ) <whitespace>? Argument ''argument'' ? )*' 'ExplicitCallSelectorTypes' 'ExplicitCall' 'RaiseEvent' 'TypeOf' 'StatementCalls' 'ExpressionCalls' 'E O F' 'error')
]

{ #category : #generated }
VBParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #VBModuleNode #VBModuleNode #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBFileDescriptorLiteralNode #VBIntegerLiteralNode #VBColorLiteralNode #VBDateLiteralNode #VBFloatLiteralNode #VBBooleanLiteralNode #VBStringLiteralNode #VBNullNode #VBGuidLiteralNode #OrderedCollection #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCToken #VBHashIdentifierNode #VBSquareBracketIdentifierNode #VBSimpleIdentifierNode #VBLabelTagNode #VBHeaderNode #VBProgramNode #VBOptionBaseNode #VBSetUpAssignationNode #VBModuleAttributeNode #VBConfigurationNode #OrderedCollection #OrderedCollection #OrderedCollection #VBImplementsNode #SmaCCToken #VBDefTypeNode #VBProgramNode #Object #VBBlockNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBBlockNode #OrderedCollection #OrderedCollection #Object #VBSimpleTypeNode #SmaCCToken #VBComplexTypeNode #OrderedCollection #OrderedCollection #Object #VBTypedThingNode #VBAsTypeAndNewNode #VBTypeSizeNode #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitAssignementNode #SmaCCToken #VBExplicitAssignementNode #VBExplicitAssignementNode #Object #VBRenameNode #SmaCCToken #VBDoEventsNode #VBProgramNode #VBDefineTypeNode #OrderedCollection #OrderedCollection #VBTypeEntryNode #VBEventNode #VBDefineEnumNode #OrderedCollection #OrderedCollection #VBEnumEntryNode #Object #VBParameterListNode #OrderedCollection #OrderedCollection #VBParameterNode #VBProgramNode #VBProgramNode #OrderedCollection #OrderedCollection #VBExternalSubNode #VBExternalFunctionNode #VBProgramNode #SmaCCToken #VBFunctionDefinitionNode #OrderedCollection #OrderedCollection #VBSubDefinitionNode #SmaCCToken #VBModulePropertyGetNode #VBModulePropertyGetNode #VBModulePropertyGetNode #VBProgramNode #VBModulePropertyNode #VBModuleConstantNode #VBDimVariableNode #VBReDimVariableNode #VBReDimVariableNode #VBStaticVariableNode #VBVariableNode #VBConstantNode #VBModuleMultiplePropertiesNode #VBModuleMultipleConstantsNode #VBDimMultipleVariablesNode #VBReDimMultipleVariablesNode #VBStaticMultipleVariablesNode #VBVariableListNode #OrderedCollection #OrderedCollection #VBConstantListNode #OrderedCollection #OrderedCollection #VBProgramNode #VBProgramNode #VBParentheseesExpressionNode #VBIntervalNode #VBProgramNode #VBProgramNode #VBNegatedOperationNode #VBPositiveOperationNode #VBNotOperationNode #VBProgramNode #VBProgramNode #OrderedCollection #VBComparisonOperationNode #OrderedCollection #VBArithmeticOperationNode #OrderedCollection #VBArithmeticOperationNode #VBConcatenationOperationNode #VBEqualsNode #VBProgramNode #VBAddressOfClauseNode #VBNewClauseNode #SmaCCToken #SmaCCToken #SmaCCToken #VBProgramNode #VBOpenClauseNode #VBPrintIntoFileClauseNode #OrderedCollection #OrderedCollection #VBLineInputClauseNode #VBProgramNode #VBProgramNode #VBProgramNode #VBInfinityLoopNode #VBWhileTrueNode #VBUntilTrueNode #VBDoWhileTrueNode #VBDoUntilTrueNode #VBWhileWendNode #VBProgramNode #VBForEachNode #VBForNextNode #VBForNextNode #VBForStepNextNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBIfThenElseNode #VBElseIfBlockNode #OrderedCollection #VBElseIfBlockNode #VBElseIfBlockNode #VBRaiseErrorNode #VBLabelNode #VBLabelNode #VBProgramNode #VBCaseNode #OrderedCollection #OrderedCollection #VBSelectNode #OrderedCollection #OrderedCollection #VBProgramNode #VBResumeLabelNode #VBResumeNextNode #VBResumeEmptyNode #VBProgramNode #VBProgramNode #VBDestinationListNode #OrderedCollection #OrderedCollection #VBGoToStatementNode #VBGoSubNode #VBProgramNode #VBOnErrorGoToNode #VBOnErrorResumeNextNode #VBOnExpressionGoNode #VBErrorNode #VBWithNode #VBProgramNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBExitsNode #VBReturnNode #VBProgramNode #VBDictionaryAccessNode #VBMemberAccessNode #VBProgramNode #VBProgramNode #VBImplicitParenthesesLessCallNode #VBProgramNode #VBProcedureCallOrArrayAccessNode #VBArgumentNode #VBArgumentListNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #VBProgramNode #VBExplicitCallNode #VBRaiseEventNode #VBTypeOfNode #VBProgramNode #VBProgramNode #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
VBParser class >> transitionTable [
^#(
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 74 0 6 0 77 0 6 0 78 0 6 0 85 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 92 0 6 0 93 0 6 0 101 0 6 0 103 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 113 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 127 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 139 0 6 0 141 0 6 0 143 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 0 21 0 176 0 25 0 177 0 6 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 1 45 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 1 45 0 201 1 45 0 203 1 45 0 212 1 49 0 223 1 45 0 234 1 57 0 235 1 45 0 236 1 45 0 237 1 45 0 238 1 45 0 239 1 45 0 240 1 45 0 241 1 45 0 242 1 45 0 243 1 45 0 247 1 45 0 248 1 45 1 18 1 45 1 19 1 45 1 20 1 45 1 21 1 45 1 22 1 45 1 23 1 125 1 25 1 45 1 26 1 45 1 27 1 45 1 28 1 45 1 29 1 45 1 30 1 45 1 34 1 45 1 37 1 157 1 56 1 157 1 57 1 157 1 58 1 45 1 62 1 45 1 63 1 45 1 64 1 45 1 67 1 45 1 68 1 45 1 69 1 45 1 70 1 45 1 71 1 45 1 72 1 45 1 73 1 45 1 74 1 45 1 75 1 45 1 76 1 45 1 77 1 45 1 78 1 45 1 79 1 45 1 80 1 45 1 81 1 45 1 82 1 45 1 83 1 45 1 84 1 45 1 85 1 45 1 90 1 45 1 91 2 9 1 92 1 45 1 97 1 45 1 100 1 45 1 101 1 45 1 102 1 45 1 103 1 45 1 104 1 45 1 109 1 45 1 110 1 45 1 111 1 45 1 112 1 45 1 113 1 45 1 114 1 45 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 1 45 1 129 2 117 1 130 2 121 1 131 1 45 1 139 1 45 1 140 1 45 1 142] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 2 201 0 77 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 2 205 0 92 0 141 0 93 0 149 0 101 0 153 0 103 3 33 0 106 2 209 0 107 1 17 0 108 3 33 0 109 2 213 0 113 1 17 0 116 1 17 0 117 1 17 0 124 2 225 0 127 3 33 0 132 2 229 0 133 3 33 0 134 0 213 0 135 1 17 0 139 2 237 0 141 2 241 0 143 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 3 29 0 200 3 29 0 201 3 29 0 203 3 29 0 204 3 29 0 208 3 21 0 209 3 29 0 210 3 29 0 211 3 33 0 223 3 29 0 242 3 29 0 243 3 29 0 247 3 29 0 248 3 29 1 5 3 29 1 6 3 29 1 7 3 53 1 8 3 29 1 9 3 29 1 12 3 29 1 14 3 29 1 15 3 29 1 16 3 29 1 17 3 29 1 18 3 29 1 19 3 29 1 20 3 29 1 21 3 29 1 22 3 29 1 23 1 125 1 25 3 29 1 26 3 29 1 27 3 29 1 28 3 29 1 29 3 29 1 30 3 29 1 34 3 29 1 37] 
#[1 3 89 0 106 2 209 0 107 3 89 0 109 3 89 0 132 2 229 0 133 3 89 0 134 3 53 0 141 2 241 0 143 3 89 0 223 3 53 1 8 3 93 1 9 3 93 1 12 3 93 1 14 3 93 1 15 3 93 1 16 3 93 1 17] 
#[0 0 0 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 55 0 83 0 56 0 87 0 58 0 91 0 59 0 95 0 64 0 99 0 66 0 103 0 68 0 107 0 74 0 111 0 77 0 115 0 78 0 119 0 85 0 123 0 87 0 127 0 89 0 131 0 90 0 135 0 92 0 139 0 93 0 143 0 101 0 147 0 103 0 151 0 106 0 155 0 107 0 159 0 108 0 163 0 109 0 167 0 113 0 171 0 116 0 175 0 117 0 179 0 124 0 183 0 127 0 187 0 132 0 191 0 133 0 195 0 134 0 199 0 135 0 203 0 139 0 207 0 141 0 211 0 143 0 215 0 144 0 219 0 150 0 223 0 167 0 227 0 168 0 231 0 171 0 235 0 172 0 239 0 173 3 109 0 179 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 3 113 0 199 3 117 0 200 3 117 0 201 3 117 0 203 3 117 0 204 3 117 0 208 3 21 0 209 3 117 0 210 3 117 0 211 3 33 0 223 3 117 0 242 3 117 0 243 3 117 0 247 3 117 0 248 3 117 1 5 3 117 1 6 3 117 1 7 3 53 1 8 3 117 1 9 3 117 1 12 3 117 1 14 3 117 1 15 3 117 1 16 3 117 1 17 3 117 1 18 3 117 1 19 3 117 1 20 3 117 1 21 3 117 1 22 3 117 1 23 1 125 1 25 3 117 1 26 3 117 1 27 3 117 1 28 3 117 1 29 3 117 1 30 3 117 1 34 3 117 1 37 0 10 1 144] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 125 0 66 3 145 0 68 3 145 0 78 3 145 0 83 3 145 0 85 3 145 0 89 3 145 0 90 3 145 0 97 3 145 0 108 3 145 0 116 3 145 0 117 3 145 0 124 3 145 0 138 3 145 0 139 3 145 0 144 3 145 0 150 3 145 0 167 1 1 0 168 3 141 0 192 3 145 0 193 3 145 0 194 3 141 0 196] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 125 0 66 3 145 0 68 3 145 0 78 3 145 0 83 3 145 0 85 3 145 0 89 3 145 0 90 3 145 0 97 3 145 0 108 3 145 0 116 3 145 0 117 3 145 0 124 3 145 0 138 3 145 0 139 3 145 0 144 3 145 0 150 3 145 0 167 1 1 0 168 3 157 0 192 3 145 0 193 3 145 0 194 3 157 0 196] 
#[0 0 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 18 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 161 0 172] 
#[0 3 165 0 172] 
#[0 0 22 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 26 0 1 0 26 0 3 0 26 0 5 0 26 0 9 0 26 0 11 0 26 0 55 0 26 0 83 0 26 0 97 0 26 0 99 0 26 0 100 0 26 0 122 0 26 0 151 0 26 0 162 0 243 0 172 0 26 0 173 0 26 1 144] 
#[0 3 173 0 172] 
#[0 0 30 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 177 0 172] 
#[0 3 181 0 172] 
#[0 0 34 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 38 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 185 0 172] 
#[0 0 42 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 46 0 1 0 46 0 3 0 46 0 5 0 46 0 9 0 46 0 11 0 46 0 55 0 46 0 83 0 46 0 97 0 46 0 99 0 46 0 100 0 46 0 122 0 46 0 151 0 46 0 162 0 247 0 172 0 46 0 173 0 46 1 144] 
#[0 3 193 0 172] 
#[0 0 50 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 54 0 1 0 54 0 3 0 54 0 5 0 54 0 9 0 54 0 11 0 54 0 55 0 54 0 83 0 54 0 97 0 54 0 99 0 54 0 100 0 54 0 122 0 54 0 151 0 54 0 162 0 251 0 172 0 54 0 173 0 54 1 144] 
#[0 0 58 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 201 0 172] 
#[0 0 62 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 66 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 70 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 205 0 172] 
#[0 0 74 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 78 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 209 0 172] 
#[1 3 213 0 122 3 217 0 162 3 221 0 172 3 225 0 173 3 229 0 182 3 233 0 207 3 237 0 213] 
#[0 3 241 0 172] 
#[0 3 245 0 172] 
#[0 3 249 0 172] 
#[0 0 82 0 172] 
#[0 0 86 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 90 0 172] 
#[0 3 253 0 172] 
#[0 4 1 0 172] 
#[0 4 5 0 172] 
#[0 0 94 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 98 0 1 0 98 0 3 0 98 0 5 0 98 0 9 0 98 0 11 0 98 0 55 0 98 0 83 0 98 0 97 0 98 0 99 0 98 0 100 0 98 0 122 0 98 0 151 0 98 0 162 0 255 0 172 0 98 0 173 0 98 1 144] 
#[1 0 106 0 1 0 106 0 3 0 106 0 5 0 106 0 9 0 106 0 11 0 106 0 55 0 106 0 83 0 106 0 97 0 106 0 99 0 106 0 100 0 106 0 122 0 106 0 151 0 106 0 162 1 3 0 172 0 106 0 173 0 106 1 144] 
#[0 4 13 0 172] 
#[0 4 17 0 172] 
#[0 0 110 0 172] 
#[0 0 114 0 172] 
#[0 4 21 0 172] 
#[1 0 118 0 11 0 118 0 55 0 118 0 83 0 118 0 97 0 118 0 99 0 118 0 100 0 118 0 122 0 118 0 151 0 118 0 162 1 7 0 172 0 118 0 173 0 118 1 144] 
#[0 0 122 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 29 0 172] 
#[1 0 126 0 1 0 126 0 3 0 126 0 5 0 126 0 9 0 126 0 11 0 126 0 55 0 126 0 83 0 126 0 97 0 126 0 99 0 126 0 100 0 126 0 122 0 126 0 151 0 126 0 162 1 11 0 172 0 126 0 173 0 126 1 144] 
#[0 4 33 0 172] 
#[0 0 134 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 138 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 37 0 172] 
#[0 4 41 0 172] 
#[1 0 142 0 1 0 142 0 3 0 142 0 5 0 142 0 9 4 45 0 11 0 142 0 55 0 142 0 83 0 142 0 97 0 142 0 99 0 142 0 100 0 142 0 122 0 142 0 151 0 142 0 162 0 142 0 172 0 142 0 173 0 142 1 144] 
#[0 0 146 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 150 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 49 0 127] 
#[1 0 154 0 1 0 158 0 3 4 53 0 5 0 154 0 9 0 162 0 11 0 162 0 55 0 162 0 83 0 162 0 97 0 162 0 99 0 162 0 100 0 162 0 122 0 162 0 151 0 162 0 162 1 15 0 172 0 162 0 173 4 69 0 228 4 69 0 229 4 69 0 233 0 162 1 144] 
#[0 0 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 186 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 190 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 194 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 73 0 172] 
#[0 0 198 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 77 0 172] 
#[0 0 202 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 206 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 210 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 214 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 218 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 222 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 226 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 0 230 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 234 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 238 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 242 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 246 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 250 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 254 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 2 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 6 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 81 0 7 4 85 0 172 4 89 1 35 4 93 1 36] 
#[0 1 10 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 14 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 18 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 26 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 30 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 34 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 1 38 0 1 1 19 0 3 1 38 0 4 1 38 0 5 1 38 0 7 1 38 0 9 1 38 0 11 1 38 0 13 1 38 0 22 1 38 0 23 1 38 0 28 1 38 0 29 1 38 0 30 1 38 0 31 1 38 0 32 1 38 0 33 1 38 0 34 1 38 0 35 1 38 0 36 1 38 0 37 1 38 0 38 1 38 0 39 1 38 0 40 1 38 0 41 1 38 0 43 1 38 0 45 1 38 0 55 1 38 0 56 1 38 0 58 1 38 0 59 1 38 0 64 1 38 0 66 1 38 0 68 1 38 0 74 1 38 0 77 1 38 0 78 1 38 0 83 1 38 0 85 1 38 0 87 1 38 0 89 1 38 0 90 1 38 0 92 1 38 0 93 1 38 0 97 1 38 0 99 1 38 0 100 1 38 0 101 1 38 0 103 1 38 0 106 1 38 0 107 1 38 0 108 1 38 0 109 1 38 0 113 1 38 0 116 1 38 0 117 1 38 0 122 1 38 0 124 1 38 0 127 1 38 0 132 1 38 0 133 1 38 0 134 1 38 0 135 1 38 0 139 1 38 0 141 1 38 0 143 1 38 0 144 1 38 0 150 1 38 0 151 1 38 0 162 1 38 0 167 1 38 0 168 1 38 0 171 1 38 0 172 1 38 0 173 1 38 1 144] 
#[0 1 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 50 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 54 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 58 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 62 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 66 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 70 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 74 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 78 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 82 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 86 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 90 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 94 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 98 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 102 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 106 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 110 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 114 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 118 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 122 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 126 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 130 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 134 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 138 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 142 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 146 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 23 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 158 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 162 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 166 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 170 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 174 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 178 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 182 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 186 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 190 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 194 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 198 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 202 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 206 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 27 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 218 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 222 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 226 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 230 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 234 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 1 238 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 4 97 0 1 4 101 0 9 4 105 0 172] 
#[0 1 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 246 0 1 1 246 0 3 1 246 0 9 1 250 0 11 1 250 0 55 1 250 0 83 1 250 0 97 1 250 0 99 1 250 0 100 1 250 0 122 1 250 0 151 1 250 0 162 1 31 0 172 1 250 0 173 1 250 1 144] 
#[1 1 254 0 1 1 35 0 3 1 254 0 4 1 254 0 5 1 254 0 7 1 254 0 9 1 254 0 11 1 254 0 13 1 254 0 22 1 254 0 23 1 254 0 28 1 254 0 29 1 254 0 30 1 254 0 31 1 254 0 32 1 254 0 33 1 254 0 34 1 254 0 35 1 254 0 36 1 254 0 37 1 254 0 38 1 254 0 39 1 254 0 40 1 254 0 41 1 254 0 43 1 254 0 45 1 254 0 55 1 254 0 56 1 254 0 58 1 254 0 59 1 254 0 64 1 254 0 66 1 254 0 68 1 254 0 74 1 254 0 77 1 254 0 78 1 254 0 83 1 254 0 85 1 254 0 87 1 254 0 89 1 254 0 90 1 254 0 92 1 254 0 93 1 254 0 97 1 254 0 99 1 254 0 100 1 254 0 101 1 254 0 103 1 254 0 106 1 254 0 107 1 254 0 108 1 254 0 109 1 254 0 113 1 254 0 116 1 254 0 117 1 254 0 122 1 254 0 124 1 254 0 127 1 254 0 132 1 254 0 133 1 254 0 134 1 254 0 135 1 254 0 139 1 254 0 141 1 254 0 143 1 254 0 144 1 254 0 150 1 254 0 151 1 254 0 162 1 254 0 167 1 254 0 168 1 254 0 171 1 254 0 172 1 254 0 173 1 254 1 144] 
#[1 2 6 0 11 2 6 0 55 2 6 0 83 2 6 0 97 2 6 0 99 2 6 0 100 2 6 0 122 2 6 0 151 2 6 0 162 1 39 0 172 2 6 0 173 2 6 1 144] 
#[0 2 10 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 113 0 3] 
#[1 2 14 0 1 1 43 0 3 2 14 0 4 2 14 0 5 2 14 0 7 2 14 0 9 2 14 0 11 2 14 0 13 2 14 0 22 2 14 0 23 2 14 0 28 2 14 0 29 2 14 0 30 2 14 0 31 2 14 0 32 2 14 0 33 2 14 0 34 2 14 0 35 2 14 0 36 2 14 0 37 2 14 0 38 2 14 0 39 2 14 0 40 2 14 0 41 2 14 0 43 2 14 0 45 2 14 0 55 2 14 0 56 2 14 0 58 2 14 0 59 2 14 0 64 2 14 0 66 2 14 0 68 2 14 0 74 2 14 0 77 2 14 0 78 2 14 0 83 2 14 0 85 2 14 0 87 2 14 0 89 2 14 0 90 2 14 0 92 2 14 0 93 2 14 0 97 2 14 0 99 2 14 0 100 2 14 0 101 2 14 0 103 2 14 0 106 2 14 0 107 2 14 0 108 2 14 0 109 2 14 0 113 2 14 0 116 2 14 0 117 2 14 0 122 2 14 0 124 2 14 0 127 2 14 0 132 2 14 0 133 2 14 0 134 2 14 0 135 2 14 0 139 2 14 0 141 2 14 0 143 2 14 0 144 2 14 0 150 2 14 0 151 2 14 0 162 2 14 0 167 2 14 0 168 2 14 0 171 2 14 0 172 2 14 0 173 2 14 1 144] 
#[0 2 22 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 2 26 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 2 30 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 2 34 0 172] 
#[0 2 38 0 172] 
#[0 2 42 0 172] 
#[0 2 46 0 172] 
#[0 2 50 0 172] 
#[0 2 54 0 172] 
#[0 2 58 0 172] 
#[0 2 62 0 172] 
#[0 2 66 0 172] 
#[0 2 70 0 172] 
#[0 2 74 0 172] 
#[0 2 78 0 172] 
#[0 2 82 0 172] 
#[0 2 86 0 172] 
#[0 0 26 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 46 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 1 0 6 0 9 0 6 0 22 0 6 0 23 0 6 0 25 0 6 0 43 0 6 0 45 0 6 0 54 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 78 0 6 0 85 0 6 0 89 0 6 0 90 0 6 0 108 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 139 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 4 117 0 177] 
#[0 4 121 0 172] 
#[0 4 125 0 172] 
#[0 4 129 0 172] 
#[0 0 98 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 106 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 133 0 172] 
#[0 4 137 0 172] 
#[0 0 126 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 47 0 172] 
#[0 4 141 0 172] 
#[0 0 142 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 145 0 127] 
#[1 4 53 0 5 1 51 0 172 4 69 0 228 4 69 0 229 4 69 0 233] 
#[0 2 94 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 98 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 102 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 106 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 153 0 172] 
#[0 2 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 0 0 1 144] 
#[0 4 157 0 172] 
#[0 2 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 161 0 172] 
#[0 2 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 90 0 172] 
#[0 4 165 0 172] 
#[0 0 0 1 144] 
#[1 0 138 0 5 1 55 0 172] 
#[1 4 145 0 127 4 173 0 150] 
#[0 2 162 0 1 0 9 0 22 0 23 0 25 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 74 0 6 0 77 0 6 0 78 0 6 0 85 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 92 0 6 0 93 0 6 0 101 0 6 0 103 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 113 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 127 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 139 0 6 0 141 0 6 0 143 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 177 0 177 4 181 0 178 0 6 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 74 0 6 0 77 0 6 0 78 0 6 0 85 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 92 0 6 0 93 0 6 0 101 0 6 0 103 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 113 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 127 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 139 0 6 0 141 0 6 0 143 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 4 185 0 177 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 66 0 10 0 68 0 10 0 74 0 10 0 77 0 10 0 78 0 10 0 85 0 10 0 87 0 10 0 89 0 10 0 90 0 10 0 92 0 10 0 93 0 10 0 101 0 10 0 103 0 10 0 106 0 10 0 107 0 10 0 108 0 10 0 109 0 10 0 113 0 10 0 116 0 10 0 117 0 10 0 124 0 10 0 127 0 10 0 132 0 10 0 133 0 10 0 134 0 10 0 135 0 10 0 139 0 10 0 141 0 10 0 143 0 10 0 144 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 4 189 0 179 0 10 1 144] 
#[0 2 166 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 59 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 182 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 186 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 190 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 194 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 198 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 202 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 4 197 0 191 1 17 0 194 4 197 0 195 4 197 0 196 4 197 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 4 201 0 191 1 17 0 194 4 201 0 195 4 201 0 196 4 201 0 197 1 157 1 56 1 157 1 57 1 157 1 58 4 205 1 124 2 105 1 125 4 209 1 126 2 105 1 127 2 117 1 130 4 213 1 131 4 217 1 138] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 5 61 1 38 5 65 1 39 5 69 1 40 5 61 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 5 61 1 47 5 101 1 49 5 105 1 51 5 61 1 53 5 61 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 5 149 0 96 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 153 0 191 1 17 0 194 5 153 0 195 5 153 0 196 5 153 0 197] 
#[0 5 157 0 45] 
#[1 5 161 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 5 165 0 56 1 17 0 58 1 17 0 59 5 169 0 64 1 17 0 66 1 17 0 68 1 17 0 78 5 249 0 79 5 249 0 81 5 181 0 85 5 249 0 88 1 17 0 89 5 189 0 90 5 249 0 91 5 249 0 95 1 17 0 108 5 249 0 115 1 17 0 116 1 17 0 117 5 249 0 119 5 249 0 120 5 249 0 121 1 17 0 124 1 17 0 139 5 249 0 140 1 17 0 144 5 221 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 225 0 191 1 17 0 194 5 225 0 195 5 225 0 196 5 225 0 197 5 249 0 221 5 233 0 222 5 249 0 224 5 241 0 225 5 245 0 226 5 249 0 227] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 5 253 1 38 5 65 1 39 5 69 1 40 5 253 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 5 253 1 47 5 101 1 49 5 105 1 51 5 253 1 53 5 253 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 1 0 191 1 17 0 194 6 1 0 195 6 1 0 196 6 1 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 5 0 191 1 17 0 194 6 5 0 195 6 5 0 196 6 5 0 197 1 157 1 56 1 157 1 57 1 157 1 58 4 205 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 6 13 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 17 0 191 1 17 0 194 6 17 0 195 6 17 0 196 6 17 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 21 0 191 1 17 0 194 6 21 0 195 6 21 0 196 6 21 0 197 6 25 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 205 1 124 2 105 1 125 6 29 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 6 33 1 25 6 37 1 34] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 6 49 1 24 6 53 1 31] 
#[1 2 206 0 11 2 206 0 55 2 206 0 83 2 206 0 97 2 206 0 99 2 206 0 100 2 206 0 122 2 206 0 151 2 206 0 162 1 63 0 172 2 206 0 173 2 206 1 144] 
#[1 6 61 0 2 2 210 0 3 2 210 0 4 2 210 0 5 2 210 0 7 2 210 0 11 2 210 0 13 2 210 0 22 2 210 0 23 2 210 0 28 2 210 0 29 2 210 0 30 2 210 0 31 2 210 0 32 2 210 0 33 2 210 0 34 2 210 0 35 2 210 0 36 2 210 0 37 2 210 0 38 2 210 0 39 2 210 0 40 2 210 0 41 2 210 0 43 2 210 0 45 2 210 0 55 2 210 0 56 2 210 0 58 2 210 0 59 2 210 0 64 2 210 0 66 2 210 0 68 2 210 0 74 2 210 0 77 2 210 0 78 2 210 0 83 2 210 0 85 2 210 0 87 2 210 0 89 2 210 0 90 2 210 0 92 2 210 0 93 2 210 0 97 2 210 0 99 2 210 0 100 2 210 0 101 2 210 0 103 2 210 0 106 2 210 0 107 2 210 0 108 2 210 0 109 2 210 0 113 2 210 0 116 2 210 0 117 2 210 0 122 2 210 0 124 2 210 0 127 2 210 0 132 2 210 0 133 2 210 0 134 2 210 0 135 2 210 0 139 2 210 0 141 2 210 0 143 2 210 0 144 2 210 0 150 2 210 0 151 2 210 0 162 2 210 0 167 2 210 0 168 2 210 0 171 2 210 0 172 2 210 0 173 2 210 1 144] 
#[1 6 65 0 148 6 69 0 152] 
#[0 2 214 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 83 0 85 0 87 0 89 0 90 0 93 0 94 0 97 0 99 0 100 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 122 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 6 73 0 172] 
#[1 0 29 0 1 0 33 0 9 2 218 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 67 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 6 85 0 76 1 17 0 78 2 218 0 83 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 2 218 0 97 2 218 0 99 2 218 0 100 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 2 218 0 122 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 2 218 0 151 0 245 0 152 0 249 0 153 1 71 0 162 0 253 0 167 1 1 0 168 1 5 0 171 1 75 0 172 1 79 0 173 6 81 0 182 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 6 85 0 201 6 85 0 203 6 85 0 212 6 89 0 215 1 49 0 223 6 85 0 234 1 57 0 235 6 85 0 236 6 85 0 237 6 85 0 238 6 85 0 239 6 85 0 240 6 85 0 241 6 85 0 242 6 85 0 243 6 85 0 247 6 85 0 248 6 85 1 18 6 85 1 19 6 85 1 20 6 85 1 21 6 85 1 22 6 85 1 23 1 125 1 25 6 85 1 26 6 85 1 27 6 85 1 28 6 85 1 29 6 85 1 30 6 85 1 34 6 85 1 37 1 157 1 56 1 157 1 57 1 157 1 58 6 85 1 62 6 85 1 63 6 85 1 64 6 85 1 67 6 85 1 68 6 85 1 69 6 85 1 70 6 85 1 71 6 85 1 72 6 85 1 73 6 85 1 74 6 85 1 75 6 85 1 76 6 85 1 77 6 85 1 78 6 85 1 79 6 85 1 80 6 85 1 81 6 85 1 82 6 85 1 83 6 85 1 84 6 85 1 85 6 85 1 90 6 85 1 91 2 9 1 92 6 85 1 97 6 85 1 100 6 85 1 101 6 85 1 102 6 85 1 103 6 85 1 104 6 85 1 109 6 85 1 110 6 85 1 111 6 85 1 112 6 85 1 113 6 85 1 114 6 85 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 6 85 1 129 2 117 1 130 2 121 1 131 6 85 1 139 6 85 1 140 6 85 1 142] 
#[1 6 93 0 122 3 217 0 162 6 97 0 182] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 101 0 191 1 17 0 194 6 101 0 195 6 101 0 196 6 101 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 105 0 191 1 17 0 194 6 105 0 195 6 105 0 196 6 105 0 197] 
#[1 6 109 0 44 6 113 0 94 6 117 0 107 6 121 0 133 6 125 0 143] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 141 0 182 6 141 0 191 1 17 0 194 6 141 0 195 6 141 0 196 6 141 0 197 6 141 1 43 6 141 1 105 6 145 1 106] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 141 0 182 6 141 0 191 1 17 0 194 6 141 0 195 6 141 0 196 6 141 0 197 6 141 1 43 6 141 1 105 6 149 1 106] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 6 153 1 38 5 65 1 39 5 69 1 40 6 153 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 153 1 47 5 101 1 49 5 105 1 51 6 153 1 53 6 153 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 6 157 1 38 5 65 1 39 5 69 1 40 6 157 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 157 1 47 5 101 1 49 5 105 1 51 6 157 1 53 6 157 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 6 161 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 6 165 1 38 5 65 1 39 5 69 1 40 6 165 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 165 1 47 5 101 1 49 5 105 1 51 6 165 1 53 6 165 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 6 169 0 75] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 6 173 0 131 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 6 177 0 191 1 17 0 194 6 177 0 195 6 177 0 196 6 177 0 197 6 181 1 24 6 185 1 31 6 189 1 38 5 65 1 39 5 69 1 40 6 189 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 189 1 47 5 101 1 49 5 105 1 51 6 189 1 53 6 189 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 6 193 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 6 141 0 182 6 141 0 191 1 17 0 194 6 141 0 195 6 141 0 196 6 141 0 197 6 141 1 43 6 141 1 105 6 197 1 106] 
#[0 6 201 0 83] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 6 205 1 24 6 209 1 31] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 6 213 1 38 5 65 1 39 5 69 1 40 6 213 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 213 1 47 5 101 1 49 5 105 1 51 6 213 1 53 6 213 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 6 217 1 38 5 65 1 39 5 69 1 40 6 217 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 217 1 47 5 101 1 49 5 105 1 51 6 217 1 53 6 217 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 2 222 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 6 221 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 6 225 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 6 229 1 38 5 65 1 39 5 69 1 40 6 229 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 6 229 1 47 5 101 1 49 5 105 1 51 6 229 1 53 6 229 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 6 233 0 5 6 237 0 12 6 241 0 18 6 245 0 24] 
#[0 2 226 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 230 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 249 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 6 253 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 7 1 0 87 1 17 0 89 1 17 0 90 7 5 0 101 7 9 0 103 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 7 13 1 24 7 17 1 31] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 21 0 191 1 17 0 194 7 21 0 195 7 21 0 196 7 21 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 25 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 29 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 33 1 25] 
#[0 7 37 0 7] 
#[0 2 234 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 81 0 7 2 238 0 11 2 238 0 22 2 238 0 23 2 238 0 28 2 238 0 29 2 238 0 30 2 238 0 31 2 238 0 32 2 238 0 33 2 238 0 34 2 238 0 35 2 238 0 36 2 238 0 37 2 238 0 38 2 238 0 39 2 238 0 40 2 238 0 41 2 238 0 43 2 238 0 45 2 238 0 55 2 238 0 56 2 238 0 58 2 238 0 59 2 238 0 64 2 238 0 66 2 238 0 68 2 238 0 74 2 238 0 77 2 238 0 78 2 238 0 83 2 238 0 85 2 238 0 87 2 238 0 89 2 238 0 90 2 238 0 92 2 238 0 93 2 238 0 97 2 238 0 99 2 238 0 100 2 238 0 101 2 238 0 103 2 238 0 106 2 238 0 107 2 238 0 108 2 238 0 109 2 238 0 113 2 238 0 116 2 238 0 117 2 238 0 122 2 238 0 124 2 238 0 127 2 238 0 132 2 238 0 133 2 238 0 134 2 238 0 135 2 238 0 139 2 238 0 141 2 238 0 143 2 238 0 144 2 238 0 150 2 238 0 151 2 238 0 162 2 238 0 167 2 238 0 168 2 238 0 171 1 83 0 172 2 238 0 173 7 41 1 35 2 238 1 144] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 125 0 66 3 145 0 68 3 145 0 78 3 145 0 83 3 145 0 85 3 145 0 89 3 145 0 90 3 145 0 97 3 145 0 108 3 145 0 116 3 145 0 117 3 145 0 124 3 145 0 138 3 145 0 139 3 145 0 144 3 145 0 150 3 145 0 167 1 1 0 168 7 45 0 192 3 145 0 193 3 145 0 194 7 45 0 196] 
#[1 3 145 0 22 3 145 0 23 3 145 0 43 3 145 0 45 3 145 0 55 3 145 0 56 3 145 0 57 3 145 0 58 3 145 0 59 3 145 0 64 3 125 0 66 3 145 0 68 3 145 0 78 3 145 0 83 3 145 0 85 3 145 0 89 3 145 0 90 3 145 0 97 3 145 0 108 3 145 0 116 3 145 0 117 3 145 0 124 3 145 0 138 3 145 0 139 3 145 0 144 3 145 0 150 3 145 0 167 1 1 0 168 7 49 0 192 3 145 0 193 3 145 0 194 7 49 0 196] 
#[1 7 53 0 12 7 57 0 18] 
#[1 2 242 0 1 2 242 0 3 2 242 0 6 2 242 0 7 2 242 0 8 2 242 0 9 2 242 0 11 2 242 0 13 2 242 0 22 2 242 0 23 2 242 0 25 2 242 0 43 2 242 0 45 2 242 0 54 2 242 0 55 2 242 0 56 2 242 0 58 2 242 0 59 2 242 0 64 2 242 0 66 2 242 0 67 2 242 0 68 2 242 0 78 2 242 0 80 2 242 0 82 2 242 0 83 2 242 0 85 2 242 0 89 2 242 0 90 2 242 0 97 2 242 0 99 2 242 0 100 2 242 0 108 2 242 0 116 2 242 0 117 2 242 0 122 2 242 0 124 2 242 0 125 2 242 0 130 2 242 0 139 2 242 0 144 2 242 0 150 2 242 0 151 2 242 0 155 2 242 0 160 2 242 0 161 2 242 0 162 2 242 0 163 2 242 0 164 2 242 0 165 2 242 0 166 2 242 0 167 2 242 0 168 2 242 0 170 2 242 0 171 2 242 0 172 2 242 0 173 7 61 1 133 7 65 1 135 2 242 1 144] 
#[1 2 242 0 1 2 242 0 3 2 242 0 4 2 242 0 6 2 242 0 7 2 242 0 8 2 242 0 9 2 242 0 13 2 242 0 22 2 242 0 23 2 242 0 25 2 242 0 43 2 242 0 45 2 242 0 54 2 242 0 55 2 242 0 56 2 242 0 58 2 242 0 59 2 242 0 64 2 242 0 66 2 242 0 67 2 242 0 68 2 242 0 78 2 242 0 80 2 242 0 82 2 242 0 85 2 242 0 89 2 242 0 90 2 242 0 108 2 242 0 116 2 242 0 117 2 242 0 124 2 242 0 125 2 242 0 130 2 242 0 139 2 242 0 144 2 242 0 150 2 242 0 155 2 242 0 160 2 242 0 161 2 242 0 162 2 242 0 163 2 242 0 164 2 242 0 165 2 242 0 166 2 242 0 167 2 242 0 168 2 242 0 170 2 242 0 171 1 87 0 172 7 73 1 133 7 65 1 135] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 6 21 0 191 1 17 0 194 6 21 0 195 6 21 0 196 6 21 0 197 7 77 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 205 1 124 2 105 1 125 6 29 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 7 81 0 107 7 85 0 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 89 0 191 1 17 0 194 7 89 0 195 7 89 0 196 7 89 0 197] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 93 0 191 1 17 0 194 7 93 0 195 7 93 0 196 7 93 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 97 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[1 6 169 0 75 7 101 0 86 7 105 0 105 7 109 0 132 3 217 0 162 7 113 0 182] 
#[1 7 117 0 108 7 121 0 117 7 125 0 139] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 7 129 0 191 1 17 0 194 7 129 0 195 7 129 0 196 7 129 0 197] 
#[0 7 133 0 172] 
#[1 6 233 0 5 7 137 0 18 6 245 0 24] 
#[0 7 141 0 169] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 6 253 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 7 1 0 87 1 17 0 89 1 17 0 90 7 145 0 92 7 5 0 101 7 9 0 103 7 149 0 107 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 7 153 0 133 1 17 0 139 7 161 0 141 7 157 0 143 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 7 161 1 8 7 13 1 24 7 17 1 31] 
#[1 7 165 0 107 7 169 0 133 7 173 0 143] 
#[1 7 149 0 107 7 153 0 133 7 161 0 141 7 157 0 143 7 161 1 8] 
#[1 4 253 0 163 7 177 0 185] 
#[0 7 181 0 172] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 2 201 0 77 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 2 205 0 92 0 141 0 93 0 149 0 101 0 153 0 103 3 33 0 106 2 209 0 107 1 17 0 108 3 33 0 109 2 213 0 113 1 17 0 116 1 17 0 117 1 17 0 124 2 225 0 127 3 33 0 132 2 229 0 133 3 33 0 134 0 213 0 135 1 17 0 139 2 237 0 141 2 241 0 143 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 185 0 200 7 185 0 201 7 185 0 203 7 185 0 204 7 185 0 208 3 21 0 209 7 185 0 210 7 185 0 211 3 33 0 223 7 185 0 242 7 185 0 243 7 185 0 247 7 185 0 248 7 185 1 5 7 185 1 6 7 185 1 7 3 53 1 8 7 185 1 9 7 185 1 12 7 185 1 14 7 185 1 15 7 185 1 16 7 185 1 17 7 185 1 18 7 185 1 19 7 185 1 20 7 185 1 21 7 185 1 22 7 185 1 23 1 125 1 25 7 185 1 26 7 185 1 27 7 185 1 28 7 185 1 29 7 185 1 30 7 185 1 34 7 185 1 37 2 246 1 144] 
#[0 2 250 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 7 0 22 0 11 0 23 0 15 0 28 0 19 0 29 0 23 0 30 0 27 0 31 0 31 0 32 0 35 0 33 0 39 0 34 0 43 0 35 0 47 0 36 0 51 0 37 0 55 0 38 0 59 0 39 0 63 0 40 0 67 0 41 0 71 0 43 0 75 0 45 0 79 0 55 0 83 0 56 0 87 0 58 0 91 0 59 0 95 0 64 0 99 0 66 0 103 0 68 0 107 0 74 0 111 0 77 0 115 0 78 0 119 0 85 0 123 0 87 0 127 0 89 0 131 0 90 0 135 0 92 0 139 0 93 0 143 0 101 0 147 0 103 0 151 0 106 0 155 0 107 0 159 0 108 0 163 0 109 0 167 0 113 0 171 0 116 0 175 0 117 0 179 0 124 0 183 0 127 0 187 0 132 0 191 0 133 0 195 0 134 0 199 0 135 0 203 0 139 0 207 0 141 0 211 0 143 0 215 0 144 1 91 0 150 0 223 0 167 0 227 0 168 0 231 0 171 1 95 0 172 0 239 0 173 7 189 0 179 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 193 0 200 7 193 0 201 7 193 0 203 7 193 0 204 7 193 0 208 3 21 0 209 7 193 0 210 7 193 0 211 3 33 0 223 7 193 0 242 7 193 0 243 7 193 0 247 7 193 0 248 7 193 1 5 7 193 1 6 7 193 1 7 3 53 1 8 7 193 1 9 7 193 1 12 7 193 1 14 7 193 1 15 7 193 1 16 7 193 1 17 7 193 1 18 7 193 1 19 7 193 1 20 7 193 1 21 7 193 1 22 7 193 1 23 1 125 1 25 7 193 1 26 7 193 1 27 7 193 1 28 7 193 1 29 7 193 1 30 7 193 1 34 7 193 1 37 0 10 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 74 0 6 0 77 0 6 0 78 0 6 0 85 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 92 0 6 0 93 0 6 0 101 0 6 0 103 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 113 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 127 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 139 0 6 0 141 0 6 0 143 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 7 197 0 177 4 181 0 178 0 6 1 144] 
#[0 0 54 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 2 254 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 154 0 1 0 158 0 3 0 154 0 9 3 2 0 11 3 2 0 55 3 2 0 83 3 2 0 97 3 2 0 99 3 2 0 100 3 2 0 122 3 2 0 151 3 2 0 162 3 2 0 172 3 2 0 173 3 2 1 144] 
#[1 4 97 0 1 4 101 0 9] 
#[1 1 246 0 1 1 246 0 3 1 246 0 9 3 6 0 11 3 6 0 55 3 6 0 83 3 6 0 97 3 6 0 99 3 6 0 100 3 6 0 122 3 6 0 151 3 6 0 162 3 6 0 172 3 6 0 173 3 6 1 144] 
#[1 2 14 0 1 2 18 0 3 2 14 0 9 3 10 0 11 3 10 0 55 3 10 0 83 3 10 0 97 3 10 0 99 3 10 0 100 3 10 0 122 3 10 0 151 3 10 0 162 3 10 0 172 3 10 0 173 3 10 1 144] 
#[0 3 14 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 7 201 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 7 205 1 38 5 65 1 39 5 69 1 40 7 205 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 7 205 1 47 5 101 1 49 5 105 1 51 7 205 1 53 7 205 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 7 209 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 4 253 0 163 1 17 0 167 1 1 0 168 1 5 0 171 7 213 0 182 7 217 0 185 7 93 0 191 1 17 0 194 7 93 0 195 7 93 0 196 7 93 0 197 1 157 1 56 1 157 1 57 1 157 1 58 7 221 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 7 225 0 172] 
#[0 7 229 0 172] 
#[1 7 233 0 159 7 237 0 190] 
#[0 3 18 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 22 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 26 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 84 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 30 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 34 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 38 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 42 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 99 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 54 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 58 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 62 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 66 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 70 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 74 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 78 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 82 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 86 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 154 0 1 1 103 0 3 1 107 0 4 1 107 0 5 1 107 0 7 0 154 0 9 1 107 0 11 1 107 0 13 1 107 0 22 1 107 0 23 1 107 0 28 1 107 0 29 1 107 0 30 1 107 0 31 1 107 0 32 1 107 0 33 1 107 0 34 1 107 0 35 1 107 0 36 1 107 0 37 1 107 0 38 1 107 0 39 1 107 0 40 1 107 0 41 1 107 0 43 1 107 0 45 1 107 0 55 1 107 0 56 1 107 0 58 1 107 0 59 1 107 0 64 1 107 0 66 1 107 0 68 1 107 0 74 1 107 0 77 1 107 0 78 1 107 0 83 1 107 0 85 1 107 0 87 1 107 0 89 1 107 0 90 1 107 0 92 1 107 0 93 1 107 0 97 1 107 0 99 1 107 0 100 1 107 0 101 1 107 0 103 1 107 0 106 1 107 0 107 1 107 0 108 1 107 0 109 1 107 0 113 1 107 0 116 1 107 0 117 1 107 0 122 1 107 0 124 1 107 0 127 1 107 0 132 1 107 0 133 1 107 0 134 1 107 0 135 1 107 0 139 1 107 0 141 1 107 0 143 1 107 0 144 1 107 0 150 1 107 0 151 1 107 0 162 1 107 0 167 1 107 0 168 1 107 0 171 1 111 0 172 1 107 0 173 1 107 1 144] 
#[1 3 98 0 11 3 98 0 55 3 98 0 83 3 98 0 97 3 98 0 99 3 98 0 100 3 98 0 122 3 98 0 151 3 98 0 162 1 115 0 172 3 98 0 173 3 98 1 144] 
#[0 1 119 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 123 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 118 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 127 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 130 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 134 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 138 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 249 0 172] 
#[0 3 142 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 146 0 3 3 146 0 4 3 146 0 5 3 146 0 7 3 146 0 11 3 146 0 13 3 146 0 22 3 146 0 23 3 146 0 28 3 146 0 29 3 146 0 30 3 146 0 31 3 146 0 32 3 146 0 33 3 146 0 34 3 146 0 35 3 146 0 36 3 146 0 37 3 146 0 38 3 146 0 39 3 146 0 40 3 146 0 41 3 146 0 43 3 146 0 45 3 146 0 55 3 146 0 56 3 146 0 58 3 146 0 59 3 146 0 64 3 146 0 66 3 146 0 68 3 146 0 74 3 146 0 77 3 146 0 78 3 146 0 83 3 146 0 85 3 146 0 87 3 146 0 89 3 146 0 90 3 146 0 92 3 146 0 93 3 146 0 97 3 146 0 99 3 146 0 100 3 146 0 101 3 146 0 103 3 146 0 106 3 146 0 107 3 146 0 108 3 146 0 109 3 146 0 113 3 146 0 116 3 146 0 117 3 146 0 122 3 146 0 124 3 146 0 127 3 146 0 132 3 146 0 133 3 146 0 134 3 146 0 135 3 146 0 139 3 146 0 141 3 146 0 143 3 146 0 144 3 146 0 150 3 146 0 151 3 146 0 162 3 146 0 167 3 146 0 168 3 146 0 171 1 131 0 172 3 146 0 173 3 146 1 144] 
#[1 3 150 0 3 3 150 0 4 3 150 0 5 3 150 0 7 3 150 0 11 3 150 0 13 3 150 0 22 3 150 0 23 3 150 0 28 3 150 0 29 3 150 0 30 3 150 0 31 3 150 0 32 3 150 0 33 3 150 0 34 3 150 0 35 3 150 0 36 3 150 0 37 3 150 0 38 3 150 0 39 3 150 0 40 3 150 0 41 3 150 0 43 3 150 0 45 3 150 0 55 3 150 0 56 3 150 0 58 3 150 0 59 3 150 0 64 3 150 0 66 3 150 0 68 3 150 0 74 3 150 0 77 3 150 0 78 3 150 0 83 3 150 0 85 3 150 0 87 3 150 0 89 3 150 0 90 3 150 0 92 3 150 0 93 3 150 0 97 3 150 0 99 3 150 0 100 3 150 0 101 3 150 0 103 3 150 0 106 3 150 0 107 3 150 0 108 3 150 0 109 3 150 0 113 3 150 0 116 3 150 0 117 3 150 0 122 3 150 0 124 3 150 0 127 3 150 0 132 3 150 0 133 3 150 0 134 3 150 0 135 3 150 0 139 3 150 0 141 3 150 0 143 3 150 0 144 3 150 0 150 3 150 0 151 3 150 0 162 3 150 0 167 3 150 0 168 3 150 0 171 1 135 0 172 3 150 0 173 3 150 1 144] 
#[0 3 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 158 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 162 0 3 3 162 0 4 3 162 0 5 3 162 0 7 3 162 0 11 3 162 0 13 3 162 0 22 3 162 0 23 3 162 0 28 3 162 0 29 3 162 0 30 3 162 0 31 3 162 0 32 3 162 0 33 3 162 0 34 3 162 0 35 3 162 0 36 3 162 0 37 3 162 0 38 3 162 0 39 3 162 0 40 3 162 0 41 3 162 0 43 3 162 0 45 3 162 0 55 3 162 0 56 3 162 0 58 3 162 0 59 3 162 0 64 3 162 0 66 3 162 0 68 3 162 0 74 3 162 0 77 3 162 0 78 3 162 0 83 3 162 0 85 3 162 0 87 3 162 0 89 3 162 0 90 3 162 0 92 3 162 0 93 3 162 0 97 3 162 0 99 3 162 0 100 3 162 0 101 3 162 0 103 3 162 0 106 3 162 0 107 3 162 0 108 3 162 0 109 3 162 0 113 3 162 0 116 3 162 0 117 3 162 0 122 3 162 0 124 3 162 0 127 3 162 0 132 3 162 0 133 3 162 0 134 3 162 0 135 3 162 0 139 3 162 0 141 3 162 0 143 3 162 0 144 3 162 0 150 3 162 0 151 3 162 0 162 3 162 0 167 3 162 0 168 3 162 0 171 1 139 0 172 3 162 0 173 3 162 1 144] 
#[1 1 38 0 1 1 143 0 3 1 147 0 4 1 147 0 5 1 147 0 7 1 38 0 9 1 147 0 11 1 147 0 13 1 147 0 22 1 147 0 23 1 147 0 28 1 147 0 29 1 147 0 30 1 147 0 31 1 147 0 32 1 147 0 33 1 147 0 34 1 147 0 35 1 147 0 36 1 147 0 37 1 147 0 38 1 147 0 39 1 147 0 40 1 147 0 41 1 147 0 43 1 147 0 45 1 147 0 55 1 147 0 56 1 147 0 58 1 147 0 59 1 147 0 64 1 147 0 66 1 147 0 68 1 147 0 74 1 147 0 77 1 147 0 78 1 147 0 83 1 147 0 85 1 147 0 87 1 147 0 89 1 147 0 90 1 147 0 92 1 147 0 93 1 147 0 97 1 147 0 99 1 147 0 100 1 147 0 101 1 147 0 103 1 147 0 106 1 147 0 107 1 147 0 108 1 147 0 109 1 147 0 113 1 147 0 116 1 147 0 117 1 147 0 122 1 147 0 124 1 147 0 127 1 147 0 132 1 147 0 133 1 147 0 134 1 147 0 135 1 147 0 139 1 147 0 141 1 147 0 143 1 147 0 144 1 147 0 150 1 147 0 151 1 147 0 162 1 147 0 167 1 147 0 168 1 147 0 171 1 147 0 172 1 147 0 173 1 147 1 144] 
#[1 4 97 0 1 3 174 0 3 3 174 0 4 3 174 0 5 3 174 0 7 4 101 0 9 3 174 0 11 3 174 0 13 3 174 0 22 3 174 0 23 3 174 0 28 3 174 0 29 3 174 0 30 3 174 0 31 3 174 0 32 3 174 0 33 3 174 0 34 3 174 0 35 3 174 0 36 3 174 0 37 3 174 0 38 3 174 0 39 3 174 0 40 3 174 0 41 3 174 0 43 3 174 0 45 3 174 0 55 3 174 0 56 3 174 0 58 3 174 0 59 3 174 0 64 3 174 0 66 3 174 0 68 3 174 0 74 3 174 0 77 3 174 0 78 3 174 0 83 3 174 0 85 3 174 0 87 3 174 0 89 3 174 0 90 3 174 0 92 3 174 0 93 3 174 0 97 3 174 0 99 3 174 0 100 3 174 0 101 3 174 0 103 3 174 0 106 3 174 0 107 3 174 0 108 3 174 0 109 3 174 0 113 3 174 0 116 3 174 0 117 3 174 0 122 3 174 0 124 3 174 0 127 3 174 0 132 3 174 0 133 3 174 0 134 3 174 0 135 3 174 0 139 3 174 0 141 3 174 0 143 3 174 0 144 3 174 0 150 3 174 0 151 3 174 0 162 3 174 0 167 3 174 0 168 3 174 0 171 3 174 0 172 3 174 0 173 3 174 1 144] 
#[1 1 246 0 1 1 246 0 3 1 246 0 4 1 246 0 5 1 246 0 7 1 246 0 9 1 246 0 11 1 246 0 13 1 246 0 22 1 246 0 23 1 246 0 28 1 246 0 29 1 246 0 30 1 246 0 31 1 246 0 32 1 246 0 33 1 246 0 34 1 246 0 35 1 246 0 36 1 246 0 37 1 246 0 38 1 246 0 39 1 246 0 40 1 246 0 41 1 246 0 43 1 246 0 45 1 246 0 55 1 246 0 56 1 246 0 58 1 246 0 59 1 246 0 64 1 246 0 66 1 246 0 68 1 246 0 74 1 246 0 77 1 246 0 78 1 246 0 83 1 246 0 85 1 246 0 87 1 246 0 89 1 246 0 90 1 246 0 92 1 246 0 93 1 246 0 97 1 246 0 99 1 246 0 100 1 246 0 101 1 246 0 103 1 246 0 106 1 246 0 107 1 246 0 108 1 246 0 109 1 246 0 113 1 246 0 116 1 246 0 117 1 246 0 122 1 246 0 124 1 246 0 127 1 246 0 132 1 246 0 133 1 246 0 134 1 246 0 135 1 246 0 139 1 246 0 141 1 246 0 143 1 246 0 144 1 246 0 150 1 246 0 151 1 246 0 162 1 246 0 167 1 246 0 168 1 246 0 171 1 151 0 172 1 246 0 173 1 246 1 144] 
#[1 1 254 0 1 1 155 0 3 1 159 0 4 1 159 0 5 1 159 0 7 1 254 0 9 1 159 0 11 1 159 0 13 1 159 0 22 1 159 0 23 1 159 0 28 1 159 0 29 1 159 0 30 1 159 0 31 1 159 0 32 1 159 0 33 1 159 0 34 1 159 0 35 1 159 0 36 1 159 0 37 1 159 0 38 1 159 0 39 1 159 0 40 1 159 0 41 1 159 0 43 1 159 0 45 1 159 0 55 1 159 0 56 1 159 0 58 1 159 0 59 1 159 0 64 1 159 0 66 1 159 0 68 1 159 0 74 1 159 0 77 1 159 0 78 1 159 0 83 1 159 0 85 1 159 0 87 1 159 0 89 1 159 0 90 1 159 0 92 1 159 0 93 1 159 0 97 1 159 0 99 1 159 0 100 1 159 0 101 1 159 0 103 1 159 0 106 1 159 0 107 1 159 0 108 1 159 0 109 1 159 0 113 1 159 0 116 1 159 0 117 1 159 0 122 1 159 0 124 1 159 0 127 1 159 0 132 1 159 0 133 1 159 0 134 1 159 0 135 1 159 0 139 1 159 0 141 1 159 0 143 1 159 0 144 1 159 0 150 1 159 0 151 1 159 0 162 1 159 0 167 1 159 0 168 1 159 0 171 1 159 0 172 1 159 0 173 1 159 1 144] 
#[1 2 14 0 1 1 163 0 3 1 167 0 4 1 167 0 5 1 167 0 7 2 14 0 9 1 167 0 11 1 167 0 13 1 167 0 22 1 167 0 23 1 167 0 28 1 167 0 29 1 167 0 30 1 167 0 31 1 167 0 32 1 167 0 33 1 167 0 34 1 167 0 35 1 167 0 36 1 167 0 37 1 167 0 38 1 167 0 39 1 167 0 40 1 167 0 41 1 167 0 43 1 167 0 45 1 167 0 55 1 167 0 56 1 167 0 58 1 167 0 59 1 167 0 64 1 167 0 66 1 167 0 68 1 167 0 74 1 167 0 77 1 167 0 78 1 167 0 83 1 167 0 85 1 167 0 87 1 167 0 89 1 167 0 90 1 167 0 92 1 167 0 93 1 167 0 97 1 167 0 99 1 167 0 100 1 167 0 101 1 167 0 103 1 167 0 106 1 167 0 107 1 167 0 108 1 167 0 109 1 167 0 113 1 167 0 116 1 167 0 117 1 167 0 122 1 167 0 124 1 167 0 127 1 167 0 132 1 167 0 133 1 167 0 134 1 167 0 135 1 167 0 139 1 167 0 141 1 167 0 143 1 167 0 144 1 167 0 150 1 167 0 151 1 167 0 162 1 167 0 167 1 167 0 168 1 167 0 171 1 167 0 172 1 167 0 173 1 167 1 144] 
#[0 3 186 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 171 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 13 0 172] 
#[0 8 17 0 172] 
#[0 8 21 0 172] 
#[1 8 25 0 22 8 25 0 23 8 25 0 43 8 25 0 45 8 25 0 55 8 25 0 56 8 25 0 57 8 25 0 58 8 25 0 59 8 25 0 64 3 125 0 66 8 25 0 68 8 25 0 78 8 25 0 83 8 25 0 85 8 25 0 89 8 25 0 90 8 25 0 97 8 25 0 108 8 25 0 116 8 25 0 117 8 25 0 124 8 25 0 138 8 25 0 139 8 25 0 144 8 25 0 150 8 25 0 167 8 25 0 193 8 25 0 194] 
#[0 1 175 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 179 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 206 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 210 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 183 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 218 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 1 187 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 226 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 230 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 234 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 238 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 246 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 3 254 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 2 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 6 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 10 0 1 4 10 0 3 4 10 0 4 4 10 0 5 4 10 0 7 1 191 0 9 4 10 0 11 4 10 0 13 4 10 0 22 4 10 0 23 4 10 0 28 4 10 0 29 4 10 0 30 4 10 0 31 4 10 0 32 4 10 0 33 4 10 0 34 4 10 0 35 4 10 0 36 4 10 0 37 4 10 0 38 4 10 0 39 4 10 0 40 4 10 0 41 4 10 0 43 4 10 0 45 4 10 0 55 4 10 0 56 4 10 0 58 4 10 0 59 4 10 0 64 4 10 0 66 4 10 0 68 4 10 0 74 4 10 0 77 4 10 0 78 4 10 0 83 4 10 0 85 4 10 0 87 4 10 0 89 4 10 0 90 4 10 0 92 4 10 0 93 4 10 0 97 4 10 0 99 4 10 0 100 4 10 0 101 4 10 0 103 4 10 0 106 4 10 0 107 4 10 0 108 4 10 0 109 4 10 0 113 4 10 0 116 4 10 0 117 4 10 0 122 4 10 0 124 4 10 0 127 4 10 0 132 4 10 0 133 4 10 0 134 4 10 0 135 4 10 0 139 4 10 0 141 4 10 0 143 4 10 0 144 4 10 0 150 4 10 0 151 4 10 0 162 4 10 0 167 4 10 0 168 4 10 0 171 4 10 0 172 4 10 0 173 5 241 0 225 8 29 0 226 4 10 1 144] 
#[0 4 14 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 18 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 22 0 1 4 22 0 3 4 22 0 4 4 22 0 5 4 22 0 7 1 195 0 9 4 22 0 11 4 22 0 13 4 22 0 22 4 22 0 23 4 22 0 28 4 22 0 29 4 22 0 30 4 22 0 31 4 22 0 32 4 22 0 33 4 22 0 34 4 22 0 35 4 22 0 36 4 22 0 37 4 22 0 38 4 22 0 39 4 22 0 40 4 22 0 41 4 22 0 43 4 22 0 45 4 22 0 55 4 22 0 56 4 22 0 58 4 22 0 59 4 22 0 64 4 22 0 66 4 22 0 68 4 22 0 74 4 22 0 77 4 22 0 78 4 22 0 83 4 22 0 85 4 22 0 87 4 22 0 89 4 22 0 90 4 22 0 92 4 22 0 93 4 22 0 97 4 22 0 99 4 22 0 100 4 22 0 101 4 22 0 103 4 22 0 106 4 22 0 107 4 22 0 108 4 22 0 109 4 22 0 113 4 22 0 116 4 22 0 117 4 22 0 122 4 22 0 124 4 22 0 127 4 22 0 132 4 22 0 133 4 22 0 134 4 22 0 135 4 22 0 139 4 22 0 141 4 22 0 143 4 22 0 144 4 22 0 150 4 22 0 151 4 22 0 162 4 22 0 167 4 22 0 168 4 22 0 171 4 22 0 172 4 22 0 173 8 33 0 225 4 22 1 144] 
#[0 4 26 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 37 0 172] 
#[1 8 41 0 7 8 45 0 172] 
#[1 0 154 0 1 0 158 0 3 0 154 0 9 4 30 0 11 4 30 0 55 4 30 0 83 4 30 0 97 4 30 0 99 4 30 0 100 4 30 0 122 4 30 0 151 4 30 0 162 4 30 0 172 4 30 0 173 4 30 1 144] 
#[0 1 246 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 14 0 1 2 18 0 3 2 14 0 9 4 34 0 11 4 34 0 55 4 34 0 83 4 34 0 97 4 34 0 99 4 34 0 100 4 34 0 122 4 34 0 151 4 34 0 162 4 34 0 172 4 34 0 173 4 34 1 144] 
#[1 4 38 0 22 4 38 0 23 4 38 0 43 4 38 0 45 4 38 0 55 4 38 0 56 4 38 0 58 4 38 0 59 4 38 0 64 4 38 0 66 4 38 0 68 4 38 0 78 4 38 0 85 4 38 0 89 4 38 0 90 4 38 0 100 4 38 0 108 4 38 0 116 4 38 0 117 4 38 0 124 4 38 0 139 4 38 0 144 4 38 0 150 4 38 0 167 4 38 0 168 4 38 0 171 4 38 0 173 8 49 0 245] 
#[1 0 154 0 1 0 158 0 3 0 154 0 9 8 53 0 172] 
#[0 4 42 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 246 0 1 1 246 0 3 1 246 0 9 8 57 0 172] 
#[1 4 81 0 7 4 46 0 11 4 46 0 22 4 46 0 23 4 46 0 28 4 46 0 29 4 46 0 30 4 46 0 31 4 46 0 32 4 46 0 33 4 46 0 34 4 46 0 35 4 46 0 36 4 46 0 37 4 46 0 38 4 46 0 39 4 46 0 40 4 46 0 41 4 46 0 43 4 46 0 45 4 46 0 55 4 46 0 56 4 46 0 58 4 46 0 59 4 46 0 64 4 46 0 66 4 46 0 68 4 46 0 74 4 46 0 77 4 46 0 78 4 46 0 83 4 46 0 85 4 46 0 87 4 46 0 89 4 46 0 90 4 46 0 92 4 46 0 93 4 46 0 97 4 46 0 99 4 46 0 100 4 46 0 101 4 46 0 103 4 46 0 106 4 46 0 107 4 46 0 108 4 46 0 109 4 46 0 113 4 46 0 116 4 46 0 117 4 46 0 122 4 46 0 124 4 46 0 127 4 46 0 132 4 46 0 133 4 46 0 134 4 46 0 135 4 46 0 139 4 46 0 141 4 46 0 143 4 46 0 144 4 46 0 150 4 46 0 151 4 46 0 162 4 46 0 167 4 46 0 168 4 46 0 171 1 199 0 172 4 46 0 173 4 89 1 35 4 93 1 36 4 46 1 144] 
#[0 4 50 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 61 0 172] 
#[1 8 65 0 3 4 53 0 5 1 203 0 7 1 203 0 11 1 203 0 22 1 203 0 23 1 203 0 28 1 203 0 29 1 203 0 30 1 203 0 31 1 203 0 32 1 203 0 33 1 203 0 34 1 203 0 35 1 203 0 36 1 203 0 37 1 203 0 38 1 203 0 39 1 203 0 40 1 203 0 41 1 203 0 43 1 203 0 45 1 203 0 55 1 203 0 56 1 203 0 58 1 203 0 59 1 203 0 64 1 203 0 66 1 203 0 68 1 203 0 74 1 203 0 77 1 203 0 78 1 203 0 83 1 203 0 85 1 203 0 87 1 203 0 89 1 203 0 90 1 203 0 92 1 203 0 93 1 203 0 97 1 203 0 99 1 203 0 100 1 203 0 101 1 203 0 103 1 203 0 106 1 203 0 107 1 203 0 108 1 203 0 109 1 203 0 113 1 203 0 116 1 203 0 117 1 203 0 122 1 203 0 124 1 203 0 127 1 203 0 132 1 203 0 133 1 203 0 134 1 203 0 135 1 203 0 139 1 203 0 141 1 203 0 143 1 203 0 144 1 203 0 150 1 203 0 151 1 203 0 162 1 203 0 167 1 203 0 168 1 203 0 171 1 207 0 172 1 203 0 173 8 77 0 228 8 77 0 229 8 73 0 230 8 77 0 233 1 203 1 144] 
#[1 8 81 0 7 4 58 0 11 4 58 0 22 4 58 0 23 4 58 0 28 4 58 0 29 4 58 0 30 4 58 0 31 4 58 0 32 4 58 0 33 4 58 0 34 4 58 0 35 4 58 0 36 4 58 0 37 4 58 0 38 4 58 0 39 4 58 0 40 4 58 0 41 4 58 0 43 4 58 0 45 4 58 0 55 4 58 0 56 4 58 0 58 4 58 0 59 4 58 0 64 4 58 0 66 4 58 0 68 4 58 0 74 4 58 0 77 4 58 0 78 4 58 0 83 4 58 0 85 4 58 0 87 4 58 0 89 4 58 0 90 4 58 0 92 4 58 0 93 4 58 0 97 4 58 0 99 4 58 0 100 4 58 0 101 4 58 0 103 4 58 0 106 4 58 0 107 4 58 0 108 4 58 0 109 4 58 0 113 4 58 0 116 4 58 0 117 4 58 0 122 4 58 0 124 4 58 0 127 4 58 0 132 4 58 0 133 4 58 0 134 4 58 0 135 4 58 0 139 4 58 0 141 4 58 0 143 4 58 0 144 4 58 0 150 4 58 0 151 4 58 0 162 4 58 0 167 4 58 0 168 4 58 0 171 1 211 0 172 4 58 0 173 8 89 1 32 8 93 1 33 4 58 1 144] 
#[0 4 62 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 97 0 152] 
#[0 4 66 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 101 0 172] 
#[0 8 105 0 172] 
#[0 8 109 0 122] 
#[0 4 70 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 83 0 85 0 87 0 89 0 90 0 93 0 94 0 97 0 99 0 100 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 122 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 151 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 8 113 0 172] 
#[1 2 218 0 11 2 218 0 55 2 218 0 83 2 218 0 97 2 218 0 99 2 218 0 100 2 218 0 122 2 218 0 151 2 218 0 162 2 218 0 172 2 218 0 173 8 117 0 215] 
#[1 8 121 0 11 0 6 0 55 0 6 0 83 0 6 0 97 0 6 0 99 0 6 0 100 0 6 0 122 0 6 0 151 0 6 0 162 8 125 0 172 1 215 0 173 8 133 0 177 8 137 0 214 8 141 0 216 8 145 0 217] 
#[1 4 74 0 11 4 74 0 55 4 74 0 83 4 74 0 97 4 74 0 99 4 74 0 100 4 74 0 122 4 74 0 151 4 74 0 162 1 219 0 172 4 74 0 173 4 74 1 144] 
#[0 8 153 0 172] 
#[1 4 78 0 22 4 78 0 23 4 78 0 43 4 78 0 45 4 78 0 55 4 78 0 56 4 78 0 58 4 78 0 59 4 78 0 64 4 78 0 66 4 78 0 68 4 78 0 78 4 78 0 85 4 78 0 89 4 78 0 90 4 78 0 100 4 78 0 108 4 78 0 116 4 78 0 117 4 78 0 124 4 78 0 139 4 78 0 144 4 78 0 150 4 78 0 167 4 78 0 168 4 78 0 171 4 78 0 173 8 157 0 250] 
#[1 8 161 0 3 8 165 0 172 8 169 0 253] 
#[0 4 82 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 86 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 90 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 94 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 98 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 102 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 106 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 110 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 4 114 0 7 4 114 0 11 4 114 0 55 4 114 0 83 4 114 0 97 4 114 0 99 4 114 0 100 4 114 0 122 4 114 0 151 4 114 0 162 4 114 0 172 4 114 0 173 8 173 1 108 4 114 1 144] 
#[0 4 118 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 4 122 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 8 177 0 172] 
#[0 8 181 0 172] 
#[1 0 26 0 1 0 26 0 3 0 26 0 9 1 223 0 172] 
#[0 8 189 0 172] 
#[0 8 193 0 172] 
#[0 8 197 0 172] 
#[1 0 154 0 1 8 65 0 3 4 53 0 5 1 203 0 7 0 154 0 9 1 227 0 11 1 227 0 22 1 227 0 23 1 227 0 28 1 227 0 29 1 227 0 30 1 227 0 31 1 227 0 32 1 227 0 33 1 227 0 34 1 227 0 35 1 227 0 36 1 227 0 37 1 227 0 38 1 227 0 39 1 227 0 40 1 227 0 41 1 227 0 43 1 227 0 45 1 227 0 55 1 227 0 56 1 227 0 58 1 227 0 59 1 227 0 64 1 227 0 66 1 227 0 68 1 227 0 74 1 227 0 77 1 227 0 78 1 227 0 83 1 227 0 85 1 227 0 87 1 227 0 89 1 227 0 90 1 227 0 92 1 227 0 93 1 227 0 97 1 227 0 99 1 227 0 100 1 227 0 101 1 227 0 103 1 227 0 106 1 227 0 107 1 227 0 108 1 227 0 109 1 227 0 113 1 227 0 116 1 227 0 117 1 227 0 122 1 227 0 124 1 227 0 127 1 227 0 132 1 227 0 133 1 227 0 134 1 227 0 135 1 227 0 139 1 227 0 141 1 227 0 143 1 227 0 144 1 227 0 150 1 227 0 151 1 227 0 162 1 227 0 167 1 227 0 168 1 227 0 171 1 231 0 172 1 227 0 173 8 77 0 228 8 77 0 229 8 73 0 230 8 77 0 233 1 227 1 144] 
#[1 8 81 0 7 4 126 0 11 4 126 0 22 4 126 0 23 4 126 0 28 4 126 0 29 4 126 0 30 4 126 0 31 4 126 0 32 4 126 0 33 4 126 0 34 4 126 0 35 4 126 0 36 4 126 0 37 4 126 0 38 4 126 0 39 4 126 0 40 4 126 0 41 4 126 0 43 4 126 0 45 4 126 0 55 4 126 0 56 4 126 0 58 4 126 0 59 4 126 0 64 4 126 0 66 4 126 0 68 4 126 0 74 4 126 0 77 4 126 0 78 4 126 0 83 4 126 0 85 4 126 0 87 4 126 0 89 4 126 0 90 4 126 0 92 4 126 0 93 4 126 0 97 4 126 0 99 4 126 0 100 4 126 0 101 4 126 0 103 4 126 0 106 4 126 0 107 4 126 0 108 4 126 0 109 4 126 0 113 4 126 0 116 4 126 0 117 4 126 0 122 4 126 0 124 4 126 0 127 4 126 0 132 4 126 0 133 4 126 0 134 4 126 0 135 4 126 0 139 4 126 0 141 4 126 0 143 4 126 0 144 4 126 0 150 4 126 0 151 4 126 0 162 4 126 0 167 4 126 0 168 4 126 0 171 1 235 0 172 4 126 0 173 8 89 1 32 8 93 1 33 4 126 1 144] 
#[0 4 130 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 134 0 11 4 134 0 22 4 134 0 23 4 134 0 28 4 134 0 29 4 134 0 30 4 134 0 31 4 134 0 32 4 134 0 33 4 134 0 34 4 134 0 35 4 134 0 36 4 134 0 37 4 134 0 38 4 134 0 39 4 134 0 40 4 134 0 41 4 134 0 43 4 134 0 45 4 134 0 55 4 134 0 56 4 134 0 58 4 134 0 59 4 134 0 64 4 134 0 66 4 134 0 68 4 134 0 74 4 134 0 77 4 134 0 78 4 134 0 83 4 134 0 85 4 134 0 87 4 134 0 89 4 134 0 90 4 134 0 92 4 134 0 93 4 134 0 97 4 134 0 99 4 134 0 100 4 134 0 101 4 134 0 103 4 134 0 106 4 134 0 107 4 134 0 108 4 134 0 109 4 134 0 113 4 134 0 116 4 134 0 117 4 134 0 122 4 134 0 124 4 134 0 127 4 134 0 132 4 134 0 133 4 134 0 134 4 134 0 135 4 134 0 139 4 134 0 141 4 134 0 143 4 134 0 144 4 134 0 150 4 134 0 151 4 134 0 162 4 134 0 167 4 134 0 168 4 134 0 171 1 239 0 172 4 134 0 173 4 134 1 144] 
#[1 0 34 0 7 1 243 0 11 1 243 0 55 1 243 0 83 1 243 0 97 1 243 0 99 1 243 0 100 1 243 0 122 1 243 0 151 1 243 0 162 1 243 0 172 1 243 0 173 1 243 1 144] 
#[0 4 142 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 8 205 0 172] 
#[1 8 81 0 7 4 146 0 11 4 146 0 22 4 146 0 23 4 146 0 28 4 146 0 29 4 146 0 30 4 146 0 31 4 146 0 32 4 146 0 33 4 146 0 34 4 146 0 35 4 146 0 36 4 146 0 37 4 146 0 38 4 146 0 39 4 146 0 40 4 146 0 41 4 146 0 43 4 146 0 45 4 146 0 55 4 146 0 56 4 146 0 58 4 146 0 59 4 146 0 64 4 146 0 66 4 146 0 68 4 146 0 74 4 146 0 77 4 146 0 78 4 146 0 83 4 146 0 85 4 146 0 87 4 146 0 89 4 146 0 90 4 146 0 92 4 146 0 93 4 146 0 97 4 146 0 99 4 146 0 100 4 146 0 101 4 146 0 103 4 146 0 106 4 146 0 107 4 146 0 108 4 146 0 109 4 146 0 113 4 146 0 116 4 146 0 117 4 146 0 122 4 146 0 124 4 146 0 127 4 146 0 132 4 146 0 133 4 146 0 134 4 146 0 135 4 146 0 139 4 146 0 141 4 146 0 143 4 146 0 144 4 146 0 150 4 146 0 151 4 146 0 162 4 146 0 167 4 146 0 168 4 146 0 171 1 247 0 172 4 146 0 173 8 89 1 32 8 93 1 33 4 146 1 144] 
#[0 4 150 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 209 0 151 3 217 0 162 7 245 0 172 3 225 0 173 8 213 0 182 3 233 0 207 8 217 0 213] 
#[1 7 245 0 172 3 225 0 173 3 233 0 207 8 221 0 213] 
#[0 8 225 0 75] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 8 229 1 38 5 65 1 39 5 69 1 40 8 229 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 8 229 1 47 5 101 1 49 5 105 1 51 8 229 1 53 8 229 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 4 154 0 3 4 154 0 4 4 154 0 5 4 154 0 7 4 154 0 11 4 154 0 22 4 154 0 23 4 154 0 28 4 154 0 29 4 154 0 30 4 154 0 31 4 154 0 32 4 154 0 33 4 154 0 34 4 154 0 35 4 154 0 36 4 154 0 37 4 154 0 38 4 154 0 39 4 154 0 40 4 154 0 41 4 154 0 43 4 154 0 45 4 154 0 55 4 154 0 56 4 154 0 58 4 154 0 59 4 154 0 64 4 154 0 66 4 154 0 68 4 154 0 74 4 154 0 77 4 154 0 78 4 154 0 83 4 154 0 85 4 154 0 87 4 154 0 89 4 154 0 90 4 154 0 92 4 154 0 93 4 154 0 97 4 154 0 99 4 154 0 100 4 154 0 101 4 154 0 103 4 154 0 106 4 154 0 107 4 154 0 108 4 154 0 109 4 154 0 113 4 154 0 116 4 154 0 117 4 154 0 122 4 154 0 124 4 154 0 127 4 154 0 132 4 154 0 133 4 154 0 134 4 154 0 135 4 154 0 139 4 154 0 141 4 154 0 143 4 154 0 144 4 154 0 150 4 154 0 151 4 154 0 162 4 154 0 167 4 154 0 168 4 154 0 171 1 251 0 172 4 154 0 173 4 154 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 8 233 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 8 237 1 38 5 65 1 39 5 69 1 40 8 237 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 8 237 1 47 5 101 1 49 5 105 1 51 8 237 1 53 8 237 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 8 241 0 172] 
#[0 8 245 0 172] 
#[0 8 249 0 172] 
#[0 8 253 0 18] 
#[1 0 54 0 3 0 54 0 5 0 54 0 7 0 54 0 11 0 54 0 22 0 54 0 23 0 54 0 28 0 54 0 29 0 54 0 30 0 54 0 31 0 54 0 32 0 54 0 33 0 54 0 34 0 54 0 35 0 54 0 36 0 54 0 37 0 54 0 38 0 54 0 39 0 54 0 40 0 54 0 41 0 54 0 43 0 54 0 45 0 54 0 55 0 54 0 56 0 54 0 58 0 54 0 59 0 54 0 64 0 54 0 66 0 54 0 68 0 54 0 74 0 54 0 77 0 54 0 78 0 54 0 83 0 54 0 85 0 54 0 87 0 54 0 89 0 54 0 90 0 54 0 92 0 54 0 93 0 54 0 97 0 54 0 99 0 54 0 100 0 54 0 101 0 54 0 103 0 54 0 106 0 54 0 107 0 54 0 108 0 54 0 109 0 54 0 113 0 54 0 116 0 54 0 117 0 54 0 122 0 54 0 124 0 54 0 127 0 54 0 132 0 54 0 133 0 54 0 134 0 54 0 135 0 54 0 139 0 54 0 141 0 54 0 143 0 54 0 144 0 54 0 150 0 54 0 151 0 54 0 162 0 54 0 167 0 54 0 168 0 54 0 171 1 255 0 172 0 54 0 173 0 54 1 144] 
#[0 9 5 0 172] 
#[0 9 9 0 172] 
#[0 9 13 0 172] 
#[1 8 81 0 7 4 158 0 11 4 158 0 22 4 158 0 23 4 158 0 28 4 158 0 29 4 158 0 30 4 158 0 31 4 158 0 32 4 158 0 33 4 158 0 34 4 158 0 35 4 158 0 36 4 158 0 37 4 158 0 38 4 158 0 39 4 158 0 40 4 158 0 41 4 158 0 43 4 158 0 45 4 158 0 55 4 158 0 56 4 158 0 58 4 158 0 59 4 158 0 64 4 158 0 66 4 158 0 68 4 158 0 74 4 158 0 77 4 158 0 78 4 158 0 83 4 158 0 85 4 158 0 87 4 158 0 89 4 158 0 90 4 158 0 92 4 158 0 93 4 158 0 97 4 158 0 99 4 158 0 100 4 158 0 101 4 158 0 103 4 158 0 106 4 158 0 107 4 158 0 108 4 158 0 109 4 158 0 113 4 158 0 116 4 158 0 117 4 158 0 122 4 158 0 124 4 158 0 127 4 158 0 132 4 158 0 133 4 158 0 134 4 158 0 135 4 158 0 139 4 158 0 141 4 158 0 143 4 158 0 144 4 158 0 150 4 158 0 151 4 158 0 162 4 158 0 167 4 158 0 168 4 158 0 171 2 3 0 172 4 158 0 173 8 89 1 32 8 93 1 33 4 158 1 144] 
#[0 4 162 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 154 0 1 0 158 0 3 0 154 0 9 2 7 0 172] 
#[1 4 97 0 1 4 101 0 9 9 21 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 9 25 1 25] 
#[0 4 166 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 9 29 0 172 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 9 33 1 25] 
#[0 4 170 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 178 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 37 0 172] 
#[0 9 41 0 172] 
#[0 4 182 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 186 0 4 4 225 0 6 9 45 0 7 4 229 0 8 0 33 0 9 4 186 0 11 2 11 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 15 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 4 186 0 83 1 17 0 85 1 17 0 89 1 17 0 90 4 186 0 97 4 186 0 99 4 186 0 100 1 17 0 108 1 17 0 116 1 17 0 117 4 186 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 4 186 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 19 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 2 23 0 172 4 186 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 9 89 1 132 9 93 1 134 9 97 1 137 5 145 1 141 5 145 1 143 4 186 1 144] 
#[1 2 242 0 1 2 242 0 3 2 242 0 4 2 242 0 6 2 242 0 7 2 242 0 8 2 242 0 9 2 242 0 13 2 242 0 22 2 242 0 23 2 242 0 25 2 242 0 43 2 242 0 45 2 242 0 54 2 242 0 55 2 242 0 56 2 242 0 58 2 242 0 59 2 242 0 64 2 242 0 66 2 242 0 67 2 242 0 68 2 242 0 78 2 242 0 80 2 242 0 82 2 242 0 85 2 242 0 89 2 242 0 90 2 242 0 108 2 242 0 116 2 242 0 117 2 242 0 124 2 242 0 125 2 242 0 130 2 242 0 139 2 242 0 144 2 242 0 150 2 242 0 155 2 242 0 160 2 242 0 161 2 242 0 162 2 242 0 163 2 242 0 164 2 242 0 165 2 242 0 166 2 242 0 167 2 242 0 168 2 242 0 170 2 242 0 171 2 242 0 172 9 101 1 133 7 65 1 135] 
#[1 9 105 0 4 9 109 0 172] 
#[1 4 190 0 100 4 190 0 173 9 113 0 206] 
#[0 9 117 0 172] 
#[0 9 121 0 172] 
#[1 8 161 0 3 9 125 0 172 9 129 0 253] 
#[1 0 154 0 1 2 27 0 3 0 154 0 4 0 154 0 5 0 154 0 7 0 154 0 9 0 154 0 11 0 154 0 13 0 154 0 22 0 154 0 23 0 154 0 28 0 154 0 29 0 154 0 30 0 154 0 31 0 154 0 32 0 154 0 33 0 154 0 34 0 154 0 35 0 154 0 36 0 154 0 37 0 154 0 38 0 154 0 39 0 154 0 40 0 154 0 41 0 154 0 43 0 154 0 45 0 154 0 55 0 154 0 56 0 154 0 58 0 154 0 59 0 154 0 64 0 154 0 66 0 154 0 68 0 154 0 74 0 154 0 77 0 154 0 78 0 154 0 83 0 154 0 85 0 154 0 87 0 154 0 89 0 154 0 90 0 154 0 92 0 154 0 93 0 154 0 97 0 154 0 99 0 154 0 100 0 154 0 101 0 154 0 103 0 154 0 106 0 154 0 107 0 154 0 108 0 154 0 109 0 154 0 113 0 154 0 116 0 154 0 117 0 154 0 122 0 154 0 124 0 154 0 127 0 154 0 132 0 154 0 133 0 154 0 134 0 154 0 135 0 154 0 139 0 154 0 141 0 154 0 143 0 154 0 144 0 154 0 150 0 154 0 151 0 154 0 162 0 154 0 167 0 154 0 168 0 154 0 171 0 154 0 172 0 154 0 173 0 154 1 144] 
#[1 4 97 0 1 4 101 0 9 4 194 0 22 4 194 0 23 4 194 0 28 4 194 0 29 4 194 0 30 4 194 0 31 4 194 0 32 4 194 0 33 4 194 0 34 4 194 0 35 4 194 0 36 4 194 0 37 4 194 0 38 4 194 0 39 4 194 0 40 4 194 0 41 4 194 0 43 4 194 0 45 4 194 0 55 4 194 0 56 4 194 0 58 4 194 0 59 4 194 0 64 4 194 0 66 4 194 0 68 4 194 0 74 4 194 0 77 4 194 0 78 4 194 0 85 4 194 0 87 4 194 0 89 4 194 0 90 4 194 0 92 4 194 0 93 4 194 0 101 4 194 0 103 4 194 0 106 4 194 0 107 4 194 0 108 4 194 0 109 4 194 0 113 4 194 0 116 4 194 0 117 4 194 0 124 4 194 0 127 4 194 0 132 4 194 0 133 4 194 0 134 4 194 0 135 4 194 0 139 4 194 0 141 4 194 0 143 4 194 0 144 4 194 0 150 4 194 0 167 4 194 0 168 4 194 0 171 4 194 0 172 4 194 0 173 4 194 1 144] 
#[0 9 133 0 172] 
#[0 4 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 137 0 172] 
#[0 4 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 141 0 172] 
#[0 9 145 0 172] 
#[0 9 149 0 172] 
#[1 8 161 0 3 9 153 0 172 4 206 0 173 9 157 0 253 9 161 1 13] 
#[1 8 225 0 75 9 165 0 86 9 169 0 105 9 173 0 132 3 217 0 162 9 177 0 182] 
#[0 9 181 0 172] 
#[0 4 210 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 185 0 172] 
#[0 9 189 0 172] 
#[0 9 193 0 172] 
#[0 9 197 0 172] 
#[0 9 201 0 172] 
#[0 9 205 0 172] 
#[0 9 209 0 172] 
#[0 9 213 0 172] 
#[1 4 214 0 22 4 214 0 23 4 214 0 28 4 214 0 29 4 214 0 30 4 214 0 31 4 214 0 32 4 214 0 33 4 214 0 34 4 214 0 35 4 214 0 36 4 214 0 37 4 214 0 38 4 214 0 39 4 214 0 40 4 214 0 41 4 214 0 43 4 214 0 45 4 214 0 55 4 214 0 56 4 214 0 58 4 214 0 59 4 214 0 64 4 214 0 66 4 214 0 68 4 214 0 74 4 214 0 77 4 214 0 78 9 217 0 84 4 214 0 85 4 214 0 87 4 214 0 89 4 214 0 90 4 214 0 92 4 214 0 93 4 214 0 101 4 214 0 103 4 214 0 106 4 214 0 107 4 214 0 108 4 214 0 109 4 214 0 113 4 214 0 116 4 214 0 117 4 214 0 124 4 214 0 127 4 214 0 132 4 214 0 133 4 214 0 134 4 214 0 135 4 214 0 139 4 214 0 141 4 214 0 143 4 214 0 144 4 214 0 150 4 214 0 167 4 214 0 168 4 214 0 171 4 214 0 172 4 214 0 173 4 214 1 144] 
#[1 4 253 0 163 9 221 0 185] 
#[0 4 218 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 74 0 6 0 77 0 6 0 78 0 6 0 85 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 92 0 6 0 93 0 6 0 101 0 6 0 103 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 113 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 127 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 139 0 6 0 141 0 6 0 143 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 9 225 0 177 4 181 0 178 0 6 1 144] 
#[1 0 10 0 22 0 10 0 23 0 10 0 28 0 10 0 29 0 10 0 30 0 10 0 31 0 10 0 32 0 10 0 33 0 10 0 34 0 10 0 35 0 10 0 36 0 10 0 37 0 10 0 38 0 10 0 39 0 10 0 40 0 10 0 41 0 10 0 43 0 10 0 45 0 10 0 55 0 10 0 56 0 10 0 58 0 10 0 59 0 10 0 64 0 10 0 66 0 10 0 68 0 10 0 74 0 10 0 77 0 10 0 78 0 10 0 85 0 10 0 87 0 10 0 89 0 10 0 90 0 10 0 92 0 10 0 93 0 10 0 101 0 10 0 103 0 10 0 106 0 10 0 107 0 10 0 108 0 10 0 109 0 10 0 113 0 10 0 116 0 10 0 117 0 10 0 124 0 10 0 127 0 10 0 132 0 10 0 133 0 10 0 134 0 10 0 135 0 10 0 139 0 10 0 141 0 10 0 143 0 10 0 144 0 10 0 150 0 10 0 167 0 10 0 168 0 10 0 171 0 10 0 172 0 10 0 173 9 229 0 179 0 10 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 2 201 0 77 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 2 205 0 92 0 141 0 93 0 149 0 101 0 153 0 103 3 33 0 106 2 209 0 107 1 17 0 108 3 33 0 109 2 213 0 113 1 17 0 116 1 17 0 117 1 17 0 124 2 225 0 127 3 33 0 132 2 229 0 133 3 33 0 134 0 213 0 135 1 17 0 139 2 237 0 141 2 241 0 143 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 185 0 200 7 185 0 201 7 185 0 203 7 185 0 204 7 185 0 208 3 21 0 209 7 185 0 210 7 185 0 211 3 33 0 223 7 185 0 242 7 185 0 243 7 185 0 247 7 185 0 248 7 185 1 5 7 185 1 6 7 185 1 7 3 53 1 8 7 185 1 9 7 185 1 12 7 185 1 14 7 185 1 15 7 185 1 16 7 185 1 17 7 185 1 18 7 185 1 19 7 185 1 20 7 185 1 21 7 185 1 22 7 185 1 23 1 125 1 25 7 185 1 26 7 185 1 27 7 185 1 28 7 185 1 29 7 185 1 30 7 185 1 34 7 185 1 37 4 222 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 9 233 1 38 5 65 1 39 5 69 1 40 9 233 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 233 1 47 5 101 1 49 5 105 1 51 9 233 1 53 9 233 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 9 237 0 4 9 241 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 4 253 0 163 1 17 0 167 1 1 0 168 1 5 0 171 9 245 0 182 9 249 0 185 7 93 0 191 1 17 0 194 7 93 0 195 7 93 0 196 7 93 0 197 1 157 1 56 1 157 1 57 1 157 1 58 9 253 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 4 226 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 4 230 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 4 234 0 3 4 234 0 4 4 234 0 5 4 234 0 7 4 101 0 9 4 234 0 11 4 234 0 13 4 234 0 22 4 234 0 23 4 234 0 28 4 234 0 29 4 234 0 30 4 234 0 31 4 234 0 32 4 234 0 33 4 234 0 34 4 234 0 35 4 234 0 36 4 234 0 37 4 234 0 38 4 234 0 39 4 234 0 40 4 234 0 41 4 234 0 43 4 234 0 45 4 234 0 55 4 234 0 56 4 234 0 58 4 234 0 59 4 234 0 64 4 234 0 66 4 234 0 68 4 234 0 74 4 234 0 77 4 234 0 78 4 234 0 83 4 234 0 85 4 234 0 87 4 234 0 89 4 234 0 90 4 234 0 92 4 234 0 93 4 234 0 97 4 234 0 99 4 234 0 100 4 234 0 101 4 234 0 103 4 234 0 106 4 234 0 107 4 234 0 108 4 234 0 109 4 234 0 113 4 234 0 116 4 234 0 117 4 234 0 122 4 234 0 124 4 234 0 127 4 234 0 132 4 234 0 133 4 234 0 134 4 234 0 135 4 234 0 139 4 234 0 141 4 234 0 143 4 234 0 144 4 234 0 150 4 234 0 151 4 234 0 162 4 234 0 167 4 234 0 168 4 234 0 171 4 234 0 172 4 234 0 173 4 234 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 10 1 1 132 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 5 1 0 164 1 17 0 167 1 1 0 168 1 5 0 171 10 5 0 186 7 93 0 191 1 17 0 194 7 93 0 195 7 93 0 196 7 93 0 197 10 9 1 39 1 157 1 56 1 157 1 57 1 157 1 58 10 13 1 124 2 105 1 125 2 105 1 126 2 105 1 127 2 117 1 130 2 121 1 131 10 17 1 141] 
#[0 4 238 0 8 0 156 0 159] 
#[1 10 21 0 8 10 25 0 159] 
#[0 10 29 0 18] 
#[1 10 33 0 18 10 37 0 147] 
#[1 10 41 0 2 10 45 0 5 10 49 0 6 10 53 0 8 10 57 0 10 10 61 0 14 10 65 0 16 10 69 0 17 10 73 0 19 10 77 0 20 10 81 0 46 10 85 0 48 10 89 0 53 10 93 0 71 10 97 0 72 10 101 0 73 10 105 0 102 10 109 0 129 10 113 0 154 10 117 1 48 10 121 1 50 10 125 1 52] 
#[1 10 101 0 73 10 105 0 102 10 109 0 129 10 113 0 154 10 129 1 52] 
#[1 10 61 0 14 10 65 0 16 10 69 0 17 10 73 0 19 10 77 0 20 10 81 0 46 10 85 0 48 10 133 1 48] 
#[1 10 101 0 73 10 105 0 102 10 109 0 129 10 113 0 154 10 137 1 52] 
#[0 10 141 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 145 0 191 1 17 0 194 10 145 0 195 10 145 0 196 10 145 0 197] 
#[0 10 149 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 10 153 0 181 10 157 0 191 1 17 0 194 10 157 0 195 10 157 0 196 10 157 0 197] 
#[0 4 242 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 246 0 1 4 246 0 3 4 246 0 4 4 246 0 5 4 246 0 7 2 31 0 9 4 246 0 11 4 246 0 13 4 246 0 22 4 246 0 23 4 246 0 28 4 246 0 29 4 246 0 30 4 246 0 31 4 246 0 32 4 246 0 33 4 246 0 34 4 246 0 35 4 246 0 36 4 246 0 37 4 246 0 38 4 246 0 39 4 246 0 40 4 246 0 41 4 246 0 43 4 246 0 45 4 246 0 55 4 246 0 56 4 246 0 58 4 246 0 59 4 246 0 64 4 246 0 66 4 246 0 68 4 246 0 74 4 246 0 77 4 246 0 78 4 246 0 83 4 246 0 85 4 246 0 87 4 246 0 89 4 246 0 90 4 246 0 92 4 246 0 93 4 246 0 97 4 246 0 99 4 246 0 100 4 246 0 101 4 246 0 103 4 246 0 106 4 246 0 107 4 246 0 108 4 246 0 109 4 246 0 113 4 246 0 116 4 246 0 117 4 246 0 122 4 246 0 124 4 246 0 127 4 246 0 132 4 246 0 133 4 246 0 134 4 246 0 135 4 246 0 139 4 246 0 141 4 246 0 143 4 246 0 144 4 246 0 150 4 246 0 151 4 246 0 162 4 246 0 167 4 246 0 168 4 246 0 171 4 246 0 172 4 246 0 173 8 33 0 225 4 246 1 144] 
#[0 4 250 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 10 33 0 18 10 161 0 44 10 37 0 147] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 4 254 0 11 4 254 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 35 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 4 254 0 83 1 17 0 85 1 17 0 89 1 17 0 90 4 254 0 97 4 254 0 99 4 254 0 100 1 17 0 108 1 17 0 116 1 17 0 117 4 254 0 122 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 254 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 39 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 2 43 0 172 4 254 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 10 169 1 38 5 65 1 39 5 69 1 40 10 169 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 10 169 1 47 5 101 1 49 5 105 1 51 10 169 1 53 10 169 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 10 173 1 66 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143 4 254 1 144] 
#[0 10 177 0 7] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 78 0 6 0 85 0 6 0 89 0 6 0 90 0 6 0 100 0 6 0 108 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 139 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 10 181 0 177 10 185 0 244] 
#[0 10 189 0 18] 
#[0 10 193 0 18] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 197 0 191 1 17 0 194 10 197 0 195 10 197 0 196 10 197 0 197] 
#[1 0 29 0 1 4 221 0 3 5 2 0 4 4 225 0 6 5 2 0 7 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 10 201 0 232 10 205 1 38 5 65 1 39 5 69 1 40 10 205 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 10 205 1 47 5 101 1 49 5 105 1 51 10 205 1 53 10 205 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 6 233 0 5 6 245 0 24] 
#[1 4 53 0 5 2 47 0 7 2 47 0 11 2 47 0 22 2 47 0 23 2 47 0 28 2 47 0 29 2 47 0 30 2 47 0 31 2 47 0 32 2 47 0 33 2 47 0 34 2 47 0 35 2 47 0 36 2 47 0 37 2 47 0 38 2 47 0 39 2 47 0 40 2 47 0 41 2 47 0 43 2 47 0 45 2 47 0 55 2 47 0 56 2 47 0 58 2 47 0 59 2 47 0 64 2 47 0 66 2 47 0 68 2 47 0 74 2 47 0 77 2 47 0 78 2 47 0 83 2 47 0 85 2 47 0 87 2 47 0 89 2 47 0 90 2 47 0 92 2 47 0 93 2 47 0 97 2 47 0 99 2 47 0 100 2 47 0 101 2 47 0 103 2 47 0 106 2 47 0 107 2 47 0 108 2 47 0 109 2 47 0 113 2 47 0 116 2 47 0 117 2 47 0 122 2 47 0 124 2 47 0 127 2 47 0 132 2 47 0 133 2 47 0 134 2 47 0 135 2 47 0 139 2 47 0 141 2 47 0 143 2 47 0 144 2 47 0 150 2 47 0 151 2 47 0 162 2 47 0 167 2 47 0 168 2 47 0 171 2 51 0 172 2 47 0 173 10 209 0 228 10 209 0 229 10 209 0 233 2 47 1 144] 
#[0 5 10 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 10 213 0 172 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 10 217 1 24] 
#[0 10 221 0 7] 
#[0 5 14 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 81 0 7 5 18 0 11 5 18 0 22 5 18 0 23 5 18 0 28 5 18 0 29 5 18 0 30 5 18 0 31 5 18 0 32 5 18 0 33 5 18 0 34 5 18 0 35 5 18 0 36 5 18 0 37 5 18 0 38 5 18 0 39 5 18 0 40 5 18 0 41 5 18 0 43 5 18 0 45 5 18 0 55 5 18 0 56 5 18 0 58 5 18 0 59 5 18 0 64 5 18 0 66 5 18 0 68 5 18 0 74 5 18 0 77 5 18 0 78 5 18 0 83 5 18 0 85 5 18 0 87 5 18 0 89 5 18 0 90 5 18 0 92 5 18 0 93 5 18 0 97 5 18 0 99 5 18 0 100 5 18 0 101 5 18 0 103 5 18 0 106 5 18 0 107 5 18 0 108 5 18 0 109 5 18 0 113 5 18 0 116 5 18 0 117 5 18 0 122 5 18 0 124 5 18 0 127 5 18 0 132 5 18 0 133 5 18 0 134 5 18 0 135 5 18 0 139 5 18 0 141 5 18 0 143 5 18 0 144 5 18 0 150 5 18 0 151 5 18 0 162 5 18 0 167 5 18 0 168 5 18 0 171 2 55 0 172 5 18 0 173 10 225 1 32 5 18 1 144] 
#[0 10 229 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 10 233 1 38 5 65 1 39 5 69 1 40 10 233 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 10 233 1 47 5 101 1 49 5 105 1 51 10 233 1 53 10 233 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 10 237 1 38 5 65 1 39 5 69 1 40 10 237 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 10 237 1 47 5 101 1 49 5 105 1 51 10 237 1 53 10 237 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 5 22 0 11 5 22 0 55 5 22 0 83 5 22 0 97 5 22 0 99 5 22 0 100 5 22 0 122 5 22 0 151 5 22 0 162 2 59 0 172 5 22 0 173 5 22 1 144] 
#[1 0 29 0 1 0 33 0 9 2 218 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 67 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 10 245 0 76 1 17 0 78 2 218 0 83 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 2 218 0 97 2 218 0 99 2 218 0 100 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 2 218 0 122 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 2 218 0 151 0 245 0 152 0 249 0 153 2 218 0 162 0 253 0 167 1 1 0 168 1 5 0 171 1 75 0 172 2 218 0 173 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 10 245 0 201 10 245 0 203 10 245 0 212 10 249 0 215 1 49 0 223 10 245 0 234 1 57 0 235 10 245 0 236 10 245 0 237 10 245 0 238 10 245 0 239 10 245 0 240 10 245 0 241 10 245 0 242 10 245 0 243 10 245 0 247 10 245 0 248 10 245 1 18 10 245 1 19 10 245 1 20 10 245 1 21 10 245 1 22 10 245 1 23 1 125 1 25 10 245 1 26 10 245 1 27 10 245 1 28 10 245 1 29 10 245 1 30 10 245 1 34 10 245 1 37 1 157 1 56 1 157 1 57 1 157 1 58 10 245 1 62 10 245 1 63 10 245 1 64 10 245 1 67 10 245 1 68 10 245 1 69 10 245 1 70 10 245 1 71 10 245 1 72 10 245 1 73 10 245 1 74 10 245 1 75 10 245 1 76 10 245 1 77 10 245 1 78 10 245 1 79 10 245 1 80 10 245 1 81 10 245 1 82 10 245 1 83 10 245 1 84 10 245 1 85 10 245 1 90 10 245 1 91 2 9 1 92 10 245 1 97 10 245 1 100 10 245 1 101 10 245 1 102 10 245 1 103 10 245 1 104 10 245 1 109 10 245 1 110 10 245 1 111 10 245 1 112 10 245 1 113 10 245 1 114 10 245 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 10 245 1 129 2 117 1 130 2 121 1 131 10 245 1 139 10 245 1 140 10 245 1 142] 
#[1 8 121 0 11 0 6 0 55 0 6 0 83 0 6 0 97 0 6 0 99 0 6 0 100 0 6 0 122 0 6 0 151 0 6 0 162 8 125 0 172 1 215 0 173 10 253 0 177 8 137 0 214 8 141 0 216 8 145 0 217] 
#[1 5 26 0 1 5 26 0 9 5 26 0 11 5 26 0 22 5 26 0 23 5 26 0 25 5 26 0 27 5 26 0 42 5 26 0 43 5 26 0 44 5 26 0 45 5 26 0 49 5 26 0 54 5 26 0 55 5 26 0 56 5 26 0 57 5 26 0 58 5 26 0 59 5 26 0 60 5 26 0 64 5 26 0 66 5 26 0 68 5 26 0 74 5 26 0 76 5 26 0 78 5 26 0 85 5 26 0 87 5 26 0 89 5 26 0 90 5 26 0 93 5 26 0 94 5 26 0 101 5 26 0 103 5 26 0 104 5 26 0 106 5 26 0 108 5 26 0 109 5 26 0 110 5 26 0 111 5 26 0 112 5 26 0 116 5 26 0 117 5 26 0 124 5 26 0 126 5 26 0 127 5 26 0 132 5 26 0 134 5 26 0 135 5 26 0 136 5 26 0 137 5 26 0 138 5 26 0 139 5 26 0 141 5 26 0 144 5 26 0 150 5 26 0 152 5 26 0 153 5 26 0 162 5 26 0 167 5 26 0 168 5 26 0 171 2 63 0 172 5 26 0 173] 
#[0 11 5 0 11] 
#[0 5 30 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 85 0 87 0 89 0 90 0 93 0 94 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 5 34 0 55 5 34 0 83 5 34 0 97 5 34 0 99 5 34 0 100 5 34 0 122 5 34 0 151 5 34 0 162 2 67 0 173] 
#[0 5 38 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173] 
#[0 5 42 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 85 0 87 0 89 0 90 0 93 0 94 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 8 121 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 11 17 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 3 217 0 162 0 253 0 167 1 1 0 168 1 5 0 171 11 9 0 172 8 129 0 173 11 13 0 182 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 11 17 0 201 11 17 0 203 11 17 0 212 11 21 0 216 1 49 0 223 11 17 0 234 1 57 0 235 11 17 0 236 11 17 0 237 11 17 0 238 11 17 0 239 11 17 0 240 11 17 0 241 11 17 0 242 11 17 0 243 11 17 0 247 11 17 0 248 11 17 1 18 11 17 1 19 11 17 1 20 11 17 1 21 11 17 1 22 11 17 1 23 1 125 1 25 11 17 1 26 11 17 1 27 11 17 1 28 11 17 1 29 11 17 1 30 11 17 1 34 11 17 1 37 1 157 1 56 1 157 1 57 1 157 1 58 11 17 1 62 11 17 1 63 11 17 1 64 11 17 1 67 11 17 1 68 11 17 1 69 11 17 1 70 11 17 1 71 11 17 1 72 11 17 1 73 11 17 1 74 11 17 1 75 11 17 1 76 11 17 1 77 11 17 1 78 11 17 1 79 11 17 1 80 11 17 1 81 11 17 1 82 11 17 1 83 11 17 1 84 11 17 1 85 11 17 1 90 11 17 1 91 2 9 1 92 11 17 1 97 11 17 1 100 11 17 1 101 11 17 1 102 11 17 1 103 11 17 1 104 11 17 1 109 11 17 1 110 11 17 1 111 11 17 1 112 11 17 1 113 11 17 1 114 11 17 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 11 17 1 129 2 117 1 130 2 121 1 131 11 17 1 139 11 17 1 140 11 17 1 142] 
#[1 11 25 0 148 11 29 0 152] 
#[0 11 33 0 122] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 78 0 6 0 85 0 6 0 89 0 6 0 90 0 6 0 100 0 6 0 108 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 139 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 11 37 0 177 11 41 0 249] 
#[1 11 45 0 4 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 9 53 0 80 11 65 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 11 49 0 128 11 53 0 130 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 57 0 172 11 61 0 191 1 17 0 194 11 61 0 195 11 61 0 196 11 61 0 197 11 65 0 252 11 69 1 0] 
#[1 8 161 0 3 11 73 0 253] 
#[0 5 46 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 11 77 0 7 5 50 0 11 5 50 0 55 5 50 0 83 5 50 0 97 5 50 0 99 5 50 0 100 5 50 0 122 5 50 0 151 5 50 0 162 2 71 0 172 5 50 0 173 11 85 1 107 5 50 1 144] 
#[1 10 33 0 18 11 89 0 145 11 93 0 146 10 37 0 147] 
#[1 10 33 0 18 11 97 0 24 10 37 0 147] 
#[1 0 177 0 111 11 101 0 136 11 105 1 109] 
#[1 10 33 0 18 0 173 0 110 0 177 0 111 10 37 0 147 11 109 1 104 11 109 1 109 11 109 1 110] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 113 1 38 5 65 1 39 5 69 1 40 11 113 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 113 1 47 5 101 1 49 5 105 1 51 11 113 1 53 11 113 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 6 177 0 191 1 17 0 194 6 177 0 195 6 177 0 196 6 177 0 197 11 117 1 24 11 121 1 31 11 125 1 38 5 65 1 39 5 69 1 40 11 125 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 125 1 47 5 101 1 49 5 105 1 51 11 125 1 53 11 125 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 6 233 0 5 10 29 0 18 6 245 0 24] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 129 1 38 5 65 1 39 5 69 1 40 11 129 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 129 1 47 5 101 1 49 5 105 1 51 11 129 1 53 11 129 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 5 54 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 11 133 0 172] 
#[1 11 137 0 151 3 217 0 162 11 141 0 182] 
#[1 11 145 0 100 3 217 0 162 11 149 0 182] 
#[0 11 153 0 172] 
#[1 5 58 0 3 5 58 0 4 5 58 0 5 5 58 0 7 5 58 0 11 5 58 0 22 5 58 0 23 5 58 0 28 5 58 0 29 5 58 0 30 5 58 0 31 5 58 0 32 5 58 0 33 5 58 0 34 5 58 0 35 5 58 0 36 5 58 0 37 5 58 0 38 5 58 0 39 5 58 0 40 5 58 0 41 5 58 0 43 5 58 0 45 5 58 0 55 5 58 0 56 5 58 0 58 5 58 0 59 5 58 0 64 5 58 0 66 5 58 0 68 5 58 0 74 5 58 0 77 5 58 0 78 5 58 0 83 5 58 0 85 5 58 0 87 5 58 0 89 5 58 0 90 5 58 0 92 5 58 0 93 5 58 0 97 5 58 0 99 5 58 0 100 5 58 0 101 5 58 0 103 5 58 0 106 5 58 0 107 5 58 0 108 5 58 0 109 5 58 0 113 5 58 0 116 5 58 0 117 5 58 0 122 5 58 0 124 5 58 0 127 5 58 0 132 5 58 0 133 5 58 0 134 5 58 0 135 5 58 0 139 5 58 0 141 5 58 0 143 5 58 0 144 5 58 0 150 5 58 0 151 5 58 0 162 5 58 0 167 5 58 0 168 5 58 0 171 2 75 0 172 5 58 0 173 5 58 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 157 1 38 5 65 1 39 5 69 1 40 11 157 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 157 1 47 5 101 1 49 5 105 1 51 11 157 1 53 11 157 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 5 62 0 3 5 62 0 4 5 62 0 5 5 62 0 7 5 62 0 11 5 62 0 22 5 62 0 23 5 62 0 28 5 62 0 29 5 62 0 30 5 62 0 31 5 62 0 32 5 62 0 33 5 62 0 34 5 62 0 35 5 62 0 36 5 62 0 37 5 62 0 38 5 62 0 39 5 62 0 40 5 62 0 41 5 62 0 43 5 62 0 45 5 62 0 55 5 62 0 56 5 62 0 58 5 62 0 59 5 62 0 64 5 62 0 66 5 62 0 68 5 62 0 74 5 62 0 77 5 62 0 78 5 62 0 83 5 62 0 85 5 62 0 87 5 62 0 89 5 62 0 90 5 62 0 92 5 62 0 93 5 62 0 97 5 62 0 99 5 62 0 100 5 62 0 101 5 62 0 103 5 62 0 106 5 62 0 107 5 62 0 108 5 62 0 109 5 62 0 113 5 62 0 116 5 62 0 117 5 62 0 122 5 62 0 124 5 62 0 127 5 62 0 132 5 62 0 133 5 62 0 134 5 62 0 135 5 62 0 139 5 62 0 141 5 62 0 143 5 62 0 144 5 62 0 150 5 62 0 151 5 62 0 162 5 62 0 167 5 62 0 168 5 62 0 171 2 79 0 172 5 62 0 173 5 62 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 161 1 38 5 65 1 39 5 69 1 40 11 161 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 161 1 47 5 101 1 49 5 105 1 51 11 161 1 53 11 161 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 165 1 38 5 65 1 39 5 69 1 40 11 165 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 165 1 47 5 101 1 49 5 105 1 51 11 165 1 53 11 165 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 5 161 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 11 169 0 54 1 17 0 55 5 165 0 56 1 17 0 58 1 17 0 59 5 169 0 64 1 17 0 66 1 17 0 68 1 17 0 78 11 173 0 79 11 173 0 81 5 181 0 85 11 173 0 88 1 17 0 89 5 189 0 90 11 173 0 91 11 173 0 95 1 17 0 108 11 173 0 115 1 17 0 116 1 17 0 117 11 173 0 119 11 173 0 120 11 173 0 121 1 17 0 124 1 17 0 139 11 173 0 140 1 17 0 144 5 221 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 225 0 191 1 17 0 194 5 225 0 195 5 225 0 196 5 225 0 197 11 173 0 221 5 233 0 222 11 173 0 224 5 241 0 225 5 245 0 226 11 173 0 227] 
#[0 11 177 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 181 0 191 1 17 0 194 11 181 0 195 11 181 0 196 11 181 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 11 185 1 25 11 189 1 34] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 193 0 191 1 17 0 194 11 193 0 195 11 193 0 196 11 193 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 197 0 191 1 17 0 194 11 197 0 195 11 197 0 196 11 197 0 197] 
#[1 11 201 0 12 11 205 0 18] 
#[1 11 209 0 12 11 213 0 18] 
#[0 5 66 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 11 217 1 25] 
#[0 5 70 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 221 1 38 5 65 1 39 5 69 1 40 11 221 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 221 1 47 5 101 1 49 5 105 1 51 11 221 1 53 11 221 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 11 225 1 38 5 65 1 39 5 69 1 40 11 225 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 11 225 1 47 5 101 1 49 5 105 1 51 11 225 1 53 11 225 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 5 74 0 1 5 74 0 3 5 74 0 4 5 74 0 6 5 74 0 7 5 74 0 8 5 74 0 9 5 74 0 11 5 74 0 13 5 74 0 22 5 74 0 23 5 74 0 25 5 74 0 43 5 74 0 45 5 74 0 54 5 74 0 55 5 74 0 56 5 74 0 58 5 74 0 59 5 74 0 64 5 74 0 66 5 74 0 67 5 74 0 68 5 74 0 78 5 74 0 80 5 74 0 82 5 74 0 83 5 74 0 85 5 74 0 89 5 74 0 90 5 74 0 97 5 74 0 99 5 74 0 100 5 74 0 108 5 74 0 116 5 74 0 117 5 74 0 122 5 74 0 124 5 74 0 125 5 74 0 130 5 74 0 139 5 74 0 144 5 74 0 150 5 74 0 151 5 74 0 155 5 74 0 160 5 74 0 161 5 74 0 162 5 74 0 163 5 74 0 164 5 74 0 165 5 74 0 166 5 74 0 167 5 74 0 168 5 74 0 170 5 74 0 171 2 83 0 172 5 74 0 173 5 74 1 144] 
#[1 5 78 0 1 5 78 0 3 5 78 0 4 5 78 0 6 5 78 0 7 5 78 0 8 5 78 0 9 5 78 0 11 5 78 0 13 5 78 0 22 5 78 0 23 5 78 0 25 5 78 0 43 5 78 0 45 5 78 0 54 5 78 0 55 5 78 0 56 5 78 0 58 5 78 0 59 5 78 0 64 5 78 0 66 5 78 0 67 5 78 0 68 5 78 0 78 5 78 0 80 5 78 0 82 5 78 0 83 5 78 0 85 5 78 0 89 5 78 0 90 5 78 0 97 5 78 0 99 5 78 0 100 5 78 0 108 5 78 0 116 5 78 0 117 5 78 0 122 5 78 0 124 5 78 0 125 5 78 0 130 5 78 0 139 5 78 0 144 5 78 0 150 5 78 0 151 5 78 0 155 5 78 0 160 5 78 0 161 5 78 0 162 5 78 0 163 5 78 0 164 5 78 0 165 5 78 0 166 5 78 0 167 5 78 0 168 5 78 0 170 5 78 0 171 2 87 0 172 5 78 0 173 5 78 1 144] 
#[0 5 82 0 172] 
#[0 5 86 0 172] 
#[0 11 237 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 11 241 0 7 4 229 0 8 0 33 0 9 11 245 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 11 249 1 132 5 145 1 141 5 145 1 143] 
#[1 0 154 0 1 2 91 0 3 3 90 0 4 3 90 0 5 3 90 0 7 0 154 0 9 3 90 0 11 3 90 0 13 3 90 0 22 3 90 0 23 3 90 0 28 3 90 0 29 3 90 0 30 3 90 0 31 3 90 0 32 3 90 0 33 3 90 0 34 3 90 0 35 3 90 0 36 3 90 0 37 3 90 0 38 3 90 0 39 3 90 0 40 3 90 0 41 3 90 0 43 3 90 0 45 3 90 0 55 3 90 0 56 3 90 0 58 3 90 0 59 3 90 0 64 3 90 0 66 3 90 0 68 3 90 0 74 3 90 0 77 3 90 0 78 3 90 0 83 3 90 0 85 3 90 0 87 3 90 0 89 3 90 0 90 3 90 0 92 3 90 0 93 3 90 0 97 3 90 0 99 3 90 0 100 3 90 0 101 3 90 0 103 3 90 0 106 3 90 0 107 3 90 0 108 3 90 0 109 3 90 0 113 3 90 0 116 3 90 0 117 3 90 0 122 3 90 0 124 3 90 0 127 3 90 0 132 3 90 0 133 3 90 0 134 3 90 0 135 3 90 0 139 3 90 0 141 3 90 0 143 3 90 0 144 3 90 0 150 3 90 0 151 3 90 0 162 3 90 0 167 3 90 0 168 3 90 0 171 2 95 0 172 3 90 0 173 3 90 1 144] 
#[0 5 90 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 1 0 172] 
#[1 5 94 0 3 5 94 0 4 5 94 0 5 5 94 0 7 5 94 0 11 5 94 0 13 5 94 0 22 5 94 0 23 5 94 0 28 5 94 0 29 5 94 0 30 5 94 0 31 5 94 0 32 5 94 0 33 5 94 0 34 5 94 0 35 5 94 0 36 5 94 0 37 5 94 0 38 5 94 0 39 5 94 0 40 5 94 0 41 5 94 0 43 5 94 0 45 5 94 0 55 5 94 0 56 5 94 0 58 5 94 0 59 5 94 0 64 5 94 0 66 5 94 0 68 5 94 0 74 5 94 0 77 5 94 0 78 5 94 0 83 5 94 0 85 5 94 0 87 5 94 0 89 5 94 0 90 5 94 0 92 5 94 0 93 5 94 0 97 5 94 0 99 5 94 0 100 5 94 0 101 5 94 0 103 5 94 0 106 5 94 0 107 5 94 0 108 5 94 0 109 5 94 0 113 5 94 0 116 5 94 0 117 5 94 0 122 5 94 0 124 5 94 0 127 5 94 0 132 5 94 0 133 5 94 0 134 5 94 0 135 5 94 0 139 5 94 0 141 5 94 0 143 5 94 0 144 5 94 0 150 5 94 0 151 5 94 0 162 5 94 0 167 5 94 0 168 5 94 0 171 2 99 0 172 5 94 0 173 5 94 1 144] 
#[1 4 97 0 1 4 101 0 9 2 103 0 172] 
#[1 4 186 0 4 12 5 0 7 4 186 0 11 2 107 0 13 4 186 0 55 4 186 0 83 4 186 0 97 4 186 0 99 4 186 0 100 4 186 0 122 4 186 0 151 4 186 0 162 4 186 0 172 4 186 0 173 12 13 1 137 4 186 1 144] 
#[0 5 98 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 5 102 0 4 12 17 0 7 5 102 0 11 12 21 0 13 5 102 0 55 5 102 0 83 5 102 0 97 5 102 0 99 5 102 0 100 5 102 0 122 5 102 0 151 5 102 0 162 2 111 0 172 5 102 0 173 12 29 1 136 5 102 1 144] 
#[1 12 33 0 4 12 37 0 172] 
#[0 5 106 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 41 0 4] 
#[1 0 6 0 100 2 115 0 173 12 45 0 177 12 49 0 205 12 53 0 207] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 57 0 191 1 17 0 194 12 57 0 195 12 57 0 196 12 57 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 61 0 191 1 17 0 194 12 61 0 195 12 61 0 196 12 61 0 197] 
#[1 8 161 0 3 12 65 0 253] 
#[1 0 166 0 3 4 53 0 5 12 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 12 81 1 11] 
#[1 12 85 0 26 12 89 0 89 12 93 0 144] 
#[0 12 97 0 123] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 101 0 191 1 17 0 194 12 101 0 195 12 101 0 196 12 101 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 105 0 191 1 17 0 194 12 105 0 195 12 105 0 196 12 105 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 109 0 191 1 17 0 194 12 109 0 195 12 109 0 196 12 109 0 197] 
#[1 8 161 0 3 12 121 0 172 2 123 0 173 12 117 0 253 12 121 1 13] 
#[1 12 125 0 172 4 206 0 173 12 125 1 13] 
#[1 3 225 0 173 3 233 0 207 12 129 0 213] 
#[0 12 133 0 172] 
#[0 5 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 137 0 172] 
#[0 5 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 12 141 1 38 5 65 1 39 5 69 1 40 12 141 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 12 141 1 47 5 101 1 49 5 105 1 51 12 141 1 53 12 141 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 12 145 0 107 12 149 0 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 153 0 191 1 17 0 194 12 153 0 195 12 153 0 196 12 153 0 197] 
#[1 12 157 0 108 12 161 0 117 12 165 0 139] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 169 0 191 1 17 0 194 12 169 0 195 12 169 0 196 12 169 0 197] 
#[1 12 173 0 107 12 177 0 133 12 181 0 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 185 0 191 1 17 0 194 12 185 0 195 12 185 0 196 12 185 0 197] 
#[1 12 189 0 108 12 193 0 117 12 197 0 139] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 12 201 0 191 1 17 0 194 12 201 0 195 12 201 0 196 12 201 0 197] 
#[0 5 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 130 0 22 5 130 0 23 5 130 0 28 5 130 0 29 5 130 0 30 5 130 0 31 5 130 0 32 5 130 0 33 5 130 0 34 5 130 0 35 5 130 0 36 5 130 0 37 5 130 0 38 5 130 0 39 5 130 0 40 5 130 0 41 5 130 0 43 5 130 0 45 5 130 0 55 5 130 0 56 5 130 0 58 5 130 0 59 5 130 0 64 5 130 0 66 5 130 0 68 5 130 0 74 5 130 0 77 5 130 0 78 12 205 0 84 5 130 0 85 5 130 0 87 5 130 0 89 5 130 0 90 5 130 0 92 5 130 0 93 5 130 0 101 5 130 0 103 5 130 0 106 5 130 0 107 5 130 0 108 5 130 0 109 5 130 0 113 5 130 0 116 5 130 0 117 5 130 0 124 5 130 0 127 5 130 0 132 5 130 0 133 5 130 0 134 5 130 0 135 5 130 0 139 5 130 0 141 5 130 0 143 5 130 0 144 5 130 0 150 5 130 0 167 5 130 0 168 5 130 0 171 5 130 0 172 5 130 0 173 5 130 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 2 201 0 77 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 2 205 0 92 0 141 0 93 0 149 0 101 0 153 0 103 3 33 0 106 2 209 0 107 1 17 0 108 3 33 0 109 2 213 0 113 1 17 0 116 1 17 0 117 1 17 0 124 2 225 0 127 3 33 0 132 2 229 0 133 3 33 0 134 0 213 0 135 1 17 0 139 2 237 0 141 2 241 0 143 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 185 0 200 7 185 0 201 7 185 0 203 7 185 0 204 7 185 0 208 3 21 0 209 7 185 0 210 7 185 0 211 3 33 0 223 7 185 0 242 7 185 0 243 7 185 0 247 7 185 0 248 7 185 1 5 7 185 1 6 7 185 1 7 3 53 1 8 7 185 1 9 7 185 1 12 7 185 1 14 7 185 1 15 7 185 1 16 7 185 1 17 7 185 1 18 7 185 1 19 7 185 1 20 7 185 1 21 7 185 1 22 7 185 1 23 1 125 1 25 7 185 1 26 7 185 1 27 7 185 1 28 7 185 1 29 7 185 1 30 7 185 1 34 7 185 1 37 5 134 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 28 0 6 0 29 0 6 0 30 0 6 0 31 0 6 0 32 0 6 0 33 0 6 0 34 0 6 0 35 0 6 0 36 0 6 0 37 0 6 0 38 0 6 0 39 0 6 0 40 0 6 0 41 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 74 0 6 0 77 0 6 0 78 0 6 0 85 0 6 0 87 0 6 0 89 0 6 0 90 0 6 0 92 0 6 0 93 0 6 0 101 0 6 0 103 0 6 0 106 0 6 0 107 0 6 0 108 0 6 0 109 0 6 0 113 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 127 0 6 0 132 0 6 0 133 0 6 0 134 0 6 0 135 0 6 0 139 0 6 0 141 0 6 0 143 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 172 0 6 0 173 12 209 0 177 4 181 0 178 0 6 1 144] 
#[1 12 213 0 4 12 217 0 172] 
#[0 5 138 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 12 221 0 4 10 33 0 18 10 37 0 147] 
#[0 5 142 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 146 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 5 150 0 3 5 150 0 4 5 150 0 5 5 150 0 7 4 101 0 9 5 150 0 11 5 150 0 13 5 150 0 22 5 150 0 23 5 150 0 28 5 150 0 29 5 150 0 30 5 150 0 31 5 150 0 32 5 150 0 33 5 150 0 34 5 150 0 35 5 150 0 36 5 150 0 37 5 150 0 38 5 150 0 39 5 150 0 40 5 150 0 41 5 150 0 43 5 150 0 45 5 150 0 55 5 150 0 56 5 150 0 58 5 150 0 59 5 150 0 64 5 150 0 66 5 150 0 68 5 150 0 74 5 150 0 77 5 150 0 78 5 150 0 83 5 150 0 85 5 150 0 87 5 150 0 89 5 150 0 90 5 150 0 92 5 150 0 93 5 150 0 97 5 150 0 99 5 150 0 100 5 150 0 101 5 150 0 103 5 150 0 106 5 150 0 107 5 150 0 108 5 150 0 109 5 150 0 113 5 150 0 116 5 150 0 117 5 150 0 122 5 150 0 124 5 150 0 127 5 150 0 132 5 150 0 133 5 150 0 134 5 150 0 135 5 150 0 139 5 150 0 141 5 150 0 143 5 150 0 144 5 150 0 150 5 150 0 151 5 150 0 162 5 150 0 167 5 150 0 168 5 150 0 171 5 150 0 172 5 150 0 173 5 150 1 144] 
#[0 12 225 0 172] 
#[0 5 154 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 5 158 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 97 0 1 5 162 0 3 5 162 0 4 5 162 0 5 5 162 0 7 4 101 0 9 5 162 0 11 5 162 0 13 5 162 0 22 5 162 0 23 5 162 0 28 5 162 0 29 5 162 0 30 5 162 0 31 5 162 0 32 5 162 0 33 5 162 0 34 5 162 0 35 5 162 0 36 5 162 0 37 5 162 0 38 5 162 0 39 5 162 0 40 5 162 0 41 5 162 0 43 5 162 0 45 5 162 0 55 5 162 0 56 5 162 0 58 5 162 0 59 5 162 0 64 5 162 0 66 5 162 0 68 5 162 0 74 5 162 0 77 5 162 0 78 5 162 0 83 5 162 0 85 5 162 0 87 5 162 0 89 5 162 0 90 5 162 0 92 5 162 0 93 5 162 0 97 5 162 0 99 5 162 0 100 5 162 0 101 5 162 0 103 5 162 0 106 5 162 0 107 5 162 0 108 5 162 0 109 5 162 0 113 5 162 0 116 5 162 0 117 5 162 0 122 5 162 0 124 5 162 0 127 5 162 0 132 5 162 0 133 5 162 0 134 5 162 0 135 5 162 0 139 5 162 0 141 5 162 0 143 5 162 0 144 5 162 0 150 5 162 0 151 5 162 0 162 5 162 0 167 5 162 0 168 5 162 0 171 5 162 0 172 5 162 0 173 5 162 1 144] 
#[0 5 166 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 233 0 159 12 229 0 190] 
#[0 5 170 0 8 0 156 0 159] 
#[0 12 233 0 172] 
#[0 12 237 0 172] 
#[0 12 241 0 172] 
#[0 12 245 0 172] 
#[0 5 174 0 172] 
#[0 5 178 0 172] 
#[0 5 182 0 172] 
#[0 5 186 0 172] 
#[0 5 190 0 172] 
#[0 5 194 0 172] 
#[0 5 198 0 172] 
#[0 5 202 0 172] 
#[0 5 206 0 172] 
#[0 5 210 0 172] 
#[0 5 214 0 172] 
#[0 5 218 0 172] 
#[0 5 222 0 172] 
#[0 5 226 0 172] 
#[0 5 230 0 172] 
#[0 5 234 0 172] 
#[0 5 238 0 172] 
#[0 5 242 0 172] 
#[0 12 249 0 172] 
#[0 12 253 0 172] 
#[0 13 1 0 172] 
#[0 13 5 0 172] 
#[0 13 9 0 172] 
#[0 13 13 0 172] 
#[0 13 17 0 172] 
#[0 13 21 0 172] 
#[0 13 25 0 172] 
#[1 13 29 0 7 13 33 0 172] 
#[1 13 37 0 7 13 41 0 172] 
#[0 13 45 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 4 254 0 11 4 254 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 35 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 4 254 0 83 1 17 0 85 1 17 0 89 1 17 0 90 4 254 0 97 4 254 0 99 4 254 0 100 1 17 0 108 1 17 0 116 1 17 0 117 4 254 0 122 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 254 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 39 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 4 254 0 172 4 254 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 13 49 1 38 5 65 1 39 5 69 1 40 13 49 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 13 49 1 47 5 101 1 49 5 105 1 51 13 49 1 53 13 49 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 13 53 1 66 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143 4 254 1 144] 
#[1 4 254 0 11 4 254 0 13 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 4 254 0 151 4 254 0 162 2 127 0 172 4 254 0 173 13 61 1 66 4 254 1 144] 
#[1 5 246 0 11 13 65 0 13 5 246 0 55 5 246 0 83 5 246 0 97 5 246 0 99 5 246 0 100 5 246 0 122 5 246 0 151 5 246 0 162 5 246 0 172 5 246 0 173 13 69 1 65 5 246 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 4 254 0 11 4 254 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 35 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 4 254 0 83 1 17 0 85 1 17 0 89 1 17 0 90 4 254 0 97 4 254 0 99 4 254 0 100 1 17 0 108 1 17 0 116 1 17 0 117 4 254 0 122 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 254 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 39 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 2 131 0 172 4 254 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 13 77 1 38 5 65 1 39 5 69 1 40 13 77 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 13 77 1 47 5 101 1 49 5 105 1 51 13 77 1 53 13 77 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 13 81 1 66 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143 4 254 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 13 85 0 100 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 89 0 191 1 17 0 194 13 89 0 195 13 89 0 196 13 89 0 197 13 93 0 246] 
#[0 5 250 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[0 13 97 0 172] 
#[0 13 101 0 172] 
#[1 8 65 0 3 4 53 0 5 2 135 0 7 2 135 0 11 2 135 0 22 2 135 0 23 2 135 0 28 2 135 0 29 2 135 0 30 2 135 0 31 2 135 0 32 2 135 0 33 2 135 0 34 2 135 0 35 2 135 0 36 2 135 0 37 2 135 0 38 2 135 0 39 2 135 0 40 2 135 0 41 2 135 0 43 2 135 0 45 2 135 0 55 2 135 0 56 2 135 0 58 2 135 0 59 2 135 0 64 2 135 0 66 2 135 0 68 2 135 0 74 2 135 0 77 2 135 0 78 2 135 0 83 2 135 0 85 2 135 0 87 2 135 0 89 2 135 0 90 2 135 0 92 2 135 0 93 2 135 0 97 2 135 0 99 2 135 0 100 2 135 0 101 2 135 0 103 2 135 0 106 2 135 0 107 2 135 0 108 2 135 0 109 2 135 0 113 2 135 0 116 2 135 0 117 2 135 0 122 2 135 0 124 2 135 0 127 2 135 0 132 2 135 0 133 2 135 0 134 2 135 0 135 2 135 0 139 2 135 0 141 2 135 0 143 2 135 0 144 2 135 0 150 2 135 0 151 2 135 0 162 2 135 0 167 2 135 0 168 2 135 0 171 2 139 0 172 2 135 0 173 13 109 0 228 13 109 0 229 13 105 0 230 13 109 0 233 2 135 1 144] 
#[1 13 113 0 4 13 117 0 7 13 121 0 231] 
#[1 5 2 0 4 5 2 0 7 7 245 0 172 13 125 0 232] 
#[0 6 2 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 13 129 1 24] 
#[0 6 6 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 13 133 0 172 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 13 137 1 24] 
#[0 6 10 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 13 141 1 38 5 65 1 39 5 69 1 40 13 141 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 13 141 1 47 5 101 1 49 5 105 1 51 13 141 1 53 13 141 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 7 245 0 172 3 225 0 173 3 233 0 207 13 145 0 213] 
#[1 13 149 0 122 3 217 0 162 7 245 0 172 3 225 0 173 13 153 0 182 3 233 0 207 13 157 0 213] 
#[0 13 161 0 152] 
#[1 2 218 0 11 2 218 0 55 2 218 0 83 2 218 0 97 2 218 0 99 2 218 0 100 2 218 0 122 2 218 0 151 2 218 0 162 2 218 0 172 2 218 0 173 13 165 0 215] 
#[1 8 121 0 11 0 6 0 55 0 6 0 83 0 6 0 97 0 6 0 99 0 6 0 100 0 6 0 122 0 6 0 151 0 6 0 162 8 125 0 172 1 215 0 173 13 169 0 177 8 137 0 214 8 141 0 216 8 145 0 217] 
#[1 6 14 0 55 6 14 0 83 6 14 0 97 6 14 0 99 6 14 0 100 6 14 0 122 6 14 0 151 6 14 0 162 2 143 0 173] 
#[0 6 18 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 85 0 87 0 89 0 90 0 93 0 94 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 6 22 0 1 6 22 0 9 6 22 0 11 6 22 0 22 6 22 0 23 6 22 0 25 6 22 0 27 6 22 0 42 6 22 0 43 6 22 0 44 6 22 0 45 6 22 0 49 6 22 0 54 6 22 0 55 6 22 0 56 6 22 0 57 6 22 0 58 6 22 0 59 6 22 0 60 6 22 0 64 6 22 0 66 6 22 0 68 6 22 0 74 6 22 0 76 6 22 0 78 6 22 0 85 6 22 0 87 6 22 0 89 6 22 0 90 6 22 0 93 6 22 0 94 6 22 0 101 6 22 0 103 6 22 0 104 6 22 0 106 6 22 0 108 6 22 0 109 6 22 0 110 6 22 0 111 6 22 0 112 6 22 0 116 6 22 0 117 6 22 0 124 6 22 0 126 6 22 0 127 6 22 0 132 6 22 0 134 6 22 0 135 6 22 0 136 6 22 0 137 6 22 0 138 6 22 0 139 6 22 0 141 6 22 0 144 6 22 0 150 6 22 0 152 6 22 0 153 6 22 0 162 6 22 0 167 6 22 0 168 6 22 0 171 2 147 0 172 6 22 0 173] 
#[1 11 5 0 11 4 49 0 127] 
#[0 13 177 0 172] 
#[0 6 26 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173] 
#[0 6 30 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 85 0 87 0 89 0 90 0 93 0 94 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[0 13 181 0 172] 
#[0 13 185 0 172] 
#[1 6 34 0 11 6 34 0 55 6 34 0 83 6 34 0 97 6 34 0 99 6 34 0 100 6 34 0 122 6 34 0 151 6 34 0 162 2 151 0 172 6 34 0 173 6 34 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 13 193 0 100 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 197 0 191 1 17 0 194 13 197 0 195 13 197 0 196 13 197 0 197 13 201 0 251] 
#[0 6 38 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[0 6 42 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 13 205 0 172] 
#[0 13 209 0 172] 
#[0 13 213 0 4] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 13 229 0 228 13 229 0 229 13 217 0 230 13 229 0 233 13 229 1 1 13 229 1 2] 
#[0 13 233 0 172] 
#[1 6 50 0 4 6 50 0 7 6 50 0 172 13 237 0 255] 
#[0 6 54 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 13 241 0 172 13 245 0 182 13 245 0 191 1 17 0 194 13 245 0 195 13 245 0 196 13 245 0 197 13 245 1 43 13 245 1 105] 
#[0 13 249 0 7] 
#[0 6 58 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 13 253 0 172 3 225 0 173 3 233 0 207 14 1 0 213 14 5 0 218] 
#[1 13 253 0 172 14 9 0 173 14 13 0 218] 
#[0 14 17 0 172] 
#[0 14 21 0 172] 
#[0 6 62 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 6 66 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 6 70 0 11 6 70 0 22 6 70 0 23 6 70 0 28 6 70 0 29 6 70 0 30 6 70 0 31 6 70 0 32 6 70 0 33 6 70 0 34 6 70 0 35 6 70 0 36 6 70 0 37 6 70 0 38 6 70 0 39 6 70 0 40 6 70 0 41 6 70 0 43 6 70 0 45 6 70 0 55 6 70 0 56 6 70 0 58 6 70 0 59 6 70 0 64 6 70 0 66 6 70 0 68 6 70 0 74 6 70 0 77 6 70 0 78 6 70 0 83 6 70 0 85 6 70 0 87 6 70 0 89 6 70 0 90 6 70 0 92 6 70 0 93 6 70 0 97 6 70 0 99 6 70 0 100 6 70 0 101 6 70 0 103 6 70 0 106 6 70 0 107 6 70 0 108 6 70 0 109 6 70 0 113 6 70 0 116 6 70 0 117 6 70 0 122 6 70 0 124 6 70 0 127 6 70 0 132 6 70 0 133 6 70 0 134 6 70 0 135 6 70 0 139 6 70 0 141 6 70 0 143 6 70 0 144 6 70 0 150 6 70 0 151 6 70 0 162 6 70 0 167 6 70 0 168 6 70 0 171 2 163 0 172 6 70 0 173 6 70 1 144] 
#[1 8 81 0 7 6 74 0 11 6 74 0 22 6 74 0 23 6 74 0 28 6 74 0 29 6 74 0 30 6 74 0 31 6 74 0 32 6 74 0 33 6 74 0 34 6 74 0 35 6 74 0 36 6 74 0 37 6 74 0 38 6 74 0 39 6 74 0 40 6 74 0 41 6 74 0 43 6 74 0 45 6 74 0 55 6 74 0 56 6 74 0 58 6 74 0 59 6 74 0 64 6 74 0 66 6 74 0 68 6 74 0 74 6 74 0 77 6 74 0 78 6 74 0 83 6 74 0 85 6 74 0 87 6 74 0 89 6 74 0 90 6 74 0 92 6 74 0 93 6 74 0 97 6 74 0 99 6 74 0 100 6 74 0 101 6 74 0 103 6 74 0 106 6 74 0 107 6 74 0 108 6 74 0 109 6 74 0 113 6 74 0 116 6 74 0 117 6 74 0 122 6 74 0 124 6 74 0 127 6 74 0 132 6 74 0 133 6 74 0 134 6 74 0 135 6 74 0 139 6 74 0 141 6 74 0 143 6 74 0 144 6 74 0 150 6 74 0 151 6 74 0 162 6 74 0 167 6 74 0 168 6 74 0 171 2 167 0 172 6 74 0 173 8 89 1 32 8 93 1 33 6 74 1 144] 
#[0 6 78 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 82 0 11 6 82 0 22 6 82 0 23 6 82 0 28 6 82 0 29 6 82 0 30 6 82 0 31 6 82 0 32 6 82 0 33 6 82 0 34 6 82 0 35 6 82 0 36 6 82 0 37 6 82 0 38 6 82 0 39 6 82 0 40 6 82 0 41 6 82 0 43 6 82 0 45 6 82 0 55 6 82 0 56 6 82 0 58 6 82 0 59 6 82 0 64 6 82 0 66 6 82 0 68 6 82 0 74 6 82 0 77 6 82 0 78 6 82 0 83 6 82 0 85 6 82 0 87 6 82 0 89 6 82 0 90 6 82 0 92 6 82 0 93 6 82 0 97 6 82 0 99 6 82 0 100 6 82 0 101 6 82 0 103 6 82 0 106 6 82 0 107 6 82 0 108 6 82 0 109 6 82 0 113 6 82 0 116 6 82 0 117 6 82 0 122 6 82 0 124 6 82 0 127 6 82 0 132 6 82 0 133 6 82 0 134 6 82 0 135 6 82 0 139 6 82 0 141 6 82 0 143 6 82 0 144 6 82 0 150 6 82 0 151 6 82 0 162 6 82 0 167 6 82 0 168 6 82 0 171 2 171 0 172 6 82 0 173 6 82 1 144] 
#[1 7 245 0 172 3 225 0 173 14 25 0 207] 
#[0 14 29 0 151] 
#[0 6 86 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 14 33 0 172] 
#[0 14 37 0 172] 
#[0 14 41 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 14 45 1 38 5 65 1 39 5 69 1 40 14 45 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 14 45 1 47 5 101 1 49 5 105 1 51 14 45 1 53 14 45 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 6 90 0 3 6 90 0 4 6 90 0 5 6 90 0 7 6 90 0 11 6 90 0 22 6 90 0 23 6 90 0 28 6 90 0 29 6 90 0 30 6 90 0 31 6 90 0 32 6 90 0 33 6 90 0 34 6 90 0 35 6 90 0 36 6 90 0 37 6 90 0 38 6 90 0 39 6 90 0 40 6 90 0 41 6 90 0 43 6 90 0 45 6 90 0 55 6 90 0 56 6 90 0 58 6 90 0 59 6 90 0 64 6 90 0 66 6 90 0 68 6 90 0 74 6 90 0 77 6 90 0 78 6 90 0 83 6 90 0 85 6 90 0 87 6 90 0 89 6 90 0 90 6 90 0 92 6 90 0 93 6 90 0 97 6 90 0 99 6 90 0 100 6 90 0 101 6 90 0 103 6 90 0 106 6 90 0 107 6 90 0 108 6 90 0 109 6 90 0 113 6 90 0 116 6 90 0 117 6 90 0 122 6 90 0 124 6 90 0 127 6 90 0 132 6 90 0 133 6 90 0 134 6 90 0 135 6 90 0 139 6 90 0 141 6 90 0 143 6 90 0 144 6 90 0 150 6 90 0 151 6 90 0 162 6 90 0 167 6 90 0 168 6 90 0 171 2 175 0 172 6 90 0 173 6 90 1 144] 
#[1 6 94 0 3 6 94 0 4 6 94 0 5 6 94 0 7 6 94 0 11 6 94 0 13 6 94 0 22 6 94 0 23 6 94 0 28 6 94 0 29 6 94 0 30 6 94 0 31 6 94 0 32 6 94 0 33 6 94 0 34 6 94 0 35 6 94 0 36 6 94 0 37 6 94 0 38 6 94 0 39 6 94 0 40 6 94 0 41 6 94 0 43 6 94 0 45 6 94 0 55 6 94 0 56 6 94 0 58 6 94 0 59 6 94 0 64 6 94 0 66 6 94 0 68 6 94 0 74 6 94 0 77 6 94 0 78 6 94 0 83 6 94 0 85 6 94 0 87 6 94 0 89 6 94 0 90 6 94 0 92 6 94 0 93 6 94 0 97 6 94 0 99 6 94 0 100 6 94 0 101 6 94 0 103 6 94 0 106 6 94 0 107 6 94 0 108 6 94 0 109 6 94 0 113 6 94 0 116 6 94 0 117 6 94 0 122 6 94 0 124 6 94 0 127 6 94 0 132 6 94 0 133 6 94 0 134 6 94 0 135 6 94 0 139 6 94 0 141 6 94 0 143 6 94 0 144 6 94 0 150 6 94 0 151 6 94 0 162 6 94 0 167 6 94 0 168 6 94 0 171 2 179 0 172 6 94 0 173 6 94 1 144] 
#[1 6 98 0 7 6 102 0 11 6 102 0 55 6 102 0 83 6 102 0 97 6 102 0 99 6 102 0 100 6 102 0 122 6 102 0 151 6 102 0 162 2 183 0 172 6 102 0 173 6 102 1 144] 
#[0 14 49 0 172] 
#[1 6 106 0 3 6 106 0 4 14 53 0 5 6 106 0 7 6 106 0 11 6 106 0 22 6 106 0 23 6 106 0 28 6 106 0 29 6 106 0 30 6 106 0 31 6 106 0 32 6 106 0 33 6 106 0 34 6 106 0 35 6 106 0 36 6 106 0 37 6 106 0 38 6 106 0 39 6 106 0 40 6 106 0 41 6 106 0 43 6 106 0 45 6 106 0 55 6 106 0 56 6 106 0 58 6 106 0 59 6 106 0 64 6 106 0 66 6 106 0 68 6 106 0 74 6 106 0 77 6 106 0 78 6 106 0 83 6 106 0 85 6 106 0 87 6 106 0 89 6 106 0 90 6 106 0 92 6 106 0 93 6 106 0 97 6 106 0 99 6 106 0 100 6 106 0 101 6 106 0 103 6 106 0 106 6 106 0 107 6 106 0 108 6 106 0 109 6 106 0 113 6 106 0 116 6 106 0 117 6 106 0 122 6 106 0 124 6 106 0 127 6 106 0 132 6 106 0 133 6 106 0 134 6 106 0 135 6 106 0 139 6 106 0 141 6 106 0 143 6 106 0 144 6 106 0 150 6 106 0 151 6 106 0 162 6 106 0 167 6 106 0 168 6 106 0 171 2 187 0 172 6 106 0 173 6 106 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 14 61 1 38 5 65 1 39 5 69 1 40 14 61 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 14 61 1 47 5 101 1 49 5 105 1 51 14 61 1 53 14 61 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 4 38 0 22 4 38 0 23 4 38 0 43 4 38 0 45 4 38 0 55 4 38 0 56 4 38 0 58 4 38 0 59 4 38 0 64 4 38 0 66 4 38 0 68 4 38 0 78 4 38 0 85 4 38 0 89 4 38 0 90 4 38 0 100 4 38 0 108 4 38 0 116 4 38 0 117 4 38 0 124 4 38 0 139 4 38 0 144 4 38 0 150 4 38 0 167 4 38 0 168 4 38 0 171 4 38 0 173 14 65 0 245] 
#[1 4 81 0 7 6 110 0 11 6 110 0 22 6 110 0 23 6 110 0 28 6 110 0 29 6 110 0 30 6 110 0 31 6 110 0 32 6 110 0 33 6 110 0 34 6 110 0 35 6 110 0 36 6 110 0 37 6 110 0 38 6 110 0 39 6 110 0 40 6 110 0 41 6 110 0 43 6 110 0 45 6 110 0 55 6 110 0 56 6 110 0 58 6 110 0 59 6 110 0 64 6 110 0 66 6 110 0 68 6 110 0 74 6 110 0 77 6 110 0 78 6 110 0 83 6 110 0 85 6 110 0 87 6 110 0 89 6 110 0 90 6 110 0 92 6 110 0 93 6 110 0 97 6 110 0 99 6 110 0 100 6 110 0 101 6 110 0 103 6 110 0 106 6 110 0 107 6 110 0 108 6 110 0 109 6 110 0 113 6 110 0 116 6 110 0 117 6 110 0 122 6 110 0 124 6 110 0 127 6 110 0 132 6 110 0 133 6 110 0 134 6 110 0 135 6 110 0 139 6 110 0 141 6 110 0 143 6 110 0 144 6 110 0 150 6 110 0 151 6 110 0 162 6 110 0 167 6 110 0 168 6 110 0 171 2 191 0 172 6 110 0 173 4 89 1 35 4 93 1 36 6 110 1 144] 
#[0 6 114 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 78 0 22 4 78 0 23 4 78 0 43 4 78 0 45 4 78 0 55 4 78 0 56 4 78 0 58 4 78 0 59 4 78 0 64 4 78 0 66 4 78 0 68 4 78 0 78 4 78 0 85 4 78 0 89 4 78 0 90 4 78 0 100 4 78 0 108 4 78 0 116 4 78 0 117 4 78 0 124 4 78 0 139 4 78 0 144 4 78 0 150 4 78 0 167 4 78 0 168 4 78 0 171 4 78 0 173 14 69 0 250] 
#[1 8 161 0 3 14 73 0 172 14 77 0 253] 
#[0 14 81 0 172] 
#[0 14 85 0 172] 
#[0 14 89 0 172] 
#[0 14 93 0 172] 
#[0 6 118 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 6 122 0 3 6 122 0 4 6 122 0 5 6 122 0 7 6 122 0 11 6 122 0 13 6 122 0 22 6 122 0 23 6 122 0 28 6 122 0 29 6 122 0 30 6 122 0 31 6 122 0 32 6 122 0 33 6 122 0 34 6 122 0 35 6 122 0 36 6 122 0 37 6 122 0 38 6 122 0 39 6 122 0 40 6 122 0 41 6 122 0 43 6 122 0 45 6 122 0 55 6 122 0 56 6 122 0 58 6 122 0 59 6 122 0 64 6 122 0 66 6 122 0 68 6 122 0 74 6 122 0 77 6 122 0 78 6 122 0 83 6 122 0 85 6 122 0 87 6 122 0 89 6 122 0 90 6 122 0 92 6 122 0 93 6 122 0 97 6 122 0 99 6 122 0 100 6 122 0 101 6 122 0 103 6 122 0 106 6 122 0 107 6 122 0 108 6 122 0 109 6 122 0 113 6 122 0 116 6 122 0 117 6 122 0 122 6 122 0 124 6 122 0 127 6 122 0 132 6 122 0 133 6 122 0 134 6 122 0 135 6 122 0 139 6 122 0 141 6 122 0 143 6 122 0 144 6 122 0 150 6 122 0 151 6 122 0 162 6 122 0 167 6 122 0 168 6 122 0 171 2 195 0 172 6 122 0 173 6 122 1 144] 
#[1 6 126 0 3 6 126 0 4 6 126 0 5 6 126 0 7 6 126 0 11 6 126 0 13 6 126 0 22 6 126 0 23 6 126 0 28 6 126 0 29 6 126 0 30 6 126 0 31 6 126 0 32 6 126 0 33 6 126 0 34 6 126 0 35 6 126 0 36 6 126 0 37 6 126 0 38 6 126 0 39 6 126 0 40 6 126 0 41 6 126 0 43 6 126 0 45 6 126 0 55 6 126 0 56 6 126 0 58 6 126 0 59 6 126 0 64 6 126 0 66 6 126 0 68 6 126 0 74 6 126 0 77 6 126 0 78 6 126 0 83 6 126 0 85 6 126 0 87 6 126 0 89 6 126 0 90 6 126 0 92 6 126 0 93 6 126 0 97 6 126 0 99 6 126 0 100 6 126 0 101 6 126 0 103 6 126 0 106 6 126 0 107 6 126 0 108 6 126 0 109 6 126 0 113 6 126 0 116 6 126 0 117 6 126 0 122 6 126 0 124 6 126 0 127 6 126 0 132 6 126 0 133 6 126 0 134 6 126 0 135 6 126 0 139 6 126 0 141 6 126 0 143 6 126 0 144 6 126 0 150 6 126 0 151 6 126 0 162 6 126 0 167 6 126 0 168 6 126 0 171 2 199 0 172 6 126 0 173 6 126 1 144] 
#[0 6 130 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 6 134 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 14 97 0 236 14 101 1 38 5 65 1 39 5 69 1 40 14 101 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 14 101 1 47 5 101 1 49 5 105 1 51 14 101 1 53 14 101 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 6 138 0 1 6 138 0 3 6 138 0 4 6 138 0 6 6 138 0 7 6 138 0 8 6 138 0 9 6 138 0 11 6 138 0 13 6 138 0 22 6 138 0 23 6 138 0 25 6 138 0 43 6 138 0 45 6 138 0 54 6 138 0 55 6 138 0 56 6 138 0 58 6 138 0 59 6 138 0 64 6 138 0 66 6 138 0 67 6 138 0 68 6 138 0 78 6 138 0 80 6 138 0 82 6 138 0 83 6 138 0 85 6 138 0 89 6 138 0 90 6 138 0 97 6 138 0 99 6 138 0 100 6 138 0 108 6 138 0 116 6 138 0 117 6 138 0 122 6 138 0 124 6 138 0 125 6 138 0 130 6 138 0 139 6 138 0 144 6 138 0 150 6 138 0 151 6 138 0 155 6 138 0 160 6 138 0 161 6 138 0 162 6 138 0 163 6 138 0 164 6 138 0 165 6 138 0 166 6 138 0 167 6 138 0 168 6 138 0 170 6 138 0 171 2 203 0 172 6 138 0 173 6 138 1 144] 
#[1 6 142 0 1 6 142 0 3 6 142 0 4 6 142 0 6 6 142 0 7 6 142 0 8 6 142 0 9 6 142 0 11 6 142 0 13 6 142 0 22 6 142 0 23 6 142 0 25 6 142 0 43 6 142 0 45 6 142 0 54 6 142 0 55 6 142 0 56 6 142 0 58 6 142 0 59 6 142 0 64 6 142 0 66 6 142 0 67 6 142 0 68 6 142 0 78 6 142 0 80 6 142 0 82 6 142 0 83 6 142 0 85 6 142 0 89 6 142 0 90 6 142 0 97 6 142 0 99 6 142 0 100 6 142 0 108 6 142 0 116 6 142 0 117 6 142 0 122 6 142 0 124 6 142 0 125 6 142 0 130 6 142 0 139 6 142 0 144 6 142 0 150 6 142 0 151 6 142 0 155 6 142 0 160 6 142 0 161 6 142 0 162 6 142 0 163 6 142 0 164 6 142 0 165 6 142 0 166 6 142 0 167 6 142 0 168 6 142 0 170 6 142 0 171 2 207 0 172 6 142 0 173 6 142 1 144] 
#[1 14 113 0 7 14 117 0 13] 
#[1 6 237 0 12 14 121 0 18] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 14 125 0 130 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 14 129 0 236 14 133 1 38 5 65 1 39 5 69 1 40 14 133 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 14 133 1 47 5 101 1 49 5 105 1 51 14 133 1 53 14 133 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 6 146 0 1 6 146 0 3 6 146 0 4 6 146 0 6 6 146 0 7 6 146 0 8 6 146 0 9 6 146 0 11 6 146 0 13 6 146 0 22 6 146 0 23 6 146 0 25 6 146 0 43 6 146 0 45 6 146 0 54 6 146 0 55 6 146 0 56 6 146 0 58 6 146 0 59 6 146 0 64 6 146 0 66 6 146 0 67 6 146 0 68 6 146 0 78 6 146 0 80 6 146 0 82 6 146 0 83 6 146 0 85 6 146 0 89 6 146 0 90 6 146 0 97 6 146 0 99 6 146 0 100 6 146 0 108 6 146 0 116 6 146 0 117 6 146 0 122 6 146 0 124 6 146 0 125 6 146 0 130 6 146 0 139 6 146 0 144 6 146 0 150 6 146 0 151 6 146 0 155 6 146 0 160 6 146 0 161 6 146 0 162 6 146 0 163 6 146 0 164 6 146 0 165 6 146 0 166 6 146 0 167 6 146 0 168 6 146 0 170 6 146 0 171 2 211 0 172 6 146 0 173 6 146 1 144] 
#[1 6 150 0 1 6 150 0 3 6 150 0 4 6 150 0 6 6 150 0 7 6 150 0 8 6 150 0 9 6 150 0 11 6 150 0 13 6 150 0 22 6 150 0 23 6 150 0 25 6 150 0 43 6 150 0 45 6 150 0 54 6 150 0 55 6 150 0 56 6 150 0 58 6 150 0 59 6 150 0 64 6 150 0 66 6 150 0 67 6 150 0 68 6 150 0 78 6 150 0 80 6 150 0 82 6 150 0 83 6 150 0 85 6 150 0 89 6 150 0 90 6 150 0 97 6 150 0 99 6 150 0 100 6 150 0 108 6 150 0 116 6 150 0 117 6 150 0 122 6 150 0 124 6 150 0 125 6 150 0 130 6 150 0 139 6 150 0 144 6 150 0 150 6 150 0 151 6 150 0 155 6 150 0 160 6 150 0 161 6 150 0 162 6 150 0 163 6 150 0 164 6 150 0 165 6 150 0 166 6 150 0 167 6 150 0 168 6 150 0 170 6 150 0 171 2 215 0 172 6 150 0 173 6 150 1 144] 
#[1 6 154 0 4 12 17 0 7 6 154 0 11 12 21 0 13 6 154 0 55 6 154 0 83 6 154 0 97 6 154 0 99 6 154 0 100 6 154 0 122 6 154 0 151 6 154 0 162 2 219 0 172 6 154 0 173 12 29 1 136 6 154 1 144] 
#[1 0 29 0 1 4 221 0 3 6 158 0 4 4 225 0 6 6 158 0 7 4 229 0 8 0 33 0 9 6 158 0 11 6 158 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 223 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 6 158 0 83 1 17 0 85 1 17 0 89 1 17 0 90 6 158 0 97 6 158 0 99 6 158 0 100 1 17 0 108 1 17 0 116 1 17 0 117 6 158 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 6 158 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 227 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 2 231 0 172 6 158 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 14 149 1 132 5 145 1 141 5 145 1 143 6 158 1 144] 
#[1 0 29 0 1 4 221 0 3 6 162 0 4 4 225 0 6 6 162 0 7 4 229 0 8 0 33 0 9 6 162 0 11 6 162 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 235 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 6 162 0 83 1 17 0 85 1 17 0 89 1 17 0 90 6 162 0 97 6 162 0 99 6 162 0 100 1 17 0 108 1 17 0 116 1 17 0 117 6 162 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 6 162 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 239 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 2 243 0 172 6 162 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 14 157 1 132 5 145 1 141 5 145 1 143 6 162 1 144] 
#[1 14 161 0 7 14 165 0 13] 
#[0 6 166 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 6 170 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 14 169 0 4] 
#[0 6 174 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 14 173 0 100 3 105 0 173] 
#[0 6 178 0 100 0 173] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 77 0 173 6 21 0 191 1 17 0 194 6 21 0 195 6 21 0 196 6 21 0 197 14 177 0 202 1 157 1 56 1 157 1 57 1 157 1 58 4 205 1 124 2 105 1 125 6 29 1 126 2 105 1 127 2 117 1 130 2 121 1 131] 
#[0 14 181 0 172] 
#[0 14 185 0 172] 
#[1 0 166 0 3 4 53 0 5 14 189 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 14 193 1 11] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 14 201 1 11] 
#[1 8 65 0 3 6 182 0 173 14 205 0 230] 
#[0 6 186 0 173] 
#[1 3 225 0 173 3 233 0 207 14 209 0 213] 
#[0 6 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 14 213 0 253] 
#[1 8 161 0 3 14 217 0 253] 
#[1 8 161 0 3 14 221 0 253] 
#[0 5 114 0 173] 
#[1 14 225 0 172 4 206 0 173 14 225 1 13] 
#[1 3 225 0 173 3 233 0 207 14 229 0 213] 
#[1 3 225 0 173 3 233 0 207 14 233 0 213] 
#[0 14 237 0 100] 
#[1 14 241 0 26 14 245 0 89 14 249 0 144] 
#[0 14 253 0 123] 
#[1 6 98 0 7 6 98 0 11 6 98 0 22 6 98 0 23 6 98 0 28 6 98 0 29 6 98 0 30 6 98 0 31 6 98 0 32 6 98 0 33 6 98 0 34 6 98 0 35 6 98 0 36 6 98 0 37 6 98 0 38 6 98 0 39 6 98 0 40 6 98 0 41 6 98 0 43 6 98 0 45 6 98 0 55 6 98 0 56 6 98 0 58 6 98 0 59 6 98 0 64 6 98 0 66 6 98 0 68 6 98 0 74 6 98 0 77 6 98 0 78 6 98 0 83 6 98 0 85 6 98 0 87 6 98 0 89 6 98 0 90 6 98 0 92 6 98 0 93 6 98 0 97 6 98 0 99 6 98 0 100 6 98 0 101 6 98 0 103 6 98 0 106 6 98 0 107 6 98 0 108 6 98 0 109 6 98 0 113 6 98 0 116 6 98 0 117 6 98 0 122 6 98 0 124 6 98 0 127 6 98 0 132 6 98 0 133 6 98 0 134 6 98 0 135 6 98 0 139 6 98 0 141 6 98 0 143 6 98 0 144 6 98 0 150 6 98 0 151 6 98 0 162 6 98 0 167 6 98 0 168 6 98 0 171 2 247 0 172 6 98 0 173 6 98 1 144] 
#[0 15 1 0 172] 
#[0 15 5 0 172] 
#[1 8 161 0 3 15 9 0 172 15 13 0 253] 
#[0 15 17 0 172] 
#[0 15 21 0 172] 
#[0 15 25 0 172] 
#[1 8 161 0 3 15 29 0 172 4 206 0 173 15 33 0 253 15 37 1 13] 
#[0 15 41 0 172] 
#[0 15 45 0 172] 
#[0 15 49 0 172] 
#[1 8 161 0 3 15 53 0 172 15 57 0 253] 
#[0 15 61 0 172] 
#[0 15 65 0 172] 
#[0 15 69 0 172] 
#[1 8 161 0 3 15 73 0 172 4 206 0 173 15 77 0 253 15 81 1 13] 
#[0 6 206 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 3 21 0 28 3 21 0 29 3 21 0 30 3 21 0 31 3 21 0 32 3 21 0 33 3 21 0 34 3 21 0 35 3 21 0 36 3 21 0 37 3 21 0 38 3 21 0 39 3 21 0 40 3 21 0 41 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 2 201 0 77 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 2 205 0 92 0 141 0 93 0 149 0 101 0 153 0 103 3 33 0 106 2 209 0 107 1 17 0 108 3 33 0 109 2 213 0 113 1 17 0 116 1 17 0 117 1 17 0 124 2 225 0 127 3 33 0 132 2 229 0 133 3 33 0 134 0 213 0 135 1 17 0 139 2 237 0 141 2 241 0 143 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 2 249 0 172 3 105 0 173 2 253 0 191 1 17 0 194 2 253 0 195 2 253 0 196 2 253 0 197 7 185 0 200 7 185 0 201 7 185 0 203 7 185 0 204 7 185 0 208 3 21 0 209 7 185 0 210 7 185 0 211 3 33 0 223 7 185 0 242 7 185 0 243 7 185 0 247 7 185 0 248 7 185 1 5 7 185 1 6 7 185 1 7 3 53 1 8 7 185 1 9 7 185 1 12 7 185 1 14 7 185 1 15 7 185 1 16 7 185 1 17 7 185 1 18 7 185 1 19 7 185 1 20 7 185 1 21 7 185 1 22 7 185 1 23 1 125 1 25 7 185 1 26 7 185 1 27 7 185 1 28 7 185 1 29 7 185 1 30 7 185 1 34 7 185 1 37 6 210 1 144] 
#[0 6 214 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 85 0 4 10 33 0 18 10 37 0 147] 
#[0 6 218 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 15 89 0 46 15 93 0 47] 
#[1 15 97 0 8 10 25 0 159] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 101 1 38 5 65 1 39 5 69 1 40 15 101 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 101 1 47 5 101 1 49 5 105 1 51 15 101 1 53 15 101 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 105 1 38 5 65 1 39 5 69 1 40 15 105 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 105 1 47 5 101 1 49 5 105 1 51 15 105 1 53 15 105 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 109 1 38 5 65 1 39 5 69 1 40 15 109 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 109 1 47 5 101 1 49 5 105 1 51 15 109 1 53 15 109 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 113 1 38 5 65 1 39 5 69 1 40 15 113 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 113 1 47 5 101 1 49 5 105 1 51 15 113 1 53 15 113 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 117 1 38 5 65 1 39 5 69 1 40 15 117 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 15 121 1 46 15 117 1 47 5 101 1 49 15 125 1 51 15 117 1 53 15 117 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 129 1 38 5 65 1 39 5 69 1 40 15 129 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 129 1 47 5 101 1 49 5 105 1 51 15 129 1 53 15 129 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 133 1 38 5 65 1 39 5 69 1 40 15 133 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 133 1 47 5 101 1 49 5 105 1 51 15 133 1 53 15 133 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 137 1 38 5 65 1 39 5 69 1 40 15 137 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 137 1 47 5 101 1 49 5 105 1 51 15 137 1 53 15 137 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 117 1 38 5 65 1 39 5 69 1 40 15 117 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 15 141 1 46 15 117 1 47 5 101 1 49 15 145 1 51 15 117 1 53 15 117 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 149 1 38 5 65 1 39 5 69 1 40 15 149 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 149 1 47 5 101 1 49 5 105 1 51 15 149 1 53 15 149 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 153 1 38 5 65 1 39 5 69 1 40 15 153 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 153 1 47 5 101 1 49 5 105 1 51 15 153 1 53 15 153 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 15 157 0 114] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 161 1 38 5 65 1 39 5 69 1 40 15 161 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 161 1 47 5 101 1 49 5 105 1 51 15 161 1 53 15 161 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 15 165 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 169 1 38 5 65 1 39 5 69 1 40 15 169 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 169 1 47 5 101 1 49 5 105 1 51 15 169 1 53 15 169 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 15 173 0 7] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 15 177 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 181 1 38 5 65 1 39 5 69 1 40 15 181 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 181 1 47 5 101 1 49 5 105 1 51 15 181 1 53 15 181 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 15 185 0 7] 
#[0 15 209 0 23 0 26 0 45 0 58 0 61 1 59] 
#[1 4 254 0 11 4 254 0 13 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 4 254 0 151 4 254 0 162 2 251 0 172 4 254 0 173 15 217 1 66 4 254 1 144] 
#[1 6 222 0 11 13 65 0 13 6 222 0 55 6 222 0 83 6 222 0 97 6 222 0 99 6 222 0 100 6 222 0 122 6 222 0 151 6 222 0 162 6 222 0 172 6 222 0 173 13 69 1 65 6 222 1 144] 
#[1 4 254 0 11 4 254 0 13 10 33 0 18 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 10 37 0 147 4 254 0 151 4 254 0 162 4 254 0 172 4 254 0 173 15 221 1 66 4 254 1 144] 
#[1 6 226 0 11 13 65 0 13 6 226 0 55 6 226 0 83 6 226 0 97 6 226 0 99 6 226 0 100 6 226 0 122 6 226 0 151 6 226 0 162 6 226 0 172 6 226 0 173 13 69 1 65 6 226 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 15 225 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 229 1 38 5 65 1 39 5 69 1 40 15 229 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 229 1 47 5 101 1 49 5 105 1 51 15 229 1 53 15 229 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 6 230 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 4 254 0 11 4 254 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 2 35 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 4 254 0 83 1 17 0 85 1 17 0 89 1 17 0 90 4 254 0 97 4 254 0 99 4 254 0 100 1 17 0 108 1 17 0 116 1 17 0 117 4 254 0 122 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 254 0 151 4 241 0 155 4 245 0 160 4 249 0 161 2 39 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 4 254 0 172 4 254 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 15 233 1 38 5 65 1 39 5 69 1 40 15 233 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 233 1 47 5 101 1 49 5 105 1 51 15 233 1 53 15 233 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 15 237 1 66 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143 4 254 1 144] 
#[1 4 254 0 11 4 254 0 13 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 4 254 0 151 4 254 0 162 2 255 0 172 4 254 0 173 15 245 1 66 4 254 1 144] 
#[1 6 234 0 11 13 65 0 13 6 234 0 55 6 234 0 83 6 234 0 97 6 234 0 99 6 234 0 100 6 234 0 122 6 234 0 151 6 234 0 162 6 234 0 172 6 234 0 173 13 69 1 65 6 234 1 144] 
#[0 15 249 0 172] 
#[1 8 65 0 3 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 78 0 166 0 85 0 166 0 89 0 166 0 90 0 166 0 100 0 166 0 108 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 139 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 16 1 0 228 16 1 0 229 15 253 0 230 16 1 0 233] 
#[0 6 238 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 5 1 38 5 65 1 39 5 69 1 40 16 5 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 5 1 47 5 101 1 49 5 105 1 51 16 5 1 53 16 5 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 9 1 38 5 65 1 39 5 69 1 40 16 9 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 9 1 47 5 101 1 49 5 105 1 51 16 9 1 53 16 9 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 4 53 0 5 3 7 0 7 3 7 0 11 3 7 0 22 3 7 0 23 3 7 0 28 3 7 0 29 3 7 0 30 3 7 0 31 3 7 0 32 3 7 0 33 3 7 0 34 3 7 0 35 3 7 0 36 3 7 0 37 3 7 0 38 3 7 0 39 3 7 0 40 3 7 0 41 3 7 0 43 3 7 0 45 3 7 0 55 3 7 0 56 3 7 0 58 3 7 0 59 3 7 0 64 3 7 0 66 3 7 0 68 3 7 0 74 3 7 0 77 3 7 0 78 3 7 0 83 3 7 0 85 3 7 0 87 3 7 0 89 3 7 0 90 3 7 0 92 3 7 0 93 3 7 0 97 3 7 0 99 3 7 0 100 3 7 0 101 3 7 0 103 3 7 0 106 3 7 0 107 3 7 0 108 3 7 0 109 3 7 0 113 3 7 0 116 3 7 0 117 3 7 0 122 3 7 0 124 3 7 0 127 3 7 0 132 3 7 0 133 3 7 0 134 3 7 0 135 3 7 0 139 3 7 0 141 3 7 0 143 3 7 0 144 3 7 0 150 3 7 0 151 3 7 0 162 3 7 0 167 3 7 0 168 3 7 0 171 3 11 0 172 3 7 0 173 16 13 0 228 16 13 0 229 16 13 0 233 3 7 1 144] 
#[0 6 246 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 6 250 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 16 17 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 21 1 38 5 65 1 39 5 69 1 40 16 21 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 21 1 47 5 101 1 49 5 105 1 51 16 21 1 53 16 21 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 6 254 0 4 0 7] 
#[1 16 25 0 4 13 117 0 7 13 121 0 231] 
#[0 7 2 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 6 41 0 69 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 6 45 0 191 1 17 0 194 6 45 0 195 6 45 0 196 6 45 0 197 16 29 1 24] 
#[0 7 6 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 10 0 11 7 10 0 55 7 10 0 83 7 10 0 97 7 10 0 99 7 10 0 100 7 10 0 122 7 10 0 151 7 10 0 162 3 15 0 172 7 10 0 173 7 10 1 144] 
#[1 16 33 0 122 3 217 0 162 16 37 0 182] 
#[0 7 14 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 16 41 0 172] 
#[1 16 45 0 122 3 217 0 162 16 49 0 182] 
#[0 16 53 0 172] 
#[1 8 121 0 11 0 6 0 55 0 6 0 83 0 6 0 97 0 6 0 99 0 6 0 100 0 6 0 122 0 6 0 151 0 6 0 162 8 125 0 172 1 215 0 173 16 57 0 177 8 137 0 214 8 141 0 216 8 145 0 217] 
#[1 7 18 0 55 7 18 0 83 7 18 0 97 7 18 0 99 7 18 0 100 7 18 0 122 7 18 0 151 7 18 0 162 3 19 0 173] 
#[0 7 22 0 1 0 9 0 11 0 22 0 23 0 25 0 27 0 42 0 43 0 44 0 45 0 49 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 64 0 66 0 68 0 74 0 76 0 78 0 85 0 87 0 89 0 90 0 93 0 94 0 101 0 103 0 104 0 106 0 108 0 109 0 110 0 111 0 112 0 116 0 117 0 124 0 126 0 127 0 132 0 134 0 135 0 136 0 137 0 138 0 139 0 141 0 144 0 150 0 152 0 153 0 162 0 167 0 168 0 171 0 172 0 173] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 16 61 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 61 0 201 16 61 0 203 16 61 0 212 1 49 0 223 16 61 0 234 1 57 0 235 16 61 0 236 16 61 0 237 16 61 0 238 16 61 0 239 16 61 0 240 16 61 0 241 16 61 0 242 16 61 0 243 16 61 0 247 16 61 0 248 16 61 1 18 16 61 1 19 16 61 1 20 16 61 1 21 16 61 1 22 16 61 1 23 1 125 1 25 16 61 1 26 16 61 1 27 16 61 1 28 16 61 1 29 16 61 1 30 16 61 1 34 16 61 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 61 1 62 16 61 1 63 16 61 1 64 16 61 1 67 16 61 1 68 16 61 1 69 16 61 1 70 16 61 1 71 16 61 1 72 16 61 1 73 16 61 1 74 16 61 1 75 16 61 1 76 16 61 1 77 16 61 1 78 16 61 1 79 16 61 1 80 16 61 1 81 16 61 1 82 16 61 1 83 16 61 1 84 16 61 1 85 16 61 1 90 16 61 1 91 2 9 1 92 16 61 1 97 16 61 1 100 16 61 1 101 16 61 1 102 16 61 1 103 16 61 1 104 16 61 1 109 16 61 1 110 16 61 1 111 16 61 1 112 16 61 1 113 16 61 1 114 16 61 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 61 1 129 2 117 1 130 2 121 1 131 16 61 1 139 16 61 1 140 16 61 1 142] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 65 1 38 5 65 1 39 5 69 1 40 16 65 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 65 1 47 5 101 1 49 5 105 1 51 16 65 1 53 16 65 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 69 1 38 5 65 1 39 5 69 1 40 16 69 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 69 1 47 5 101 1 49 5 105 1 51 16 69 1 53 16 69 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 16 73 0 148 16 77 0 152] 
#[0 16 81 0 172] 
#[1 7 26 0 22 7 26 0 23 7 26 0 43 7 26 0 45 7 26 0 55 7 26 0 56 7 26 0 58 7 26 0 59 7 26 0 64 7 26 0 66 7 26 0 68 7 26 0 78 7 26 0 85 7 26 0 89 7 26 0 90 7 26 0 100 7 26 0 108 7 26 0 116 7 26 0 117 7 26 0 124 7 26 0 139 7 26 0 144 7 26 0 150 7 26 0 167 7 26 0 168 7 26 0 171 16 85 0 172 7 26 0 173] 
#[0 7 30 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 9 53 0 80 16 97 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 16 89 0 130 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 93 0 191 1 17 0 194 16 93 0 195 16 93 0 196 16 93 0 197 16 97 0 252] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 101 0 191 1 17 0 194 16 101 0 195 16 101 0 196 16 101 0 197] 
#[0 7 34 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 16 105 0 228 16 105 0 229 16 105 0 233 16 105 1 1 16 105 1 2] 
#[0 7 38 0 4 0 7 0 172] 
#[0 7 42 0 4 0 7 0 172] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 16 117 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 16 121 0 130 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 16 125 0 191 1 17 0 194 16 125 0 195 16 125 0 196 16 125 0 197] 
#[1 16 129 0 4 16 133 0 7 16 137 0 172 16 141 0 254] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 16 145 0 182 16 145 0 191 1 17 0 194 16 145 0 195 16 145 0 196 16 145 0 197 16 145 1 43 16 145 1 105] 
#[0 7 50 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 16 149 0 172 16 153 0 182 16 153 0 191 1 17 0 194 16 153 0 195 16 153 0 196 16 153 0 197 16 153 1 43 16 153 1 105] 
#[1 0 29 0 1 0 33 0 9 7 54 0 11 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 3 27 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 16 157 0 76 1 17 0 78 7 54 0 83 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 7 54 0 97 7 54 0 99 7 54 0 100 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 7 54 0 122 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 7 54 0 151 0 245 0 152 0 249 0 153 7 54 0 162 0 253 0 167 1 1 0 168 1 5 0 171 3 31 0 172 7 54 0 173 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 157 0 201 16 157 0 203 16 157 0 212 16 161 0 220 1 49 0 223 16 157 0 234 1 57 0 235 16 157 0 236 16 157 0 237 16 157 0 238 16 157 0 239 16 157 0 240 16 157 0 241 16 157 0 242 16 157 0 243 16 157 0 247 16 157 0 248 16 157 1 18 16 157 1 19 16 157 1 20 16 157 1 21 16 157 1 22 16 157 1 23 1 125 1 25 16 157 1 26 16 157 1 27 16 157 1 28 16 157 1 29 16 157 1 30 16 157 1 34 16 157 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 157 1 62 16 157 1 63 16 157 1 64 16 157 1 67 16 157 1 68 16 157 1 69 16 157 1 70 16 157 1 71 16 157 1 72 16 157 1 73 16 157 1 74 16 157 1 75 16 157 1 76 16 157 1 77 16 157 1 78 16 157 1 79 16 157 1 80 16 157 1 81 16 157 1 82 16 157 1 83 16 157 1 84 16 157 1 85 16 157 1 90 16 157 1 91 2 9 1 92 16 157 1 97 16 157 1 100 16 157 1 101 16 157 1 102 16 157 1 103 16 157 1 104 16 157 1 109 16 157 1 110 16 157 1 111 16 157 1 112 16 157 1 113 16 157 1 114 16 157 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 157 1 129 2 117 1 130 2 121 1 131 16 157 1 139 16 157 1 140 16 157 1 142 7 54 1 144] 
#[1 7 58 0 97 7 58 0 99 7 58 0 100 7 58 0 162 16 165 1 87] 
#[1 7 62 0 11 7 62 0 55 7 62 0 83 7 62 0 97 7 62 0 99 7 62 0 100 7 62 0 122 7 62 0 151 7 62 0 162 3 35 0 172 7 62 0 173 7 62 1 144] 
#[0 7 66 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 7 70 0 11 7 70 0 55 7 70 0 83 7 70 0 97 7 70 0 99 7 70 0 100 7 70 0 122 7 70 0 151 7 70 0 162 3 39 0 172 7 70 0 173 7 70 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 177 1 38 5 65 1 39 5 69 1 40 16 177 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 177 1 47 5 101 1 49 5 105 1 51 16 177 1 53 16 177 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 16 181 0 55] 
#[1 7 74 0 83 7 74 0 100 7 74 0 162 6 77 0 173 16 185 1 99] 
#[0 7 78 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 16 189 0 151] 
#[0 16 193 0 153] 
#[0 16 197 0 100] 
#[1 7 82 0 11 7 82 0 22 7 82 0 23 7 82 0 28 7 82 0 29 7 82 0 30 7 82 0 31 7 82 0 32 7 82 0 33 7 82 0 34 7 82 0 35 7 82 0 36 7 82 0 37 7 82 0 38 7 82 0 39 7 82 0 40 7 82 0 41 7 82 0 43 7 82 0 45 7 82 0 55 7 82 0 56 7 82 0 58 7 82 0 59 7 82 0 64 7 82 0 66 7 82 0 68 7 82 0 74 7 82 0 77 7 82 0 78 7 82 0 83 7 82 0 85 7 82 0 87 7 82 0 89 7 82 0 90 7 82 0 92 7 82 0 93 7 82 0 97 7 82 0 99 7 82 0 100 7 82 0 101 7 82 0 103 7 82 0 106 7 82 0 107 7 82 0 108 7 82 0 109 7 82 0 113 7 82 0 116 7 82 0 117 7 82 0 122 7 82 0 124 7 82 0 127 7 82 0 132 7 82 0 133 7 82 0 134 7 82 0 135 7 82 0 139 7 82 0 141 7 82 0 143 7 82 0 144 7 82 0 150 7 82 0 151 7 82 0 162 7 82 0 167 7 82 0 168 7 82 0 171 3 43 0 172 7 82 0 173 7 82 1 144] 
#[1 5 161 0 9 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 5 165 0 56 1 17 0 58 1 17 0 59 5 169 0 64 1 17 0 66 1 17 0 68 1 17 0 78 16 201 0 79 16 201 0 81 5 181 0 85 16 201 0 88 1 17 0 89 5 189 0 90 16 201 0 91 16 201 0 95 1 17 0 108 16 201 0 115 1 17 0 116 1 17 0 117 16 201 0 119 16 201 0 120 16 201 0 121 1 17 0 124 1 17 0 139 16 201 0 140 1 17 0 144 5 221 0 149 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 5 225 0 191 1 17 0 194 5 225 0 195 5 225 0 196 5 225 0 197 16 201 0 221 5 233 0 222 16 201 0 224 5 241 0 225 5 245 0 226 16 201 0 227] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 16 205 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 209 1 38 5 65 1 39 5 69 1 40 16 209 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 209 1 47 5 101 1 49 5 105 1 51 16 209 1 53 16 209 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 16 213 0 5] 
#[1 7 86 0 7 7 86 0 11 7 86 0 22 7 86 0 23 7 86 0 28 7 86 0 29 7 86 0 30 7 86 0 31 7 86 0 32 7 86 0 33 7 86 0 34 7 86 0 35 7 86 0 36 7 86 0 37 7 86 0 38 7 86 0 39 7 86 0 40 7 86 0 41 7 86 0 43 7 86 0 45 7 86 0 55 7 86 0 56 7 86 0 58 7 86 0 59 7 86 0 64 7 86 0 66 7 86 0 68 7 86 0 74 7 86 0 77 7 86 0 78 7 86 0 83 7 86 0 85 7 86 0 87 7 86 0 89 7 86 0 90 7 86 0 92 7 86 0 93 7 86 0 97 7 86 0 99 7 86 0 100 7 86 0 101 7 86 0 103 7 86 0 106 7 86 0 107 7 86 0 108 7 86 0 109 7 86 0 113 7 86 0 116 7 86 0 117 7 86 0 122 7 86 0 124 7 86 0 127 7 86 0 132 7 86 0 133 7 86 0 134 7 86 0 135 7 86 0 139 7 86 0 141 7 86 0 143 7 86 0 144 7 86 0 150 7 86 0 151 7 86 0 162 7 86 0 167 7 86 0 168 7 86 0 171 3 47 0 172 7 86 0 173 7 86 1 144] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 78 0 6 0 85 0 6 0 89 0 6 0 90 0 6 0 100 0 6 0 108 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 139 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 217 0 177 10 185 0 244] 
#[1 0 6 0 22 0 6 0 23 0 6 0 43 0 6 0 45 0 6 0 55 0 6 0 56 0 6 0 58 0 6 0 59 0 6 0 64 0 6 0 66 0 6 0 68 0 6 0 78 0 6 0 85 0 6 0 89 0 6 0 90 0 6 0 100 0 6 0 108 0 6 0 116 0 6 0 117 0 6 0 124 0 6 0 139 0 6 0 144 0 6 0 150 0 6 0 167 0 6 0 168 0 6 0 171 0 6 0 173 16 221 0 177 11 41 0 249] 
#[1 8 161 0 3 16 225 0 253] 
#[0 7 90 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 229 1 38 5 65 1 39 5 69 1 40 16 229 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 229 1 47 5 101 1 49 5 105 1 51 16 229 1 53 16 229 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 233 1 38 5 65 1 39 5 69 1 40 16 233 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 233 1 47 5 101 1 49 5 105 1 51 16 233 1 53 16 233 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 237 1 38 5 65 1 39 5 69 1 40 16 237 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 237 1 47 5 101 1 49 5 105 1 51 16 237 1 53 16 237 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 16 241 1 38 5 65 1 39 5 69 1 40 16 241 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 16 241 1 47 5 101 1 49 5 105 1 51 16 241 1 53 16 241 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 7 94 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 98 0 3 7 98 0 4 7 98 0 5 7 98 0 7 7 98 0 11 7 98 0 13 7 98 0 22 7 98 0 23 7 98 0 28 7 98 0 29 7 98 0 30 7 98 0 31 7 98 0 32 7 98 0 33 7 98 0 34 7 98 0 35 7 98 0 36 7 98 0 37 7 98 0 38 7 98 0 39 7 98 0 40 7 98 0 41 7 98 0 43 7 98 0 45 7 98 0 55 7 98 0 56 7 98 0 58 7 98 0 59 7 98 0 64 7 98 0 66 7 98 0 68 7 98 0 74 7 98 0 77 7 98 0 78 7 98 0 83 7 98 0 85 7 98 0 87 7 98 0 89 7 98 0 90 7 98 0 92 7 98 0 93 7 98 0 97 7 98 0 99 7 98 0 100 7 98 0 101 7 98 0 103 7 98 0 106 7 98 0 107 7 98 0 108 7 98 0 109 7 98 0 113 7 98 0 116 7 98 0 117 7 98 0 122 7 98 0 124 7 98 0 127 7 98 0 132 7 98 0 133 7 98 0 134 7 98 0 135 7 98 0 139 7 98 0 141 7 98 0 143 7 98 0 144 7 98 0 150 7 98 0 151 7 98 0 162 7 98 0 167 7 98 0 168 7 98 0 171 3 51 0 172 7 98 0 173 7 98 1 144] 
#[0 7 102 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 106 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 7 110 0 1 7 110 0 3 7 110 0 4 7 110 0 6 7 110 0 7 7 110 0 8 7 110 0 9 7 110 0 11 7 110 0 13 7 110 0 22 7 110 0 23 7 110 0 25 7 110 0 43 7 110 0 45 7 110 0 54 7 110 0 55 7 110 0 56 7 110 0 58 7 110 0 59 7 110 0 64 7 110 0 66 7 110 0 67 7 110 0 68 7 110 0 78 7 110 0 80 7 110 0 82 7 110 0 83 7 110 0 85 7 110 0 89 7 110 0 90 7 110 0 97 7 110 0 99 7 110 0 100 7 110 0 108 7 110 0 116 7 110 0 117 7 110 0 122 7 110 0 124 7 110 0 125 7 110 0 130 7 110 0 139 7 110 0 144 7 110 0 150 7 110 0 151 7 110 0 155 7 110 0 160 7 110 0 161 7 110 0 162 7 110 0 163 7 110 0 164 7 110 0 165 7 110 0 166 7 110 0 167 7 110 0 168 7 110 0 170 7 110 0 171 3 55 0 172 7 110 0 173 7 110 1 144] 
#[1 7 114 0 1 7 114 0 3 7 114 0 4 7 114 0 6 7 114 0 7 7 114 0 8 7 114 0 9 7 114 0 11 7 114 0 13 7 114 0 22 7 114 0 23 7 114 0 25 7 114 0 43 7 114 0 45 7 114 0 54 7 114 0 55 7 114 0 56 7 114 0 58 7 114 0 59 7 114 0 64 7 114 0 66 7 114 0 67 7 114 0 68 7 114 0 78 7 114 0 80 7 114 0 82 7 114 0 83 7 114 0 85 7 114 0 89 7 114 0 90 7 114 0 97 7 114 0 99 7 114 0 100 7 114 0 108 7 114 0 116 7 114 0 117 7 114 0 122 7 114 0 124 7 114 0 125 7 114 0 130 7 114 0 139 7 114 0 144 7 114 0 150 7 114 0 151 7 114 0 155 7 114 0 160 7 114 0 161 7 114 0 162 7 114 0 163 7 114 0 164 7 114 0 165 7 114 0 166 7 114 0 167 7 114 0 168 7 114 0 170 7 114 0 171 3 59 0 172 7 114 0 173 7 114 1 144] 
#[0 16 253 0 172] 
#[0 17 1 0 172] 
#[0 7 118 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 122 0 3 7 122 0 4 7 122 0 5 7 122 0 7 7 122 0 11 7 122 0 13 7 122 0 22 7 122 0 23 7 122 0 28 7 122 0 29 7 122 0 30 7 122 0 31 7 122 0 32 7 122 0 33 7 122 0 34 7 122 0 35 7 122 0 36 7 122 0 37 7 122 0 38 7 122 0 39 7 122 0 40 7 122 0 41 7 122 0 43 7 122 0 45 7 122 0 55 7 122 0 56 7 122 0 58 7 122 0 59 7 122 0 64 7 122 0 66 7 122 0 68 7 122 0 74 7 122 0 77 7 122 0 78 7 122 0 83 7 122 0 85 7 122 0 87 7 122 0 89 7 122 0 90 7 122 0 92 7 122 0 93 7 122 0 97 7 122 0 99 7 122 0 100 7 122 0 101 7 122 0 103 7 122 0 106 7 122 0 107 7 122 0 108 7 122 0 109 7 122 0 113 7 122 0 116 7 122 0 117 7 122 0 122 7 122 0 124 7 122 0 127 7 122 0 132 7 122 0 133 7 122 0 134 7 122 0 135 7 122 0 139 7 122 0 141 7 122 0 143 7 122 0 144 7 122 0 150 7 122 0 151 7 122 0 162 7 122 0 167 7 122 0 168 7 122 0 171 3 63 0 172 7 122 0 173 7 122 1 144] 
#[0 7 126 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 7 130 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 7 134 0 4 4 225 0 6 7 134 0 7 4 229 0 8 0 33 0 9 7 134 0 11 7 134 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 67 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 7 134 0 83 1 17 0 85 1 17 0 89 1 17 0 90 7 134 0 97 7 134 0 99 7 134 0 100 1 17 0 108 1 17 0 116 1 17 0 117 7 134 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 7 134 0 151 4 241 0 155 4 245 0 160 4 249 0 161 3 71 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 7 134 0 172 7 134 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 17 5 1 132 5 145 1 141 5 145 1 143 7 134 1 144] 
#[0 7 138 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 7 142 0 4 4 225 0 6 7 142 0 7 4 229 0 8 0 33 0 9 7 142 0 11 7 142 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 75 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 7 142 0 83 1 17 0 85 1 17 0 89 1 17 0 90 7 142 0 97 7 142 0 99 7 142 0 100 1 17 0 108 1 17 0 116 1 17 0 117 7 142 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 7 142 0 151 4 241 0 155 4 245 0 160 4 249 0 161 3 79 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 7 142 0 172 7 142 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 17 9 1 132 5 145 1 141 5 145 1 143 7 142 1 144] 
#[0 7 146 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 7 150 0 4 4 225 0 6 7 150 0 7 4 229 0 8 0 33 0 9 7 150 0 11 7 150 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 83 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 7 150 0 83 1 17 0 85 1 17 0 89 1 17 0 90 7 150 0 97 7 150 0 99 7 150 0 100 1 17 0 108 1 17 0 116 1 17 0 117 7 150 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 7 150 0 151 4 241 0 155 4 245 0 160 4 249 0 161 3 87 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 3 91 0 172 7 150 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 17 17 1 132 5 145 1 141 5 145 1 143 7 150 1 144] 
#[1 0 29 0 1 4 221 0 3 7 154 0 4 4 225 0 6 7 154 0 7 4 229 0 8 0 33 0 9 7 154 0 11 7 154 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 95 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 7 154 0 83 1 17 0 85 1 17 0 89 1 17 0 90 7 154 0 97 7 154 0 99 7 154 0 100 1 17 0 108 1 17 0 116 1 17 0 117 7 154 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 7 154 0 151 4 241 0 155 4 245 0 160 4 249 0 161 3 99 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 3 103 0 172 7 154 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 17 25 1 132 5 145 1 141 5 145 1 143 7 154 1 144] 
#[0 7 158 0 1 0 3 0 4 0 5 0 7 0 9 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 166 0 100 0 173] 
#[0 17 29 0 118] 
#[0 17 33 0 118] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 17 37 1 11] 
#[1 3 225 0 173 3 233 0 207 17 41 0 213] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 17 45 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 17 49 1 38 5 65 1 39 5 69 1 40 17 49 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 17 49 1 47 5 101 1 49 5 105 1 51 17 49 1 53 17 49 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 3 225 0 173 3 233 0 207 17 53 0 213] 
#[0 7 170 0 173] 
#[0 17 57 0 100] 
#[1 0 166 0 3 4 53 0 5 8 69 0 172 3 107 0 173 3 233 0 207 17 61 0 213 17 65 0 228 17 65 0 229 17 65 0 233] 
#[1 3 225 0 173 3 233 0 207 17 69 0 213] 
#[1 3 225 0 173 3 233 0 207 17 73 0 213] 
#[1 3 225 0 173 3 233 0 207 17 77 0 213] 
#[0 17 81 0 100] 
#[0 17 85 0 100] 
#[0 17 89 0 172] 
#[0 7 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 7 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 93 0 191 1 17 0 194 17 93 0 195 17 93 0 196 17 93 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 97 0 191 1 17 0 194 17 97 0 195 17 97 0 196 17 97 0 197] 
#[1 8 161 0 3 17 101 0 253] 
#[1 0 166 0 3 4 53 0 5 17 105 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 17 109 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 113 0 191 1 17 0 194 17 113 0 195 17 113 0 196 17 113 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 117 0 191 1 17 0 194 17 117 0 195 17 117 0 196 17 117 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 121 0 191 1 17 0 194 17 121 0 195 17 121 0 196 17 121 0 197] 
#[1 8 161 0 3 17 129 0 172 2 123 0 173 17 125 0 253 17 129 1 13] 
#[1 17 133 0 172 4 206 0 173 17 133 1 13] 
#[1 3 225 0 173 3 233 0 207 17 137 0 213] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 141 0 191 1 17 0 194 17 141 0 195 17 141 0 196 17 141 0 197] 
#[1 17 145 0 108 17 149 0 117 17 153 0 139] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 157 0 191 1 17 0 194 17 157 0 195 17 157 0 196 17 157 0 197] 
#[1 8 161 0 3 17 161 0 253] 
#[1 0 166 0 3 4 53 0 5 17 165 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 17 169 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 173 0 191 1 17 0 194 17 173 0 195 17 173 0 196 17 173 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 177 0 191 1 17 0 194 17 177 0 195 17 177 0 196 17 177 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 17 181 0 191 1 17 0 194 17 181 0 195 17 181 0 196 17 181 0 197] 
#[1 8 161 0 3 17 189 0 172 2 123 0 173 17 185 0 253 17 189 1 13] 
#[1 17 193 0 172 4 206 0 173 17 193 1 13] 
#[1 3 225 0 173 3 233 0 207 17 197 0 213] 
#[0 7 190 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 17 201 0 172] 
#[0 17 205 0 172] 
#[1 7 233 0 159 17 209 0 190] 
#[1 7 194 0 3 7 194 0 4 7 194 0 5 7 194 0 7 7 194 0 11 7 194 0 13 7 194 0 22 7 194 0 23 7 194 0 28 7 194 0 29 7 194 0 30 7 194 0 31 7 194 0 32 7 194 0 33 7 194 0 34 7 194 0 35 7 194 0 36 7 194 0 37 7 194 0 38 7 194 0 39 7 194 0 40 7 194 0 41 7 194 0 43 7 194 0 45 7 194 0 55 7 194 0 56 7 194 0 58 7 194 0 59 7 194 0 64 7 194 0 66 7 194 0 68 7 194 0 74 7 194 0 77 7 194 0 78 7 194 0 83 7 194 0 85 7 194 0 87 7 194 0 89 7 194 0 90 7 194 0 92 7 194 0 93 7 194 0 97 7 194 0 99 7 194 0 100 7 194 0 101 7 194 0 103 7 194 0 106 7 194 0 107 7 194 0 108 7 194 0 109 7 194 0 113 7 194 0 116 7 194 0 117 7 194 0 122 7 194 0 124 7 194 0 127 7 194 0 132 7 194 0 133 7 194 0 134 7 194 0 135 7 194 0 139 7 194 0 141 7 194 0 143 7 194 0 144 7 194 0 150 7 194 0 151 7 194 0 162 7 194 0 167 7 194 0 168 7 194 0 171 3 111 0 172 7 194 0 173 7 194 1 144] 
#[1 7 198 0 3 7 198 0 4 7 198 0 5 7 198 0 7 7 198 0 11 7 198 0 13 7 198 0 22 7 198 0 23 7 198 0 28 7 198 0 29 7 198 0 30 7 198 0 31 7 198 0 32 7 198 0 33 7 198 0 34 7 198 0 35 7 198 0 36 7 198 0 37 7 198 0 38 7 198 0 39 7 198 0 40 7 198 0 41 7 198 0 43 7 198 0 45 7 198 0 55 7 198 0 56 7 198 0 58 7 198 0 59 7 198 0 64 7 198 0 66 7 198 0 68 7 198 0 74 7 198 0 77 7 198 0 78 7 198 0 83 7 198 0 85 7 198 0 87 7 198 0 89 7 198 0 90 7 198 0 92 7 198 0 93 7 198 0 97 7 198 0 99 7 198 0 100 7 198 0 101 7 198 0 103 7 198 0 106 7 198 0 107 7 198 0 108 7 198 0 109 7 198 0 113 7 198 0 116 7 198 0 117 7 198 0 122 7 198 0 124 7 198 0 127 7 198 0 132 7 198 0 133 7 198 0 134 7 198 0 135 7 198 0 139 7 198 0 141 7 198 0 143 7 198 0 144 7 198 0 150 7 198 0 151 7 198 0 162 7 198 0 167 7 198 0 168 7 198 0 171 3 115 0 172 7 198 0 173 7 198 1 144] 
#[1 7 202 0 3 7 202 0 4 7 202 0 5 7 202 0 7 7 202 0 11 7 202 0 13 7 202 0 22 7 202 0 23 7 202 0 28 7 202 0 29 7 202 0 30 7 202 0 31 7 202 0 32 7 202 0 33 7 202 0 34 7 202 0 35 7 202 0 36 7 202 0 37 7 202 0 38 7 202 0 39 7 202 0 40 7 202 0 41 7 202 0 43 7 202 0 45 7 202 0 55 7 202 0 56 7 202 0 58 7 202 0 59 7 202 0 64 7 202 0 66 7 202 0 68 7 202 0 74 7 202 0 77 7 202 0 78 7 202 0 83 7 202 0 85 7 202 0 87 7 202 0 89 7 202 0 90 7 202 0 92 7 202 0 93 7 202 0 97 7 202 0 99 7 202 0 100 7 202 0 101 7 202 0 103 7 202 0 106 7 202 0 107 7 202 0 108 7 202 0 109 7 202 0 113 7 202 0 116 7 202 0 117 7 202 0 122 7 202 0 124 7 202 0 127 7 202 0 132 7 202 0 133 7 202 0 134 7 202 0 135 7 202 0 139 7 202 0 141 7 202 0 143 7 202 0 144 7 202 0 150 7 202 0 151 7 202 0 162 7 202 0 167 7 202 0 168 7 202 0 171 3 119 0 172 7 202 0 173 7 202 1 144] 
#[1 7 206 0 3 7 206 0 4 7 206 0 5 7 206 0 7 7 206 0 11 7 206 0 13 7 206 0 22 7 206 0 23 7 206 0 28 7 206 0 29 7 206 0 30 7 206 0 31 7 206 0 32 7 206 0 33 7 206 0 34 7 206 0 35 7 206 0 36 7 206 0 37 7 206 0 38 7 206 0 39 7 206 0 40 7 206 0 41 7 206 0 43 7 206 0 45 7 206 0 55 7 206 0 56 7 206 0 58 7 206 0 59 7 206 0 64 7 206 0 66 7 206 0 68 7 206 0 74 7 206 0 77 7 206 0 78 7 206 0 83 7 206 0 85 7 206 0 87 7 206 0 89 7 206 0 90 7 206 0 92 7 206 0 93 7 206 0 97 7 206 0 99 7 206 0 100 7 206 0 101 7 206 0 103 7 206 0 106 7 206 0 107 7 206 0 108 7 206 0 109 7 206 0 113 7 206 0 116 7 206 0 117 7 206 0 122 7 206 0 124 7 206 0 127 7 206 0 132 7 206 0 133 7 206 0 134 7 206 0 135 7 206 0 139 7 206 0 141 7 206 0 143 7 206 0 144 7 206 0 150 7 206 0 151 7 206 0 162 7 206 0 167 7 206 0 168 7 206 0 171 3 123 0 172 7 206 0 173 7 206 1 144] 
#[0 7 245 0 172] 
#[1 7 210 0 3 7 210 0 4 7 210 0 5 7 210 0 7 7 210 0 11 7 210 0 13 7 210 0 22 7 210 0 23 7 210 0 28 7 210 0 29 7 210 0 30 7 210 0 31 7 210 0 32 7 210 0 33 7 210 0 34 7 210 0 35 7 210 0 36 7 210 0 37 7 210 0 38 7 210 0 39 7 210 0 40 7 210 0 41 7 210 0 43 7 210 0 45 7 210 0 55 7 210 0 56 7 210 0 58 7 210 0 59 7 210 0 64 7 210 0 66 7 210 0 68 7 210 0 74 7 210 0 77 7 210 0 78 7 210 0 83 7 210 0 85 7 210 0 87 7 210 0 89 7 210 0 90 7 210 0 92 7 210 0 93 7 210 0 97 7 210 0 99 7 210 0 100 7 210 0 101 7 210 0 103 7 210 0 106 7 210 0 107 7 210 0 108 7 210 0 109 7 210 0 113 7 210 0 116 7 210 0 117 7 210 0 122 7 210 0 124 7 210 0 127 7 210 0 132 7 210 0 133 7 210 0 134 7 210 0 135 7 210 0 139 7 210 0 141 7 210 0 143 7 210 0 144 7 210 0 150 7 210 0 151 7 210 0 162 7 210 0 167 7 210 0 168 7 210 0 171 3 127 0 172 7 210 0 173 7 210 1 144] 
#[1 7 214 0 3 7 214 0 4 7 214 0 5 7 214 0 7 7 214 0 11 7 214 0 13 7 214 0 22 7 214 0 23 7 214 0 28 7 214 0 29 7 214 0 30 7 214 0 31 7 214 0 32 7 214 0 33 7 214 0 34 7 214 0 35 7 214 0 36 7 214 0 37 7 214 0 38 7 214 0 39 7 214 0 40 7 214 0 41 7 214 0 43 7 214 0 45 7 214 0 55 7 214 0 56 7 214 0 58 7 214 0 59 7 214 0 64 7 214 0 66 7 214 0 68 7 214 0 74 7 214 0 77 7 214 0 78 7 214 0 83 7 214 0 85 7 214 0 87 7 214 0 89 7 214 0 90 7 214 0 92 7 214 0 93 7 214 0 97 7 214 0 99 7 214 0 100 7 214 0 101 7 214 0 103 7 214 0 106 7 214 0 107 7 214 0 108 7 214 0 109 7 214 0 113 7 214 0 116 7 214 0 117 7 214 0 122 7 214 0 124 7 214 0 127 7 214 0 132 7 214 0 133 7 214 0 134 7 214 0 135 7 214 0 139 7 214 0 141 7 214 0 143 7 214 0 144 7 214 0 150 7 214 0 151 7 214 0 162 7 214 0 167 7 214 0 168 7 214 0 171 3 131 0 172 7 214 0 173 7 214 1 144] 
#[1 7 218 0 3 7 218 0 4 7 218 0 5 7 218 0 7 7 218 0 11 7 218 0 13 7 218 0 22 7 218 0 23 7 218 0 28 7 218 0 29 7 218 0 30 7 218 0 31 7 218 0 32 7 218 0 33 7 218 0 34 7 218 0 35 7 218 0 36 7 218 0 37 7 218 0 38 7 218 0 39 7 218 0 40 7 218 0 41 7 218 0 43 7 218 0 45 7 218 0 55 7 218 0 56 7 218 0 58 7 218 0 59 7 218 0 64 7 218 0 66 7 218 0 68 7 218 0 74 7 218 0 77 7 218 0 78 7 218 0 83 7 218 0 85 7 218 0 87 7 218 0 89 7 218 0 90 7 218 0 92 7 218 0 93 7 218 0 97 7 218 0 99 7 218 0 100 7 218 0 101 7 218 0 103 7 218 0 106 7 218 0 107 7 218 0 108 7 218 0 109 7 218 0 113 7 218 0 116 7 218 0 117 7 218 0 122 7 218 0 124 7 218 0 127 7 218 0 132 7 218 0 133 7 218 0 134 7 218 0 135 7 218 0 139 7 218 0 141 7 218 0 143 7 218 0 144 7 218 0 150 7 218 0 151 7 218 0 162 7 218 0 167 7 218 0 168 7 218 0 171 3 135 0 172 7 218 0 173 7 218 1 144] 
#[1 7 222 0 3 7 222 0 4 7 222 0 5 7 222 0 7 7 222 0 11 7 222 0 13 7 222 0 22 7 222 0 23 7 222 0 28 7 222 0 29 7 222 0 30 7 222 0 31 7 222 0 32 7 222 0 33 7 222 0 34 7 222 0 35 7 222 0 36 7 222 0 37 7 222 0 38 7 222 0 39 7 222 0 40 7 222 0 41 7 222 0 43 7 222 0 45 7 222 0 55 7 222 0 56 7 222 0 58 7 222 0 59 7 222 0 64 7 222 0 66 7 222 0 68 7 222 0 74 7 222 0 77 7 222 0 78 7 222 0 83 7 222 0 85 7 222 0 87 7 222 0 89 7 222 0 90 7 222 0 92 7 222 0 93 7 222 0 97 7 222 0 99 7 222 0 100 7 222 0 101 7 222 0 103 7 222 0 106 7 222 0 107 7 222 0 108 7 222 0 109 7 222 0 113 7 222 0 116 7 222 0 117 7 222 0 122 7 222 0 124 7 222 0 127 7 222 0 132 7 222 0 133 7 222 0 134 7 222 0 135 7 222 0 139 7 222 0 141 7 222 0 143 7 222 0 144 7 222 0 150 7 222 0 151 7 222 0 162 7 222 0 167 7 222 0 168 7 222 0 171 3 139 0 172 7 222 0 173 7 222 1 144] 
#[1 7 226 0 3 7 226 0 4 7 226 0 5 7 226 0 7 7 226 0 11 7 226 0 13 7 226 0 22 7 226 0 23 7 226 0 28 7 226 0 29 7 226 0 30 7 226 0 31 7 226 0 32 7 226 0 33 7 226 0 34 7 226 0 35 7 226 0 36 7 226 0 37 7 226 0 38 7 226 0 39 7 226 0 40 7 226 0 41 7 226 0 43 7 226 0 45 7 226 0 55 7 226 0 56 7 226 0 58 7 226 0 59 7 226 0 64 7 226 0 66 7 226 0 68 7 226 0 74 7 226 0 77 7 226 0 78 7 226 0 83 7 226 0 85 7 226 0 87 7 226 0 89 7 226 0 90 7 226 0 92 7 226 0 93 7 226 0 97 7 226 0 99 7 226 0 100 7 226 0 101 7 226 0 103 7 226 0 106 7 226 0 107 7 226 0 108 7 226 0 109 7 226 0 113 7 226 0 116 7 226 0 117 7 226 0 122 7 226 0 124 7 226 0 127 7 226 0 132 7 226 0 133 7 226 0 134 7 226 0 135 7 226 0 139 7 226 0 141 7 226 0 143 7 226 0 144 7 226 0 150 7 226 0 151 7 226 0 162 7 226 0 167 7 226 0 168 7 226 0 171 3 143 0 172 7 226 0 173 7 226 1 144] 
#[1 7 230 0 3 7 230 0 4 7 230 0 5 7 230 0 7 7 230 0 11 7 230 0 13 7 230 0 22 7 230 0 23 7 230 0 28 7 230 0 29 7 230 0 30 7 230 0 31 7 230 0 32 7 230 0 33 7 230 0 34 7 230 0 35 7 230 0 36 7 230 0 37 7 230 0 38 7 230 0 39 7 230 0 40 7 230 0 41 7 230 0 43 7 230 0 45 7 230 0 55 7 230 0 56 7 230 0 58 7 230 0 59 7 230 0 64 7 230 0 66 7 230 0 68 7 230 0 74 7 230 0 77 7 230 0 78 7 230 0 83 7 230 0 85 7 230 0 87 7 230 0 89 7 230 0 90 7 230 0 92 7 230 0 93 7 230 0 97 7 230 0 99 7 230 0 100 7 230 0 101 7 230 0 103 7 230 0 106 7 230 0 107 7 230 0 108 7 230 0 109 7 230 0 113 7 230 0 116 7 230 0 117 7 230 0 122 7 230 0 124 7 230 0 127 7 230 0 132 7 230 0 133 7 230 0 134 7 230 0 135 7 230 0 139 7 230 0 141 7 230 0 143 7 230 0 144 7 230 0 150 7 230 0 151 7 230 0 162 7 230 0 167 7 230 0 168 7 230 0 171 3 147 0 172 7 230 0 173 7 230 1 144] 
#[1 7 234 0 3 7 234 0 4 7 234 0 5 7 234 0 7 7 234 0 11 7 234 0 13 7 234 0 22 7 234 0 23 7 234 0 28 7 234 0 29 7 234 0 30 7 234 0 31 7 234 0 32 7 234 0 33 7 234 0 34 7 234 0 35 7 234 0 36 7 234 0 37 7 234 0 38 7 234 0 39 7 234 0 40 7 234 0 41 7 234 0 43 7 234 0 45 7 234 0 55 7 234 0 56 7 234 0 58 7 234 0 59 7 234 0 64 7 234 0 66 7 234 0 68 7 234 0 74 7 234 0 77 7 234 0 78 7 234 0 83 7 234 0 85 7 234 0 87 7 234 0 89 7 234 0 90 7 234 0 92 7 234 0 93 7 234 0 97 7 234 0 99 7 234 0 100 7 234 0 101 7 234 0 103 7 234 0 106 7 234 0 107 7 234 0 108 7 234 0 109 7 234 0 113 7 234 0 116 7 234 0 117 7 234 0 122 7 234 0 124 7 234 0 127 7 234 0 132 7 234 0 133 7 234 0 134 7 234 0 135 7 234 0 139 7 234 0 141 7 234 0 143 7 234 0 144 7 234 0 150 7 234 0 151 7 234 0 162 7 234 0 167 7 234 0 168 7 234 0 171 3 151 0 172 7 234 0 173 7 234 1 144] 
#[1 7 238 0 3 7 238 0 4 7 238 0 5 7 238 0 7 7 238 0 11 7 238 0 13 7 238 0 22 7 238 0 23 7 238 0 28 7 238 0 29 7 238 0 30 7 238 0 31 7 238 0 32 7 238 0 33 7 238 0 34 7 238 0 35 7 238 0 36 7 238 0 37 7 238 0 38 7 238 0 39 7 238 0 40 7 238 0 41 7 238 0 43 7 238 0 45 7 238 0 55 7 238 0 56 7 238 0 58 7 238 0 59 7 238 0 64 7 238 0 66 7 238 0 68 7 238 0 74 7 238 0 77 7 238 0 78 7 238 0 83 7 238 0 85 7 238 0 87 7 238 0 89 7 238 0 90 7 238 0 92 7 238 0 93 7 238 0 97 7 238 0 99 7 238 0 100 7 238 0 101 7 238 0 103 7 238 0 106 7 238 0 107 7 238 0 108 7 238 0 109 7 238 0 113 7 238 0 116 7 238 0 117 7 238 0 122 7 238 0 124 7 238 0 127 7 238 0 132 7 238 0 133 7 238 0 134 7 238 0 135 7 238 0 139 7 238 0 141 7 238 0 143 7 238 0 144 7 238 0 150 7 238 0 151 7 238 0 162 7 238 0 167 7 238 0 168 7 238 0 171 3 155 0 172 7 238 0 173 7 238 1 144] 
#[1 7 242 0 3 7 242 0 4 7 242 0 5 7 242 0 7 7 242 0 11 7 242 0 13 7 242 0 22 7 242 0 23 7 242 0 28 7 242 0 29 7 242 0 30 7 242 0 31 7 242 0 32 7 242 0 33 7 242 0 34 7 242 0 35 7 242 0 36 7 242 0 37 7 242 0 38 7 242 0 39 7 242 0 40 7 242 0 41 7 242 0 43 7 242 0 45 7 242 0 55 7 242 0 56 7 242 0 58 7 242 0 59 7 242 0 64 7 242 0 66 7 242 0 68 7 242 0 74 7 242 0 77 7 242 0 78 7 242 0 83 7 242 0 85 7 242 0 87 7 242 0 89 7 242 0 90 7 242 0 92 7 242 0 93 7 242 0 97 7 242 0 99 7 242 0 100 7 242 0 101 7 242 0 103 7 242 0 106 7 242 0 107 7 242 0 108 7 242 0 109 7 242 0 113 7 242 0 116 7 242 0 117 7 242 0 122 7 242 0 124 7 242 0 127 7 242 0 132 7 242 0 133 7 242 0 134 7 242 0 135 7 242 0 139 7 242 0 141 7 242 0 143 7 242 0 144 7 242 0 150 7 242 0 151 7 242 0 162 7 242 0 167 7 242 0 168 7 242 0 171 3 159 0 172 7 242 0 173 7 242 1 144] 
#[0 17 213 0 172] 
#[0 17 217 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 17 221 1 38 5 65 1 39 5 69 1 40 17 221 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 17 221 1 47 5 101 1 49 5 105 1 51 17 221 1 53 17 221 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 7 246 0 11 7 246 0 55 7 246 0 83 7 246 0 97 7 246 0 99 7 246 0 100 7 246 0 122 7 246 0 151 7 246 0 162 3 163 0 172 7 246 0 173 7 246 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 17 225 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 17 229 1 38 5 65 1 39 5 69 1 40 17 229 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 17 229 1 47 5 101 1 49 5 105 1 51 17 229 1 53 17 229 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 17 233 1 38 5 65 1 39 5 69 1 40 17 233 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 17 233 1 47 5 101 1 49 5 105 1 51 17 233 1 53 17 233 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 7 250 0 11 7 250 0 55 7 250 0 83 7 250 0 97 7 250 0 99 7 250 0 100 7 250 0 122 7 250 0 151 7 250 0 162 3 167 0 172 7 250 0 173 7 250 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 17 237 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 17 241 1 38 5 65 1 39 5 69 1 40 17 241 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 17 241 1 47 5 101 1 49 5 105 1 51 17 241 1 53 17 241 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 7 254 0 172] 
#[0 8 2 0 172] 
#[0 8 6 0 172] 
#[0 8 10 0 172] 
#[0 8 14 0 172] 
#[0 17 245 0 172] 
#[1 4 254 0 11 4 254 0 13 10 33 0 18 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 10 37 0 147 4 254 0 151 4 254 0 162 4 254 0 172 4 254 0 173 17 249 1 66 4 254 1 144] 
#[1 8 18 0 11 13 65 0 13 8 18 0 55 8 18 0 83 8 18 0 97 8 18 0 99 8 18 0 100 8 18 0 122 8 18 0 151 8 18 0 162 8 18 0 172 8 18 0 173 13 69 1 65 8 18 1 144] 
#[1 8 22 0 11 13 65 0 13 8 22 0 55 8 22 0 83 8 22 0 97 8 22 0 99 8 22 0 100 8 22 0 122 8 22 0 151 8 22 0 162 8 22 0 172 8 22 0 173 13 69 1 65 8 22 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 17 253 1 38 5 65 1 39 5 69 1 40 17 253 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 17 253 1 47 5 101 1 49 5 105 1 51 17 253 1 53 17 253 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 26 0 11 8 26 0 13 8 26 0 55 8 26 0 83 8 26 0 97 8 26 0 99 8 26 0 100 8 26 0 122 8 26 0 151 8 26 0 162 3 171 0 172 8 26 0 173 8 26 1 144] 
#[1 4 254 0 11 4 254 0 13 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 4 254 0 151 4 254 0 162 3 175 0 172 4 254 0 173 18 5 1 66 4 254 1 144] 
#[1 8 30 0 11 13 65 0 13 8 30 0 55 8 30 0 83 8 30 0 97 8 30 0 99 8 30 0 100 8 30 0 122 8 30 0 151 8 30 0 162 8 30 0 172 8 30 0 173 13 69 1 65 8 30 1 144] 
#[1 4 254 0 11 4 254 0 13 10 33 0 18 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 10 37 0 147 4 254 0 151 4 254 0 162 4 254 0 172 4 254 0 173 18 9 1 66 4 254 1 144] 
#[1 8 34 0 11 13 65 0 13 8 34 0 55 8 34 0 83 8 34 0 97 8 34 0 99 8 34 0 100 8 34 0 122 8 34 0 151 8 34 0 162 8 34 0 172 8 34 0 173 13 69 1 65 8 34 1 144] 
#[0 18 13 0 66] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 78 0 166 0 85 0 166 0 89 0 166 0 90 0 166 0 100 0 166 0 108 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 139 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 18 17 0 228 18 17 0 229 18 17 0 233] 
#[1 18 21 0 5 8 38 0 22 8 38 0 23 8 38 0 43 8 38 0 45 8 38 0 55 8 38 0 56 8 38 0 58 8 38 0 59 8 38 0 64 8 38 0 66 8 38 0 68 8 38 0 78 8 38 0 85 8 38 0 89 8 38 0 90 8 38 0 100 8 38 0 108 8 38 0 116 8 38 0 117 8 38 0 124 8 38 0 139 8 38 0 144 8 38 0 150 8 38 0 167 8 38 0 168 8 38 0 171 18 25 0 172 8 38 0 173] 
#[1 8 42 0 11 8 42 0 22 8 42 0 23 8 42 0 28 8 42 0 29 8 42 0 30 8 42 0 31 8 42 0 32 8 42 0 33 8 42 0 34 8 42 0 35 8 42 0 36 8 42 0 37 8 42 0 38 8 42 0 39 8 42 0 40 8 42 0 41 8 42 0 43 8 42 0 45 8 42 0 55 8 42 0 56 8 42 0 58 8 42 0 59 8 42 0 64 8 42 0 66 8 42 0 68 8 42 0 74 8 42 0 77 8 42 0 78 8 42 0 83 8 42 0 85 8 42 0 87 8 42 0 89 8 42 0 90 8 42 0 92 8 42 0 93 8 42 0 97 8 42 0 99 8 42 0 100 8 42 0 101 8 42 0 103 8 42 0 106 8 42 0 107 8 42 0 108 8 42 0 109 8 42 0 113 8 42 0 116 8 42 0 117 8 42 0 122 8 42 0 124 8 42 0 127 8 42 0 132 8 42 0 133 8 42 0 134 8 42 0 135 8 42 0 139 8 42 0 141 8 42 0 143 8 42 0 144 8 42 0 150 8 42 0 151 8 42 0 162 8 42 0 167 8 42 0 168 8 42 0 171 3 179 0 172 8 42 0 173 8 42 1 144] 
#[1 8 46 0 11 8 46 0 22 8 46 0 23 8 46 0 28 8 46 0 29 8 46 0 30 8 46 0 31 8 46 0 32 8 46 0 33 8 46 0 34 8 46 0 35 8 46 0 36 8 46 0 37 8 46 0 38 8 46 0 39 8 46 0 40 8 46 0 41 8 46 0 43 8 46 0 45 8 46 0 55 8 46 0 56 8 46 0 58 8 46 0 59 8 46 0 64 8 46 0 66 8 46 0 68 8 46 0 74 8 46 0 77 8 46 0 78 8 46 0 83 8 46 0 85 8 46 0 87 8 46 0 89 8 46 0 90 8 46 0 92 8 46 0 93 8 46 0 97 8 46 0 99 8 46 0 100 8 46 0 101 8 46 0 103 8 46 0 106 8 46 0 107 8 46 0 108 8 46 0 109 8 46 0 113 8 46 0 116 8 46 0 117 8 46 0 122 8 46 0 124 8 46 0 127 8 46 0 132 8 46 0 133 8 46 0 134 8 46 0 135 8 46 0 139 8 46 0 141 8 46 0 143 8 46 0 144 8 46 0 150 8 46 0 151 8 46 0 162 8 46 0 167 8 46 0 168 8 46 0 171 3 183 0 172 8 46 0 173 8 46 1 144] 
#[0 8 50 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 18 29 1 38 5 65 1 39 5 69 1 40 18 29 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 18 29 1 47 5 101 1 49 5 105 1 51 18 29 1 53 18 29 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 54 0 4 8 54 0 7 7 245 0 172] 
#[0 8 58 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 62 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 8 66 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 18 33 0 172] 
#[0 18 37 0 122] 
#[0 8 70 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 18 41 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 18 45 1 38 5 65 1 39 5 69 1 40 18 45 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 18 45 1 47 5 101 1 49 5 105 1 51 18 45 1 53 18 45 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 74 0 55 8 74 0 83 8 74 0 97 8 74 0 99 8 74 0 100 8 74 0 122 8 74 0 151 8 74 0 162 3 187 0 173] 
#[0 8 78 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173] 
#[1 8 82 0 11 8 82 0 55 8 82 0 83 8 82 0 97 8 82 0 99 8 82 0 100 8 82 0 122 8 82 0 151 8 82 0 162 3 191 0 172 8 82 0 173 8 82 1 144] 
#[1 8 86 0 11 8 86 0 55 8 86 0 83 8 86 0 97 8 86 0 99 8 86 0 100 8 86 0 122 8 86 0 151 8 86 0 162 3 195 0 172 8 86 0 173 8 86 1 144] 
#[0 18 49 0 172] 
#[0 18 53 0 172] 
#[0 18 57 0 101] 
#[0 18 61 0 18] 
#[0 18 65 0 172] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 18 73 0 228 18 73 0 229 18 69 0 230 18 73 0 233 18 73 1 1 18 73 1 2] 
#[0 18 77 0 172] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 18 85 0 228 18 85 0 229 18 81 0 230 18 85 0 233 18 85 1 1 18 85 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 18 89 1 4] 
#[0 18 93 0 18] 
#[0 8 90 0 4 0 7 0 172] 
#[0 8 94 0 4 0 7 0 172] 
#[0 18 97 0 172] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 18 105 0 228 18 105 0 229 18 101 0 230 18 105 0 233 18 105 1 1 18 105 1 2] 
#[0 8 98 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 18 109 0 172] 
#[0 18 113 0 4] 
#[0 8 102 0 4 0 7 0 172] 
#[0 8 106 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 4 229 0 8 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 3 217 0 162 1 17 0 167 1 1 0 168 1 5 0 171 18 117 0 182 18 117 0 191 1 17 0 194 18 117 0 195 18 117 0 196 18 117 0 197 18 117 1 43 18 117 1 105] 
#[0 8 110 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 7 54 0 11 7 54 0 55 7 54 0 83 7 54 0 97 7 54 0 99 7 54 0 100 7 54 0 122 7 54 0 151 7 54 0 162 7 54 0 172 7 54 0 173 18 121 0 220 7 54 1 144] 
#[1 18 125 0 11 8 114 0 55 8 114 0 83 8 114 0 97 8 114 0 99 8 114 0 100 8 114 0 122 8 114 0 151 8 114 0 162 3 199 0 172 8 114 0 173 18 133 0 219 8 114 1 144] 
#[1 18 137 0 97 18 141 0 99 18 145 0 100 3 217 0 162 18 149 0 182 18 153 1 86 18 157 1 88 18 153 1 89] 
#[1 18 165 0 97 18 169 0 98] 
#[1 18 173 0 97 18 177 0 98] 
#[1 8 118 0 11 8 118 0 55 8 118 0 83 8 118 0 97 8 118 0 99 8 118 0 100 8 118 0 122 8 118 0 151 8 118 0 162 3 203 0 172 8 118 0 173 8 118 1 144] 
#[0 8 122 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 18 181 0 83 18 185 0 100 3 217 0 162 18 189 0 182 18 193 1 94 18 197 1 98] 
#[0 8 126 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 8 130 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 18 201 0 172] 
#[0 8 134 0 3 0 4 0 5 0 7 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 18 205 1 38 5 65 1 39 5 69 1 40 18 205 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 18 205 1 47 5 101 1 49 5 105 1 51 18 205 1 53 18 205 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 138 0 3 8 138 0 4 8 138 0 5 8 138 0 7 8 138 0 11 8 138 0 22 8 138 0 23 8 138 0 28 8 138 0 29 8 138 0 30 8 138 0 31 8 138 0 32 8 138 0 33 8 138 0 34 8 138 0 35 8 138 0 36 8 138 0 37 8 138 0 38 8 138 0 39 8 138 0 40 8 138 0 41 8 138 0 43 8 138 0 45 8 138 0 55 8 138 0 56 8 138 0 58 8 138 0 59 8 138 0 64 8 138 0 66 8 138 0 68 8 138 0 74 8 138 0 77 8 138 0 78 8 138 0 83 8 138 0 85 8 138 0 87 8 138 0 89 8 138 0 90 8 138 0 92 8 138 0 93 8 138 0 97 8 138 0 99 8 138 0 100 8 138 0 101 8 138 0 103 8 138 0 106 8 138 0 107 8 138 0 108 8 138 0 109 8 138 0 113 8 138 0 116 8 138 0 117 8 138 0 122 8 138 0 124 8 138 0 127 8 138 0 132 8 138 0 133 8 138 0 134 8 138 0 135 8 138 0 139 8 138 0 141 8 138 0 143 8 138 0 144 8 138 0 150 8 138 0 151 8 138 0 162 8 138 0 167 8 138 0 168 8 138 0 171 3 207 0 172 8 138 0 173 8 138 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 18 209 0 172 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 18 213 1 38 5 65 1 39 5 69 1 40 18 213 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 18 213 1 47 5 101 1 49 5 105 1 51 18 213 1 53 18 213 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 18 217 0 100 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 89 0 191 1 17 0 194 13 89 0 195 13 89 0 196 13 89 0 197 13 93 0 246] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 18 221 0 100 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 3 105 0 173 13 197 0 191 1 17 0 194 13 197 0 195 13 197 0 196 13 197 0 197 13 201 0 251] 
#[0 8 142 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 146 0 11 8 146 0 55 8 146 0 83 8 146 0 97 8 146 0 99 8 146 0 100 8 146 0 122 8 146 0 151 8 146 0 162 3 211 0 172 8 146 0 173 8 146 1 144] 
#[1 8 150 0 11 8 150 0 55 8 150 0 83 8 150 0 97 8 150 0 99 8 150 0 100 8 150 0 122 8 150 0 151 8 150 0 162 3 215 0 172 8 150 0 173 8 150 1 144] 
#[1 8 154 0 11 8 154 0 55 8 154 0 83 8 154 0 97 8 154 0 99 8 154 0 100 8 154 0 122 8 154 0 151 8 154 0 162 3 219 0 172 8 154 0 173 8 154 1 144] 
#[1 8 158 0 11 8 158 0 55 8 158 0 83 8 158 0 97 8 158 0 99 8 158 0 100 8 158 0 122 8 158 0 151 8 158 0 162 3 223 0 172 8 158 0 173 8 158 1 144] 
#[0 8 162 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[0 8 166 0 1 0 3 0 4 0 6 0 7 0 8 0 9 0 11 0 13 0 22 0 23 0 25 0 43 0 45 0 54 0 55 0 56 0 58 0 59 0 64 0 66 0 67 0 68 0 78 0 80 0 82 0 83 0 85 0 89 0 90 0 97 0 99 0 100 0 108 0 116 0 117 0 122 0 124 0 125 0 130 0 139 0 144 0 150 0 151 0 155 0 160 0 161 0 162 0 163 0 164 0 165 0 166 0 167 0 168 0 170 0 171 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 18 225 1 38 5 65 1 39 5 69 1 40 18 225 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 18 225 1 47 5 101 1 49 5 105 1 51 18 225 1 53 18 225 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 18 229 0 236 18 233 1 38 5 65 1 39 5 69 1 40 18 233 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 18 233 1 47 5 101 1 49 5 105 1 51 18 233 1 53 18 233 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 8 170 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 8 174 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 8 178 0 4 4 225 0 6 8 178 0 7 4 229 0 8 0 33 0 9 8 178 0 11 8 178 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 227 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 8 178 0 83 1 17 0 85 1 17 0 89 1 17 0 90 8 178 0 97 8 178 0 99 8 178 0 100 1 17 0 108 1 17 0 116 1 17 0 117 8 178 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 8 178 0 151 4 241 0 155 4 245 0 160 4 249 0 161 3 231 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 8 178 0 172 8 178 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 18 237 1 132 5 145 1 141 5 145 1 143 8 178 1 144] 
#[0 8 182 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 8 186 0 4 4 225 0 6 8 186 0 7 4 229 0 8 0 33 0 9 8 186 0 11 8 186 0 13 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 3 235 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 8 186 0 83 1 17 0 85 1 17 0 89 1 17 0 90 8 186 0 97 8 186 0 99 8 186 0 100 1 17 0 108 1 17 0 116 1 17 0 117 8 186 0 122 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 8 186 0 151 4 241 0 155 4 245 0 160 4 249 0 161 3 239 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 8 186 0 172 8 186 0 173 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 18 241 1 132 5 145 1 141 5 145 1 143 8 186 1 144] 
#[0 8 190 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 18 245 0 172] 
#[0 18 249 0 172] 
#[1 3 225 0 173 3 233 0 207 18 253 0 213] 
#[0 19 1 0 100] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 19 5 1 38 5 65 1 39 5 69 1 40 19 5 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 19 5 1 47 5 101 1 49 5 105 1 51 19 5 1 53 19 5 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 3 243 0 3 7 245 0 172 3 243 0 173] 
#[0 19 9 0 100] 
#[0 19 13 0 172] 
#[0 19 17 0 100] 
#[1 8 65 0 3 3 225 0 173 3 233 0 207 19 21 0 213 19 25 0 230] 
#[0 19 29 0 100] 
#[0 19 33 0 100] 
#[0 19 37 0 100] 
#[0 19 41 0 172] 
#[0 19 45 0 172] 
#[0 19 49 0 143] 
#[0 19 53 0 172] 
#[0 19 57 0 172] 
#[1 0 166 0 3 4 53 0 5 19 61 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 19 65 1 11] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 19 69 1 11] 
#[1 3 225 0 173 3 233 0 207 19 73 0 213] 
#[1 8 161 0 3 19 77 0 253] 
#[1 8 161 0 3 19 81 0 253] 
#[1 8 161 0 3 19 85 0 253] 
#[1 19 89 0 172 4 206 0 173 19 89 1 13] 
#[1 3 225 0 173 3 233 0 207 19 93 0 213] 
#[1 3 225 0 173 3 233 0 207 19 97 0 213] 
#[0 19 101 0 100] 
#[1 8 161 0 3 19 105 0 172 19 109 0 253] 
#[0 19 113 0 172] 
#[0 19 117 0 172] 
#[0 19 121 0 172] 
#[1 8 161 0 3 19 125 0 172 4 206 0 173 19 129 0 253 19 133 1 13] 
#[1 0 166 0 3 4 53 0 5 19 137 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 19 141 1 11] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 19 145 1 11] 
#[1 3 225 0 173 3 233 0 207 19 149 0 213] 
#[1 8 161 0 3 19 153 0 253] 
#[1 8 161 0 3 19 157 0 253] 
#[1 8 161 0 3 19 161 0 253] 
#[1 19 165 0 172 4 206 0 173 19 165 1 13] 
#[1 3 225 0 173 3 233 0 207 19 169 0 213] 
#[1 3 225 0 173 3 233 0 207 19 173 0 213] 
#[0 19 177 0 100] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 19 181 1 132 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 9 53 0 80 9 77 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 9 61 0 130 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 9 69 0 191 1 17 0 194 9 69 0 195 9 69 0 196 9 69 0 197 9 73 0 236 9 77 0 252 9 81 1 38 5 65 1 39 5 69 1 40 9 81 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 9 81 1 47 5 101 1 49 5 105 1 51 9 81 1 53 9 81 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 9 85 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 19 185 1 132 5 145 1 141 5 145 1 143] 
#[1 19 189 0 8 10 25 0 159] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 19 193 1 38 5 65 1 39 5 69 1 40 19 193 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 19 193 1 47 5 101 1 49 5 105 1 51 19 193 1 53 19 193 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 10 33 0 18 19 197 0 147] 
#[1 8 194 0 11 8 194 0 55 8 194 0 83 8 194 0 97 8 194 0 99 8 194 0 100 8 194 0 122 8 194 0 151 8 194 0 162 3 247 0 172 8 194 0 173 8 194 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 19 201 1 38 5 65 1 39 5 69 1 40 19 201 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 19 201 1 47 5 101 1 49 5 105 1 51 19 201 1 53 19 201 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 198 0 11 8 198 0 55 8 198 0 83 8 198 0 97 8 198 0 99 8 198 0 100 8 198 0 122 8 198 0 151 8 198 0 162 3 251 0 172 8 198 0 173 8 198 1 144] 
#[1 8 202 0 11 8 202 0 55 8 202 0 83 8 202 0 97 8 202 0 99 8 202 0 100 8 202 0 122 8 202 0 151 8 202 0 162 3 255 0 172 8 202 0 173 8 202 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 19 205 1 38 5 65 1 39 5 69 1 40 19 205 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 19 205 1 47 5 101 1 49 5 105 1 51 19 205 1 53 19 205 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 206 0 11 8 206 0 55 8 206 0 83 8 206 0 97 8 206 0 99 8 206 0 100 8 206 0 122 8 206 0 151 8 206 0 162 4 3 0 172 8 206 0 173 8 206 1 144] 
#[1 19 209 0 24 19 245 0 50 19 245 0 51 19 245 0 52 19 241 0 62 19 241 0 63 19 245 0 65 19 241 0 68 19 241 1 60 19 245 1 61] 
#[1 8 210 0 11 13 65 0 13 8 210 0 55 8 210 0 83 8 210 0 97 8 210 0 99 8 210 0 100 8 210 0 122 8 210 0 151 8 210 0 162 8 210 0 172 8 210 0 173 13 69 1 65 8 210 1 144] 
#[1 8 214 0 11 8 214 0 13 8 214 0 55 8 214 0 83 8 214 0 97 8 214 0 99 8 214 0 100 8 214 0 122 8 214 0 151 8 214 0 162 4 7 0 172 8 214 0 173 8 214 1 144] 
#[1 4 254 0 11 4 254 0 13 10 33 0 18 4 254 0 55 4 254 0 83 4 254 0 97 4 254 0 99 4 254 0 100 4 254 0 122 10 37 0 147 4 254 0 151 4 254 0 162 4 254 0 172 4 254 0 173 19 249 1 66 4 254 1 144] 
#[1 8 218 0 11 13 65 0 13 8 218 0 55 8 218 0 83 8 218 0 97 8 218 0 99 8 218 0 100 8 218 0 122 8 218 0 151 8 218 0 162 8 218 0 172 8 218 0 173 13 69 1 65 8 218 1 144] 
#[1 8 222 0 11 13 65 0 13 8 222 0 55 8 222 0 83 8 222 0 97 8 222 0 99 8 222 0 100 8 222 0 122 8 222 0 151 8 222 0 162 8 222 0 172 8 222 0 173 13 69 1 65 8 222 1 144] 
#[0 8 226 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 19 253 0 5 8 230 0 22 8 230 0 23 8 230 0 43 8 230 0 45 8 230 0 55 8 230 0 56 8 230 0 58 8 230 0 59 8 230 0 64 8 230 0 66 8 230 0 68 8 230 0 78 8 230 0 85 8 230 0 89 8 230 0 90 8 230 0 100 8 230 0 108 8 230 0 116 8 230 0 117 8 230 0 124 8 230 0 139 8 230 0 144 8 230 0 150 8 230 0 167 8 230 0 168 8 230 0 171 20 1 0 172 8 230 0 173] 
#[1 3 217 0 162 20 5 0 172 20 9 0 182] 
#[0 20 13 0 5] 
#[1 8 234 0 4 8 234 0 7 7 245 0 172] 
#[0 20 17 0 122] 
#[0 8 238 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 20 21 0 122] 
#[1 8 242 0 11 8 242 0 55 8 242 0 83 8 242 0 97 8 242 0 99 8 242 0 100 8 242 0 122 8 242 0 151 8 242 0 162 4 11 0 172 8 242 0 173 8 242 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 20 25 1 38 5 65 1 39 5 69 1 40 20 25 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 20 25 1 47 5 101 1 49 5 105 1 51 20 25 1 53 20 25 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 20 29 1 38 5 65 1 39 5 69 1 40 20 29 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 20 29 1 47 5 101 1 49 5 105 1 51 20 29 1 53 20 29 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 8 246 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 33 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 37 0 191 1 17 0 194 20 37 0 195 20 37 0 196 20 37 0 197] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 20 41 0 228 20 41 0 229 20 41 0 233 20 41 1 1 20 41 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 20 45 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 20 49 0 130 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 53 0 191 1 17 0 194 20 53 0 195 20 53 0 196 20 53 0 197] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 20 57 0 228 20 57 0 229 20 57 0 233 20 57 1 1 20 57 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 20 61 1 4] 
#[0 8 250 0 4 0 7 0 172] 
#[0 20 65 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 20 69 0 191 1 17 0 194 20 69 0 195 20 69 0 196 20 69 0 197] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 20 73 0 228 20 73 0 229 20 73 0 233 20 73 1 1 20 73 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 20 77 1 4] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 9 53 0 80 11 65 0 82 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 11 49 0 128 11 53 0 130 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 11 61 0 191 1 17 0 194 11 61 0 195 11 61 0 196 11 61 0 197 11 65 0 252 20 81 1 0] 
#[0 8 254 0 3 0 5 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 2 0 7 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 18 125 0 11 9 6 0 55 9 6 0 83 9 6 0 97 9 6 0 99 9 6 0 100 9 6 0 122 9 6 0 151 9 6 0 162 4 15 0 172 9 6 0 173 18 133 0 219 9 6 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 20 89 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 20 85 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 20 89 0 201 20 89 0 203 20 89 0 212 1 49 0 223 20 89 0 234 1 57 0 235 20 89 0 236 20 89 0 237 20 89 0 238 20 89 0 239 20 89 0 240 20 89 0 241 20 89 0 242 20 89 0 243 20 89 0 247 20 89 0 248 20 89 1 18 20 89 1 19 20 89 1 20 20 89 1 21 20 89 1 22 20 89 1 23 1 125 1 25 20 89 1 26 20 89 1 27 20 89 1 28 20 89 1 29 20 89 1 30 20 89 1 34 20 89 1 37 1 157 1 56 1 157 1 57 1 157 1 58 20 89 1 62 20 89 1 63 20 89 1 64 20 89 1 67 20 89 1 68 20 89 1 69 20 89 1 70 20 89 1 71 20 89 1 72 20 89 1 73 20 89 1 74 20 89 1 75 20 89 1 76 20 89 1 77 20 89 1 78 20 89 1 79 20 89 1 80 20 89 1 81 20 89 1 82 20 89 1 83 20 89 1 84 20 89 1 85 20 89 1 90 20 89 1 91 2 9 1 92 20 89 1 97 20 89 1 100 20 89 1 101 20 89 1 102 20 89 1 103 20 89 1 104 20 89 1 109 20 89 1 110 20 89 1 111 20 89 1 112 20 89 1 113 20 89 1 114 20 89 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 20 89 1 129 2 117 1 130 2 121 1 131 20 89 1 139 20 89 1 140 20 89 1 142] 
#[0 20 93 0 11] 
#[0 9 10 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 9 14 0 100 9 14 0 162 3 225 0 173 3 233 0 207 20 97 0 213] 
#[0 20 101 0 172] 
#[0 20 105 0 172] 
#[0 20 109 0 172] 
#[0 9 18 0 97 0 99 0 100 0 162] 
#[1 20 113 0 100 3 217 0 162 20 117 0 182] 
#[0 9 22 0 97 0 99 0 100 0 162] 
#[1 13 253 0 172 20 121 0 218] 
#[1 13 253 0 172 20 125 0 218] 
#[1 13 253 0 172 20 129 0 218] 
#[1 13 253 0 172 20 133 0 218] 
#[0 20 137 0 172] 
#[0 20 141 0 172] 
#[0 20 145 0 172] 
#[1 9 26 0 83 9 26 0 100 9 26 0 162 3 225 0 173 20 149 0 207] 
#[0 9 30 0 83 0 100 0 162] 
#[0 20 153 0 153] 
#[1 9 34 0 3 9 34 0 4 9 34 0 5 9 34 0 7 9 34 0 11 9 34 0 22 9 34 0 23 9 34 0 28 9 34 0 29 9 34 0 30 9 34 0 31 9 34 0 32 9 34 0 33 9 34 0 34 9 34 0 35 9 34 0 36 9 34 0 37 9 34 0 38 9 34 0 39 9 34 0 40 9 34 0 41 9 34 0 43 9 34 0 45 9 34 0 55 9 34 0 56 9 34 0 58 9 34 0 59 9 34 0 64 9 34 0 66 9 34 0 68 9 34 0 74 9 34 0 77 9 34 0 78 9 34 0 83 9 34 0 85 9 34 0 87 9 34 0 89 9 34 0 90 9 34 0 92 9 34 0 93 9 34 0 97 9 34 0 99 9 34 0 100 9 34 0 101 9 34 0 103 9 34 0 106 9 34 0 107 9 34 0 108 9 34 0 109 9 34 0 113 9 34 0 116 9 34 0 117 9 34 0 122 9 34 0 124 9 34 0 127 9 34 0 132 9 34 0 133 9 34 0 134 9 34 0 135 9 34 0 139 9 34 0 141 9 34 0 143 9 34 0 144 9 34 0 150 9 34 0 151 9 34 0 162 9 34 0 167 9 34 0 168 9 34 0 171 4 19 0 172 9 34 0 173 9 34 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 20 157 1 38 5 65 1 39 5 69 1 40 20 157 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 20 157 1 47 5 101 1 49 5 105 1 51 20 157 1 53 20 157 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 9 38 0 3 9 38 0 4 9 38 0 5 9 38 0 7 9 38 0 11 9 38 0 22 9 38 0 23 9 38 0 28 9 38 0 29 9 38 0 30 9 38 0 31 9 38 0 32 9 38 0 33 9 38 0 34 9 38 0 35 9 38 0 36 9 38 0 37 9 38 0 38 9 38 0 39 9 38 0 40 9 38 0 41 9 38 0 43 9 38 0 45 9 38 0 55 9 38 0 56 9 38 0 58 9 38 0 59 9 38 0 64 9 38 0 66 9 38 0 68 9 38 0 74 9 38 0 77 9 38 0 78 9 38 0 83 9 38 0 85 9 38 0 87 9 38 0 89 9 38 0 90 9 38 0 92 9 38 0 93 9 38 0 97 9 38 0 99 9 38 0 100 9 38 0 101 9 38 0 103 9 38 0 106 9 38 0 107 9 38 0 108 9 38 0 109 9 38 0 113 9 38 0 116 9 38 0 117 9 38 0 122 9 38 0 124 9 38 0 127 9 38 0 132 9 38 0 133 9 38 0 134 9 38 0 135 9 38 0 139 9 38 0 141 9 38 0 143 9 38 0 144 9 38 0 150 9 38 0 151 9 38 0 162 9 38 0 167 9 38 0 168 9 38 0 171 4 23 0 172 9 38 0 173 9 38 1 144] 
#[0 20 161 0 172] 
#[0 20 165 0 172] 
#[1 4 27 0 3 4 27 0 4 4 27 0 5 4 27 0 7 4 27 0 11 4 27 0 13 4 27 0 22 4 27 0 23 4 27 0 28 4 27 0 29 4 27 0 30 4 27 0 31 4 27 0 32 4 27 0 33 4 27 0 34 4 27 0 35 4 27 0 36 4 27 0 37 4 27 0 38 4 27 0 39 4 27 0 40 4 27 0 41 4 27 0 43 4 27 0 45 4 27 0 55 4 27 0 56 4 27 0 58 4 27 0 59 4 27 0 64 4 27 0 66 4 27 0 68 4 27 0 74 4 27 0 77 4 27 0 78 4 27 0 83 4 27 0 85 4 27 0 87 4 27 0 89 4 27 0 90 4 27 0 92 4 27 0 93 4 27 0 97 4 27 0 99 4 27 0 100 4 27 0 101 4 27 0 103 4 27 0 106 4 27 0 107 4 27 0 108 4 27 0 109 4 27 0 113 4 27 0 116 4 27 0 117 4 27 0 122 4 27 0 124 4 27 0 127 4 27 0 132 4 27 0 133 4 27 0 134 4 27 0 135 4 27 0 139 4 27 0 141 4 27 0 143 4 27 0 144 4 27 0 150 4 27 0 151 4 27 0 162 4 27 0 167 4 27 0 168 4 27 0 171 4 31 0 172 4 27 0 173 4 27 1 144] 
#[0 9 42 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 9 46 0 3 9 46 0 4 9 46 0 5 9 46 0 7 9 46 0 11 9 46 0 13 9 46 0 22 9 46 0 23 9 46 0 28 9 46 0 29 9 46 0 30 9 46 0 31 9 46 0 32 9 46 0 33 9 46 0 34 9 46 0 35 9 46 0 36 9 46 0 37 9 46 0 38 9 46 0 39 9 46 0 40 9 46 0 41 9 46 0 43 9 46 0 45 9 46 0 55 9 46 0 56 9 46 0 58 9 46 0 59 9 46 0 64 9 46 0 66 9 46 0 68 9 46 0 74 9 46 0 77 9 46 0 78 9 46 0 83 9 46 0 85 9 46 0 87 9 46 0 89 9 46 0 90 9 46 0 92 9 46 0 93 9 46 0 97 9 46 0 99 9 46 0 100 9 46 0 101 9 46 0 103 9 46 0 106 9 46 0 107 9 46 0 108 9 46 0 109 9 46 0 113 9 46 0 116 9 46 0 117 9 46 0 122 9 46 0 124 9 46 0 127 9 46 0 132 9 46 0 133 9 46 0 134 9 46 0 135 9 46 0 139 9 46 0 141 9 46 0 143 9 46 0 144 9 46 0 150 9 46 0 151 9 46 0 162 9 46 0 167 9 46 0 168 9 46 0 171 4 35 0 172 9 46 0 173 9 46 1 144] 
#[0 9 50 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 9 54 0 4 0 7 0 11 0 13 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 5 5 0 165 20 169 0 187] 
#[1 5 5 0 165 20 173 0 187] 
#[0 20 177 0 100] 
#[0 20 181 0 172] 
#[1 4 39 0 3 7 245 0 172 4 39 0 173] 
#[0 20 185 0 172] 
#[0 20 189 0 107] 
#[0 20 193 0 172] 
#[0 20 197 0 100] 
#[1 3 225 0 173 3 233 0 207 20 201 0 213] 
#[0 20 205 0 172] 
#[0 20 209 0 172] 
#[0 20 213 0 172] 
#[0 20 217 0 143] 
#[0 20 221 0 143] 
#[0 9 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 20 225 0 118] 
#[0 20 229 0 118] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 20 233 1 11] 
#[1 3 225 0 173 3 233 0 207 20 237 0 213] 
#[1 3 225 0 173 3 233 0 207 20 241 0 213] 
#[0 20 245 0 100] 
#[1 0 166 0 3 4 53 0 5 8 69 0 172 3 107 0 173 3 233 0 207 20 249 0 213 20 253 0 228 20 253 0 229 20 253 0 233] 
#[1 3 225 0 173 3 233 0 207 21 1 0 213] 
#[1 3 225 0 173 3 233 0 207 21 5 0 213] 
#[1 3 225 0 173 3 233 0 207 21 9 0 213] 
#[0 21 13 0 100] 
#[0 21 17 0 100] 
#[0 21 21 0 172] 
#[1 8 161 0 3 21 25 0 253] 
#[1 0 166 0 3 4 53 0 5 21 29 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 21 33 1 11] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 21 37 0 191 1 17 0 194 21 37 0 195 21 37 0 196 21 37 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 21 41 0 191 1 17 0 194 21 41 0 195 21 41 0 196 21 41 0 197] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 21 45 0 191 1 17 0 194 21 45 0 195 21 45 0 196 21 45 0 197] 
#[1 8 161 0 3 21 53 0 172 2 123 0 173 21 49 0 253 21 53 1 13] 
#[1 21 57 0 172 4 206 0 173 21 57 1 13] 
#[1 3 225 0 173 3 233 0 207 21 61 0 213] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 21 65 1 11] 
#[1 3 225 0 173 3 233 0 207 21 69 0 213] 
#[1 3 225 0 173 3 233 0 207 21 73 0 213] 
#[0 21 77 0 100] 
#[1 0 166 0 3 4 53 0 5 8 69 0 172 3 107 0 173 3 233 0 207 21 81 0 213 21 85 0 228 21 85 0 229 21 85 0 233] 
#[1 3 225 0 173 3 233 0 207 21 89 0 213] 
#[1 3 225 0 173 3 233 0 207 21 93 0 213] 
#[1 3 225 0 173 3 233 0 207 21 97 0 213] 
#[0 21 101 0 100] 
#[0 21 105 0 100] 
#[0 21 109 0 172] 
#[0 9 62 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 66 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 233 0 159 21 113 0 190] 
#[1 21 117 0 55 3 217 0 162 21 121 0 172 3 225 0 173 21 125 0 182 3 233 0 207 21 129 0 213] 
#[0 21 133 0 172] 
#[1 9 70 0 11 9 70 0 55 9 70 0 83 9 70 0 97 9 70 0 99 9 70 0 100 9 70 0 122 9 70 0 151 9 70 0 162 4 43 0 172 9 70 0 173 9 70 1 144] 
#[1 9 74 0 11 9 74 0 55 9 74 0 83 9 74 0 97 9 74 0 99 9 74 0 100 9 74 0 122 9 74 0 151 9 74 0 162 4 47 0 172 9 74 0 173 9 74 1 144] 
#[0 21 137 0 172] 
#[0 9 78 0 172] 
#[0 9 82 0 172] 
#[0 9 86 0 172] 
#[0 9 90 0 172] 
#[0 9 94 0 172] 
#[0 9 98 0 172] 
#[0 9 102 0 172] 
#[0 21 141 0 172] 
#[0 21 145 0 172] 
#[1 9 106 0 11 13 65 0 13 9 106 0 55 9 106 0 83 9 106 0 97 9 106 0 99 9 106 0 100 9 106 0 122 9 106 0 151 9 106 0 162 9 106 0 172 9 106 0 173 13 69 1 65 9 106 1 144] 
#[1 3 217 0 162 21 149 0 172 21 153 0 182] 
#[0 21 157 0 5] 
#[1 3 217 0 162 21 161 0 182] 
#[0 9 110 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 3 217 0 162 21 165 0 172 21 169 0 182] 
#[0 9 114 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 9 118 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 9 122 0 11 9 122 0 55 9 122 0 83 9 122 0 97 9 122 0 99 9 122 0 100 9 122 0 122 9 122 0 151 9 122 0 162 4 51 0 172 9 122 0 173 9 122 1 144] 
#[1 9 126 0 11 9 126 0 55 9 126 0 83 9 126 0 97 9 126 0 99 9 126 0 100 9 126 0 122 9 126 0 151 9 126 0 162 4 55 0 172 9 126 0 173 9 126 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 21 173 1 38 5 65 1 39 5 69 1 40 21 173 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 21 173 1 47 5 101 1 49 5 105 1 51 21 173 1 53 21 173 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 21 181 0 228 21 181 0 229 21 177 0 230 21 181 0 233 21 181 1 1 21 181 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 21 185 1 4] 
#[0 9 130 0 4 0 7 0 172] 
#[0 21 189 0 172] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 21 197 0 228 21 197 0 229 21 193 0 230 21 197 0 233 21 197 1 1 21 197 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 21 201 1 4] 
#[0 9 134 0 4 0 7 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 21 205 1 38 5 65 1 39 5 69 1 40 21 205 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 21 205 1 47 5 101 1 49 5 105 1 51 21 205 1 53 21 205 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 21 213 0 228 21 213 0 229 21 209 0 230 21 213 0 233 21 213 1 1 21 213 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 21 217 1 4] 
#[0 9 138 0 4 0 7 0 172] 
#[0 9 142 0 4 0 7 0 172] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 21 225 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 21 221 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 21 225 0 201 21 225 0 203 21 225 0 212 1 49 0 223 21 225 0 234 1 57 0 235 21 225 0 236 21 225 0 237 21 225 0 238 21 225 0 239 21 225 0 240 21 225 0 241 21 225 0 242 21 225 0 243 21 225 0 247 21 225 0 248 21 225 1 18 21 225 1 19 21 225 1 20 21 225 1 21 21 225 1 22 21 225 1 23 1 125 1 25 21 225 1 26 21 225 1 27 21 225 1 28 21 225 1 29 21 225 1 30 21 225 1 34 21 225 1 37 1 157 1 56 1 157 1 57 1 157 1 58 21 225 1 62 21 225 1 63 21 225 1 64 21 225 1 67 21 225 1 68 21 225 1 69 21 225 1 70 21 225 1 71 21 225 1 72 21 225 1 73 21 225 1 74 21 225 1 75 21 225 1 76 21 225 1 77 21 225 1 78 21 225 1 79 21 225 1 80 21 225 1 81 21 225 1 82 21 225 1 83 21 225 1 84 21 225 1 85 21 225 1 90 21 225 1 91 2 9 1 92 21 225 1 97 21 225 1 100 21 225 1 101 21 225 1 102 21 225 1 103 21 225 1 104 21 225 1 109 21 225 1 110 21 225 1 111 21 225 1 112 21 225 1 113 21 225 1 114 21 225 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 21 225 1 129 2 117 1 130 2 121 1 131 21 225 1 139 21 225 1 140 21 225 1 142] 
#[0 9 146 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 21 233 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 21 229 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 21 233 0 201 21 233 0 203 21 233 0 212 1 49 0 223 21 233 0 234 1 57 0 235 21 233 0 236 21 233 0 237 21 233 0 238 21 233 0 239 21 233 0 240 21 233 0 241 21 233 0 242 21 233 0 243 21 233 0 247 21 233 0 248 21 233 1 18 21 233 1 19 21 233 1 20 21 233 1 21 21 233 1 22 21 233 1 23 1 125 1 25 21 233 1 26 21 233 1 27 21 233 1 28 21 233 1 29 21 233 1 30 21 233 1 34 21 233 1 37 1 157 1 56 1 157 1 57 1 157 1 58 21 233 1 62 21 233 1 63 21 233 1 64 21 233 1 67 21 233 1 68 21 233 1 69 21 233 1 70 21 233 1 71 21 233 1 72 21 233 1 73 21 233 1 74 21 233 1 75 21 233 1 76 21 233 1 77 21 233 1 78 21 233 1 79 21 233 1 80 21 233 1 81 21 233 1 82 21 233 1 83 21 233 1 84 21 233 1 85 21 233 1 90 21 233 1 91 2 9 1 92 21 233 1 97 21 233 1 100 21 233 1 101 21 233 1 102 21 233 1 103 21 233 1 104 21 233 1 109 21 233 1 110 21 233 1 111 21 233 1 112 21 233 1 113 21 233 1 114 21 233 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 21 233 1 129 2 117 1 130 2 121 1 131 21 233 1 139 21 233 1 140 21 233 1 142] 
#[0 9 150 0 100 0 162] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 21 237 1 38 5 65 1 39 5 69 1 40 21 237 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 21 237 1 47 5 101 1 49 5 105 1 51 21 237 1 53 21 237 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 21 241 0 112] 
#[1 21 245 0 97 21 249 0 99 21 253 0 100] 
#[0 22 1 0 172] 
#[0 22 5 0 172] 
#[0 9 154 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 9 158 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 9 162 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 9 166 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 22 9 0 97 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 22 13 0 180 22 13 0 181 22 13 0 182 22 13 0 183 22 13 0 184 22 13 0 185 22 13 0 186 22 13 0 187 22 13 0 188 22 13 0 189 22 17 0 191 1 17 0 194 22 17 0 195 22 17 0 196 22 17 0 197 15 117 1 38 5 65 1 39 22 21 1 40 15 117 1 41 5 77 1 42 22 25 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 117 1 47 5 101 1 49 5 105 1 51 15 117 1 53 15 117 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 22 29 1 93 5 125 1 124 5 133 1 125 22 33 1 126 5 133 1 127 2 117 1 130 5 137 1 131 22 37 1 141 22 37 1 143] 
#[0 22 41 0 138] 
#[1 22 45 0 83 22 49 0 100] 
#[1 9 170 0 83 9 170 0 100 9 170 0 162 6 77 0 173] 
#[0 9 174 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 9 178 0 3 9 178 0 4 9 178 0 5 9 178 0 7 9 178 0 11 9 178 0 22 9 178 0 23 9 178 0 28 9 178 0 29 9 178 0 30 9 178 0 31 9 178 0 32 9 178 0 33 9 178 0 34 9 178 0 35 9 178 0 36 9 178 0 37 9 178 0 38 9 178 0 39 9 178 0 40 9 178 0 41 9 178 0 43 9 178 0 45 9 178 0 55 9 178 0 56 9 178 0 58 9 178 0 59 9 178 0 64 9 178 0 66 9 178 0 68 9 178 0 74 9 178 0 77 9 178 0 78 9 178 0 83 9 178 0 85 9 178 0 87 9 178 0 89 9 178 0 90 9 178 0 92 9 178 0 93 9 178 0 97 9 178 0 99 9 178 0 100 9 178 0 101 9 178 0 103 9 178 0 106 9 178 0 107 9 178 0 108 9 178 0 109 9 178 0 113 9 178 0 116 9 178 0 117 9 178 0 122 9 178 0 124 9 178 0 127 9 178 0 132 9 178 0 133 9 178 0 134 9 178 0 135 9 178 0 139 9 178 0 141 9 178 0 143 9 178 0 144 9 178 0 150 9 178 0 151 9 178 0 162 9 178 0 167 9 178 0 168 9 178 0 171 4 59 0 172 9 178 0 173 9 178 1 144] 
#[0 22 53 0 66] 
#[0 22 57 0 101] 
#[1 8 161 0 3 22 61 0 22 22 65 0 172 22 69 0 253] 
#[1 8 161 0 3 22 73 0 22 22 77 0 172 22 81 0 253] 
#[0 22 85 0 172] 
#[0 22 89 0 107] 
#[0 22 93 0 107] 
#[0 9 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 22 97 0 107 22 101 0 133] 
#[0 22 105 0 172] 
#[0 22 109 0 100] 
#[1 22 113 0 107 22 117 0 133] 
#[1 22 121 0 107 22 125 0 133] 
#[0 22 129 0 143] 
#[0 9 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 9 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 22 133 0 172] 
#[0 22 137 0 172] 
#[1 3 225 0 173 3 233 0 207 22 141 0 213] 
#[0 22 145 0 100] 
#[0 22 149 0 100] 
#[0 22 153 0 172] 
#[0 22 157 0 100] 
#[1 8 65 0 3 3 225 0 173 3 233 0 207 22 161 0 213 22 165 0 230] 
#[0 22 169 0 100] 
#[0 22 173 0 100] 
#[0 22 177 0 100] 
#[0 22 181 0 172] 
#[0 22 185 0 172] 
#[0 22 189 0 143] 
#[1 0 166 0 3 4 53 0 5 22 193 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 22 197 1 11] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 22 201 1 11] 
#[1 3 225 0 173 3 233 0 207 22 205 0 213] 
#[1 8 161 0 3 22 209 0 253] 
#[1 8 161 0 3 22 213 0 253] 
#[1 8 161 0 3 22 217 0 253] 
#[1 22 221 0 172 4 206 0 173 22 221 1 13] 
#[1 3 225 0 173 3 233 0 207 22 225 0 213] 
#[1 3 225 0 173 3 233 0 207 22 229 0 213] 
#[0 22 233 0 100] 
#[1 3 225 0 173 3 233 0 207 22 237 0 213] 
#[0 22 241 0 100] 
#[0 22 245 0 100] 
#[0 22 249 0 172] 
#[0 22 253 0 100] 
#[1 8 65 0 3 3 225 0 173 3 233 0 207 23 1 0 213 23 5 0 230] 
#[0 23 9 0 100] 
#[0 23 13 0 100] 
#[0 23 17 0 100] 
#[0 23 21 0 172] 
#[0 23 25 0 172] 
#[0 23 29 0 143] 
#[1 23 33 0 8 10 25 0 159] 
#[1 9 194 0 11 9 194 0 55 9 194 0 83 9 194 0 97 9 194 0 99 9 194 0 100 9 194 0 122 9 194 0 151 9 194 0 162 4 63 0 172 9 194 0 173 9 194 1 144] 
#[1 10 33 0 18 23 41 0 55 10 37 0 147 3 217 0 162 3 225 0 173 23 45 0 182 3 233 0 207 23 49 0 213] 
#[0 23 53 0 172] 
#[1 23 57 0 55 3 217 0 162 23 61 0 182] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 23 65 1 38 5 65 1 39 5 69 1 40 23 65 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 23 65 1 47 5 101 1 49 5 105 1 51 23 65 1 53 23 65 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 23 69 1 38 5 65 1 39 5 69 1 40 23 69 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 23 69 1 47 5 101 1 49 5 105 1 51 23 69 1 53 23 69 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 23 73 0 24 23 77 0 50 23 77 0 51 23 77 0 52 23 77 0 65 23 77 1 61] 
#[0 23 81 0 24] 
#[1 3 217 0 162 23 85 0 182] 
#[0 9 198 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 3 217 0 162 23 89 0 172 23 93 0 182] 
#[0 9 202 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 3 217 0 162 23 97 0 182] 
#[0 9 206 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 9 210 0 22 9 210 0 23 9 210 0 43 9 210 0 45 9 210 0 55 9 210 0 56 9 210 0 58 9 210 0 59 9 210 0 64 9 210 0 66 9 210 0 68 9 210 0 78 9 210 0 85 9 210 0 89 9 210 0 90 9 210 0 100 9 210 0 108 9 210 0 116 9 210 0 117 9 210 0 124 9 210 0 139 9 210 0 144 9 210 0 150 9 210 0 167 9 210 0 168 9 210 0 171 7 245 0 172 9 210 0 173] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 23 101 0 228 23 101 0 229 23 101 0 233 23 101 1 1 23 101 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 23 105 1 4] 
#[0 9 214 0 4 0 7 0 172] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 23 109 0 191 1 17 0 194 23 109 0 195 23 109 0 196 23 109 0 197] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 23 113 0 228 23 113 0 229 23 113 0 233 23 113 1 1 23 113 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 23 117 1 4] 
#[0 9 218 0 4 0 7 0 172] 
#[1 9 222 0 4 9 222 0 7 4 67 0 172] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 23 121 0 228 23 121 0 229 23 121 0 233 23 121 1 1 23 121 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 23 125 1 4] 
#[0 9 226 0 4 0 7 0 172] 
#[0 23 129 0 172] 
#[0 9 230 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 1 17 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 23 133 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 21 221 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 1 17 0 144 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 1 9 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 23 133 0 201 23 133 0 203 23 133 0 212 1 49 0 223 23 133 0 234 1 57 0 235 23 133 0 236 23 133 0 237 23 133 0 238 23 133 0 239 23 133 0 240 23 133 0 241 23 133 0 242 23 133 0 243 23 133 0 247 23 133 0 248 23 133 1 18 23 133 1 19 23 133 1 20 23 133 1 21 23 133 1 22 23 133 1 23 1 125 1 25 23 133 1 26 23 133 1 27 23 133 1 28 23 133 1 29 23 133 1 30 23 133 1 34 23 133 1 37 1 157 1 56 1 157 1 57 1 157 1 58 23 133 1 62 23 133 1 63 23 133 1 64 23 133 1 67 23 133 1 68 23 133 1 69 23 133 1 70 23 133 1 71 23 133 1 72 23 133 1 73 23 133 1 74 23 133 1 75 23 133 1 76 23 133 1 77 23 133 1 78 23 133 1 79 23 133 1 80 23 133 1 81 23 133 1 82 23 133 1 83 23 133 1 84 23 133 1 85 23 133 1 90 23 133 1 91 2 9 1 92 23 133 1 97 23 133 1 100 23 133 1 101 23 133 1 102 23 133 1 103 23 133 1 104 23 133 1 109 23 133 1 110 23 133 1 111 23 133 1 112 23 133 1 113 23 133 1 114 23 133 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 23 133 1 129 2 117 1 130 2 121 1 131 23 133 1 139 23 133 1 140 23 133 1 142] 
#[0 9 234 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 23 137 0 172] 
#[0 9 238 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 9 242 0 100 9 242 0 162 3 225 0 173 3 233 0 207 23 141 0 213] 
#[0 23 145 0 172] 
#[0 23 149 0 172] 
#[0 23 153 0 112] 
#[0 23 157 0 100] 
#[1 9 246 0 7 9 246 0 11 9 246 0 83 9 246 0 100 9 246 0 162 9 246 0 172 9 246 0 173 23 161 1 96] 
#[1 9 250 0 7 9 250 0 11 9 250 0 83 9 250 0 100 9 250 0 162 4 71 0 172 9 250 0 173] 
#[1 0 154 0 1 0 158 0 3 9 254 0 7 0 154 0 9 9 254 0 11 9 254 0 83 9 254 0 100 9 254 0 162 4 75 0 172 9 254 0 173] 
#[1 10 2 0 7 10 2 0 11 10 2 0 83 10 2 0 100 10 2 0 162 4 79 0 172 10 2 0 173] 
#[1 10 6 0 7 10 6 0 11 10 6 0 83 10 6 0 100 10 6 0 162 4 83 0 172 10 6 0 173] 
#[1 9 246 0 7 9 246 0 11 9 246 0 83 9 246 0 100 9 246 0 162 9 246 0 172 9 246 0 173 23 165 1 96] 
#[1 1 246 0 1 1 246 0 3 10 10 0 7 1 246 0 9 10 10 0 11 10 10 0 83 10 10 0 100 10 10 0 162 4 87 0 172 10 10 0 173] 
#[1 10 14 0 7 10 14 0 11 10 14 0 83 10 14 0 100 10 14 0 162 4 91 0 172 10 14 0 173] 
#[0 10 18 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 23 169 0 172] 
#[0 23 173 0 172] 
#[0 10 22 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 26 0 11 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 177 0 172] 
#[1 8 161 0 3 23 181 0 22 23 185 0 253] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 23 189 0 228 23 189 0 229 23 189 0 233 0 166 1 144] 
#[0 23 193 0 172] 
#[1 8 161 0 3 23 197 0 22 23 201 0 253] 
#[0 10 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 23 205 0 107] 
#[0 10 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 23 209 0 107 23 213 0 133] 
#[0 23 217 0 172] 
#[0 10 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 5 0 165 23 221 0 187] 
#[1 5 5 0 165 23 225 0 187] 
#[0 23 229 0 100] 
#[0 23 233 0 172] 
#[0 23 237 0 172] 
#[0 23 241 0 107] 
#[0 23 245 0 172] 
#[0 23 249 0 100] 
#[1 3 225 0 173 3 233 0 207 23 253 0 213] 
#[0 24 1 0 172] 
#[0 24 5 0 172] 
#[0 24 9 0 172] 
#[0 24 13 0 143] 
#[0 24 17 0 143] 
#[0 10 70 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 0 166 0 3 14 197 0 5 6 245 0 24 8 69 0 172 2 119 0 173 12 73 0 228 12 73 0 229 12 73 0 233 12 77 1 10 24 21 1 11] 
#[1 3 225 0 173 3 233 0 207 24 25 0 213] 
#[1 3 225 0 173 3 233 0 207 24 29 0 213] 
#[0 24 33 0 100] 
#[1 0 166 0 3 4 53 0 5 8 69 0 172 3 107 0 173 3 233 0 207 24 37 0 213 24 41 0 228 24 41 0 229 24 41 0 233] 
#[1 3 225 0 173 3 233 0 207 24 45 0 213] 
#[1 3 225 0 173 3 233 0 207 24 49 0 213] 
#[1 3 225 0 173 3 233 0 207 24 53 0 213] 
#[0 24 57 0 100] 
#[0 24 61 0 100] 
#[0 24 65 0 172] 
#[0 24 69 0 100] 
#[0 24 73 0 172] 
#[0 24 77 0 172] 
#[0 24 81 0 107] 
#[0 24 85 0 172] 
#[0 24 89 0 100] 
#[1 3 225 0 173 3 233 0 207 24 93 0 213] 
#[0 24 97 0 172] 
#[0 24 101 0 172] 
#[0 24 105 0 172] 
#[0 24 109 0 143] 
#[0 24 113 0 143] 
#[0 10 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 7 233 0 159 24 117 0 190] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 24 121 0 191 1 17 0 194 24 121 0 195 24 121 0 196 24 121 0 197] 
#[1 10 78 0 11 10 78 0 55 10 78 0 83 10 78 0 97 10 78 0 99 10 78 0 100 10 78 0 122 10 78 0 151 10 78 0 162 4 95 0 172 10 78 0 173 10 78 1 144] 
#[0 24 129 0 172] 
#[1 24 133 0 55 3 217 0 162 24 137 0 182] 
#[0 24 141 0 55] 
#[1 10 82 0 11 10 82 0 55 10 82 0 83 10 82 0 97 10 82 0 99 10 82 0 100 10 82 0 122 10 82 0 151 10 82 0 162 4 99 0 172 10 82 0 173 10 82 1 144] 
#[0 24 149 0 172] 
#[1 24 153 0 55 3 217 0 162 4 103 0 172 3 225 0 173 24 161 0 182 3 233 0 207 24 165 0 213 24 169 0 218] 
#[1 10 86 0 11 10 86 0 55 10 86 0 83 10 86 0 97 10 86 0 99 10 86 0 100 10 86 0 122 10 86 0 151 10 86 0 162 4 107 0 172 10 86 0 173 10 86 1 144] 
#[0 24 177 0 172] 
#[0 24 181 0 172] 
#[0 24 185 0 172] 
#[0 10 90 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 3 217 0 162 24 189 0 182] 
#[0 10 94 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[0 10 98 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 24 193 1 4] 
#[0 10 102 0 4 0 7 0 172] 
#[1 8 65 0 3 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 24 201 0 228 24 201 0 229 24 197 0 230 24 201 0 233 24 201 1 1 24 201 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 24 205 1 4] 
#[0 10 106 0 4 0 7 0 172] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 24 209 1 4] 
#[0 10 110 0 4 0 7 0 172] 
#[0 24 213 0 75] 
#[0 10 114 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 10 33 0 18 24 217 0 145 10 37 0 147] 
#[0 10 118 0 100 0 162] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 24 221 1 38 5 65 1 39 5 69 1 40 24 221 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 24 221 1 47 5 101 1 49 5 105 1 51 24 221 1 53 24 221 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 24 225 0 112] 
#[0 10 122 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 24 229 0 172] 
#[1 24 233 0 7 24 237 0 11 10 126 0 83 10 126 0 100 10 126 0 162 13 253 0 172 4 111 0 173 3 233 0 207 24 241 0 213 24 245 0 218 24 249 1 95] 
#[1 24 233 0 7 24 253 0 11 10 130 0 83 10 130 0 100 10 130 0 162 13 253 0 172 4 115 0 173 3 233 0 207 25 1 0 213 25 5 0 218 24 249 1 95] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 25 9 0 97 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 22 13 0 180 22 13 0 181 22 13 0 182 22 13 0 183 22 13 0 184 22 13 0 185 22 13 0 186 22 13 0 187 22 13 0 188 22 13 0 189 22 17 0 191 1 17 0 194 22 17 0 195 22 17 0 196 22 17 0 197 15 117 1 38 5 65 1 39 22 21 1 40 15 117 1 41 5 77 1 42 22 25 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 117 1 47 5 101 1 49 5 105 1 51 15 117 1 53 15 117 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 25 13 1 93 5 125 1 124 5 133 1 125 22 33 1 126 5 133 1 127 2 117 1 130 5 137 1 131 22 37 1 141 22 37 1 143] 
#[0 25 17 0 138] 
#[1 5 5 0 165 25 21 0 187] 
#[0 25 25 0 172] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 25 29 0 228 25 29 0 229 25 29 0 233 0 166 1 144] 
#[0 10 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 5 0 165 25 33 0 187] 
#[0 25 37 0 172] 
#[0 10 138 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 142 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 146 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 150 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 41 0 107 25 45 0 133] 
#[1 8 161 0 3 25 49 0 22 25 53 0 172 25 57 0 253] 
#[1 8 161 0 3 25 61 0 22 25 65 0 172 25 69 0 253] 
#[0 25 73 0 172] 
#[0 25 77 0 107] 
#[0 25 81 0 107] 
#[0 10 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 85 0 107 25 89 0 133] 
#[0 25 93 0 172] 
#[0 25 97 0 100] 
#[1 25 101 0 107 25 105 0 133] 
#[1 25 109 0 107 25 113 0 133] 
#[0 25 117 0 143] 
#[0 10 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 3 225 0 173 3 233 0 207 25 121 0 213] 
#[0 25 125 0 100] 
#[0 25 129 0 100] 
#[0 25 133 0 172] 
#[0 25 137 0 100] 
#[1 8 65 0 3 3 225 0 173 3 233 0 207 25 141 0 213 25 145 0 230] 
#[0 25 149 0 100] 
#[0 25 153 0 100] 
#[0 25 157 0 100] 
#[0 25 161 0 172] 
#[0 25 165 0 172] 
#[0 25 169 0 143] 
#[0 25 173 0 172] 
#[0 25 177 0 107] 
#[0 25 181 0 107] 
#[0 10 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 185 0 107 25 189 0 133] 
#[0 25 193 0 172] 
#[0 25 197 0 100] 
#[1 25 201 0 107 25 205 0 133] 
#[1 25 209 0 107 25 213 0 133] 
#[0 25 217 0 143] 
#[0 10 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 25 221 0 156 10 25 0 159] 
#[0 10 178 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 25 225 0 191 1 17 0 194 25 225 0 195 25 225 0 196 25 225 0 197] 
#[0 25 229 0 55] 
#[1 10 182 0 11 10 182 0 55 10 182 0 83 10 182 0 97 10 182 0 99 10 182 0 100 10 182 0 122 10 182 0 151 10 182 0 162 4 119 0 172 10 182 0 173 10 182 1 144] 
#[0 25 237 0 172] 
#[1 10 186 0 11 10 186 0 55 10 186 0 83 10 186 0 97 10 186 0 99 10 186 0 100 10 186 0 122 10 186 0 151 10 186 0 162 4 123 0 172 10 186 0 173 10 186 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 25 245 0 191 1 17 0 194 25 245 0 195 25 245 0 196 25 245 0 197] 
#[0 25 249 0 55] 
#[1 4 127 0 11 4 127 0 55 4 127 0 83 4 127 0 97 4 127 0 99 4 127 0 100 4 127 0 122 4 127 0 151 4 127 0 162 4 131 0 172 4 127 0 173 4 127 1 144] 
#[1 0 29 0 1 0 33 0 9 7 54 0 11 10 33 0 18 1 17 0 22 1 17 0 23 0 45 0 25 0 49 0 27 0 53 0 42 0 57 0 43 0 61 0 44 1 17 0 45 0 69 0 49 0 73 0 54 3 27 0 55 1 17 0 56 0 85 0 57 1 17 0 58 0 93 0 59 0 97 0 60 1 17 0 64 0 105 0 66 1 17 0 68 0 113 0 74 16 157 0 76 1 17 0 78 1 17 0 85 0 129 0 87 1 17 0 89 1 17 0 90 0 141 0 93 0 145 0 94 0 149 0 101 0 153 0 103 0 157 0 104 1 49 0 106 1 17 0 108 1 49 0 109 0 173 0 110 0 177 0 111 0 181 0 112 1 17 0 116 0 189 0 117 0 193 0 124 0 197 0 126 0 201 0 127 1 49 0 132 1 49 0 134 0 213 0 135 0 217 0 136 0 221 0 137 0 225 0 138 0 229 0 139 0 233 0 141 26 1 0 142 1 17 0 144 10 37 0 147 1 17 0 150 0 245 0 152 0 249 0 153 0 253 0 167 1 1 0 168 1 5 0 171 3 31 0 172 1 13 0 191 1 17 0 194 1 13 0 195 1 13 0 196 1 13 0 197 1 33 0 198 16 157 0 201 16 157 0 203 16 157 0 212 16 161 0 220 1 49 0 223 16 157 0 234 1 57 0 235 16 157 0 236 16 157 0 237 16 157 0 238 16 157 0 239 16 157 0 240 16 157 0 241 16 157 0 242 16 157 0 243 16 157 0 247 16 157 0 248 16 157 1 18 16 157 1 19 16 157 1 20 16 157 1 21 16 157 1 22 16 157 1 23 1 125 1 25 16 157 1 26 16 157 1 27 16 157 1 28 16 157 1 29 16 157 1 30 16 157 1 34 16 157 1 37 1 157 1 56 1 157 1 57 1 157 1 58 16 157 1 62 16 157 1 63 16 157 1 64 16 157 1 67 16 157 1 68 16 157 1 69 16 157 1 70 16 157 1 71 16 157 1 72 16 157 1 73 16 157 1 74 16 157 1 75 16 157 1 76 16 157 1 77 16 157 1 78 16 157 1 79 16 157 1 80 16 157 1 81 16 157 1 82 16 157 1 83 16 157 1 84 16 157 1 85 16 157 1 90 16 157 1 91 2 9 1 92 16 157 1 97 16 157 1 100 16 157 1 101 16 157 1 102 16 157 1 103 16 157 1 104 16 157 1 109 16 157 1 110 16 157 1 111 16 157 1 112 16 157 1 113 16 157 1 114 16 157 1 116 2 65 1 117 2 65 1 118 2 65 1 119 2 65 1 120 2 65 1 121 2 65 1 122 2 65 1 123 2 93 1 124 2 105 1 125 2 101 1 126 2 105 1 127 2 109 1 128 16 157 1 129 2 117 1 130 2 121 1 131 16 157 1 139 16 157 1 140 16 157 1 142] 
#[0 26 5 0 172] 
#[1 26 9 0 55 3 217 0 162 26 13 0 182] 
#[0 26 17 0 55] 
#[1 10 33 0 18 26 21 0 116 10 37 0 147] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 26 25 1 38 5 65 1 39 5 69 1 40 26 25 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 26 25 1 47 5 101 1 49 5 105 1 51 26 25 1 53 26 25 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 26 29 0 24] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 26 33 1 38 5 65 1 39 5 69 1 40 26 33 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 26 33 1 47 5 101 1 49 5 105 1 51 26 33 1 53 26 33 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 10 198 0 22 0 23 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 78 0 85 0 89 0 90 0 100 0 108 0 116 0 117 0 124 0 139 0 144 0 150 0 167 0 168 0 171 0 173] 
#[0 10 202 0 4 0 7 0 172] 
#[1 2 155 0 4 4 53 0 5 2 155 0 7 2 159 0 172 26 37 0 228 26 37 0 229 26 37 0 233 26 37 1 1 26 37 1 2] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 26 41 1 4] 
#[0 10 206 0 4 0 7 0 172] 
#[0 10 210 0 4 0 7 0 172] 
#[0 26 45 0 172] 
#[1 10 214 0 97 10 214 0 99 10 214 0 100 10 214 0 162 3 225 0 173 3 233 0 207 26 49 0 213] 
#[0 26 53 0 172] 
#[0 10 218 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 26 57 0 112] 
#[0 26 61 0 172] 
#[1 10 222 0 83 10 222 0 100 10 222 0 162 13 253 0 172 4 135 0 173 3 233 0 207 26 65 0 213 26 69 0 218] 
#[0 10 226 0 83 0 100 0 162 0 173] 
#[0 26 73 0 173] 
#[0 10 230 0 7 0 11 0 83 0 100 0 162 0 172 0 173] 
#[1 10 234 0 83 10 234 0 100 10 234 0 162 13 253 0 172 4 139 0 173 3 233 0 207 26 77 0 213 26 81 0 218] 
#[0 10 238 0 83 0 100 0 162 0 173] 
#[0 26 85 0 173] 
#[1 9 246 0 7 9 246 0 11 9 246 0 83 9 246 0 100 9 246 0 162 9 246 0 172 9 246 0 173 26 89 1 96] 
#[1 9 246 0 7 9 246 0 11 9 246 0 83 9 246 0 100 9 246 0 162 9 246 0 172 9 246 0 173 26 93 1 96] 
#[0 10 242 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 8 161 0 3 26 97 0 172 26 101 0 253] 
#[1 5 5 0 165 26 105 0 187] 
#[0 10 246 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 26 109 0 172 26 113 0 253] 
#[1 5 5 0 165 26 117 0 187] 
#[0 10 250 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 10 254 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 121 0 172] 
#[1 8 161 0 3 26 125 0 22 26 129 0 253] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 26 133 0 228 26 133 0 229 26 133 0 233 0 166 1 144] 
#[0 26 137 0 172] 
#[1 8 161 0 3 26 141 0 22 26 145 0 253] 
#[0 11 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 149 0 107] 
#[0 11 6 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 10 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 153 0 107 26 157 0 133] 
#[0 26 161 0 172] 
#[0 11 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 165 0 100] 
#[0 26 169 0 172] 
#[0 26 173 0 172] 
#[0 26 177 0 107] 
#[0 26 181 0 172] 
#[0 26 185 0 100] 
#[1 3 225 0 173 3 233 0 207 26 189 0 213] 
#[0 26 193 0 172] 
#[0 26 197 0 172] 
#[0 26 201 0 172] 
#[0 26 205 0 143] 
#[0 26 209 0 143] 
#[0 11 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 26 213 0 107] 
#[0 11 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 26 217 0 107 26 221 0 133] 
#[0 26 225 0 172] 
#[0 11 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 70 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 74 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 78 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 82 0 3 0 4 0 5 0 7 0 11 0 13 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 83 0 85 0 87 0 89 0 90 0 92 0 93 0 97 0 99 0 100 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 122 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 151 0 162 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 86 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 11 90 0 11 11 90 0 55 11 90 0 83 11 90 0 97 11 90 0 99 11 90 0 100 11 90 0 122 11 90 0 151 11 90 0 162 4 143 0 172 11 90 0 173 11 90 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 233 0 191 1 17 0 194 26 233 0 195 26 233 0 196 26 233 0 197] 
#[0 26 237 0 55] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 241 0 191 1 17 0 194 26 241 0 195 26 241 0 196 26 241 0 197] 
#[0 11 94 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 11 98 0 11 11 98 0 55 11 98 0 83 11 98 0 97 11 98 0 99 11 98 0 100 11 98 0 122 11 98 0 151 11 98 0 162 4 147 0 172 11 98 0 173 11 98 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 26 249 0 191 1 17 0 194 26 249 0 195 26 249 0 196 26 249 0 197] 
#[0 26 253 0 172] 
#[0 27 1 0 55] 
#[1 11 102 0 11 11 102 0 55 11 102 0 83 11 102 0 97 11 102 0 99 11 102 0 100 11 102 0 122 11 102 0 151 11 102 0 162 4 151 0 172 11 102 0 173 11 102 1 144] 
#[0 27 9 0 172] 
#[0 11 106 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[0 27 13 0 172] 
#[1 11 110 0 11 11 110 0 55 11 110 0 83 11 110 0 97 11 110 0 99 11 110 0 100 11 110 0 122 11 110 0 151 11 110 0 162 4 155 0 172 11 110 0 173 11 110 1 144] 
#[0 27 21 0 172] 
#[1 11 114 0 11 11 114 0 55 11 114 0 83 11 114 0 97 11 114 0 99 11 114 0 100 11 114 0 122 11 114 0 151 11 114 0 162 4 159 0 172 11 114 0 173 11 114 1 144] 
#[1 7 46 0 4 7 46 0 7 3 23 0 172 16 113 1 3 27 29 1 4] 
#[0 11 118 0 4 0 7 0 172] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 27 33 1 38 5 65 1 39 5 69 1 40 27 33 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 27 33 1 47 5 101 1 49 5 105 1 51 27 33 1 53 27 33 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 11 122 0 97 0 99 0 100 0 162] 
#[1 10 33 0 18 27 37 0 145 10 37 0 147] 
#[0 11 126 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 22 13 0 180 22 13 0 181 22 13 0 182 22 13 0 183 22 13 0 184 22 13 0 185 22 13 0 186 22 13 0 187 22 13 0 188 22 13 0 189 22 17 0 191 1 17 0 194 22 17 0 195 22 17 0 196 22 17 0 197 15 117 1 38 5 65 1 39 22 21 1 40 15 117 1 41 5 77 1 42 22 25 1 43 5 77 1 44 5 77 1 45 5 93 1 46 15 117 1 47 5 101 1 49 5 105 1 51 15 117 1 53 15 117 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 27 41 1 93 5 125 1 124 5 133 1 125 22 33 1 126 5 133 1 127 2 117 1 130 5 137 1 131 22 37 1 141 22 37 1 143] 
#[0 11 130 0 83 0 100 0 162 0 173] 
#[0 27 45 0 173] 
#[0 11 134 0 83 0 100 0 162 0 173] 
#[0 11 138 0 83 0 100 0 162 0 173] 
#[0 27 49 0 173] 
#[0 11 142 0 83 0 100 0 162 0 173] 
#[1 24 233 0 7 27 53 0 11 11 146 0 83 11 146 0 100 11 146 0 162 13 253 0 172 4 163 0 173 3 233 0 207 27 57 0 213 27 61 0 218 24 249 1 95] 
#[1 24 233 0 7 27 65 0 11 11 150 0 83 11 150 0 100 11 150 0 162 13 253 0 172 4 167 0 173 3 233 0 207 27 69 0 213 27 73 0 218 24 249 1 95] 
#[1 8 161 0 3 27 77 0 253] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 27 81 0 228 27 81 0 229 27 81 0 233 0 166 1 144] 
#[1 8 161 0 3 27 85 0 172 27 89 0 253] 
#[1 8 161 0 3 27 93 0 253] 
#[0 11 154 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 27 97 0 172 27 101 0 253] 
#[1 5 5 0 165 27 105 0 187] 
#[0 27 109 0 172] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 27 113 0 228 27 113 0 229 27 113 0 233 0 166 1 144] 
#[0 11 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 5 5 0 165 27 117 0 187] 
#[0 27 121 0 172] 
#[0 11 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 125 0 107 27 129 0 133] 
#[0 27 133 0 172] 
#[0 27 137 0 107] 
#[0 27 141 0 107] 
#[0 11 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 145 0 107 27 149 0 133] 
#[0 27 153 0 172] 
#[0 27 157 0 100] 
#[1 27 161 0 107 27 165 0 133] 
#[1 27 169 0 107 27 173 0 133] 
#[0 27 177 0 143] 
#[0 11 182 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 186 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 190 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 11 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 27 181 0 107 27 185 0 133] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 189 0 191 1 17 0 194 27 189 0 195 27 189 0 196 27 189 0 197] 
#[0 11 202 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 11 206 0 11 11 206 0 55 11 206 0 83 11 206 0 97 11 206 0 99 11 206 0 100 11 206 0 122 11 206 0 151 11 206 0 162 4 171 0 172 11 206 0 173 11 206 1 144] 
#[0 11 210 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 197 0 191 1 17 0 194 27 197 0 195 27 197 0 196 27 197 0 197] 
#[0 11 214 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 27 201 1 38 5 65 1 39 5 69 1 40 27 201 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 27 201 1 47 5 101 1 49 5 105 1 51 27 201 1 53 27 201 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 11 218 0 11 11 218 0 55 11 218 0 83 11 218 0 97 11 218 0 99 11 218 0 100 11 218 0 122 11 218 0 151 11 218 0 162 4 175 0 172 11 218 0 173 11 218 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 27 209 0 191 1 17 0 194 27 209 0 195 27 209 0 196 27 209 0 197] 
#[0 27 213 0 55] 
#[0 27 217 0 18] 
#[1 10 33 0 18 27 221 0 116 10 37 0 147] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 27 225 1 38 5 65 1 39 5 69 1 40 27 225 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 27 225 1 47 5 101 1 49 5 105 1 51 27 225 1 53 27 225 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[1 10 33 0 18 27 229 0 116 10 37 0 147] 
#[0 11 222 0 4 0 7 0 172] 
#[1 4 179 0 11 4 179 0 55 4 179 0 83 4 179 0 97 4 179 0 99 4 179 0 100 4 179 0 122 4 179 0 151 4 179 0 162 4 183 0 172 4 179 0 173 4 179 1 144] 
#[1 11 226 0 97 11 226 0 99 11 226 0 100 11 226 0 162 3 225 0 173 3 233 0 207 27 233 0 213] 
#[0 11 230 0 7 0 11 0 83 0 100 0 162 0 172 0 173] 
#[0 11 234 0 83 0 100 0 162 0 173] 
#[0 11 238 0 83 0 100 0 162 0 173] 
#[1 11 242 0 83 11 242 0 100 11 242 0 162 13 253 0 172 4 187 0 173 3 233 0 207 27 237 0 213 27 241 0 218] 
#[0 11 246 0 83 0 100 0 162 0 173] 
#[0 27 245 0 173] 
#[1 11 250 0 83 11 250 0 100 11 250 0 162 13 253 0 172 4 191 0 173 3 233 0 207 27 249 0 213 27 253 0 218] 
#[0 11 254 0 83 0 100 0 162 0 173] 
#[0 28 1 0 173] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 5 0 228 28 5 0 229 28 5 0 233 0 166 1 144] 
#[0 12 2 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 9 0 253] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 13 0 228 28 13 0 229 28 13 0 233 0 166 1 144] 
#[0 12 6 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 17 0 253] 
#[0 12 10 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 21 0 172 28 25 0 253] 
#[1 5 5 0 165 28 29 0 187] 
#[0 12 14 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 33 0 172 28 37 0 253] 
#[1 5 5 0 165 28 41 0 187] 
#[0 12 18 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 22 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 28 45 0 107] 
#[0 12 26 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 30 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 34 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 38 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 28 49 0 107 28 53 0 133] 
#[0 28 57 0 172] 
#[0 12 42 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 46 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 50 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 54 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 58 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 62 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 66 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 70 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 61 0 191 1 17 0 194 28 61 0 195 28 61 0 196 28 61 0 197] 
#[0 12 74 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 28 65 0 55 3 217 0 162 7 245 0 172 3 225 0 173 28 69 0 182 3 233 0 207 28 73 0 213] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 77 0 191 1 17 0 194 28 77 0 195 28 77 0 196 28 77 0 197] 
#[0 12 78 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 12 82 0 11 12 82 0 55 12 82 0 83 12 82 0 97 12 82 0 99 12 82 0 100 12 82 0 122 12 82 0 151 12 82 0 162 4 195 0 172 12 82 0 173 12 82 1 144] 
#[0 28 85 0 172] 
#[0 28 89 0 172] 
#[1 12 86 0 11 12 86 0 55 12 86 0 83 12 86 0 97 12 86 0 99 12 86 0 100 12 86 0 122 12 86 0 151 12 86 0 162 4 199 0 172 12 86 0 173 12 86 1 144] 
#[0 28 97 0 172] 
#[0 12 90 0 97 0 99 0 100 0 162] 
#[0 12 94 0 83 0 100 0 162 0 173] 
#[0 28 101 0 173] 
#[0 12 98 0 83 0 100 0 162 0 173] 
#[0 12 102 0 83 0 100 0 162 0 173] 
#[0 28 105 0 173] 
#[0 12 106 0 83 0 100 0 162 0 173] 
#[0 12 110 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 109 0 228 28 109 0 229 28 109 0 233 0 166 1 144] 
#[0 12 114 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 118 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 113 0 253] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 117 0 228 28 117 0 229 28 117 0 233 0 166 1 144] 
#[1 8 161 0 3 28 121 0 172 28 125 0 253] 
#[1 8 161 0 3 28 129 0 253] 
#[0 12 122 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 133 0 172 28 137 0 253] 
#[0 12 126 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 130 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 134 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 28 141 0 107 28 145 0 133] 
#[0 12 138 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 12 142 0 11 12 142 0 55 12 142 0 83 12 142 0 97 12 142 0 99 12 142 0 100 12 142 0 122 12 142 0 151 12 142 0 162 4 203 0 172 12 142 0 173 12 142 1 144] 
#[0 28 153 0 172] 
#[1 28 157 0 55 3 217 0 162 28 161 0 182] 
#[0 12 146 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 165 0 191 1 17 0 194 28 165 0 195 28 165 0 196 28 165 0 197] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 28 169 1 38 5 65 1 39 5 69 1 40 28 169 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 28 169 1 47 5 101 1 49 5 105 1 51 28 169 1 53 28 169 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 28 173 0 18] 
#[1 10 33 0 18 28 177 0 116 10 37 0 147] 
#[0 28 181 0 18] 
#[0 12 150 0 83 0 100 0 162 0 173] 
#[0 12 154 0 83 0 100 0 162 0 173] 
#[0 12 158 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 185 0 228 28 185 0 229 28 185 0 233 0 166 1 144] 
#[0 12 162 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 189 0 253] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 193 0 228 28 193 0 229 28 193 0 233 0 166 1 144] 
#[0 12 166 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 8 161 0 3 28 197 0 253] 
#[0 12 170 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 174 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 178 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 201 0 191 1 17 0 194 28 201 0 195 28 201 0 196 28 201 0 197] 
#[0 28 205 0 55] 
#[1 12 182 0 11 12 182 0 55 12 182 0 83 12 182 0 97 12 182 0 99 12 182 0 100 12 182 0 122 12 182 0 151 12 182 0 162 4 207 0 172 12 182 0 173 12 182 1 144] 
#[0 28 213 0 172] 
#[0 12 186 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 12 190 0 11 12 190 0 55 12 190 0 83 12 190 0 97 12 190 0 99 12 190 0 100 12 190 0 122 12 190 0 151 12 190 0 162 4 211 0 172 12 190 0 173 12 190 1 144] 
#[0 28 217 0 172] 
#[0 28 221 0 172] 
#[0 28 225 0 172] 
#[0 12 194 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 4 53 0 5 0 166 0 22 0 166 0 23 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 166 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 39 0 166 0 40 0 166 0 41 0 166 0 43 0 166 0 45 0 166 0 55 0 166 0 56 0 166 0 58 0 166 0 59 0 166 0 64 0 166 0 66 0 166 0 68 0 166 0 74 0 166 0 77 0 166 0 78 0 166 0 85 0 166 0 87 0 166 0 89 0 166 0 90 0 166 0 92 0 166 0 93 0 166 0 101 0 166 0 103 0 166 0 106 0 166 0 107 0 166 0 108 0 166 0 109 0 166 0 113 0 166 0 116 0 166 0 117 0 166 0 124 0 166 0 127 0 166 0 132 0 166 0 133 0 166 0 134 0 166 0 135 0 166 0 139 0 166 0 141 0 166 0 143 0 166 0 144 0 166 0 150 0 166 0 167 0 166 0 168 0 166 0 171 3 3 0 172 0 166 0 173 28 229 0 228 28 229 0 229 28 229 0 233 0 166 1 144] 
#[0 12 198 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 202 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[0 12 206 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 12 210 0 11 12 210 0 55 12 210 0 83 12 210 0 97 12 210 0 99 12 210 0 100 12 210 0 122 12 210 0 151 12 210 0 162 4 215 0 172 12 210 0 173 12 210 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 28 237 0 191 1 17 0 194 28 237 0 195 28 237 0 196 28 237 0 197] 
#[0 28 241 0 55] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 28 245 1 38 5 65 1 39 5 69 1 40 28 245 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 28 245 1 47 5 101 1 49 5 105 1 51 28 245 1 53 28 245 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 28 249 0 18] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 28 253 1 38 5 65 1 39 5 69 1 40 28 253 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 28 253 1 47 5 101 1 49 5 105 1 51 28 253 1 53 28 253 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 12 214 0 22 0 23 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 41 0 43 0 45 0 55 0 56 0 58 0 59 0 64 0 66 0 68 0 74 0 77 0 78 0 85 0 87 0 89 0 90 0 92 0 93 0 101 0 103 0 106 0 107 0 108 0 109 0 113 0 116 0 117 0 124 0 127 0 132 0 133 0 134 0 135 0 139 0 141 0 143 0 144 0 150 0 167 0 168 0 171 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 29 1 0 191 1 17 0 194 29 1 0 195 29 1 0 196 29 1 0 197] 
#[0 12 218 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 12 222 0 11 12 222 0 55 12 222 0 83 12 222 0 97 12 222 0 99 12 222 0 100 12 222 0 122 12 222 0 151 12 222 0 162 4 219 0 172 12 222 0 173 12 222 1 144] 
#[1 12 226 0 11 12 226 0 55 12 226 0 83 12 226 0 97 12 226 0 99 12 226 0 100 12 226 0 122 12 226 0 151 12 226 0 162 4 223 0 172 12 226 0 173 12 226 1 144] 
#[0 29 9 0 172] 
#[1 12 230 0 11 12 230 0 55 12 230 0 83 12 230 0 97 12 230 0 99 12 230 0 100 12 230 0 122 12 230 0 151 12 230 0 162 4 227 0 172 12 230 0 173 12 230 1 144] 
#[0 12 234 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 1 17 0 22 1 17 0 23 1 17 0 43 1 17 0 45 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 1 17 0 139 1 17 0 144 1 17 0 150 1 17 0 167 1 1 0 168 1 5 0 171 29 13 0 191 1 17 0 194 29 13 0 195 29 13 0 196 29 13 0 197] 
#[1 0 29 0 1 4 221 0 3 4 225 0 6 4 229 0 8 0 33 0 9 1 17 0 22 1 17 0 23 0 45 0 25 1 17 0 43 1 17 0 45 0 73 0 54 1 17 0 55 1 17 0 56 1 17 0 58 1 17 0 59 1 17 0 64 1 17 0 66 4 233 0 67 1 17 0 68 1 17 0 78 1 17 0 85 1 17 0 89 1 17 0 90 1 17 0 108 1 17 0 116 1 17 0 117 1 17 0 124 4 237 0 125 1 17 0 139 1 17 0 144 1 17 0 150 4 241 0 155 4 245 0 160 4 249 0 161 3 217 0 162 4 253 0 163 5 1 0 164 5 5 0 165 5 9 0 166 1 17 0 167 1 1 0 168 5 13 0 170 1 5 0 171 5 17 0 180 5 17 0 181 5 17 0 182 5 17 0 183 5 17 0 184 5 17 0 185 5 17 0 186 5 17 0 187 5 17 0 188 5 17 0 189 5 57 0 191 1 17 0 194 5 57 0 195 5 57 0 196 5 57 0 197 29 17 1 38 5 65 1 39 5 69 1 40 29 17 1 41 5 77 1 42 5 77 1 43 5 77 1 44 5 77 1 45 5 93 1 46 29 17 1 47 5 101 1 49 5 105 1 51 29 17 1 53 29 17 1 54 5 117 1 55 5 121 1 56 5 121 1 57 5 121 1 58 5 125 1 124 5 133 1 125 5 129 1 126 5 133 1 127 2 117 1 130 5 137 1 131 5 145 1 141 5 145 1 143] 
#[0 12 238 0 11 0 55 0 83 0 97 0 99 0 100 0 122 0 151 0 162 0 172 0 173 1 144] 
#[1 12 242 0 11 12 242 0 55 12 242 0 83 12 242 0 97 12 242 0 99 12 242 0 100 12 242 0 122 12 242 0 151 12 242 0 162 4 231 0 172 12 242 0 173 12 242 1 144]
	).
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAddressOfClause1: nodes [
	| result |
	result := VBAddressOfClauseNode new.
	result addressOfToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument2: nodes [
	| result |
	result := VBArgumentNode new.
	result value: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument4: nodes [
	| result |
	result := VBArgumentNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument6: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgument8: nodes [
	| result |
	result := VBArgumentNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList1: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result arguments.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArgumentList2: nodes [
	| result |
	result := VBArgumentListNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result whitespaceTokens.
	result addTokens: ((nodes at: 1) at: 3) to: result semicolonTokens.
	result addNodes: ((nodes at: 1) at: 4) to: result arguments.
	result addNode: (nodes at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result arguments.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result semicolonTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperation1: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result timesToken: ((nodes at: 3) at: 1).
	result plusToken: ((nodes at: 3) at: 2).
	result minusToken: ((nodes at: 3) at: 3).
	result divideToken: ((nodes at: 3) at: 4).
	result upArrowToken: ((nodes at: 3) at: 5).
	result _Token: ((nodes at: 3) at: 6).
	result modToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator1: nodes [
	| result |
	result := Array new: 7.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator2: nodes [
	| result |
	result := Array new: 7.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator3: nodes [
	| result |
	result := Array new: 7.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForArithmeticOperator4: nodes [
	| result |
	result := Array new: 7.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAssignment2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForAttribute1: nodes [
	| result |
	result := VBModuleAttributeNode new.
	result attributeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result setting: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBaseType15: nodes [
	| result |
	result := VBBaseTypeNode new.
	result variantToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObjects: ((nodes at: 2) at: 1) to: result statements.
	result addNodes: ((nodes at: 2) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addObjects: ((nodes at: 3) at: 1) to: result statements.
	result addNodes: ((nodes at: 3) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 3) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 3) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock3: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObjects: ((nodes at: 4) at: 1) to: result statements.
	result addNodes: ((nodes at: 4) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 4) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 4) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBlock4: nodes [
	| result |
	result := VBBlockNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result lineNumbers.
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result addObject: (nodes at: 4) to: result statements.
	result addObjects: ((nodes at: 5) at: 1) to: result statements.
	result addNodes: ((nodes at: 5) at: 2) to: result lineNumbers.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	result addTokens: ((nodes at: 5) at: 4) to: result eolTokens.
	result addTokens: ((nodes at: 5) at: 5) to: result colonTokens.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanBinaryOperation3: nodes [
	| result |
	result := VBArithmeticOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: ((nodes at: 3) at: 1).
	result orToken: ((nodes at: 3) at: 2).
	result xorToken: ((nodes at: 3) at: 3).
	result eqvToken: ((nodes at: 3) at: 4).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanLiteral1: nodes [
	| result |
	result := VBBooleanLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForBooleanOperator4: nodes [
	| result |
	result := Array new: 4.
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase10: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase11: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase12: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase13: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase14: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase15: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase16: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase17: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase18: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result expressions.
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase19: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase1: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase20: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase21: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result body: (nodes at: 7).
	result eolToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase22: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase23: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase24: nodes [
	| result |
	result := VBCaseNode new.
	result lineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result elseToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 6) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 6) at: 3) to: result expressions.
	result colonToken: (nodes at: 7).
	result body: (nodes at: 8).
	result eolToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase2: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase3: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase4: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase5: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase6: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addNode: (nodes at: 3) to: result expressions.
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result colonToken: (nodes at: 5).
	result body: (nodes at: 6).
	result eolToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase7: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase8: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForCase9: nodes [
	| result |
	result := VBCaseNode new.
	result caseToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 4) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 4) at: 3) to: result expressions.
	result body: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForColorLiteral1: nodes [
	| result |
	result := VBColorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperation1: nodes [
	| result |
	result := VBComparisonOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result greaterThanToken: ((nodes at: 3) at: 1).
	result lessThanToken: ((nodes at: 3) at: 2).
	result lessThanGreaterThanToken: ((nodes at: 3) at: 3).
	result lessThanEqualToken: ((nodes at: 3) at: 4).
	result greaterThanEqualToken: ((nodes at: 3) at: 5).
	result iSToken: ((nodes at: 3) at: 6).
	result lIKEToken: ((nodes at: 3) at: 7).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator5: nodes [
	| result |
	result := Array new: 7.
	result at: 5 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator6: nodes [
	| result |
	result := Array new: 7.
	result at: 6 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComparisonOperator7: nodes [
	| result |
	result := Array new: 7.
	result at: 7 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType1: nodes [
	| result |
	result := VBComplexTypeNode new.
	result addTokens: ((nodes at: 1) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 1) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForComplexType2: nodes [
	| result |
	result := VBComplexTypeNode new.
	result base: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result periodTokens.
	result addTokens: ((nodes at: 2) at: 2) to: result members.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConcatenationOperation1: nodes [
	| result |
	result := VBConcatenationOperationNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result andToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConfiguration1: nodes [
	| result |
	result := VBConfigurationNode new.
	result beginToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result eolTokens.
	result addNode: (nodes at: 3) to: result settings.
	result addNodes: ((nodes at: 4) at: 1) to: result settings.
	result addTokens: ((nodes at: 4) at: 2) to: result eolTokens.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant1: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstant2: nodes [
	| result |
	result := VBConstantNode new.
	result constant: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result equalToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForConstantList1: nodes [
	| result |
	result := VBConstantListNode new.
	result addNode: (nodes at: 1) to: result constants.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result constants.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDateLiteral1: nodes [
	| result |
	result := VBDateLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction10: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction11: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction12: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	result type: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction1: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction2: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	result type: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction3: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction4: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	result type: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction5: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	result type: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction6: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result functionToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction7: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	result type: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction8: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	result type: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareFunction9: nodes [
	| result |
	result := VBExternalFunctionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result functionToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	result type: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub10: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub11: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub12: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result alias: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result parameters: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub1: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result parameters: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub2: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result parameters: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub3: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result aLIASToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result alias: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub4: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result parameters: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub5: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result parameters: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub6: nodes [
	| result |
	result := VBExternalSubNode new.
	result declareToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result subToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result libToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result library: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aLIASToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result alias: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub7: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result parameters: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub8: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result parameters: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDeclareSub9: nodes [
	| result |
	result := VBExternalSubNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result declareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result subToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result libToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result library: (nodes at: 11).
	result aLIASToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result alias: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result parameters: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefType1: nodes [
	| result |
	result := VBDefTypeNode new.
	result deftype: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result pattern: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum1: nodes [
	| result |
	result := VBDefineEnumNode new.
	result addToken: (nodes at: 1) to: result enumTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineEnum2: nodes [
	| result |
	result := VBDefineEnumNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result enumTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result enumTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction10: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction11: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction12: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction13: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction14: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction15: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result type: ((nodes at: 10) at: 1).
	result _size: ((nodes at: 10) at: 2).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction16: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result functionTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result type: ((nodes at: 11) at: 1).
	result _size: ((nodes at: 11) at: 2).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction1: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result type: ((nodes at: 5) at: 1).
	result _size: ((nodes at: 5) at: 2).
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction2: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction3: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result type: ((nodes at: 6) at: 1).
	result _size: ((nodes at: 6) at: 2).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction4: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result addToken: (nodes at: 1) to: result functionTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction5: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction6: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction7: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result type: ((nodes at: 8) at: 1).
	result _size: ((nodes at: 8) at: 2).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction8: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result type: ((nodes at: 9) at: 1).
	result _size: ((nodes at: 9) at: 2).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineFunction9: nodes [
	| result |
	result := VBFunctionDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result functionTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: ((nodes at: 7) at: 1).
	result _size: ((nodes at: 7) at: 2).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result functionTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub10: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub11: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub12: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub13: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub14: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub15: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub16: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result subTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result parameters: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub1: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result block: (nodes at: 5).
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub2: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub3: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result block: (nodes at: 6).
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub4: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result addToken: (nodes at: 1) to: result subTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub5: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub6: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub7: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub8: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineSub9: nodes [
	| result |
	result := VBSubDefinitionNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result subTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result subTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType1: nodes [
	| result |
	result := VBDefineTypeNode new.
	result addToken: (nodes at: 1) to: result tYPETokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result fields.
	result addTokens: (nodes at: 5) to: result eolTokens.
	result endToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addToken: (nodes at: 8) to: result tYPETokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineType2: nodes [
	| result |
	result := VBDefineTypeNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result tYPETokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result fields.
	result addTokens: (nodes at: 7) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result tYPETokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariable1: nodes [
	| result |
	result := VBDimVariableNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDefineVariables1: nodes [
	| result |
	result := VBDimMultipleVariablesNode new.
	result dimToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDestinationList1: nodes [
	| result |
	result := VBDestinationListNode new.
	result addNode: (nodes at: 1) to: result labels.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result labels.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess1: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result bangToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDictionaryAccess2: nodes [
	| result |
	result := VBDictionaryAccessNode new.
	result receiver: (nodes at: 1).
	result bangToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoEvents1: nodes [
	| result |
	result := VBDoEventsNode new.
	result doEventsToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue1: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result untilToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoUntilTrue2: nodes [
	| result |
	result := VBDoUntilTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result untilToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue1: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result whileToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result condition: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue2: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result loopToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result whileToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result condition: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue3: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result whileToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result condition: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForDoWhileTrue4: nodes [
	| result |
	result := VBDoWhileTrueNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result loopToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result whileToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result condition: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseToken: (nodes at: 1).
	result ifMatch: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElse4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseToken: (nodes at: 3).
	result ifMatch: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf1: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf2: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result elseifToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result ifMatch: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf3: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForElseIf4: nodes [
	| result |
	result := VBElseIfBlockNode new.
	result endLineNumber: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result elseifToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result thenToken: (nodes at: 7).
	result ifMatch: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry1: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEnumEntry2: nodes [
	| result |
	result := VBEnumEntryNode new.
	result name: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEquals1: nodes [
	| result |
	result := VBEqualsNode new.
	result left: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result operator: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result right: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent1: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result parameters: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent2: nodes [
	| result |
	result := VBEventNode new.
	result eventToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result selector: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result parameters: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent3: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForEvent4: nodes [
	| result |
	result := VBEventNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eventToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result parameters: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitDo1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result doToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFor1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result fORToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitFunction1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result functionToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitProperty1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result propertyToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExitSub1: nodes [
	| result |
	result := VBExitsNode new.
	result exitToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result subToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitAssignement2: nodes [
	| result |
	result := VBExplicitAssignementNode new.
	result kind: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result left: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result operator: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result right: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForExplicitCall1: nodes [
	| result |
	result := VBExplicitCallNode new.
	result callToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFileDescriptorLiteral1: nodes [
	| result |
	result := VBFileDescriptorLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForFloatLiteral1: nodes [
	| result |
	result := VBFloatLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach10: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach11: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach12: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach13: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach14: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach15: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach16: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result body: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addNode: (nodes at: 16) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach1: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach2: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result nEXTToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addNode: (nodes at: 12) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach3: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach4: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result endLineNumber: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addNode: (nodes at: 14) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach5: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach6: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result nEXTToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addNode: (nodes at: 13) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach7: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach8: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result body: (nodes at: 10).
	result endLineNumber: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addNode: (nodes at: 15) to: result elements.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForEach9: nodes [
	| result |
	result := VBForEachNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eachToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result elements.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result inToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result group: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext1: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext2: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result nEXTToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result element: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext3: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext4: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result endLineNumber: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result element: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext5: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext6: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result nEXTToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result element: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext7: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForNext8: nodes [
	| result |
	result := VBForNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result body: (nodes at: 12).
	result endLineNumber: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result element: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext1: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext2: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result nEXTToken: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result element: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext3: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext4: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result endLineNumber: (nodes at: 16).
	result addToken: (nodes at: 17) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 18).
	result addToken: (nodes at: 19) to: result whitespaceTokens.
	result element: (nodes at: 20).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext5: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext6: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result nEXTToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result element: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext7: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForForStepNext8: nodes [
	| result |
	result := VBForStepNextNode new.
	result fORToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result counter: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result equalToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result initialValue: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result toToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result limit: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result stepToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result step: (nodes at: 15).
	result body: (nodes at: 16).
	result endLineNumber: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result element: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoSub1: nodes [
	| result |
	result := VBGoSubNode new.
	result gosubToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGoToStatement1: nodes [
	| result |
	result := VBGoToStatementNode new.
	result gotoToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForGuidLiteral1: nodes [
	| result |
	result := VBGuidLiteralNode new.
	result leftBraceToken: (nodes at: 1).
	result addTokens: (nodes at: 2) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 3) to: result minusTokens.
	result addTokens: (nodes at: 4) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 5) to: result minusTokens.
	result addTokens: (nodes at: 6) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 7) to: result minusTokens.
	result addTokens: (nodes at: 8) to: result hEX_INTEGERTokens.
	result addToken: (nodes at: 9) to: result minusTokens.
	result addTokens: (nodes at: 10) to: result hEX_INTEGERTokens.
	result rightBraceToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForHashIdentifier1: nodes [
	| result |
	result := VBHashIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElse4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addNodes: (nodes at: 7) to: result elseifs.
	result else: (nodes at: 8).
	result endLineNumber: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result ifTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine2: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine3: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine4: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine5: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenElseOneLine6: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result
		ifTrue: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result elseColonToken: (nodes at: 8).
	result
		ifFalse: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIfThenEmpty1: nodes [
	| result |
	result := VBIfThenElseNode new.
	result addToken: (nodes at: 1) to: result ifTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result thenColonToken: (nodes at: 5).
	result eolToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplements1: nodes [
	| result |
	result := VBImplementsNode new.
	result implementsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result interface: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall1: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForImplicitParenthesesLessCall2: nodes [
	| result |
	result := VBImplicitParenthesesLessCallNode new.
	result selector: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop1: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result loopToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop2: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result endLineNumber: (nodes at: 2).
	result whitespaceToken: (nodes at: 3).
	result loopToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop3: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result loopToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInfinityLoop4: nodes [
	| result |
	result := VBInfinityLoopNode new.
	result doToken: (nodes at: 1).
	result body: (nodes at: 2).
	result endLineNumber: (nodes at: 3).
	result whitespaceToken: (nodes at: 4).
	result loopToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral1: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForIntegerLiteral2: nodes [
	| result |
	result := VBIntegerLiteralNode new.
	result token: (nodes at: 1).
	result andToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForInterval1: nodes [
	| result |
	result := VBIntervalNode new.
	result from: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result toToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabel1: nodes [
	| result |
	result := VBLabelNode new.
	result label: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLabelTag1: nodes [
	| result |
	result := VBLabelTagNode new.
	result name: (nodes at: 1).
	result colonToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause5: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result value: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause6: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result commaToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause7: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result value: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForLineInputClause8: nodes [
	| result |
	result := VBLineInputClauseNode new.
	result lineToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result iNPUTToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fileNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result commaToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result value: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess1: nodes [
	| result |
	result := VBMemberAccessNode new.
	result periodToken: (nodes at: 1).
	result member: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForMemberAccess2: nodes [
	| result |
	result := VBMemberAccessNode new.
	result receiver: (nodes at: 1).
	result periodToken: (nodes at: 2).
	result member: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant1: nodes [
	| result |
	result := VBModuleConstantNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constant: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstant2: nodes [
	| result |
	result := VBModuleConstantNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constant: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants1: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result constToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constants: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleConstants2: nodes [
	| result |
	result := VBModuleMultipleConstantsNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result constToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result constants: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperties1: nodes [
	| result |
	result := VBModuleMultiplePropertiesNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModuleProperty1: nodes [
	| result |
	result := VBModulePropertyNode new.
	result visibility: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet10: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet11: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet12: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet13: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet14: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet15: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet16: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result functionToken: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet17: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet18: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result _size: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet19: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet20: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet21: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result addToken: (nodes at: 15) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet22: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result block: (nodes at: 12).
	result endToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result functionToken: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet23: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result addToken: (nodes at: 16) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet24: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result getToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result type: (nodes at: 11).
	result _size: (nodes at: 12).
	result block: (nodes at: 13).
	result endToken: (nodes at: 14).
	result addToken: (nodes at: 15) to: result whitespaceTokens.
	result functionToken: (nodes at: 16).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result addToken: (nodes at: 11) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result block: (nodes at: 8).
	result endToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result functionToken: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result getToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result type: (nodes at: 7).
	result _size: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyGet9: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result getToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result type: (nodes at: 9).
	result block: (nodes at: 10).
	result endToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result addToken: (nodes at: 13) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result letToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result letToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertyLet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result letToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet1: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet2: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result addToken: (nodes at: 1) to: result propertyTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result setToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result selector: (nodes at: 5).
	result parameters: (nodes at: 6).
	result block: (nodes at: 7).
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result functionToken: (nodes at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet3: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet4: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result modifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet5: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet6: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result addToken: (nodes at: 3) to: result propertyTokens.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result setToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result selector: (nodes at: 7).
	result parameters: (nodes at: 8).
	result block: (nodes at: 9).
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result functionToken: (nodes at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet7: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result addToken: (nodes at: 14) to: result propertyTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForModulePropertySet8: nodes [
	| result |
	result := VBModulePropertyGetNode new.
	result visibility: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result modifier: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addToken: (nodes at: 5) to: result propertyTokens.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result setToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result selector: (nodes at: 9).
	result parameters: (nodes at: 10).
	result block: (nodes at: 11).
	result endToken: (nodes at: 12).
	result addToken: (nodes at: 13) to: result whitespaceTokens.
	result functionToken: (nodes at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNegatedOperation2: nodes [
	| result |
	result := VBNegatedOperationNode new.
	result minusToken: (nodes at: 1).
	result value: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNewClause1: nodes [
	| result |
	result := VBNewClauseNode new.
	result nEWToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result typeName: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNotOperation2: nodes [
	| result |
	result := VBNotOperationNode new.
	result notToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForNull1: nodes [
	| result |
	result := VBNullNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorGoTo1: nodes [
	| result |
	result := VBOnErrorGoToNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnErrorResumeNext1: nodes [
	| result |
	result := VBOnErrorResumeNextNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result eRRORToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result resumeToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result nEXTToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOnExpressionGo1: nodes [
	| result |
	result := VBOnExpressionGoNode new.
	result onToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result integerExpression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result to: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock1: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 2) at: 2) to: result statements.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOneLineBlock2: nodes [
	| result |
	result := VBBlockNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result addObject: (nodes at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 1) to: result colonTokens.
	result addObjects: ((nodes at: 3) at: 2) to: result statements.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause1: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause2: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result aSToken: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result lenToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result equalToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result length: (nodes at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause3: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause4: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result lock: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause5: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause6: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result aSToken: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result lenToken: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result equalToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result length: (nodes at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause7: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOpenFileClause8: nodes [
	| result |
	result := VBOpenClauseNode new.
	result oPENToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result filepath: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result fORToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result mode: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result access: (nodes at: 9).
	result addToken: (nodes at: 10) to: result whitespaceTokens.
	result lock: (nodes at: 11).
	result addToken: (nodes at: 12) to: result whitespaceTokens.
	result aSToken: (nodes at: 13).
	result addToken: (nodes at: 14) to: result whitespaceTokens.
	result fileDescriptor: (nodes at: 15).
	result addToken: (nodes at: 16) to: result whitespaceTokens.
	result lenToken: (nodes at: 17).
	result addToken: (nodes at: 18) to: result whitespaceTokens.
	result equalToken: (nodes at: 19).
	result addToken: (nodes at: 20) to: result whitespaceTokens.
	result length: (nodes at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption10: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result explicitToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption11: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result privateToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result moduleToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption12: nodes [
	| result |
	result := VBOptionPrivateModuleNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result privateToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result moduleToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption1: nodes [
	| result |
	result := VBOptionValueNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption2: nodes [
	| result |
	result := VBOptionValueNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result value: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption3: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result databaseToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption4: nodes [
	| result |
	result := VBOptionCompareDatabaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result databaseToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption5: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption6: nodes [
	| result |
	result := VBOptionCompareNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result compareToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result compare: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption7: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result bINARYToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption8: nodes [
	| result |
	result := VBOptionCompareNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result compareToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result compare: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOption9: nodes [
	| result |
	result := VBOptionExplicitNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result explicitToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase1: nodes [
	| result |
	result := VBOptionBaseNode new.
	result optionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result baseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForOptionBase2: nodes [
	| result |
	result := VBOptionBaseNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result optionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result baseToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result value: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter10: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter11: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter12: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter13: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter14: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter15: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result type: (nodes at: 8).
	result addTokens: ((nodes at: 9) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 9) at: 2).
	result default: ((nodes at: 9) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter16: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result strategy: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result name: (nodes at: 7).
	result _size: (nodes at: 8).
	result type: (nodes at: 9).
	result addTokens: ((nodes at: 10) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 10) at: 2).
	result default: ((nodes at: 10) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter1: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addTokens: ((nodes at: 3) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 3) at: 2).
	result default: ((nodes at: 3) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter2: nodes [
	| result |
	result := VBParameterNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	result addTokens: ((nodes at: 4) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 4) at: 2).
	result default: ((nodes at: 4) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter3: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter4: nodes [
	| result |
	result := VBParameterNode new.
	result paramarrayToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter5: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter6: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 6) at: 2).
	result default: ((nodes at: 6) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter7: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result type: (nodes at: 6).
	result addTokens: ((nodes at: 7) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 7) at: 2).
	result default: ((nodes at: 7) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter8: nodes [
	| result |
	result := VBParameterNode new.
	result strategy: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result paramarrayToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result name: (nodes at: 5).
	result _size: (nodes at: 6).
	result type: (nodes at: 7).
	result addTokens: ((nodes at: 8) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 8) at: 2).
	result default: ((nodes at: 8) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameter9: nodes [
	| result |
	result := VBParameterNode new.
	result optionalToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result whitespaceTokens.
	result equalToken: ((nodes at: 5) at: 2).
	result default: ((nodes at: 5) at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList1: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result rightParenToken: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList2: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList3: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterList4: nodes [
	| result |
	result := VBParameterListNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result parameters.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addTokens: ((nodes at: 3) at: 2) to: result whitespaceTokens.
	result addNodes: ((nodes at: 3) at: 3) to: result parameters.
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParameterPassingStrategy2: nodes [
	| result |
	result := VBParameterPassingStrategyNode new.
	result byrefToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression1: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression2: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result expression: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression3: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForParentheseesExpression4: nodes [
	| result |
	result := VBParentheseesExpressionNode new.
	result leftParenToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result expression: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPositiveOperation2: nodes [
	| result |
	result := VBPositiveOperationNode new.
	result plusToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result value: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause10: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause11: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause12: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result values.
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addTokens: ((nodes at: 9) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 9) at: 2) to: result values.
	result addTokens: ((nodes at: 9) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause1: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result values.
	result addTokens: ((nodes at: 5) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause2: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause3: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result values.
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause4: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause5: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause6: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result commaToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause7: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addTokens: ((nodes at: 6) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 6) at: 2) to: result values.
	result addTokens: ((nodes at: 6) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause8: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addTokens: ((nodes at: 7) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 7) at: 2) to: result values.
	result addTokens: ((nodes at: 7) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForPrintFileClause9: nodes [
	| result |
	result := VBPrintIntoFileClauseNode new.
	result pRINTToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fileNumber: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result commaToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result values.
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result addTokens: ((nodes at: 8) at: 1) to: result semicolonTokens.
	result addNodes: ((nodes at: 8) at: 2) to: result values.
	result addTokens: ((nodes at: 8) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess1: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess2: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result arguments: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess3: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result rightParenToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForProcedureCallOrArrayAccess4: nodes [
	| result |
	result := VBProcedureCallOrArrayAccessNode new.
	result selector: (nodes at: 1).
	result leftParenToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result arguments: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseError1: nodes [
	| result |
	result := VBRaiseErrorNode new.
	result eRRORToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result errorCode: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRaiseEvent1: nodes [
	| result |
	result := VBRaiseEventNode new.
	result raiseEventToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result selector: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable1: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariable2: nodes [
	| result |
	result := VBReDimVariableNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variable: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables1: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReDefineVariables2: nodes [
	| result |
	result := VBReDimMultipleVariablesNode new.
	result redimToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result preserveToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result variables: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForRename1: nodes [
	| result |
	result := VBRenameNode new.
	result nameToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result oldName: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result aSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result newName: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeEmpty1: nodes [
	| result |
	result := VBResumeEmptyNode new.
	result resumeToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeLabel1: nodes [
	| result |
	result := VBResumeLabelNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result destination: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForResumeNext1: nodes [
	| result |
	result := VBResumeNextNode new.
	result resumeToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result nEXTToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForReturn1: nodes [
	| result |
	result := VBReturnNode new.
	result returnToken: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect1: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: ((nodes at: 7) at: 1) to: result cases.
	result addTokens: ((nodes at: 7) at: 2) to: result eolTokens.
	result endToken: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result addToken: (nodes at: 10) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSelect2: nodes [
	| result |
	result := VBSelectNode new.
	result addToken: (nodes at: 1) to: result selectTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result caseToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result expression: (nodes at: 5).
	result addTokens: (nodes at: 6) to: result eolTokens.
	result addNodes: ((nodes at: 7) at: 1) to: result cases.
	result addTokens: ((nodes at: 7) at: 2) to: result eolTokens.
	result endLineNumber: (nodes at: 8).
	result addToken: (nodes at: 9) to: result whitespaceTokens.
	result endToken: (nodes at: 10).
	result addToken: (nodes at: 11) to: result whitespaceTokens.
	result addToken: (nodes at: 12) to: result selectTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSetUpAssignation1: nodes [
	| result |
	result := VBSetUpAssignationNode new.
	result identifier: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result equalToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result value: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleIdentifier1: nodes [
	| result |
	result := VBSimpleIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSimpleType1: nodes [
	| result |
	result := VBSimpleTypeNode new.
	result typeName: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForSquareBracketIdentifier1: nodes [
	| result |
	result := VBSquareBracketIdentifierNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariable1: nodes [
	| result |
	result := VBStaticVariableNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variable: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStaticVariables1: nodes [
	| result |
	result := VBStaticMultipleVariablesNode new.
	result staticToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result variables: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForStringLiteral1: nodes [
	| result |
	result := VBStringLiteralNode new.
	result token: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry10: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result timesToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addNode: (nodes at: 7) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry1: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry2: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result addNode: (nodes at: 4) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry3: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result timesToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result addNode: (nodes at: 5) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry4: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry5: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result timesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry6: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry7: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result timesToken: (nodes at: 4).
	result addNode: (nodes at: 5) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry8: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result timesToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result addNode: (nodes at: 6) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeEntry9: nodes [
	| result |
	result := VBTypeEntryNode new.
	result name: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result type: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result timesToken: (nodes at: 5).
	result addNode: (nodes at: 6) to: result sizes.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf1: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result iSToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeOf2: nodes [
	| result |
	result := VBTypeOfNode new.
	result typeOfToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result argument: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result isNotToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result type: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize1: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result sizes.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypeSize2: nodes [
	| result |
	result := VBTypeSizeNode new.
	result leftParenToken: (nodes at: 1).
	result addNode: (nodes at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result sizes.
	result addTokens: ((nodes at: 3) at: 3) to: result whitespaceTokens.
	result rightParenToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedAndInstantiatedThing1: nodes [
	| result |
	result := VBAsTypeAndNewNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result nEWToken: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result type: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing10: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result fixedSize: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing1: nodes [
	| result |
	result := VBTypedThingNode new.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing2: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result fixedSize: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing3: nodes [
	| result |
	result := VBTypedThingNode new.
	result timesToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing4: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result fixedSize: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing5: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result timesToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result fixedSize: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing6: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing7: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result fixedSize: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing8: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result timesToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForTypedThing9: nodes [
	| result |
	result := VBTypedThingNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result aSToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result type: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result timesToken: (nodes at: 6).
	result fixedSize: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue1: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForUntilTrue2: nodes [
	| result |
	result := VBUntilTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result untilToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable1: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable2: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable3: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable4: nodes [
	| result |
	result := VBVariableNode new.
	result name: (nodes at: 1).
	result _size: (nodes at: 2).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable5: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable6: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result type: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable7: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariable8: nodes [
	| result |
	result := VBVariableNode new.
	result withEventsToken: (nodes at: 1).
	result whitespaceToken: (nodes at: 2).
	result name: (nodes at: 3).
	result _size: (nodes at: 4).
	result type: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForVariableList1: nodes [
	| result |
	result := VBVariableListNode new.
	result addNode: (nodes at: 1) to: result variables.
	result addTokens: ((nodes at: 2) at: 1) to: result commaTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result variables.
	result addTokens: ((nodes at: 2) at: 3) to: result whitespaceTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue1: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result loopToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue2: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result endLineNumber: (nodes at: 6).
	result addToken: (nodes at: 7) to: result whitespaceTokens.
	result loopToken: (nodes at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue3: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result loopToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileTrue4: nodes [
	| result |
	result := VBWhileTrueNode new.
	result doToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result whileToken: (nodes at: 3).
	result addToken: (nodes at: 4) to: result whitespaceTokens.
	result condition: (nodes at: 5).
	result body: (nodes at: 6).
	result endLineNumber: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result loopToken: (nodes at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend1: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result wendToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend2: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result endLineNumber: (nodes at: 4).
	result addToken: (nodes at: 5) to: result whitespaceTokens.
	result wendToken: (nodes at: 6).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend3: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result wendToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWhileWend4: nodes [
	| result |
	result := VBWhileWendNode new.
	result whileToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result condition: (nodes at: 3).
	result body: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result wendToken: (nodes at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith1: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endToken: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result addToken: (nodes at: 7) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForWith2: nodes [
	| result |
	result := VBWithNode new.
	result addToken: (nodes at: 1) to: result withTokens.
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result with: (nodes at: 3).
	result block: (nodes at: 4).
	result endLineNumber: (nodes at: 5).
	result addToken: (nodes at: 6) to: result whitespaceTokens.
	result endToken: (nodes at: 7).
	result addToken: (nodes at: 8) to: result whitespaceTokens.
	result addToken: (nodes at: 9) to: result withTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size_____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______1: nodes [
	| result |
	result := Array new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_AsType__type__TypeSize__size______2: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Case__case___eol____1: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Case__case___eol____2: nodes [
	| result |
	result := Array new: 2.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self addAll: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_Case__case___eol_____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_HEX_INTEGER___1: nodes [
	| result |
	result := OrderedCollection new: 2.
	self add: (nodes at: 1) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member__1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_____UsableKeywords__member___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement________2: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	result at: 5 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 4 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________1: nodes [
	| result |
	result := Array new: 5.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_______eol______whitespace________whitespace___________IntegerLiteral__lineNumber___whitespace_________Statement__statement_________2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 1).
	self add: ((nodes at: 2) at: 5) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace__Parameter__parameter__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value__2: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor______whitespace___Expression__value___2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___eol___SetUpAssignation__setting___2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self add: ((nodes at: 2) at: 2) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant___4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	self add: ((nodes at: 1) at: 1) to: (result at: 1).
	self add: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor___whitespace_________whitespace____Constant__constant____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element___1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	self addAll: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____1: nodes [
	| result |
	result := Array new: 2.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol___ModuleStatement__element____2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____1: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____2: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____3: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____4: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__eol______whitespace________whitespace____5: nodes [
	| result |
	result := Array new: 3.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___10: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___11: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___12: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___13: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___14: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 1 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___15: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___16: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 4 put: (nodes at: 2).
	result at: 3 put: (nodes at: 3).
	self add: (nodes at: 4) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___1: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___2: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___3: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___4: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___5: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___6: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___7: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___8: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 3 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace___9: nodes [
	| result |
	result := Array new: 4.
	result at: 2 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 2).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____1: nodes [
	| result |
	result := Array new: 4.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace___Argument__argument___________________whitespace____2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self add: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____10: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____11: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____12: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____13: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____14: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____15: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____16: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 4 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 3).
	result at: 2 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____1: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____2: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____3: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____4: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____5: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____6: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	result at: 2 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____7: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____8: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (nodes at: 1).
	self add: (nodes at: 2) to: (result at: 3).
	result at: 2 put: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument_____9: nodes [
	| result |
	result := Array new: 4.
	result at: 3 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 3).
	result at: 1 put: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace________________whitespace___Argument__argument______2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self add: ((nodes at: 2) at: 4) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Destination__label___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default__1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	result at: 2 put: (nodes at: 2).
	self add: (nodes at: 3) to: (result at: 1).
	result at: 3 put: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor__whitespace_______whitespace__Expression__default___1: nodes [
	| result |
	result := Array new: 3.
	result at: 1 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFor_eol__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader1: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader2: nodes [
	| result |
	result := VBHeaderNode new.
	result versionToken: (nodes at: 1).
	result addToken: (nodes at: 2) to: result whitespaceTokens.
	result version: (nodes at: 3).
	result classToken: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader3: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionForheader4: nodes [
	| result |
	result := VBHeaderNode new.
	result addToken: (nodes at: 1) to: result whitespaceTokens.
	result versionToken: (nodes at: 2).
	result addToken: (nodes at: 3) to: result whitespaceTokens.
	result version: (nodes at: 4).
	result classToken: (nodes at: 5).
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule1: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addTokens: ((nodes at: 2) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 2) at: 2) to: result elements.
	result addTokens: (nodes at: 3) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule2: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result addNode: (nodes at: 2) to: result elements.
	result addTokens: ((nodes at: 3) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 3) at: 2) to: result elements.
	result addTokens: (nodes at: 4) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule3: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addTokens: ((nodes at: 4) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 4) at: 2) to: result elements.
	result addTokens: (nodes at: 5) to: result eolTokens.
	^ result
]

{ #category : #'generated-reduction actions' }
VBParser >> reduceActionFormodule4: nodes [
	| result |
	result := VBModuleNode new.
	result addTokens: (nodes at: 1) to: result eolTokens.
	result header: (nodes at: 2).
	result addTokens: (nodes at: 3) to: result eolTokens.
	result addNode: (nodes at: 4) to: result elements.
	result addTokens: ((nodes at: 5) at: 1) to: result eolTokens.
	result addNodes: ((nodes at: 5) at: 2) to: result elements.
	result addTokens: (nodes at: 6) to: result eolTokens.
	^ result
]
